
BTL_F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f98  08004f98  00020150  2**0
                  CONTENTS
  4 .ARM          00000000  08004f98  08004f98  00020150  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f98  08004f98  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f9c  08004f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08004fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000150  080050f0  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080050f0  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001199e  00000000  00000000  00020179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000299b  00000000  00000000  00031b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  000344b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  000353f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dec  00000000  00000000  000361a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011153  00000000  00000000  0004ef8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000898db  00000000  00000000  000600df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e99ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea0  00000000  00000000  000e9a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000150 	.word	0x20000150
 8000128:	00000000 	.word	0x00000000
 800012c:	08004eb4 	.word	0x08004eb4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000154 	.word	0x20000154
 8000148:	08004eb4 	.word	0x08004eb4

0800014c <isButton_BUT1_Pressed>:
int button_BUT3_LongPressed_flag = 0;
int button_PEDES_LongPressed_flag = 0;


int isButton_BUT1_Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_BUT1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton_BUT1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton_BUT1_Pressed+0x16>
	{
		button_BUT1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton_BUT1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton_BUT1_Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000016c 	.word	0x2000016c

08000170 <isButton_BUT2_Pressed>:
int isButton_BUT2_Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_BUT2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton_BUT2_Pressed+0x16>
	{
		button_BUT2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton_BUT2_Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000170 	.word	0x20000170

08000194 <isButton_BUT3_Pressed>:
int isButton_BUT3_Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_BUT3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton_BUT3_Pressed+0x16>
	{
		button_BUT3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton_BUT3_Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000174 	.word	0x20000174

080001b8 <isButton_Pedes_Pressed>:
int isButton_Pedes_Pressed()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button_PEDES_flag == 1)
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton_Pedes_Pressed+0x16>
	{
		button_PEDES_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton_Pedes_Pressed+0x18>
	}
	else return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000178 	.word	0x20000178

080001dc <getKeyInput>:
	else return 0;
}


void getKeyInput()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e187      	b.n	80004f8 <getKeyInput+0x31c>
		// button debouncing
		keyReg0[i] = keyReg1[i];
 80001e8:	4a7f      	ldr	r2, [pc, #508]	; (80003e8 <getKeyInput+0x20c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	497e      	ldr	r1, [pc, #504]	; (80003ec <getKeyInput+0x210>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001f8:	4a7d      	ldr	r2, [pc, #500]	; (80003f0 <getKeyInput+0x214>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4979      	ldr	r1, [pc, #484]	; (80003e8 <getKeyInput+0x20c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//handle button 1
		if(i == 0){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d154      	bne.n	80002b8 <getKeyInput+0xdc>
			keyReg2[i] = HAL_GPIO_ReadPin(A1_BUTTON1_GPIO_Port, A1_BUTTON1_Pin);
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	4878      	ldr	r0, [pc, #480]	; (80003f4 <getKeyInput+0x218>)
 8000214:	f002 fcc4 	bl	8002ba0 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	4619      	mov	r1, r3
 800021c:	4a74      	ldr	r2, [pc, #464]	; (80003f0 <getKeyInput+0x214>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000224:	4a71      	ldr	r2, [pc, #452]	; (80003ec <getKeyInput+0x210>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	496e      	ldr	r1, [pc, #440]	; (80003e8 <getKeyInput+0x20c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d13f      	bne.n	80002b8 <getKeyInput+0xdc>
 8000238:	4a6b      	ldr	r2, [pc, #428]	; (80003e8 <getKeyInput+0x20c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	496b      	ldr	r1, [pc, #428]	; (80003f0 <getKeyInput+0x214>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d135      	bne.n	80002b8 <getKeyInput+0xdc>
			{
				 //case short pressed
				if(keyReg3[i] != keyReg2[i])
 800024c:	4a6a      	ldr	r2, [pc, #424]	; (80003f8 <getKeyInput+0x21c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4966      	ldr	r1, [pc, #408]	; (80003f0 <getKeyInput+0x214>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d015      	beq.n	800028c <getKeyInput+0xb0>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 8000260:	4a63      	ldr	r2, [pc, #396]	; (80003f0 <getKeyInput+0x214>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	4963      	ldr	r1, [pc, #396]	; (80003f8 <getKeyInput+0x21c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000270:	4a5f      	ldr	r2, [pc, #380]	; (80003f0 <getKeyInput+0x214>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d11d      	bne.n	80002b8 <getKeyInput+0xdc>
					{
						//TODO
						button_BUT1_flag = 1;
 800027c:	4b5f      	ldr	r3, [pc, #380]	; (80003fc <getKeyInput+0x220>)
 800027e:	2201      	movs	r2, #1
 8000280:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000282:	4b5f      	ldr	r3, [pc, #380]	; (8000400 <getKeyInput+0x224>)
 8000284:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	e015      	b.n	80002b8 <getKeyInput+0xdc>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800028c:	4a58      	ldr	r2, [pc, #352]	; (80003f0 <getKeyInput+0x214>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10f      	bne.n	80002b8 <getKeyInput+0xdc>
						timerForKeyPress--;
 8000298:	4b59      	ldr	r3, [pc, #356]	; (8000400 <getKeyInput+0x224>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a58      	ldr	r2, [pc, #352]	; (8000400 <getKeyInput+0x224>)
 80002a0:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80002a2:	4b57      	ldr	r3, [pc, #348]	; (8000400 <getKeyInput+0x224>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d106      	bne.n	80002b8 <getKeyInput+0xdc>
						{
							//TODO
							button_BUT1_LongPressed_flag = 1;
 80002aa:	4b56      	ldr	r3, [pc, #344]	; (8000404 <getKeyInput+0x228>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80002b0:	4b53      	ldr	r3, [pc, #332]	; (8000400 <getKeyInput+0x224>)
 80002b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002b6:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 2
		if(i == 1){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d153      	bne.n	8000366 <getKeyInput+0x18a>
			keyReg2[i] = HAL_GPIO_ReadPin(A2_BUTTON2_GPIO_Port, A2_BUTTON2_Pin);
 80002be:	2120      	movs	r1, #32
 80002c0:	4851      	ldr	r0, [pc, #324]	; (8000408 <getKeyInput+0x22c>)
 80002c2:	f002 fc6d 	bl	8002ba0 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4619      	mov	r1, r3
 80002ca:	4a49      	ldr	r2, [pc, #292]	; (80003f0 <getKeyInput+0x214>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80002d2:	4a46      	ldr	r2, [pc, #280]	; (80003ec <getKeyInput+0x210>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002da:	4943      	ldr	r1, [pc, #268]	; (80003e8 <getKeyInput+0x20c>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d13f      	bne.n	8000366 <getKeyInput+0x18a>
 80002e6:	4a40      	ldr	r2, [pc, #256]	; (80003e8 <getKeyInput+0x20c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ee:	4940      	ldr	r1, [pc, #256]	; (80003f0 <getKeyInput+0x214>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d135      	bne.n	8000366 <getKeyInput+0x18a>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80002fa:	4a3f      	ldr	r2, [pc, #252]	; (80003f8 <getKeyInput+0x21c>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000302:	493b      	ldr	r1, [pc, #236]	; (80003f0 <getKeyInput+0x214>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800030a:	429a      	cmp	r2, r3
 800030c:	d015      	beq.n	800033a <getKeyInput+0x15e>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 800030e:	4a38      	ldr	r2, [pc, #224]	; (80003f0 <getKeyInput+0x214>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000316:	4938      	ldr	r1, [pc, #224]	; (80003f8 <getKeyInput+0x21c>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 800031e:	4a34      	ldr	r2, [pc, #208]	; (80003f0 <getKeyInput+0x214>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11d      	bne.n	8000366 <getKeyInput+0x18a>
					{
						//TODO
						button_BUT2_flag = 1;
 800032a:	4b38      	ldr	r3, [pc, #224]	; (800040c <getKeyInput+0x230>)
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000330:	4b33      	ldr	r3, [pc, #204]	; (8000400 <getKeyInput+0x224>)
 8000332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	e015      	b.n	8000366 <getKeyInput+0x18a>
					}
				}
				else// key long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800033a:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <getKeyInput+0x214>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10f      	bne.n	8000366 <getKeyInput+0x18a>
						timerForKeyPress--;
 8000346:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <getKeyInput+0x224>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a2c      	ldr	r2, [pc, #176]	; (8000400 <getKeyInput+0x224>)
 800034e:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <getKeyInput+0x224>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d106      	bne.n	8000366 <getKeyInput+0x18a>
						{
							//TODO
							button_BUT2_LongPressed_flag = 1;
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <getKeyInput+0x234>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <getKeyInput+0x224>)
 8000360:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000364:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 3
		if(i == 2){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d16b      	bne.n	8000444 <getKeyInput+0x268>
			keyReg2[i] = HAL_GPIO_ReadPin(A3_BUTTON3_GPIO_Port, A3_BUTTON3_Pin);
 800036c:	2101      	movs	r1, #1
 800036e:	4821      	ldr	r0, [pc, #132]	; (80003f4 <getKeyInput+0x218>)
 8000370:	f002 fc16 	bl	8002ba0 <HAL_GPIO_ReadPin>
 8000374:	4603      	mov	r3, r0
 8000376:	4619      	mov	r1, r3
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <getKeyInput+0x214>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000380:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <getKeyInput+0x210>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000388:	4917      	ldr	r1, [pc, #92]	; (80003e8 <getKeyInput+0x20c>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000390:	429a      	cmp	r2, r3
 8000392:	d157      	bne.n	8000444 <getKeyInput+0x268>
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <getKeyInput+0x20c>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <getKeyInput+0x214>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d14d      	bne.n	8000444 <getKeyInput+0x268>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <getKeyInput+0x21c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b0:	490f      	ldr	r1, [pc, #60]	; (80003f0 <getKeyInput+0x214>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d02d      	beq.n	8000418 <getKeyInput+0x23c>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <getKeyInput+0x214>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <getKeyInput+0x21c>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80003cc:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <getKeyInput+0x214>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d135      	bne.n	8000444 <getKeyInput+0x268>
					{
						//TODO
						button_BUT3_flag = 1;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <getKeyInput+0x238>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <getKeyInput+0x224>)
 80003e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e02d      	b.n	8000444 <getKeyInput+0x268>
 80003e8:	20000010 	.word	0x20000010
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000020 	.word	0x20000020
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	20000030 	.word	0x20000030
 80003fc:	2000016c 	.word	0x2000016c
 8000400:	20000040 	.word	0x20000040
 8000404:	2000017c 	.word	0x2000017c
 8000408:	40010800 	.word	0x40010800
 800040c:	20000170 	.word	0x20000170
 8000410:	20000180 	.word	0x20000180
 8000414:	20000174 	.word	0x20000174
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <getKeyInput+0x330>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10f      	bne.n	8000444 <getKeyInput+0x268>
						timerForKeyPress--;
 8000424:	4b3a      	ldr	r3, [pc, #232]	; (8000510 <getKeyInput+0x334>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	4a39      	ldr	r2, [pc, #228]	; (8000510 <getKeyInput+0x334>)
 800042c:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <getKeyInput+0x334>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d106      	bne.n	8000444 <getKeyInput+0x268>
						{
							//TODO
							button_BUT3_LongPressed_flag = 1;
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <getKeyInput+0x338>)
 8000438:	2201      	movs	r2, #1
 800043a:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <getKeyInput+0x334>)
 800043e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000442:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button pedestrian
		if(i == 3){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d153      	bne.n	80004f2 <getKeyInput+0x316>
			keyReg2[i] = HAL_GPIO_ReadPin(A0_PEDES_BUTTON_GPIO_Port, A0_PEDES_BUTTON_Pin);
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	4832      	ldr	r0, [pc, #200]	; (8000518 <getKeyInput+0x33c>)
 800044e:	f002 fba7 	bl	8002ba0 <HAL_GPIO_ReadPin>
 8000452:	4603      	mov	r3, r0
 8000454:	4619      	mov	r1, r3
 8000456:	4a2d      	ldr	r2, [pc, #180]	; (800050c <getKeyInput+0x330>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 800045e:	4a2f      	ldr	r2, [pc, #188]	; (800051c <getKeyInput+0x340>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000466:	492e      	ldr	r1, [pc, #184]	; (8000520 <getKeyInput+0x344>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800046e:	429a      	cmp	r2, r3
 8000470:	d13f      	bne.n	80004f2 <getKeyInput+0x316>
 8000472:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <getKeyInput+0x344>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047a:	4924      	ldr	r1, [pc, #144]	; (800050c <getKeyInput+0x330>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000482:	429a      	cmp	r2, r3
 8000484:	d135      	bne.n	80004f2 <getKeyInput+0x316>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 8000486:	4a27      	ldr	r2, [pc, #156]	; (8000524 <getKeyInput+0x348>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	491f      	ldr	r1, [pc, #124]	; (800050c <getKeyInput+0x330>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000496:	429a      	cmp	r2, r3
 8000498:	d015      	beq.n	80004c6 <getKeyInput+0x2ea>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <getKeyInput+0x330>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a2:	4920      	ldr	r1, [pc, #128]	; (8000524 <getKeyInput+0x348>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80004aa:	4a18      	ldr	r2, [pc, #96]	; (800050c <getKeyInput+0x330>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d11d      	bne.n	80004f2 <getKeyInput+0x316>
					{
						//TODO
						button_PEDES_flag = 1;
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <getKeyInput+0x34c>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <getKeyInput+0x334>)
 80004be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	e015      	b.n	80004f2 <getKeyInput+0x316>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <getKeyInput+0x330>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d10f      	bne.n	80004f2 <getKeyInput+0x316>
						timerForKeyPress--;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <getKeyInput+0x334>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <getKeyInput+0x334>)
 80004da:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <getKeyInput+0x334>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d106      	bne.n	80004f2 <getKeyInput+0x316>
						{
							//TODO
							button_PEDES_LongPressed_flag = 1;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <getKeyInput+0x350>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <getKeyInput+0x334>)
 80004ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004f0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f77f ae74 	ble.w	80001e8 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000020 	.word	0x20000020
 8000510:	20000040 	.word	0x20000040
 8000514:	20000184 	.word	0x20000184
 8000518:	40010800 	.word	0x40010800
 800051c:	20000000 	.word	0x20000000
 8000520:	20000010 	.word	0x20000010
 8000524:	20000030 	.word	0x20000030
 8000528:	20000178 	.word	0x20000178
 800052c:	20000188 	.word	0x20000188

08000530 <FSM_Buzzer>:
//int FSM_Buzzer_State = OFF;
//int FSM_Buzzer_State = OFF;

TIM_HandleTypeDef htim2;

void FSM_Buzzer(){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	switch(FSM_Buzzer_State){
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <FSM_Buzzer+0x98>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b34      	cmp	r3, #52	; 0x34
 800053a:	d01f      	beq.n	800057c <FSM_Buzzer+0x4c>
 800053c:	2b34      	cmp	r3, #52	; 0x34
 800053e:	dc3d      	bgt.n	80005bc <FSM_Buzzer+0x8c>
 8000540:	2b32      	cmp	r3, #50	; 0x32
 8000542:	d002      	beq.n	800054a <FSM_Buzzer+0x1a>
 8000544:	2b33      	cmp	r3, #51	; 0x33
 8000546:	d007      	beq.n	8000558 <FSM_Buzzer+0x28>
			FSM_Buzzer_State = OFF;
			set_off_buzzer();
		}
		break;
	default:
		break;
 8000548:	e038      	b.n	80005bc <FSM_Buzzer+0x8c>
		set_off_buzzer();
 800054a:	f001 ff5d 	bl	8002408 <set_off_buzzer>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <FSM_Buzzer+0x9c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2200      	movs	r2, #0
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000556:	e034      	b.n	80005c2 <FSM_Buzzer+0x92>
		if(timer32_flag==1){  //end 1s
 8000558:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <FSM_Buzzer+0xa0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d105      	bne.n	800056c <FSM_Buzzer+0x3c>
			FSM_Buzzer_State = OFF;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <FSM_Buzzer+0x98>)
 8000562:	2232      	movs	r2, #50	; 0x32
 8000564:	601a      	str	r2, [r3, #0]
			set_off_buzzer();
 8000566:	f001 ff4f 	bl	8002408 <set_off_buzzer>
		break;
 800056a:	e02a      	b.n	80005c2 <FSM_Buzzer+0x92>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 399);
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <FSM_Buzzer+0x9c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f240 128f 	movw	r2, #399	; 0x18f
 8000574:	635a      	str	r2, [r3, #52]	; 0x34
				set_on_buzzer();
 8000576:	f001 ff3b 	bl	80023f0 <set_on_buzzer>
		break;
 800057a:	e022      	b.n	80005c2 <FSM_Buzzer+0x92>
		if(time_red_horizontal_temp < 4 ){
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <FSM_Buzzer+0xa4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b03      	cmp	r3, #3
 8000582:	dc15      	bgt.n	80005b0 <FSM_Buzzer+0x80>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,Increase_Duty_Cycle);
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <FSM_Buzzer+0xa8>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <FSM_Buzzer+0x9c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	635a      	str	r2, [r3, #52]	; 0x34
			set_on_buzzer();
 800058e:	f001 ff2f 	bl	80023f0 <set_on_buzzer>
			Increase_Duty_Cycle += 50;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <FSM_Buzzer+0xa8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3332      	adds	r3, #50	; 0x32
 8000598:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <FSM_Buzzer+0xa8>)
 800059a:	6013      	str	r3, [r2, #0]
			if(Increase_Duty_Cycle >= 999){
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <FSM_Buzzer+0xa8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f240 32e6 	movw	r2, #998	; 0x3e6
 80005a4:	4293      	cmp	r3, r2
 80005a6:	dd0b      	ble.n	80005c0 <FSM_Buzzer+0x90>
				Increase_Duty_Cycle = 99;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <FSM_Buzzer+0xa8>)
 80005aa:	2263      	movs	r2, #99	; 0x63
 80005ac:	601a      	str	r2, [r3, #0]
		break;
 80005ae:	e007      	b.n	80005c0 <FSM_Buzzer+0x90>
			FSM_Buzzer_State = OFF;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <FSM_Buzzer+0x98>)
 80005b2:	2232      	movs	r2, #50	; 0x32
 80005b4:	601a      	str	r2, [r3, #0]
			set_off_buzzer();
 80005b6:	f001 ff27 	bl	8002408 <set_off_buzzer>
		break;
 80005ba:	e001      	b.n	80005c0 <FSM_Buzzer+0x90>
		break;
 80005bc:	bf00      	nop
 80005be:	e000      	b.n	80005c2 <FSM_Buzzer+0x92>
		break;
 80005c0:	bf00      	nop
	}
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000d4 	.word	0x200000d4
 80005cc:	20000254 	.word	0x20000254
 80005d0:	20000200 	.word	0x20000200
 80005d4:	200000b0 	.word	0x200000b0
 80005d8:	200000d8 	.word	0x200000d8

080005dc <fsm_7SEG_horizontal_run>:
#include "control_7SEG.h"

int status_7SEG_horizontal = display_countDown_horizontal;


void fsm_7SEG_horizontal_run(){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	switch(status_7SEG_horizontal){
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <fsm_7SEG_horizontal_run+0x88>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d837      	bhi.n	800065a <fsm_7SEG_horizontal_run+0x7e>
 80005ea:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <fsm_7SEG_horizontal_run+0x14>)
 80005ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f0:	0800065b 	.word	0x0800065b
 80005f4:	0800065b 	.word	0x0800065b
 80005f8:	0800065b 	.word	0x0800065b
 80005fc:	0800065b 	.word	0x0800065b
 8000600:	0800065b 	.word	0x0800065b
 8000604:	0800065b 	.word	0x0800065b
 8000608:	0800065b 	.word	0x0800065b
 800060c:	0800065b 	.word	0x0800065b
 8000610:	0800065b 	.word	0x0800065b
 8000614:	0800065b 	.word	0x0800065b
 8000618:	0800065b 	.word	0x0800065b
 800061c:	0800065b 	.word	0x0800065b
 8000620:	0800065b 	.word	0x0800065b
 8000624:	08000631 	.word	0x08000631
 8000628:	0800063f 	.word	0x0800063f
 800062c:	0800064d 	.word	0x0800064d
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
		case display_mode02:
			_7SEG_buffer_horizontal[0] = 0;
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 2;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 8000638:	2202      	movs	r2, #2
 800063a:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 800063c:	e00e      	b.n	800065c <fsm_7SEG_horizontal_run+0x80>
		case display_mode03:
			_7SEG_buffer_horizontal[0] = 0;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 3;
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 8000646:	2203      	movs	r2, #3
 8000648:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 800064a:	e007      	b.n	800065c <fsm_7SEG_horizontal_run+0x80>
		case display_mode04:
			_7SEG_buffer_horizontal[0] = 0;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 4;
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 8000654:	2204      	movs	r2, #4
 8000656:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 8000658:	e000      	b.n	800065c <fsm_7SEG_horizontal_run+0x80>
		case off_horizontal:
//			off7SEG_horizontal();
			break;
		default:
			break;
 800065a:	bf00      	nop
	}
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	20000044 	.word	0x20000044
 8000668:	2000023c 	.word	0x2000023c

0800066c <fsm_7SEG_vertical_run>:

int status_7SEG_vertical = display_countDown_vertical;



void fsm_7SEG_vertical_run(){
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	switch(status_7SEG_vertical){
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <fsm_7SEG_vertical_run+0x2c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b10      	cmp	r3, #16
 8000676:	d006      	beq.n	8000686 <fsm_7SEG_vertical_run+0x1a>
 8000678:	2b10      	cmp	r3, #16
 800067a:	dc06      	bgt.n	800068a <fsm_7SEG_vertical_run+0x1e>
 800067c:	f113 0f02 	cmn.w	r3, #2
 8000680:	d005      	beq.n	800068e <fsm_7SEG_vertical_run+0x22>
 8000682:	2b0f      	cmp	r3, #15
			break;
		case off_vertical:
//			off7SEG_vertical();
			break;
		default:
			break;
 8000684:	e001      	b.n	800068a <fsm_7SEG_vertical_run+0x1e>
			break;
 8000686:	bf00      	nop
 8000688:	e002      	b.n	8000690 <fsm_7SEG_vertical_run+0x24>
			break;
 800068a:	bf00      	nop
 800068c:	e000      	b.n	8000690 <fsm_7SEG_vertical_run+0x24>
			break;
 800068e:	bf00      	nop
	}
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000048 	.word	0x20000048

0800069c <fsm_mannual_run>:
UART_HandleTypeDef huart2;
uint8_t str1[30] = " ";

status_mannual = mannual_init;

void fsm_mannual_run(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	switch(status_mannual){
 80006a0:	4b9d      	ldr	r3, [pc, #628]	; (8000918 <fsm_mannual_run+0x27c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3b3c      	subs	r3, #60	; 0x3c
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	f200 8133 	bhi.w	8000912 <fsm_mannual_run+0x276>
 80006ac:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <fsm_mannual_run+0x18>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d9 	.word	0x080006d9
 80006bc:	0800076f 	.word	0x0800076f
 80006c0:	08000805 	.word	0x08000805
 80006c4:	0800089b 	.word	0x0800089b
		case mannual_init:
			status_mannual = mannual_red_green;
 80006c8:	4b93      	ldr	r3, [pc, #588]	; (8000918 <fsm_mannual_run+0x27c>)
 80006ca:	223d      	movs	r2, #61	; 0x3d
 80006cc:	601a      	str	r2, [r3, #0]
			setTimer9(5000);
 80006ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80006d2:	f001 fa2f 	bl	8001b34 <setTimer9>
			break;
 80006d6:	e11d      	b.n	8000914 <fsm_mannual_run+0x278>
		case mannual_red_green:
			if(timer9_flag == 1){
 80006d8:	4b90      	ldr	r3, [pc, #576]	; (800091c <fsm_mannual_run+0x280>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10e      	bne.n	80006fe <fsm_mannual_run+0x62>
				status_system = INIT;
 80006e0:	4b8f      	ldr	r3, [pc, #572]	; (8000920 <fsm_mannual_run+0x284>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80006e6:	4b8c      	ldr	r3, [pc, #560]	; (8000918 <fsm_mannual_run+0x27c>)
 80006e8:	223c      	movs	r2, #60	; 0x3c
 80006ea:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 80006ec:	4b8d      	ldr	r3, [pc, #564]	; (8000924 <fsm_mannual_run+0x288>)
 80006ee:	2213      	movs	r2, #19
 80006f0:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80006f2:	4b8d      	ldr	r3, [pc, #564]	; (8000928 <fsm_mannual_run+0x28c>)
 80006f4:	2217      	movs	r2, #23
 80006f6:	601a      	str	r2, [r3, #0]

//				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 1 \r"), 1000);

				resetTimeTraffic();
 80006f8:	f001 fe08 	bl	800230c <resetTimeTraffic>
				break;
 80006fc:	e10a      	b.n	8000914 <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 80006fe:	f7ff fd37 	bl	8000170 <isButton_BUT2_Pressed>
 8000702:	4603      	mov	r3, r0
 8000704:	2b01      	cmp	r3, #1
 8000706:	d106      	bne.n	8000716 <fsm_mannual_run+0x7a>
				status_mannual = mannual_red_yellow;
 8000708:	4b83      	ldr	r3, [pc, #524]	; (8000918 <fsm_mannual_run+0x27c>)
 800070a:	223e      	movs	r2, #62	; 0x3e
 800070c:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 800070e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000712:	f001 fa0f 	bl	8001b34 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000716:	f7ff fd19 	bl	800014c <isButton_BUT1_Pressed>
 800071a:	4603      	mov	r3, r0
 800071c:	2b01      	cmp	r3, #1
 800071e:	d121      	bne.n	8000764 <fsm_mannual_run+0xc8>
				status_mannual = mannual_init;
 8000720:	4b7d      	ldr	r3, [pc, #500]	; (8000918 <fsm_mannual_run+0x27c>)
 8000722:	223c      	movs	r2, #60	; 0x3c
 8000724:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 8000726:	4b7e      	ldr	r3, [pc, #504]	; (8000920 <fsm_mannual_run+0x284>)
 8000728:	2202      	movs	r2, #2
 800072a:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 800072c:	4a7f      	ldr	r2, [pc, #508]	; (800092c <fsm_mannual_run+0x290>)
 800072e:	4980      	ldr	r1, [pc, #512]	; (8000930 <fsm_mannual_run+0x294>)
 8000730:	4880      	ldr	r0, [pc, #512]	; (8000934 <fsm_mannual_run+0x298>)
 8000732:	f003 ff85 	bl	8004640 <siprintf>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	497d      	ldr	r1, [pc, #500]	; (8000934 <fsm_mannual_run+0x298>)
 8000740:	487d      	ldr	r0, [pc, #500]	; (8000938 <fsm_mannual_run+0x29c>)
 8000742:	f003 fac0 	bl	8003cc6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%d \n", time_red_vertical), 1000);
 8000746:	4b7d      	ldr	r3, [pc, #500]	; (800093c <fsm_mannual_run+0x2a0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	497c      	ldr	r1, [pc, #496]	; (8000940 <fsm_mannual_run+0x2a4>)
 800074e:	4879      	ldr	r0, [pc, #484]	; (8000934 <fsm_mannual_run+0x298>)
 8000750:	f003 ff76 	bl	8004640 <siprintf>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075c:	4975      	ldr	r1, [pc, #468]	; (8000934 <fsm_mannual_run+0x298>)
 800075e:	4876      	ldr	r0, [pc, #472]	; (8000938 <fsm_mannual_run+0x29c>)
 8000760:	f003 fab1 	bl	8003cc6 <HAL_UART_Transmit>
			}
			setRed_horizontal();
 8000764:	f001 fce2 	bl	800212c <setRed_horizontal>
			setGreen_vertical();
 8000768:	f001 fd2c 	bl	80021c4 <setGreen_vertical>
			break;
 800076c:	e0d2      	b.n	8000914 <fsm_mannual_run+0x278>
		case mannual_red_yellow:
			if(timer9_flag == 1){
 800076e:	4b6b      	ldr	r3, [pc, #428]	; (800091c <fsm_mannual_run+0x280>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d10e      	bne.n	8000794 <fsm_mannual_run+0xf8>
				status_system = INIT;
 8000776:	4b6a      	ldr	r3, [pc, #424]	; (8000920 <fsm_mannual_run+0x284>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 800077c:	4b66      	ldr	r3, [pc, #408]	; (8000918 <fsm_mannual_run+0x27c>)
 800077e:	223c      	movs	r2, #60	; 0x3c
 8000780:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000782:	4b68      	ldr	r3, [pc, #416]	; (8000924 <fsm_mannual_run+0x288>)
 8000784:	2213      	movs	r2, #19
 8000786:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000788:	4b67      	ldr	r3, [pc, #412]	; (8000928 <fsm_mannual_run+0x28c>)
 800078a:	2217      	movs	r2, #23
 800078c:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 800078e:	f001 fdbd 	bl	800230c <resetTimeTraffic>
				break;
 8000792:	e0bf      	b.n	8000914 <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 8000794:	f7ff fcec 	bl	8000170 <isButton_BUT2_Pressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d106      	bne.n	80007ac <fsm_mannual_run+0x110>
				status_mannual = mannual_green_red;
 800079e:	4b5e      	ldr	r3, [pc, #376]	; (8000918 <fsm_mannual_run+0x27c>)
 80007a0:	223f      	movs	r2, #63	; 0x3f
 80007a2:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80007a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80007a8:	f001 f9c4 	bl	8001b34 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 80007ac:	f7ff fcce 	bl	800014c <isButton_BUT1_Pressed>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d121      	bne.n	80007fa <fsm_mannual_run+0x15e>
				status_mannual = mannual_init;
 80007b6:	4b58      	ldr	r3, [pc, #352]	; (8000918 <fsm_mannual_run+0x27c>)
 80007b8:	223c      	movs	r2, #60	; 0x3c
 80007ba:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 80007bc:	4b58      	ldr	r3, [pc, #352]	; (8000920 <fsm_mannual_run+0x284>)
 80007be:	2202      	movs	r2, #2
 80007c0:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 80007c2:	4a5a      	ldr	r2, [pc, #360]	; (800092c <fsm_mannual_run+0x290>)
 80007c4:	495a      	ldr	r1, [pc, #360]	; (8000930 <fsm_mannual_run+0x294>)
 80007c6:	485b      	ldr	r0, [pc, #364]	; (8000934 <fsm_mannual_run+0x298>)
 80007c8:	f003 ff3a 	bl	8004640 <siprintf>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d4:	4957      	ldr	r1, [pc, #348]	; (8000934 <fsm_mannual_run+0x298>)
 80007d6:	4858      	ldr	r0, [pc, #352]	; (8000938 <fsm_mannual_run+0x29c>)
 80007d8:	f003 fa75 	bl	8003cc6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%d \n", time_red_vertical), 1000);
 80007dc:	4b57      	ldr	r3, [pc, #348]	; (800093c <fsm_mannual_run+0x2a0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4957      	ldr	r1, [pc, #348]	; (8000940 <fsm_mannual_run+0x2a4>)
 80007e4:	4853      	ldr	r0, [pc, #332]	; (8000934 <fsm_mannual_run+0x298>)
 80007e6:	f003 ff2b 	bl	8004640 <siprintf>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	4950      	ldr	r1, [pc, #320]	; (8000934 <fsm_mannual_run+0x298>)
 80007f4:	4850      	ldr	r0, [pc, #320]	; (8000938 <fsm_mannual_run+0x29c>)
 80007f6:	f003 fa66 	bl	8003cc6 <HAL_UART_Transmit>
			}
			setRed_horizontal();
 80007fa:	f001 fc97 	bl	800212c <setRed_horizontal>
			setYellow_vertical();
 80007fe:	f001 fcf1 	bl	80021e4 <setYellow_vertical>
			break;
 8000802:	e087      	b.n	8000914 <fsm_mannual_run+0x278>
		case mannual_green_red:
			if(timer9_flag == 1){
 8000804:	4b45      	ldr	r3, [pc, #276]	; (800091c <fsm_mannual_run+0x280>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d10e      	bne.n	800082a <fsm_mannual_run+0x18e>
				status_system = INIT;
 800080c:	4b44      	ldr	r3, [pc, #272]	; (8000920 <fsm_mannual_run+0x284>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000812:	4b41      	ldr	r3, [pc, #260]	; (8000918 <fsm_mannual_run+0x27c>)
 8000814:	223c      	movs	r2, #60	; 0x3c
 8000816:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000818:	4b42      	ldr	r3, [pc, #264]	; (8000924 <fsm_mannual_run+0x288>)
 800081a:	2213      	movs	r2, #19
 800081c:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 800081e:	4b42      	ldr	r3, [pc, #264]	; (8000928 <fsm_mannual_run+0x28c>)
 8000820:	2217      	movs	r2, #23
 8000822:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 8000824:	f001 fd72 	bl	800230c <resetTimeTraffic>
				break;
 8000828:	e074      	b.n	8000914 <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 800082a:	f7ff fca1 	bl	8000170 <isButton_BUT2_Pressed>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d106      	bne.n	8000842 <fsm_mannual_run+0x1a6>
				status_mannual = mannual_yellow_red;
 8000834:	4b38      	ldr	r3, [pc, #224]	; (8000918 <fsm_mannual_run+0x27c>)
 8000836:	2240      	movs	r2, #64	; 0x40
 8000838:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 800083a:	f241 3088 	movw	r0, #5000	; 0x1388
 800083e:	f001 f979 	bl	8001b34 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000842:	f7ff fc83 	bl	800014c <isButton_BUT1_Pressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d121      	bne.n	8000890 <fsm_mannual_run+0x1f4>
				status_system = MODE2;
 800084c:	4b34      	ldr	r3, [pc, #208]	; (8000920 <fsm_mannual_run+0x284>)
 800084e:	2202      	movs	r2, #2
 8000850:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <fsm_mannual_run+0x27c>)
 8000854:	223c      	movs	r2, #60	; 0x3c
 8000856:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 8000858:	4a34      	ldr	r2, [pc, #208]	; (800092c <fsm_mannual_run+0x290>)
 800085a:	4935      	ldr	r1, [pc, #212]	; (8000930 <fsm_mannual_run+0x294>)
 800085c:	4835      	ldr	r0, [pc, #212]	; (8000934 <fsm_mannual_run+0x298>)
 800085e:	f003 feef 	bl	8004640 <siprintf>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	4932      	ldr	r1, [pc, #200]	; (8000934 <fsm_mannual_run+0x298>)
 800086c:	4832      	ldr	r0, [pc, #200]	; (8000938 <fsm_mannual_run+0x29c>)
 800086e:	f003 fa2a 	bl	8003cc6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%d \n", time_red_vertical), 1000);
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <fsm_mannual_run+0x2a0>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	4931      	ldr	r1, [pc, #196]	; (8000940 <fsm_mannual_run+0x2a4>)
 800087a:	482e      	ldr	r0, [pc, #184]	; (8000934 <fsm_mannual_run+0x298>)
 800087c:	f003 fee0 	bl	8004640 <siprintf>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000888:	492a      	ldr	r1, [pc, #168]	; (8000934 <fsm_mannual_run+0x298>)
 800088a:	482b      	ldr	r0, [pc, #172]	; (8000938 <fsm_mannual_run+0x29c>)
 800088c:	f003 fa1b 	bl	8003cc6 <HAL_UART_Transmit>
			}
			setGreen_horizontal();
 8000890:	f001 fc60 	bl	8002154 <setGreen_horizontal>
			setRed_vertical();
 8000894:	f001 fc86 	bl	80021a4 <setRed_vertical>
			break;
 8000898:	e03c      	b.n	8000914 <fsm_mannual_run+0x278>
		case mannual_yellow_red:
			if(timer9_flag == 1){
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <fsm_mannual_run+0x280>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d10e      	bne.n	80008c0 <fsm_mannual_run+0x224>
				status_system = INIT;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <fsm_mannual_run+0x284>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <fsm_mannual_run+0x27c>)
 80008aa:	223c      	movs	r2, #60	; 0x3c
 80008ac:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <fsm_mannual_run+0x288>)
 80008b0:	2213      	movs	r2, #19
 80008b2:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <fsm_mannual_run+0x28c>)
 80008b6:	2217      	movs	r2, #23
 80008b8:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 80008ba:	f001 fd27 	bl	800230c <resetTimeTraffic>
				break;
 80008be:	e029      	b.n	8000914 <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 80008c0:	f7ff fc56 	bl	8000170 <isButton_BUT2_Pressed>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d106      	bne.n	80008d8 <fsm_mannual_run+0x23c>
				status_mannual = mannual_red_green;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <fsm_mannual_run+0x27c>)
 80008cc:	223d      	movs	r2, #61	; 0x3d
 80008ce:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80008d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80008d4:	f001 f92e 	bl	8001b34 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 80008d8:	f7ff fc38 	bl	800014c <isButton_BUT1_Pressed>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d112      	bne.n	8000908 <fsm_mannual_run+0x26c>
				status_system = MODE2;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <fsm_mannual_run+0x284>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <fsm_mannual_run+0x27c>)
 80008ea:	223c      	movs	r2, #60	; 0x3c
 80008ec:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <fsm_mannual_run+0x290>)
 80008f0:	490f      	ldr	r1, [pc, #60]	; (8000930 <fsm_mannual_run+0x294>)
 80008f2:	4810      	ldr	r0, [pc, #64]	; (8000934 <fsm_mannual_run+0x298>)
 80008f4:	f003 fea4 	bl	8004640 <siprintf>
 80008f8:	4603      	mov	r3, r0
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <fsm_mannual_run+0x298>)
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <fsm_mannual_run+0x29c>)
 8000904:	f003 f9df 	bl	8003cc6 <HAL_UART_Transmit>
			}
			setYellow_horizontal();
 8000908:	f001 fc38 	bl	800217c <setYellow_horizontal>
			setRed_vertical();
 800090c:	f001 fc4a 	bl	80021a4 <setRed_vertical>
			break;
 8000910:	e000      	b.n	8000914 <fsm_mannual_run+0x278>
		default:
			break;
 8000912:	bf00      	nop
	}
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000006c 	.word	0x2000006c
 800091c:	200001d8 	.word	0x200001d8
 8000920:	20000194 	.word	0x20000194
 8000924:	20000094 	.word	0x20000094
 8000928:	20000098 	.word	0x20000098
 800092c:	08004ecc 	.word	0x08004ecc
 8000930:	08004ed8 	.word	0x08004ed8
 8000934:	2000004c 	.word	0x2000004c
 8000938:	2000029c 	.word	0x2000029c
 800093c:	200000c4 	.word	0x200000c4
 8000940:	08004ee0 	.word	0x08004ee0

08000944 <fsm_pedestrian_run>:
#include "button.h"


int status_pedestrian_light = pedes_off;

void fsm_pedestrian_run(){
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	switch(status_pedestrian_light){
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <fsm_pedestrian_run+0x80>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b84      	cmp	r3, #132	; 0x84
 800094e:	d01e      	beq.n	800098e <fsm_pedestrian_run+0x4a>
 8000950:	2b84      	cmp	r3, #132	; 0x84
 8000952:	dc31      	bgt.n	80009b8 <fsm_pedestrian_run+0x74>
 8000954:	2b82      	cmp	r3, #130	; 0x82
 8000956:	d002      	beq.n	800095e <fsm_pedestrian_run+0x1a>
 8000958:	2b83      	cmp	r3, #131	; 0x83
 800095a:	d003      	beq.n	8000964 <fsm_pedestrian_run+0x20>
				FSM_Buzzer_State = LOUDER_BIP;
			}

			break;
		default:
			break;
 800095c:	e02c      	b.n	80009b8 <fsm_pedestrian_run+0x74>
			set_off_pedes();
 800095e:	f001 fd0b 	bl	8002378 <set_off_pedes>
			break;
 8000962:	e02c      	b.n	80009be <fsm_pedestrian_run+0x7a>
			set_red_pedes();
 8000964:	f001 fd1c 	bl	80023a0 <set_red_pedes>
			if (timer30_flag == 1){
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <fsm_pedestrian_run+0x84>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d102      	bne.n	8000976 <fsm_pedestrian_run+0x32>
				status_pedestrian_light = pedes_off;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <fsm_pedestrian_run+0x80>)
 8000972:	2282      	movs	r2, #130	; 0x82
 8000974:	601a      	str	r2, [r3, #0]
			if (status_traffic_blink_horizontal == red_horizontal)
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <fsm_pedestrian_run+0x88>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b14      	cmp	r3, #20
 800097c:	d103      	bne.n	8000986 <fsm_pedestrian_run+0x42>
				status_pedestrian_light = pedes_green;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <fsm_pedestrian_run+0x80>)
 8000980:	2284      	movs	r2, #132	; 0x84
 8000982:	601a      	str	r2, [r3, #0]
			break;
 8000984:	e01b      	b.n	80009be <fsm_pedestrian_run+0x7a>
				status_pedestrian_light = pedes_red;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <fsm_pedestrian_run+0x80>)
 8000988:	2283      	movs	r2, #131	; 0x83
 800098a:	601a      	str	r2, [r3, #0]
			break;
 800098c:	e017      	b.n	80009be <fsm_pedestrian_run+0x7a>
			set_green_pedes();
 800098e:	f001 fd1b 	bl	80023c8 <set_green_pedes>
			if (status_traffic_blink_horizontal == red_horizontal){
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <fsm_pedestrian_run+0x88>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b14      	cmp	r3, #20
 8000998:	d103      	bne.n	80009a2 <fsm_pedestrian_run+0x5e>
				status_pedestrian_light = pedes_green;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <fsm_pedestrian_run+0x80>)
 800099c:	2284      	movs	r2, #132	; 0x84
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	e002      	b.n	80009a8 <fsm_pedestrian_run+0x64>
				status_pedestrian_light = pedes_red;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <fsm_pedestrian_run+0x80>)
 80009a4:	2283      	movs	r2, #131	; 0x83
 80009a6:	601a      	str	r2, [r3, #0]
			if (time_red_horizontal_temp < 4){ //buzzer bip louder + faster
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <fsm_pedestrian_run+0x8c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	dc05      	bgt.n	80009bc <fsm_pedestrian_run+0x78>
				FSM_Buzzer_State = LOUDER_BIP;
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <fsm_pedestrian_run+0x90>)
 80009b2:	2234      	movs	r2, #52	; 0x34
 80009b4:	601a      	str	r2, [r3, #0]
			break;
 80009b6:	e001      	b.n	80009bc <fsm_pedestrian_run+0x78>
			break;
 80009b8:	bf00      	nop
 80009ba:	e000      	b.n	80009be <fsm_pedestrian_run+0x7a>
			break;
 80009bc:	bf00      	nop
	}
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000070 	.word	0x20000070
 80009c8:	200001f0 	.word	0x200001f0
 80009cc:	20000094 	.word	0x20000094
 80009d0:	200000b0 	.word	0x200000b0
 80009d4:	200000d4 	.word	0x200000d4

080009d8 <fsm_system_run>:
UART_HandleTypeDef huart2;
uint8_t str[30] = " ";
int timeUpdate = 0;
int flag = 0;

fsm_system_run(){
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	switch(status_system){
 80009dc:	4ba1      	ldr	r3, [pc, #644]	; (8000c64 <fsm_system_run+0x28c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	dc13      	bgt.n	8000a0c <fsm_system_run+0x34>
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f2c0 8279 	blt.w	8000edc <fsm_system_run+0x504>
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	f200 8276 	bhi.w	8000edc <fsm_system_run+0x504>
 80009f0:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <fsm_system_run+0x20>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a15 	.word	0x08000a15
 80009fc:	08000a37 	.word	0x08000a37
 8000a00:	08000b51 	.word	0x08000b51
 8000a04:	08000cd5 	.word	0x08000cd5
 8000a08:	08000de9 	.word	0x08000de9
 8000a0c:	2b5f      	cmp	r3, #95	; 0x5f
 8000a0e:	f000 808c 	beq.w	8000b2a <fsm_system_run+0x152>
				flag = 0;
//				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 1 \r"), 1000);
			}
			break;
	}
}
 8000a12:	e263      	b.n	8000edc <fsm_system_run+0x504>
			status_system = MODE1;
 8000a14:	4b93      	ldr	r3, [pc, #588]	; (8000c64 <fsm_system_run+0x28c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 1 \r"), 1000);
 8000a1a:	4a93      	ldr	r2, [pc, #588]	; (8000c68 <fsm_system_run+0x290>)
 8000a1c:	4993      	ldr	r1, [pc, #588]	; (8000c6c <fsm_system_run+0x294>)
 8000a1e:	4894      	ldr	r0, [pc, #592]	; (8000c70 <fsm_system_run+0x298>)
 8000a20:	f003 fe0e 	bl	8004640 <siprintf>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2c:	4990      	ldr	r1, [pc, #576]	; (8000c70 <fsm_system_run+0x298>)
 8000a2e:	4891      	ldr	r0, [pc, #580]	; (8000c74 <fsm_system_run+0x29c>)
 8000a30:	f003 f949 	bl	8003cc6 <HAL_UART_Transmit>
			break;
 8000a34:	e252      	b.n	8000edc <fsm_system_run+0x504>
			status_traffic_horizontal = display_traffic_horizontal;
 8000a36:	4b90      	ldr	r3, [pc, #576]	; (8000c78 <fsm_system_run+0x2a0>)
 8000a38:	2205      	movs	r2, #5
 8000a3a:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = display_traffic_vertical;
 8000a3c:	4b8f      	ldr	r3, [pc, #572]	; (8000c7c <fsm_system_run+0x2a4>)
 8000a3e:	2209      	movs	r2, #9
 8000a40:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_countDown_horizontal;
 8000a42:	4b8f      	ldr	r3, [pc, #572]	; (8000c80 <fsm_system_run+0x2a8>)
 8000a44:	220b      	movs	r2, #11
 8000a46:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_countDown_vertical;
 8000a48:	4b8e      	ldr	r3, [pc, #568]	; (8000c84 <fsm_system_run+0x2ac>)
 8000a4a:	220f      	movs	r2, #15
 8000a4c:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000a4e:	f7ff fb7d 	bl	800014c <isButton_BUT1_Pressed>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d121      	bne.n	8000a9c <fsm_system_run+0xc4>
				status_system = MODE2;
 8000a58:	4b82      	ldr	r3, [pc, #520]	; (8000c64 <fsm_system_run+0x28c>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 2 \r"), 1000);
 8000a5e:	4a8a      	ldr	r2, [pc, #552]	; (8000c88 <fsm_system_run+0x2b0>)
 8000a60:	4982      	ldr	r1, [pc, #520]	; (8000c6c <fsm_system_run+0x294>)
 8000a62:	4883      	ldr	r0, [pc, #524]	; (8000c70 <fsm_system_run+0x298>)
 8000a64:	f003 fdec 	bl	8004640 <siprintf>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a70:	497f      	ldr	r1, [pc, #508]	; (8000c70 <fsm_system_run+0x298>)
 8000a72:	4880      	ldr	r0, [pc, #512]	; (8000c74 <fsm_system_run+0x29c>)
 8000a74:	f003 f927 	bl	8003cc6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_red_vertical), 1000);
 8000a78:	4b84      	ldr	r3, [pc, #528]	; (8000c8c <fsm_system_run+0x2b4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4984      	ldr	r1, [pc, #528]	; (8000c90 <fsm_system_run+0x2b8>)
 8000a80:	487b      	ldr	r0, [pc, #492]	; (8000c70 <fsm_system_run+0x298>)
 8000a82:	f003 fddd 	bl	8004640 <siprintf>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	4978      	ldr	r1, [pc, #480]	; (8000c70 <fsm_system_run+0x298>)
 8000a90:	4878      	ldr	r0, [pc, #480]	; (8000c74 <fsm_system_run+0x29c>)
 8000a92:	f003 f918 	bl	8003cc6 <HAL_UART_Transmit>
				status_pedestrian_light = pedes_off;
 8000a96:	4b7f      	ldr	r3, [pc, #508]	; (8000c94 <fsm_system_run+0x2bc>)
 8000a98:	2282      	movs	r2, #130	; 0x82
 8000a9a:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000a9c:	f7ff fb68 	bl	8000170 <isButton_BUT2_Pressed>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d112      	bne.n	8000acc <fsm_system_run+0xf4>
				status_system = MAN_MODE;
 8000aa6:	4b6f      	ldr	r3, [pc, #444]	; (8000c64 <fsm_system_run+0x28c>)
 8000aa8:	225f      	movs	r2, #95	; 0x5f
 8000aaa:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMAN MODE\r"), 1000);
 8000aac:	4a7a      	ldr	r2, [pc, #488]	; (8000c98 <fsm_system_run+0x2c0>)
 8000aae:	496f      	ldr	r1, [pc, #444]	; (8000c6c <fsm_system_run+0x294>)
 8000ab0:	486f      	ldr	r0, [pc, #444]	; (8000c70 <fsm_system_run+0x298>)
 8000ab2:	f003 fdc5 	bl	8004640 <siprintf>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	496c      	ldr	r1, [pc, #432]	; (8000c70 <fsm_system_run+0x298>)
 8000ac0:	486c      	ldr	r0, [pc, #432]	; (8000c74 <fsm_system_run+0x29c>)
 8000ac2:	f003 f900 	bl	8003cc6 <HAL_UART_Transmit>
				status_pedestrian_light = pedes_off;
 8000ac6:	4b73      	ldr	r3, [pc, #460]	; (8000c94 <fsm_system_run+0x2bc>)
 8000ac8:	2282      	movs	r2, #130	; 0x82
 8000aca:	601a      	str	r2, [r3, #0]
			if (isButton_Pedes_Pressed() == 1 ){
 8000acc:	f7ff fb74 	bl	80001b8 <isButton_Pedes_Pressed>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d120      	bne.n	8000b18 <fsm_system_run+0x140>
				FSM_Buzzer_State = ONE_BIP;
 8000ad6:	4b71      	ldr	r3, [pc, #452]	; (8000c9c <fsm_system_run+0x2c4>)
 8000ad8:	2233      	movs	r2, #51	; 0x33
 8000ada:	601a      	str	r2, [r3, #0]
				setTimer32(1000);
 8000adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae0:	f001 f876 	bl	8001bd0 <setTimer32>
				setTimer30(2000*(time_red_horizontal+time_green_horizontal+time_yellow_horizontal));
 8000ae4:	4b6e      	ldr	r3, [pc, #440]	; (8000ca0 <fsm_system_run+0x2c8>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b6e      	ldr	r3, [pc, #440]	; (8000ca4 <fsm_system_run+0x2cc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	441a      	add	r2, r3
 8000aee:	4b6e      	ldr	r3, [pc, #440]	; (8000ca8 <fsm_system_run+0x2d0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 f84d 	bl	8001b9c <setTimer30>
				if (status_traffic_blink_horizontal == red_horizontal){
 8000b02:	4b6a      	ldr	r3, [pc, #424]	; (8000cac <fsm_system_run+0x2d4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b14      	cmp	r3, #20
 8000b08:	d103      	bne.n	8000b12 <fsm_system_run+0x13a>
					status_pedestrian_light = pedes_green;
 8000b0a:	4b62      	ldr	r3, [pc, #392]	; (8000c94 <fsm_system_run+0x2bc>)
 8000b0c:	2284      	movs	r2, #132	; 0x84
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	e002      	b.n	8000b18 <fsm_system_run+0x140>
					status_pedestrian_light = pedes_red;
 8000b12:	4b60      	ldr	r3, [pc, #384]	; (8000c94 <fsm_system_run+0x2bc>)
 8000b14:	2283      	movs	r2, #131	; 0x83
 8000b16:	601a      	str	r2, [r3, #0]
			if (timer30_flag == 1){
 8000b18:	4b65      	ldr	r3, [pc, #404]	; (8000cb0 <fsm_system_run+0x2d8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	f040 81d6 	bne.w	8000ece <fsm_system_run+0x4f6>
				status_pedestrian_light = pedes_off;
 8000b22:	4b5c      	ldr	r3, [pc, #368]	; (8000c94 <fsm_system_run+0x2bc>)
 8000b24:	2282      	movs	r2, #130	; 0x82
 8000b26:	601a      	str	r2, [r3, #0]
			break;
 8000b28:	e1d1      	b.n	8000ece <fsm_system_run+0x4f6>
			fsm_mannual_run();
 8000b2a:	f7ff fdb7 	bl	800069c <fsm_mannual_run>
			status_7SEG_horizontal = off_horizontal;
 8000b2e:	4b54      	ldr	r3, [pc, #336]	; (8000c80 <fsm_system_run+0x2a8>)
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = off_vertical;
 8000b36:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <fsm_system_run+0x2ac>)
 8000b38:	f06f 0201 	mvn.w	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
			status_traffic_horizontal = mannual_horizontal;
 8000b3e:	4b4e      	ldr	r3, [pc, #312]	; (8000c78 <fsm_system_run+0x2a0>)
 8000b40:	f06f 0202 	mvn.w	r2, #2
 8000b44:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = mannual_vertical;
 8000b46:	4b4d      	ldr	r3, [pc, #308]	; (8000c7c <fsm_system_run+0x2a4>)
 8000b48:	f06f 0203 	mvn.w	r2, #3
 8000b4c:	601a      	str	r2, [r3, #0]
			break;
 8000b4e:	e1c5      	b.n	8000edc <fsm_system_run+0x504>
			status_traffic_horizontal = modifying_led_red_horizontal;
 8000b50:	4b49      	ldr	r3, [pc, #292]	; (8000c78 <fsm_system_run+0x2a0>)
 8000b52:	2206      	movs	r2, #6
 8000b54:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_red_vertical;
 8000b56:	4b49      	ldr	r3, [pc, #292]	; (8000c7c <fsm_system_run+0x2a4>)
 8000b58:	221e      	movs	r2, #30
 8000b5a:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode02;
 8000b5c:	4b48      	ldr	r3, [pc, #288]	; (8000c80 <fsm_system_run+0x2a8>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000b62:	4b48      	ldr	r3, [pc, #288]	; (8000c84 <fsm_system_run+0x2ac>)
 8000b64:	2210      	movs	r2, #16
 8000b66:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000b68:	f7ff fb02 	bl	8000170 <isButton_BUT2_Pressed>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d11e      	bne.n	8000bb0 <fsm_system_run+0x1d8>
				if(flag == 0){
 8000b72:	4b50      	ldr	r3, [pc, #320]	; (8000cb4 <fsm_system_run+0x2dc>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d106      	bne.n	8000b88 <fsm_system_run+0x1b0>
					timeUpdate = time_red_vertical;
 8000b7a:	4b44      	ldr	r3, [pc, #272]	; (8000c8c <fsm_system_run+0x2b4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a4e      	ldr	r2, [pc, #312]	; (8000cb8 <fsm_system_run+0x2e0>)
 8000b80:	6013      	str	r3, [r2, #0]
					flag = 1;
 8000b82:	4b4c      	ldr	r3, [pc, #304]	; (8000cb4 <fsm_system_run+0x2dc>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
				timeUpdate++;
 8000b88:	4b4b      	ldr	r3, [pc, #300]	; (8000cb8 <fsm_system_run+0x2e0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a4a      	ldr	r2, [pc, #296]	; (8000cb8 <fsm_system_run+0x2e0>)
 8000b90:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n",timeUpdate), 1000);
 8000b92:	4b49      	ldr	r3, [pc, #292]	; (8000cb8 <fsm_system_run+0x2e0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	493d      	ldr	r1, [pc, #244]	; (8000c90 <fsm_system_run+0x2b8>)
 8000b9a:	4835      	ldr	r0, [pc, #212]	; (8000c70 <fsm_system_run+0x298>)
 8000b9c:	f003 fd50 	bl	8004640 <siprintf>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba8:	4931      	ldr	r1, [pc, #196]	; (8000c70 <fsm_system_run+0x298>)
 8000baa:	4832      	ldr	r0, [pc, #200]	; (8000c74 <fsm_system_run+0x29c>)
 8000bac:	f003 f88b 	bl	8003cc6 <HAL_UART_Transmit>
			_7SEG_buffer_vertical[0] = time_red_vertical/10;
 8000bb0:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <fsm_system_run+0x2b4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a41      	ldr	r2, [pc, #260]	; (8000cbc <fsm_system_run+0x2e4>)
 8000bb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bba:	1092      	asrs	r2, r2, #2
 8000bbc:	17db      	asrs	r3, r3, #31
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	4a3f      	ldr	r2, [pc, #252]	; (8000cc0 <fsm_system_run+0x2e8>)
 8000bc2:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical%10;
 8000bc4:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <fsm_system_run+0x2b4>)
 8000bc6:	6819      	ldr	r1, [r3, #0]
 8000bc8:	4b3c      	ldr	r3, [pc, #240]	; (8000cbc <fsm_system_run+0x2e4>)
 8000bca:	fb83 2301 	smull	r2, r3, r3, r1
 8000bce:	109a      	asrs	r2, r3, #2
 8000bd0:	17cb      	asrs	r3, r1, #31
 8000bd2:	1ad2      	subs	r2, r2, r3
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	4413      	add	r3, r2
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	1aca      	subs	r2, r1, r3
 8000bde:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <fsm_system_run+0x2e8>)
 8000be0:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000be2:	f7ff fad7 	bl	8000194 <isButton_BUT3_Pressed>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d112      	bne.n	8000c12 <fsm_system_run+0x23a>
				time_red_horizontal= timeUpdate;
 8000bec:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <fsm_system_run+0x2e0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a2b      	ldr	r2, [pc, #172]	; (8000ca0 <fsm_system_run+0x2c8>)
 8000bf2:	6013      	str	r3, [r2, #0]
				time_red_vertical= timeUpdate;
 8000bf4:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <fsm_system_run+0x2e0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a24      	ldr	r2, [pc, #144]	; (8000c8c <fsm_system_run+0x2b4>)
 8000bfa:	6013      	str	r3, [r2, #0]
				time_red_horizontal_temp = timeUpdate;
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <fsm_system_run+0x2e0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a30      	ldr	r2, [pc, #192]	; (8000cc4 <fsm_system_run+0x2ec>)
 8000c02:	6013      	str	r3, [r2, #0]
				time_red_vertical_temp = timeUpdate;
 8000c04:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <fsm_system_run+0x2e0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <fsm_system_run+0x2f0>)
 8000c0a:	6013      	str	r3, [r2, #0]
				flag = 0;
 8000c0c:	4b29      	ldr	r3, [pc, #164]	; (8000cb4 <fsm_system_run+0x2dc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000c12:	f7ff fa9b 	bl	800014c <isButton_BUT1_Pressed>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	f040 815a 	bne.w	8000ed2 <fsm_system_run+0x4fa>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 3 \r"), 1000);
 8000c1e:	4a2b      	ldr	r2, [pc, #172]	; (8000ccc <fsm_system_run+0x2f4>)
 8000c20:	4912      	ldr	r1, [pc, #72]	; (8000c6c <fsm_system_run+0x294>)
 8000c22:	4813      	ldr	r0, [pc, #76]	; (8000c70 <fsm_system_run+0x298>)
 8000c24:	f003 fd0c 	bl	8004640 <siprintf>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c30:	490f      	ldr	r1, [pc, #60]	; (8000c70 <fsm_system_run+0x298>)
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <fsm_system_run+0x29c>)
 8000c34:	f003 f847 	bl	8003cc6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_yellow_vertical), 1000);
 8000c38:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <fsm_system_run+0x2f8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4914      	ldr	r1, [pc, #80]	; (8000c90 <fsm_system_run+0x2b8>)
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <fsm_system_run+0x298>)
 8000c42:	f003 fcfd 	bl	8004640 <siprintf>
 8000c46:	4603      	mov	r3, r0
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	4908      	ldr	r1, [pc, #32]	; (8000c70 <fsm_system_run+0x298>)
 8000c50:	4808      	ldr	r0, [pc, #32]	; (8000c74 <fsm_system_run+0x29c>)
 8000c52:	f003 f838 	bl	8003cc6 <HAL_UART_Transmit>
				status_system = MODE3;
 8000c56:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <fsm_system_run+0x28c>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	601a      	str	r2, [r3, #0]
				flag = 0;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <fsm_system_run+0x2dc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
			break;
 8000c62:	e136      	b.n	8000ed2 <fsm_system_run+0x4fa>
 8000c64:	20000194 	.word	0x20000194
 8000c68:	08004ee8 	.word	0x08004ee8
 8000c6c:	08004ef4 	.word	0x08004ef4
 8000c70:	20000074 	.word	0x20000074
 8000c74:	2000029c 	.word	0x2000029c
 8000c78:	2000009c 	.word	0x2000009c
 8000c7c:	200000a0 	.word	0x200000a0
 8000c80:	20000044 	.word	0x20000044
 8000c84:	20000048 	.word	0x20000048
 8000c88:	08004efc 	.word	0x08004efc
 8000c8c:	200000c4 	.word	0x200000c4
 8000c90:	08004f08 	.word	0x08004f08
 8000c94:	20000070 	.word	0x20000070
 8000c98:	08004f10 	.word	0x08004f10
 8000c9c:	200000d4 	.word	0x200000d4
 8000ca0:	200000a4 	.word	0x200000a4
 8000ca4:	200000a8 	.word	0x200000a8
 8000ca8:	200000ac 	.word	0x200000ac
 8000cac:	20000094 	.word	0x20000094
 8000cb0:	200001f0 	.word	0x200001f0
 8000cb4:	20000190 	.word	0x20000190
 8000cb8:	2000018c 	.word	0x2000018c
 8000cbc:	66666667 	.word	0x66666667
 8000cc0:	20000244 	.word	0x20000244
 8000cc4:	200000b0 	.word	0x200000b0
 8000cc8:	200000d0 	.word	0x200000d0
 8000ccc:	08004f1c 	.word	0x08004f1c
 8000cd0:	200000c0 	.word	0x200000c0
			status_traffic_horizontal = modifying_led_yellow_horizontal;
 8000cd4:	4b82      	ldr	r3, [pc, #520]	; (8000ee0 <fsm_system_run+0x508>)
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_yellow_vertical;
 8000cda:	4b82      	ldr	r3, [pc, #520]	; (8000ee4 <fsm_system_run+0x50c>)
 8000cdc:	2220      	movs	r2, #32
 8000cde:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode03;
 8000ce0:	4b81      	ldr	r3, [pc, #516]	; (8000ee8 <fsm_system_run+0x510>)
 8000ce2:	220d      	movs	r2, #13
 8000ce4:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000ce6:	4b81      	ldr	r3, [pc, #516]	; (8000eec <fsm_system_run+0x514>)
 8000ce8:	2210      	movs	r2, #16
 8000cea:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000cec:	f7ff fa40 	bl	8000170 <isButton_BUT2_Pressed>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d11e      	bne.n	8000d34 <fsm_system_run+0x35c>
				if(flag == 0){
 8000cf6:	4b7e      	ldr	r3, [pc, #504]	; (8000ef0 <fsm_system_run+0x518>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d106      	bne.n	8000d0c <fsm_system_run+0x334>
					timeUpdate = time_yellow_vertical;
 8000cfe:	4b7d      	ldr	r3, [pc, #500]	; (8000ef4 <fsm_system_run+0x51c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a7d      	ldr	r2, [pc, #500]	; (8000ef8 <fsm_system_run+0x520>)
 8000d04:	6013      	str	r3, [r2, #0]
					flag = 1;
 8000d06:	4b7a      	ldr	r3, [pc, #488]	; (8000ef0 <fsm_system_run+0x518>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
				timeUpdate++;
 8000d0c:	4b7a      	ldr	r3, [pc, #488]	; (8000ef8 <fsm_system_run+0x520>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	4a79      	ldr	r2, [pc, #484]	; (8000ef8 <fsm_system_run+0x520>)
 8000d14:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", timeUpdate), 1000);
 8000d16:	4b78      	ldr	r3, [pc, #480]	; (8000ef8 <fsm_system_run+0x520>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4977      	ldr	r1, [pc, #476]	; (8000efc <fsm_system_run+0x524>)
 8000d1e:	4878      	ldr	r0, [pc, #480]	; (8000f00 <fsm_system_run+0x528>)
 8000d20:	f003 fc8e 	bl	8004640 <siprintf>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2c:	4974      	ldr	r1, [pc, #464]	; (8000f00 <fsm_system_run+0x528>)
 8000d2e:	4875      	ldr	r0, [pc, #468]	; (8000f04 <fsm_system_run+0x52c>)
 8000d30:	f002 ffc9 	bl	8003cc6 <HAL_UART_Transmit>
			_7SEG_buffer_vertical[0] = time_yellow_vertical/10;
 8000d34:	4b6f      	ldr	r3, [pc, #444]	; (8000ef4 <fsm_system_run+0x51c>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a73      	ldr	r2, [pc, #460]	; (8000f08 <fsm_system_run+0x530>)
 8000d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3e:	1092      	asrs	r2, r2, #2
 8000d40:	17db      	asrs	r3, r3, #31
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	4a71      	ldr	r2, [pc, #452]	; (8000f0c <fsm_system_run+0x534>)
 8000d46:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical%10;
 8000d48:	4b6a      	ldr	r3, [pc, #424]	; (8000ef4 <fsm_system_run+0x51c>)
 8000d4a:	6819      	ldr	r1, [r3, #0]
 8000d4c:	4b6e      	ldr	r3, [pc, #440]	; (8000f08 <fsm_system_run+0x530>)
 8000d4e:	fb83 2301 	smull	r2, r3, r3, r1
 8000d52:	109a      	asrs	r2, r3, #2
 8000d54:	17cb      	asrs	r3, r1, #31
 8000d56:	1ad2      	subs	r2, r2, r3
 8000d58:	4613      	mov	r3, r2
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	1aca      	subs	r2, r1, r3
 8000d62:	4b6a      	ldr	r3, [pc, #424]	; (8000f0c <fsm_system_run+0x534>)
 8000d64:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000d66:	f7ff fa15 	bl	8000194 <isButton_BUT3_Pressed>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d112      	bne.n	8000d96 <fsm_system_run+0x3be>
				time_yellow_horizontal_temp= timeUpdate;
 8000d70:	4b61      	ldr	r3, [pc, #388]	; (8000ef8 <fsm_system_run+0x520>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a66      	ldr	r2, [pc, #408]	; (8000f10 <fsm_system_run+0x538>)
 8000d76:	6013      	str	r3, [r2, #0]
				time_yellow_vertical_temp= timeUpdate;
 8000d78:	4b5f      	ldr	r3, [pc, #380]	; (8000ef8 <fsm_system_run+0x520>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a65      	ldr	r2, [pc, #404]	; (8000f14 <fsm_system_run+0x53c>)
 8000d7e:	6013      	str	r3, [r2, #0]
				time_yellow_horizontal = timeUpdate;
 8000d80:	4b5d      	ldr	r3, [pc, #372]	; (8000ef8 <fsm_system_run+0x520>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a64      	ldr	r2, [pc, #400]	; (8000f18 <fsm_system_run+0x540>)
 8000d86:	6013      	str	r3, [r2, #0]
				time_yellow_vertical = timeUpdate;
 8000d88:	4b5b      	ldr	r3, [pc, #364]	; (8000ef8 <fsm_system_run+0x520>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <fsm_system_run+0x51c>)
 8000d8e:	6013      	str	r3, [r2, #0]
				flag = 0;
 8000d90:	4b57      	ldr	r3, [pc, #348]	; (8000ef0 <fsm_system_run+0x518>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000d96:	f7ff f9d9 	bl	800014c <isButton_BUT1_Pressed>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	f040 809a 	bne.w	8000ed6 <fsm_system_run+0x4fe>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 4 \r"), 1000);
 8000da2:	4a5e      	ldr	r2, [pc, #376]	; (8000f1c <fsm_system_run+0x544>)
 8000da4:	495e      	ldr	r1, [pc, #376]	; (8000f20 <fsm_system_run+0x548>)
 8000da6:	4856      	ldr	r0, [pc, #344]	; (8000f00 <fsm_system_run+0x528>)
 8000da8:	f003 fc4a 	bl	8004640 <siprintf>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db4:	4952      	ldr	r1, [pc, #328]	; (8000f00 <fsm_system_run+0x528>)
 8000db6:	4853      	ldr	r0, [pc, #332]	; (8000f04 <fsm_system_run+0x52c>)
 8000db8:	f002 ff85 	bl	8003cc6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_green_vertical), 1000);
 8000dbc:	4b59      	ldr	r3, [pc, #356]	; (8000f24 <fsm_system_run+0x54c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	494e      	ldr	r1, [pc, #312]	; (8000efc <fsm_system_run+0x524>)
 8000dc4:	484e      	ldr	r0, [pc, #312]	; (8000f00 <fsm_system_run+0x528>)
 8000dc6:	f003 fc3b 	bl	8004640 <siprintf>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	494b      	ldr	r1, [pc, #300]	; (8000f00 <fsm_system_run+0x528>)
 8000dd4:	484b      	ldr	r0, [pc, #300]	; (8000f04 <fsm_system_run+0x52c>)
 8000dd6:	f002 ff76 	bl	8003cc6 <HAL_UART_Transmit>
				status_system = MODE4;
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <fsm_system_run+0x550>)
 8000ddc:	2204      	movs	r2, #4
 8000dde:	601a      	str	r2, [r3, #0]
				flag = 0;
 8000de0:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <fsm_system_run+0x518>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
			break;
 8000de6:	e076      	b.n	8000ed6 <fsm_system_run+0x4fe>
			status_traffic_horizontal = modifying_led_green_horizontal;
 8000de8:	4b3d      	ldr	r3, [pc, #244]	; (8000ee0 <fsm_system_run+0x508>)
 8000dea:	2207      	movs	r2, #7
 8000dec:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_green_vertical;
 8000dee:	4b3d      	ldr	r3, [pc, #244]	; (8000ee4 <fsm_system_run+0x50c>)
 8000df0:	221f      	movs	r2, #31
 8000df2:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode04;
 8000df4:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <fsm_system_run+0x510>)
 8000df6:	220e      	movs	r2, #14
 8000df8:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000dfa:	4b3c      	ldr	r3, [pc, #240]	; (8000eec <fsm_system_run+0x514>)
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000e00:	f7ff f9b6 	bl	8000170 <isButton_BUT2_Pressed>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d11e      	bne.n	8000e48 <fsm_system_run+0x470>
				if(flag == 0){
 8000e0a:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <fsm_system_run+0x518>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d106      	bne.n	8000e20 <fsm_system_run+0x448>
					timeUpdate = time_green_vertical;
 8000e12:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <fsm_system_run+0x54c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a38      	ldr	r2, [pc, #224]	; (8000ef8 <fsm_system_run+0x520>)
 8000e18:	6013      	str	r3, [r2, #0]
					flag = 1;
 8000e1a:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <fsm_system_run+0x518>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
				timeUpdate++;
 8000e20:	4b35      	ldr	r3, [pc, #212]	; (8000ef8 <fsm_system_run+0x520>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	4a34      	ldr	r2, [pc, #208]	; (8000ef8 <fsm_system_run+0x520>)
 8000e28:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", timeUpdate), 1000);
 8000e2a:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <fsm_system_run+0x520>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4932      	ldr	r1, [pc, #200]	; (8000efc <fsm_system_run+0x524>)
 8000e32:	4833      	ldr	r0, [pc, #204]	; (8000f00 <fsm_system_run+0x528>)
 8000e34:	f003 fc04 	bl	8004640 <siprintf>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e40:	492f      	ldr	r1, [pc, #188]	; (8000f00 <fsm_system_run+0x528>)
 8000e42:	4830      	ldr	r0, [pc, #192]	; (8000f04 <fsm_system_run+0x52c>)
 8000e44:	f002 ff3f 	bl	8003cc6 <HAL_UART_Transmit>
			_7SEG_buffer_vertical[0] = time_green_vertical/10;
 8000e48:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <fsm_system_run+0x54c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <fsm_system_run+0x530>)
 8000e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e52:	1092      	asrs	r2, r2, #2
 8000e54:	17db      	asrs	r3, r3, #31
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	4a2c      	ldr	r2, [pc, #176]	; (8000f0c <fsm_system_run+0x534>)
 8000e5a:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical%10;
 8000e5c:	4b31      	ldr	r3, [pc, #196]	; (8000f24 <fsm_system_run+0x54c>)
 8000e5e:	6819      	ldr	r1, [r3, #0]
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <fsm_system_run+0x530>)
 8000e62:	fb83 2301 	smull	r2, r3, r3, r1
 8000e66:	109a      	asrs	r2, r3, #2
 8000e68:	17cb      	asrs	r3, r1, #31
 8000e6a:	1ad2      	subs	r2, r2, r3
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	1aca      	subs	r2, r1, r3
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <fsm_system_run+0x534>)
 8000e78:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000e7a:	f7ff f98b 	bl	8000194 <isButton_BUT3_Pressed>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d112      	bne.n	8000eaa <fsm_system_run+0x4d2>
				time_green_horizontal_temp= timeUpdate;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <fsm_system_run+0x520>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a28      	ldr	r2, [pc, #160]	; (8000f2c <fsm_system_run+0x554>)
 8000e8a:	6013      	str	r3, [r2, #0]
				time_green_vertical_temp= timeUpdate;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <fsm_system_run+0x520>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <fsm_system_run+0x558>)
 8000e92:	6013      	str	r3, [r2, #0]
				time_green_horizontal_temp = timeUpdate;
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <fsm_system_run+0x520>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <fsm_system_run+0x554>)
 8000e9a:	6013      	str	r3, [r2, #0]
				time_green_vertical_temp = timeUpdate;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <fsm_system_run+0x520>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <fsm_system_run+0x558>)
 8000ea2:	6013      	str	r3, [r2, #0]
				flag = 0;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <fsm_system_run+0x518>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000eaa:	f7ff f94f 	bl	800014c <isButton_BUT1_Pressed>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d112      	bne.n	8000eda <fsm_system_run+0x502>
				status_traffic_blink_horizontal = init_horizontal;
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <fsm_system_run+0x55c>)
 8000eb6:	2213      	movs	r2, #19
 8000eb8:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <fsm_system_run+0x560>)
 8000ebc:	2217      	movs	r2, #23
 8000ebe:	601a      	str	r2, [r3, #0]
				status_system = INIT;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <fsm_system_run+0x550>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
				flag = 0;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <fsm_system_run+0x518>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
			break;
 8000ecc:	e005      	b.n	8000eda <fsm_system_run+0x502>
			break;
 8000ece:	bf00      	nop
 8000ed0:	e004      	b.n	8000edc <fsm_system_run+0x504>
			break;
 8000ed2:	bf00      	nop
 8000ed4:	e002      	b.n	8000edc <fsm_system_run+0x504>
			break;
 8000ed6:	bf00      	nop
 8000ed8:	e000      	b.n	8000edc <fsm_system_run+0x504>
			break;
 8000eda:	bf00      	nop
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000009c 	.word	0x2000009c
 8000ee4:	200000a0 	.word	0x200000a0
 8000ee8:	20000044 	.word	0x20000044
 8000eec:	20000048 	.word	0x20000048
 8000ef0:	20000190 	.word	0x20000190
 8000ef4:	200000c0 	.word	0x200000c0
 8000ef8:	2000018c 	.word	0x2000018c
 8000efc:	08004f08 	.word	0x08004f08
 8000f00:	20000074 	.word	0x20000074
 8000f04:	2000029c 	.word	0x2000029c
 8000f08:	66666667 	.word	0x66666667
 8000f0c:	20000244 	.word	0x20000244
 8000f10:	200000b8 	.word	0x200000b8
 8000f14:	200000cc 	.word	0x200000cc
 8000f18:	200000ac 	.word	0x200000ac
 8000f1c:	08004f28 	.word	0x08004f28
 8000f20:	08004ef4 	.word	0x08004ef4
 8000f24:	200000bc 	.word	0x200000bc
 8000f28:	20000194 	.word	0x20000194
 8000f2c:	200000b4 	.word	0x200000b4
 8000f30:	200000c8 	.word	0x200000c8
 8000f34:	20000094 	.word	0x20000094
 8000f38:	20000098 	.word	0x20000098

08000f3c <fsm_traffic_blink_horizontal_run>:
int status_traffic_blink_vertical = init_vertical;

uint8_t str[30];
UART_HandleTypeDef huart2;

void fsm_traffic_blink_horizontal_run(){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_horizontal){
 8000f40:	4b86      	ldr	r3, [pc, #536]	; (800115c <fsm_traffic_blink_horizontal_run+0x220>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3b13      	subs	r3, #19
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	f200 8182 	bhi.w	8001250 <fsm_traffic_blink_horizontal_run+0x314>
 8000f4c:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <fsm_traffic_blink_horizontal_run+0x18>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	08000f65 	.word	0x08000f65
 8000f58:	08000fad 	.word	0x08000fad
 8000f5c:	08001085 	.word	0x08001085
 8000f60:	08001199 	.word	0x08001199
		case init_horizontal:
			status_traffic_blink_horizontal = red_horizontal;
 8000f64:	4b7d      	ldr	r3, [pc, #500]	; (800115c <fsm_traffic_blink_horizontal_run+0x220>)
 8000f66:	2214      	movs	r2, #20
 8000f68:	601a      	str	r2, [r3, #0]
			traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000f6a:	4b7d      	ldr	r3, [pc, #500]	; (8001160 <fsm_traffic_blink_horizontal_run+0x224>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f72:	fb02 f303 	mul.w	r3, r2, r3
 8000f76:	4a7b      	ldr	r2, [pc, #492]	; (8001164 <fsm_traffic_blink_horizontal_run+0x228>)
 8000f78:	6013      	str	r3, [r2, #0]
			//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
			setTimer1(traffic_buffer_horizontal[0]);
 8000f7a:	4b7a      	ldr	r3, [pc, #488]	; (8001164 <fsm_traffic_blink_horizontal_run+0x228>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fd08 	bl	8001994 <setTimer1>
			setTimer3(1000);// count down as a clock
 8000f84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f88:	f000 fd38 	bl	80019fc <setTimer3>
//			HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_red_horizontal_temp), 1000);
			HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_red_horizontal), 1000);
 8000f8c:	4b74      	ldr	r3, [pc, #464]	; (8001160 <fsm_traffic_blink_horizontal_run+0x224>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	4975      	ldr	r1, [pc, #468]	; (8001168 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f94:	4875      	ldr	r0, [pc, #468]	; (800116c <fsm_traffic_blink_horizontal_run+0x230>)
 8000f96:	f003 fb53 	bl	8004640 <siprintf>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	4972      	ldr	r1, [pc, #456]	; (800116c <fsm_traffic_blink_horizontal_run+0x230>)
 8000fa4:	4872      	ldr	r0, [pc, #456]	; (8001170 <fsm_traffic_blink_horizontal_run+0x234>)
 8000fa6:	f002 fe8e 	bl	8003cc6 <HAL_UART_Transmit>
			break;
 8000faa:	e158      	b.n	800125e <fsm_traffic_blink_horizontal_run+0x322>
		case red_horizontal:
			setRed_horizontal();
 8000fac:	f001 f8be 	bl	800212c <setRed_horizontal>
			//update _7SEG_buffer_horizontal
//			_7SEG_buffer_horizontal[0] = time_red_horizontal_temp/10;
//			_7SEG_buffer_horizontal[1] = time_red_horizontal_temp%10;

			_7SEG_buffer_horizontal[0] = time_red_horizontal/10;
 8000fb0:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <fsm_traffic_blink_horizontal_run+0x224>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a6f      	ldr	r2, [pc, #444]	; (8001174 <fsm_traffic_blink_horizontal_run+0x238>)
 8000fb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fba:	1092      	asrs	r2, r2, #2
 8000fbc:	17db      	asrs	r3, r3, #31
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	4a6d      	ldr	r2, [pc, #436]	; (8001178 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000fc2:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_red_horizontal%10;
 8000fc4:	4b66      	ldr	r3, [pc, #408]	; (8001160 <fsm_traffic_blink_horizontal_run+0x224>)
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	4b6a      	ldr	r3, [pc, #424]	; (8001174 <fsm_traffic_blink_horizontal_run+0x238>)
 8000fca:	fb83 2301 	smull	r2, r3, r3, r1
 8000fce:	109a      	asrs	r2, r3, #2
 8000fd0:	17cb      	asrs	r3, r1, #31
 8000fd2:	1ad2      	subs	r2, r2, r3
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	1aca      	subs	r2, r1, r3
 8000fde:	4b66      	ldr	r3, [pc, #408]	; (8001178 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000fe0:	605a      	str	r2, [r3, #4]


			if(timer3_flag == 1){
 8000fe2:	4b66      	ldr	r3, [pc, #408]	; (800117c <fsm_traffic_blink_horizontal_run+0x240>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d123      	bne.n	8001032 <fsm_traffic_blink_horizontal_run+0xf6>
				time_red_horizontal_temp--;
 8000fea:	4b65      	ldr	r3, [pc, #404]	; (8001180 <fsm_traffic_blink_horizontal_run+0x244>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	4a63      	ldr	r2, [pc, #396]	; (8001180 <fsm_traffic_blink_horizontal_run+0x244>)
 8000ff2:	6013      	str	r3, [r2, #0]
				if(time_red_horizontal_temp != 0)
 8000ff4:	4b62      	ldr	r3, [pc, #392]	; (8001180 <fsm_traffic_blink_horizontal_run+0x244>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00e      	beq.n	800101a <fsm_traffic_blink_horizontal_run+0xde>
					HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_red_horizontal_temp), 1000);
 8000ffc:	4b60      	ldr	r3, [pc, #384]	; (8001180 <fsm_traffic_blink_horizontal_run+0x244>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4959      	ldr	r1, [pc, #356]	; (8001168 <fsm_traffic_blink_horizontal_run+0x22c>)
 8001004:	4859      	ldr	r0, [pc, #356]	; (800116c <fsm_traffic_blink_horizontal_run+0x230>)
 8001006:	f003 fb1b 	bl	8004640 <siprintf>
 800100a:	4603      	mov	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	4956      	ldr	r1, [pc, #344]	; (800116c <fsm_traffic_blink_horizontal_run+0x230>)
 8001014:	4856      	ldr	r0, [pc, #344]	; (8001170 <fsm_traffic_blink_horizontal_run+0x234>)
 8001016:	f002 fe56 	bl	8003cc6 <HAL_UART_Transmit>
				if(time_red_horizontal_temp == 0){
 800101a:	4b59      	ldr	r3, [pc, #356]	; (8001180 <fsm_traffic_blink_horizontal_run+0x244>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d103      	bne.n	800102a <fsm_traffic_blink_horizontal_run+0xee>
					time_red_horizontal_temp = time_red_horizontal;
 8001022:	4b4f      	ldr	r3, [pc, #316]	; (8001160 <fsm_traffic_blink_horizontal_run+0x224>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a56      	ldr	r2, [pc, #344]	; (8001180 <fsm_traffic_blink_horizontal_run+0x244>)
 8001028:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 800102a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102e:	f000 fce5 	bl	80019fc <setTimer3>
			}

			if(timer1_flag == 1){
 8001032:	4b54      	ldr	r3, [pc, #336]	; (8001184 <fsm_traffic_blink_horizontal_run+0x248>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	f040 810c 	bne.w	8001254 <fsm_traffic_blink_horizontal_run+0x318>
				status_traffic_blink_horizontal = green_horizontal;
 800103c:	4b47      	ldr	r3, [pc, #284]	; (800115c <fsm_traffic_blink_horizontal_run+0x220>)
 800103e:	2215      	movs	r2, #21
 8001040:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[1] = time_green_horizontal*1000;
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <fsm_traffic_blink_horizontal_run+0x24c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	4a45      	ldr	r2, [pc, #276]	; (8001164 <fsm_traffic_blink_horizontal_run+0x228>)
 8001050:	6053      	str	r3, [r2, #4]
				//led green will turn on in traffic_buffer_horizontal[1]/1000 seconds
				setTimer1(traffic_buffer_horizontal[1]);
 8001052:	4b44      	ldr	r3, [pc, #272]	; (8001164 <fsm_traffic_blink_horizontal_run+0x228>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fc9c 	bl	8001994 <setTimer1>
				setTimer3(1000);
 800105c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001060:	f000 fccc 	bl	80019fc <setTimer3>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_green_horizontal_temp), 1000);
 8001064:	4b49      	ldr	r3, [pc, #292]	; (800118c <fsm_traffic_blink_horizontal_run+0x250>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	493f      	ldr	r1, [pc, #252]	; (8001168 <fsm_traffic_blink_horizontal_run+0x22c>)
 800106c:	483f      	ldr	r0, [pc, #252]	; (800116c <fsm_traffic_blink_horizontal_run+0x230>)
 800106e:	f003 fae7 	bl	8004640 <siprintf>
 8001072:	4603      	mov	r3, r0
 8001074:	b29a      	uxth	r2, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	493c      	ldr	r1, [pc, #240]	; (800116c <fsm_traffic_blink_horizontal_run+0x230>)
 800107c:	483c      	ldr	r0, [pc, #240]	; (8001170 <fsm_traffic_blink_horizontal_run+0x234>)
 800107e:	f002 fe22 	bl	8003cc6 <HAL_UART_Transmit>
			}
			break;
 8001082:	e0e7      	b.n	8001254 <fsm_traffic_blink_horizontal_run+0x318>
		case green_horizontal:
			setGreen_horizontal();
 8001084:	f001 f866 	bl	8002154 <setGreen_horizontal>
			//update _7SEG_buffer_horizontal
//			_7SEG_buffer_horizontal[0] = time_green_horizontal_temp/10;
//			_7SEG_buffer_horizontal[1] = time_green_horizontal_temp%10;
			_7SEG_buffer_horizontal[0] = time_green_horizontal/10;
 8001088:	4b3f      	ldr	r3, [pc, #252]	; (8001188 <fsm_traffic_blink_horizontal_run+0x24c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a39      	ldr	r2, [pc, #228]	; (8001174 <fsm_traffic_blink_horizontal_run+0x238>)
 800108e:	fb82 1203 	smull	r1, r2, r2, r3
 8001092:	1092      	asrs	r2, r2, #2
 8001094:	17db      	asrs	r3, r3, #31
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	4a37      	ldr	r2, [pc, #220]	; (8001178 <fsm_traffic_blink_horizontal_run+0x23c>)
 800109a:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_green_horizontal%10;
 800109c:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <fsm_traffic_blink_horizontal_run+0x24c>)
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	4b34      	ldr	r3, [pc, #208]	; (8001174 <fsm_traffic_blink_horizontal_run+0x238>)
 80010a2:	fb83 2301 	smull	r2, r3, r3, r1
 80010a6:	109a      	asrs	r2, r3, #2
 80010a8:	17cb      	asrs	r3, r1, #31
 80010aa:	1ad2      	subs	r2, r2, r3
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	1aca      	subs	r2, r1, r3
 80010b6:	4b30      	ldr	r3, [pc, #192]	; (8001178 <fsm_traffic_blink_horizontal_run+0x23c>)
 80010b8:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 80010ba:	4b30      	ldr	r3, [pc, #192]	; (800117c <fsm_traffic_blink_horizontal_run+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d123      	bne.n	800110a <fsm_traffic_blink_horizontal_run+0x1ce>

				time_green_horizontal_temp--;
 80010c2:	4b32      	ldr	r3, [pc, #200]	; (800118c <fsm_traffic_blink_horizontal_run+0x250>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	4a30      	ldr	r2, [pc, #192]	; (800118c <fsm_traffic_blink_horizontal_run+0x250>)
 80010ca:	6013      	str	r3, [r2, #0]
				if(time_green_horizontal_temp != 0)
 80010cc:	4b2f      	ldr	r3, [pc, #188]	; (800118c <fsm_traffic_blink_horizontal_run+0x250>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00e      	beq.n	80010f2 <fsm_traffic_blink_horizontal_run+0x1b6>
					HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_green_horizontal_temp), 1000);
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <fsm_traffic_blink_horizontal_run+0x250>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4923      	ldr	r1, [pc, #140]	; (8001168 <fsm_traffic_blink_horizontal_run+0x22c>)
 80010dc:	4823      	ldr	r0, [pc, #140]	; (800116c <fsm_traffic_blink_horizontal_run+0x230>)
 80010de:	f003 faaf 	bl	8004640 <siprintf>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	4920      	ldr	r1, [pc, #128]	; (800116c <fsm_traffic_blink_horizontal_run+0x230>)
 80010ec:	4820      	ldr	r0, [pc, #128]	; (8001170 <fsm_traffic_blink_horizontal_run+0x234>)
 80010ee:	f002 fdea 	bl	8003cc6 <HAL_UART_Transmit>
				if(time_green_horizontal_temp == 0){
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <fsm_traffic_blink_horizontal_run+0x250>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d103      	bne.n	8001102 <fsm_traffic_blink_horizontal_run+0x1c6>
					time_green_horizontal_temp = time_green_horizontal;
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <fsm_traffic_blink_horizontal_run+0x24c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a23      	ldr	r2, [pc, #140]	; (800118c <fsm_traffic_blink_horizontal_run+0x250>)
 8001100:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8001102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001106:	f000 fc79 	bl	80019fc <setTimer3>
			}

			if(timer1_flag == 1){
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <fsm_traffic_blink_horizontal_run+0x248>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	f040 80a2 	bne.w	8001258 <fsm_traffic_blink_horizontal_run+0x31c>
				status_traffic_blink_horizontal = yellow_horizontal;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <fsm_traffic_blink_horizontal_run+0x220>)
 8001116:	2216      	movs	r2, #22
 8001118:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[2] = time_yellow_horizontal*1000;
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <fsm_traffic_blink_horizontal_run+0x254>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001122:	fb02 f303 	mul.w	r3, r2, r3
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <fsm_traffic_blink_horizontal_run+0x228>)
 8001128:	6093      	str	r3, [r2, #8]
				//led yellow will turn on in traffic_buffer_horizontal[2]/1000 seconds
				setTimer1(traffic_buffer_horizontal[2]);
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <fsm_traffic_blink_horizontal_run+0x228>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fc30 	bl	8001994 <setTimer1>
				setTimer3(1000);
 8001134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001138:	f000 fc60 	bl	80019fc <setTimer3>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_yellow_horizontal_temp), 1000);
 800113c:	4b15      	ldr	r3, [pc, #84]	; (8001194 <fsm_traffic_blink_horizontal_run+0x258>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4909      	ldr	r1, [pc, #36]	; (8001168 <fsm_traffic_blink_horizontal_run+0x22c>)
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <fsm_traffic_blink_horizontal_run+0x230>)
 8001146:	f003 fa7b 	bl	8004640 <siprintf>
 800114a:	4603      	mov	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	4906      	ldr	r1, [pc, #24]	; (800116c <fsm_traffic_blink_horizontal_run+0x230>)
 8001154:	4806      	ldr	r0, [pc, #24]	; (8001170 <fsm_traffic_blink_horizontal_run+0x234>)
 8001156:	f002 fdb6 	bl	8003cc6 <HAL_UART_Transmit>
			}
			break;
 800115a:	e07d      	b.n	8001258 <fsm_traffic_blink_horizontal_run+0x31c>
 800115c:	20000094 	.word	0x20000094
 8001160:	200000a4 	.word	0x200000a4
 8001164:	20000224 	.word	0x20000224
 8001168:	08004f34 	.word	0x08004f34
 800116c:	20000074 	.word	0x20000074
 8001170:	2000029c 	.word	0x2000029c
 8001174:	66666667 	.word	0x66666667
 8001178:	2000023c 	.word	0x2000023c
 800117c:	200001a8 	.word	0x200001a8
 8001180:	200000b0 	.word	0x200000b0
 8001184:	20000198 	.word	0x20000198
 8001188:	200000a8 	.word	0x200000a8
 800118c:	200000b4 	.word	0x200000b4
 8001190:	200000ac 	.word	0x200000ac
 8001194:	200000b8 	.word	0x200000b8
		case yellow_horizontal:
			setYellow_horizontal();
 8001198:	f000 fff0 	bl	800217c <setYellow_horizontal>
			//update _7SEG_buffer_horizontal
//			_7SEG_buffer_horizontal[0] = time_yellow_horizontal_temp/10;
//			_7SEG_buffer_horizontal[1] = time_yellow_horizontal_temp%10;
			_7SEG_buffer_horizontal[0] = time_yellow_horizontal/10;
 800119c:	4b31      	ldr	r3, [pc, #196]	; (8001264 <fsm_traffic_blink_horizontal_run+0x328>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a31      	ldr	r2, [pc, #196]	; (8001268 <fsm_traffic_blink_horizontal_run+0x32c>)
 80011a2:	fb82 1203 	smull	r1, r2, r2, r3
 80011a6:	1092      	asrs	r2, r2, #2
 80011a8:	17db      	asrs	r3, r3, #31
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	4a2f      	ldr	r2, [pc, #188]	; (800126c <fsm_traffic_blink_horizontal_run+0x330>)
 80011ae:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_yellow_horizontal%10;
 80011b0:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <fsm_traffic_blink_horizontal_run+0x328>)
 80011b2:	6819      	ldr	r1, [r3, #0]
 80011b4:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <fsm_traffic_blink_horizontal_run+0x32c>)
 80011b6:	fb83 2301 	smull	r2, r3, r3, r1
 80011ba:	109a      	asrs	r2, r3, #2
 80011bc:	17cb      	asrs	r3, r1, #31
 80011be:	1ad2      	subs	r2, r2, r3
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	1aca      	subs	r2, r1, r3
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <fsm_traffic_blink_horizontal_run+0x330>)
 80011cc:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <fsm_traffic_blink_horizontal_run+0x334>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d123      	bne.n	800121e <fsm_traffic_blink_horizontal_run+0x2e2>

				time_yellow_horizontal_temp--;
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <fsm_traffic_blink_horizontal_run+0x338>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	3b01      	subs	r3, #1
 80011dc:	4a25      	ldr	r2, [pc, #148]	; (8001274 <fsm_traffic_blink_horizontal_run+0x338>)
 80011de:	6013      	str	r3, [r2, #0]
				if(time_yellow_horizontal_temp != 0)
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <fsm_traffic_blink_horizontal_run+0x338>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00e      	beq.n	8001206 <fsm_traffic_blink_horizontal_run+0x2ca>
					HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_yellow_horizontal_temp), 1000);
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <fsm_traffic_blink_horizontal_run+0x338>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4922      	ldr	r1, [pc, #136]	; (8001278 <fsm_traffic_blink_horizontal_run+0x33c>)
 80011f0:	4822      	ldr	r0, [pc, #136]	; (800127c <fsm_traffic_blink_horizontal_run+0x340>)
 80011f2:	f003 fa25 	bl	8004640 <siprintf>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	491f      	ldr	r1, [pc, #124]	; (800127c <fsm_traffic_blink_horizontal_run+0x340>)
 8001200:	481f      	ldr	r0, [pc, #124]	; (8001280 <fsm_traffic_blink_horizontal_run+0x344>)
 8001202:	f002 fd60 	bl	8003cc6 <HAL_UART_Transmit>
				if(time_yellow_horizontal_temp == 0){
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <fsm_traffic_blink_horizontal_run+0x338>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <fsm_traffic_blink_horizontal_run+0x2da>
					time_yellow_horizontal_temp = time_yellow_horizontal;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <fsm_traffic_blink_horizontal_run+0x328>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a18      	ldr	r2, [pc, #96]	; (8001274 <fsm_traffic_blink_horizontal_run+0x338>)
 8001214:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8001216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121a:	f000 fbef 	bl	80019fc <setTimer3>
			}

			if(timer1_flag == 1){
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <fsm_traffic_blink_horizontal_run+0x348>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d11a      	bne.n	800125c <fsm_traffic_blink_horizontal_run+0x320>
				status_traffic_blink_horizontal = init_horizontal;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <fsm_traffic_blink_horizontal_run+0x34c>)
 8001228:	2213      	movs	r2, #19
 800122a:	601a      	str	r2, [r3, #0]
				//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
				traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 800122c:	4b17      	ldr	r3, [pc, #92]	; (800128c <fsm_traffic_blink_horizontal_run+0x350>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	4a15      	ldr	r2, [pc, #84]	; (8001290 <fsm_traffic_blink_horizontal_run+0x354>)
 800123a:	6013      	str	r3, [r2, #0]
				setTimer1(traffic_buffer_horizontal[0]);
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <fsm_traffic_blink_horizontal_run+0x354>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fba7 	bl	8001994 <setTimer1>
				setTimer3(1000);
 8001246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124a:	f000 fbd7 	bl	80019fc <setTimer3>
			}
			break;
 800124e:	e005      	b.n	800125c <fsm_traffic_blink_horizontal_run+0x320>
		default:
			break;
 8001250:	bf00      	nop
 8001252:	e004      	b.n	800125e <fsm_traffic_blink_horizontal_run+0x322>
			break;
 8001254:	bf00      	nop
 8001256:	e002      	b.n	800125e <fsm_traffic_blink_horizontal_run+0x322>
			break;
 8001258:	bf00      	nop
 800125a:	e000      	b.n	800125e <fsm_traffic_blink_horizontal_run+0x322>
			break;
 800125c:	bf00      	nop
	}
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200000ac 	.word	0x200000ac
 8001268:	66666667 	.word	0x66666667
 800126c:	2000023c 	.word	0x2000023c
 8001270:	200001a8 	.word	0x200001a8
 8001274:	200000b8 	.word	0x200000b8
 8001278:	08004f34 	.word	0x08004f34
 800127c:	20000074 	.word	0x20000074
 8001280:	2000029c 	.word	0x2000029c
 8001284:	20000198 	.word	0x20000198
 8001288:	20000094 	.word	0x20000094
 800128c:	200000a4 	.word	0x200000a4
 8001290:	20000224 	.word	0x20000224

08001294 <fsm_traffic_blink_vertical_run>:

void fsm_traffic_blink_vertical_run(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_vertical){
 8001298:	4b89      	ldr	r3, [pc, #548]	; (80014c0 <fsm_traffic_blink_vertical_run+0x22c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3b17      	subs	r3, #23
 800129e:	2b03      	cmp	r3, #3
 80012a0:	f200 8105 	bhi.w	80014ae <fsm_traffic_blink_vertical_run+0x21a>
 80012a4:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <fsm_traffic_blink_vertical_run+0x18>)
 80012a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012aa:	bf00      	nop
 80012ac:	080012bd 	.word	0x080012bd
 80012b0:	0800141d 	.word	0x0800141d
 80012b4:	080012e7 	.word	0x080012e7
 80012b8:	0800138b 	.word	0x0800138b
		case init_vertical:
			status_traffic_blink_vertical = green_vertical;
 80012bc:	4b80      	ldr	r3, [pc, #512]	; (80014c0 <fsm_traffic_blink_vertical_run+0x22c>)
 80012be:	2219      	movs	r2, #25
 80012c0:	601a      	str	r2, [r3, #0]
			traffic_buffer_vertical[0] = time_green_vertical*1000;
 80012c2:	4b80      	ldr	r3, [pc, #512]	; (80014c4 <fsm_traffic_blink_vertical_run+0x230>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	4a7e      	ldr	r2, [pc, #504]	; (80014c8 <fsm_traffic_blink_vertical_run+0x234>)
 80012d0:	6013      	str	r3, [r2, #0]
			setTimer2(traffic_buffer_vertical[0]);
 80012d2:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <fsm_traffic_blink_vertical_run+0x234>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fb76 	bl	80019c8 <setTimer2>
			setTimer5(1000);// count down as a clock
 80012dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e0:	f000 fbc0 	bl	8001a64 <setTimer5>
			break;
 80012e4:	e0ea      	b.n	80014bc <fsm_traffic_blink_vertical_run+0x228>
		case green_vertical:
			setGreen_vertical();
 80012e6:	f000 ff6d 	bl	80021c4 <setGreen_vertical>
			//update _7SEG_buffer_vertical
//			_7SEG_buffer_vertical[0] = time_green_vertical_temp/10;
//			_7SEG_buffer_vertical[1] = time_green_vertical_temp%10;
			_7SEG_buffer_vertical[0] = time_green_vertical/10;
 80012ea:	4b76      	ldr	r3, [pc, #472]	; (80014c4 <fsm_traffic_blink_vertical_run+0x230>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a77      	ldr	r2, [pc, #476]	; (80014cc <fsm_traffic_blink_vertical_run+0x238>)
 80012f0:	fb82 1203 	smull	r1, r2, r2, r3
 80012f4:	1092      	asrs	r2, r2, #2
 80012f6:	17db      	asrs	r3, r3, #31
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	4a75      	ldr	r2, [pc, #468]	; (80014d0 <fsm_traffic_blink_vertical_run+0x23c>)
 80012fc:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical%10;
 80012fe:	4b71      	ldr	r3, [pc, #452]	; (80014c4 <fsm_traffic_blink_vertical_run+0x230>)
 8001300:	6819      	ldr	r1, [r3, #0]
 8001302:	4b72      	ldr	r3, [pc, #456]	; (80014cc <fsm_traffic_blink_vertical_run+0x238>)
 8001304:	fb83 2301 	smull	r2, r3, r3, r1
 8001308:	109a      	asrs	r2, r3, #2
 800130a:	17cb      	asrs	r3, r1, #31
 800130c:	1ad2      	subs	r2, r2, r3
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	1aca      	subs	r2, r1, r3
 8001318:	4b6d      	ldr	r3, [pc, #436]	; (80014d0 <fsm_traffic_blink_vertical_run+0x23c>)
 800131a:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 800131c:	4b6d      	ldr	r3, [pc, #436]	; (80014d4 <fsm_traffic_blink_vertical_run+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d118      	bne.n	8001356 <fsm_traffic_blink_vertical_run+0xc2>
				time_green_vertical_temp--;
 8001324:	4b6c      	ldr	r3, [pc, #432]	; (80014d8 <fsm_traffic_blink_vertical_run+0x244>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3b01      	subs	r3, #1
 800132a:	4a6b      	ldr	r2, [pc, #428]	; (80014d8 <fsm_traffic_blink_vertical_run+0x244>)
 800132c:	6013      	str	r3, [r2, #0]
				if(time_green_vertical_temp != 0) setTimer5(1000);
 800132e:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <fsm_traffic_blink_vertical_run+0x244>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <fsm_traffic_blink_vertical_run+0xaa>
 8001336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133a:	f000 fb93 	bl	8001a64 <setTimer5>
				if(time_green_vertical_temp == 0){
 800133e:	4b66      	ldr	r3, [pc, #408]	; (80014d8 <fsm_traffic_blink_vertical_run+0x244>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d103      	bne.n	800134e <fsm_traffic_blink_vertical_run+0xba>
					time_green_vertical_temp = time_green_vertical;
 8001346:	4b5f      	ldr	r3, [pc, #380]	; (80014c4 <fsm_traffic_blink_vertical_run+0x230>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a63      	ldr	r2, [pc, #396]	; (80014d8 <fsm_traffic_blink_vertical_run+0x244>)
 800134c:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 800134e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001352:	f000 fb87 	bl	8001a64 <setTimer5>
			}

			if(timer2_flag == 1){
 8001356:	4b61      	ldr	r3, [pc, #388]	; (80014dc <fsm_traffic_blink_vertical_run+0x248>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	f040 80a9 	bne.w	80014b2 <fsm_traffic_blink_vertical_run+0x21e>
				status_traffic_blink_vertical = yellow_vertical;
 8001360:	4b57      	ldr	r3, [pc, #348]	; (80014c0 <fsm_traffic_blink_vertical_run+0x22c>)
 8001362:	221a      	movs	r2, #26
 8001364:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[1] = time_yellow_vertical*1000;
 8001366:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <fsm_traffic_blink_vertical_run+0x24c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	4a55      	ldr	r2, [pc, #340]	; (80014c8 <fsm_traffic_blink_vertical_run+0x234>)
 8001374:	6053      	str	r3, [r2, #4]
				setTimer2(traffic_buffer_vertical[1]);
 8001376:	4b54      	ldr	r3, [pc, #336]	; (80014c8 <fsm_traffic_blink_vertical_run+0x234>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fb24 	bl	80019c8 <setTimer2>
				setTimer5(1000);
 8001380:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001384:	f000 fb6e 	bl	8001a64 <setTimer5>
			}
			break;
 8001388:	e093      	b.n	80014b2 <fsm_traffic_blink_vertical_run+0x21e>
		case yellow_vertical:
			setYellow_vertical();
 800138a:	f000 ff2b 	bl	80021e4 <setYellow_vertical>
			//update _7SEG_buffer_vertical
//			_7SEG_buffer_vertical[0] = time_yellow_vertical_temp/10;
//			_7SEG_buffer_vertical[1] = time_yellow_vertical_temp%10;
			_7SEG_buffer_vertical[0] = time_yellow_vertical/10;
 800138e:	4b54      	ldr	r3, [pc, #336]	; (80014e0 <fsm_traffic_blink_vertical_run+0x24c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a4e      	ldr	r2, [pc, #312]	; (80014cc <fsm_traffic_blink_vertical_run+0x238>)
 8001394:	fb82 1203 	smull	r1, r2, r2, r3
 8001398:	1092      	asrs	r2, r2, #2
 800139a:	17db      	asrs	r3, r3, #31
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4a4c      	ldr	r2, [pc, #304]	; (80014d0 <fsm_traffic_blink_vertical_run+0x23c>)
 80013a0:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical%10;
 80013a2:	4b4f      	ldr	r3, [pc, #316]	; (80014e0 <fsm_traffic_blink_vertical_run+0x24c>)
 80013a4:	6819      	ldr	r1, [r3, #0]
 80013a6:	4b49      	ldr	r3, [pc, #292]	; (80014cc <fsm_traffic_blink_vertical_run+0x238>)
 80013a8:	fb83 2301 	smull	r2, r3, r3, r1
 80013ac:	109a      	asrs	r2, r3, #2
 80013ae:	17cb      	asrs	r3, r1, #31
 80013b0:	1ad2      	subs	r2, r2, r3
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	1aca      	subs	r2, r1, r3
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <fsm_traffic_blink_vertical_run+0x23c>)
 80013be:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <fsm_traffic_blink_vertical_run+0x240>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d110      	bne.n	80013ea <fsm_traffic_blink_vertical_run+0x156>
				time_yellow_vertical_temp--;
 80013c8:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <fsm_traffic_blink_vertical_run+0x250>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	4a45      	ldr	r2, [pc, #276]	; (80014e4 <fsm_traffic_blink_vertical_run+0x250>)
 80013d0:	6013      	str	r3, [r2, #0]
				if(time_yellow_vertical_temp == 0){
 80013d2:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <fsm_traffic_blink_vertical_run+0x250>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d103      	bne.n	80013e2 <fsm_traffic_blink_vertical_run+0x14e>
					time_yellow_vertical_temp = time_yellow_vertical;
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <fsm_traffic_blink_vertical_run+0x24c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a41      	ldr	r2, [pc, #260]	; (80014e4 <fsm_traffic_blink_vertical_run+0x250>)
 80013e0:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 80013e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e6:	f000 fb3d 	bl	8001a64 <setTimer5>
			}

			if(timer2_flag == 1){
 80013ea:	4b3c      	ldr	r3, [pc, #240]	; (80014dc <fsm_traffic_blink_vertical_run+0x248>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d161      	bne.n	80014b6 <fsm_traffic_blink_vertical_run+0x222>
				status_traffic_blink_vertical = red_vertical;
 80013f2:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <fsm_traffic_blink_vertical_run+0x22c>)
 80013f4:	2218      	movs	r2, #24
 80013f6:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[2] = time_red_vertical*1000;
 80013f8:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <fsm_traffic_blink_vertical_run+0x254>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <fsm_traffic_blink_vertical_run+0x234>)
 8001406:	6093      	str	r3, [r2, #8]
				setTimer2(traffic_buffer_vertical[2]);
 8001408:	4b2f      	ldr	r3, [pc, #188]	; (80014c8 <fsm_traffic_blink_vertical_run+0x234>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fadb 	bl	80019c8 <setTimer2>
				setTimer5(1000);
 8001412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001416:	f000 fb25 	bl	8001a64 <setTimer5>
			}
			break;
 800141a:	e04c      	b.n	80014b6 <fsm_traffic_blink_vertical_run+0x222>
		case red_vertical:
			setRed_vertical();
 800141c:	f000 fec2 	bl	80021a4 <setRed_vertical>
			//update _7SEG_buffer_vertical
//			_7SEG_buffer_vertical[0] = time_red_vertical_temp/10;
//			_7SEG_buffer_vertical[1] = time_red_vertical_temp%10;
			_7SEG_buffer_vertical[0] = time_red_vertical/10;
 8001420:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <fsm_traffic_blink_vertical_run+0x254>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a29      	ldr	r2, [pc, #164]	; (80014cc <fsm_traffic_blink_vertical_run+0x238>)
 8001426:	fb82 1203 	smull	r1, r2, r2, r3
 800142a:	1092      	asrs	r2, r2, #2
 800142c:	17db      	asrs	r3, r3, #31
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	4a27      	ldr	r2, [pc, #156]	; (80014d0 <fsm_traffic_blink_vertical_run+0x23c>)
 8001432:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical%10;
 8001434:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <fsm_traffic_blink_vertical_run+0x254>)
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <fsm_traffic_blink_vertical_run+0x238>)
 800143a:	fb83 2301 	smull	r2, r3, r3, r1
 800143e:	109a      	asrs	r2, r3, #2
 8001440:	17cb      	asrs	r3, r1, #31
 8001442:	1ad2      	subs	r2, r2, r3
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	1aca      	subs	r2, r1, r3
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <fsm_traffic_blink_vertical_run+0x23c>)
 8001450:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <fsm_traffic_blink_vertical_run+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d110      	bne.n	800147c <fsm_traffic_blink_vertical_run+0x1e8>
				time_red_vertical_temp--;
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <fsm_traffic_blink_vertical_run+0x258>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3b01      	subs	r3, #1
 8001460:	4a22      	ldr	r2, [pc, #136]	; (80014ec <fsm_traffic_blink_vertical_run+0x258>)
 8001462:	6013      	str	r3, [r2, #0]
				if(time_red_vertical_temp == 0){
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <fsm_traffic_blink_vertical_run+0x258>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d103      	bne.n	8001474 <fsm_traffic_blink_vertical_run+0x1e0>
					time_red_vertical_temp = time_red_vertical;
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <fsm_traffic_blink_vertical_run+0x254>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <fsm_traffic_blink_vertical_run+0x258>)
 8001472:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8001474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001478:	f000 faf4 	bl	8001a64 <setTimer5>
			}

			if(timer2_flag == 1){
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <fsm_traffic_blink_vertical_run+0x248>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d11a      	bne.n	80014ba <fsm_traffic_blink_vertical_run+0x226>
				status_traffic_blink_vertical = green_vertical;
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <fsm_traffic_blink_vertical_run+0x22c>)
 8001486:	2219      	movs	r2, #25
 8001488:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[0] = time_green_vertical*1000;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <fsm_traffic_blink_vertical_run+0x230>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001492:	fb02 f303 	mul.w	r3, r2, r3
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <fsm_traffic_blink_vertical_run+0x234>)
 8001498:	6013      	str	r3, [r2, #0]
				setTimer2(traffic_buffer_vertical[0]);
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <fsm_traffic_blink_vertical_run+0x234>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 fa92 	bl	80019c8 <setTimer2>
				setTimer5(1000);
 80014a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a8:	f000 fadc 	bl	8001a64 <setTimer5>
			}
			break;
 80014ac:	e005      	b.n	80014ba <fsm_traffic_blink_vertical_run+0x226>
		default:
			break;
 80014ae:	bf00      	nop
 80014b0:	e004      	b.n	80014bc <fsm_traffic_blink_vertical_run+0x228>
			break;
 80014b2:	bf00      	nop
 80014b4:	e002      	b.n	80014bc <fsm_traffic_blink_vertical_run+0x228>
			break;
 80014b6:	bf00      	nop
 80014b8:	e000      	b.n	80014bc <fsm_traffic_blink_vertical_run+0x228>
			break;
 80014ba:	bf00      	nop
	}
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000098 	.word	0x20000098
 80014c4:	200000bc 	.word	0x200000bc
 80014c8:	20000230 	.word	0x20000230
 80014cc:	66666667 	.word	0x66666667
 80014d0:	20000244 	.word	0x20000244
 80014d4:	200001b8 	.word	0x200001b8
 80014d8:	200000c8 	.word	0x200000c8
 80014dc:	200001a0 	.word	0x200001a0
 80014e0:	200000c0 	.word	0x200000c0
 80014e4:	200000cc 	.word	0x200000cc
 80014e8:	200000c4 	.word	0x200000c4
 80014ec:	200000d0 	.word	0x200000d0

080014f0 <fsm_traffic_horizontal_run>:
#include "traffic.h"

int status_traffic_horizontal = display_traffic_horizontal;


void fsm_traffic_horizontal_run(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	switch(status_traffic_horizontal){
 80014f4:	4b26      	ldr	r3, [pc, #152]	; (8001590 <fsm_traffic_horizontal_run+0xa0>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3303      	adds	r3, #3
 80014fa:	2b0b      	cmp	r3, #11
 80014fc:	d83e      	bhi.n	800157c <fsm_traffic_horizontal_run+0x8c>
 80014fe:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <fsm_traffic_horizontal_run+0x14>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	0800157d 	.word	0x0800157d
 8001508:	0800157d 	.word	0x0800157d
 800150c:	0800157d 	.word	0x0800157d
 8001510:	0800157d 	.word	0x0800157d
 8001514:	0800157d 	.word	0x0800157d
 8001518:	0800157d 	.word	0x0800157d
 800151c:	0800157d 	.word	0x0800157d
 8001520:	0800157d 	.word	0x0800157d
 8001524:	08001535 	.word	0x08001535
 8001528:	0800153b 	.word	0x0800153b
 800152c:	08001567 	.word	0x08001567
 8001530:	08001551 	.word	0x08001551
		case display_traffic_horizontal:
			fsm_traffic_blink_horizontal_run();
 8001534:	f7ff fd02 	bl	8000f3c <fsm_traffic_blink_horizontal_run>
			break;
 8001538:	e027      	b.n	800158a <fsm_traffic_horizontal_run+0x9a>
		case modifying_led_red_horizontal:
			// turn off led green and yellow
//			offGreenYellow_horizontal();
			if(timer8_flag == 1){
 800153a:	4b16      	ldr	r3, [pc, #88]	; (8001594 <fsm_traffic_horizontal_run+0xa4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d11e      	bne.n	8001580 <fsm_traffic_horizontal_run+0x90>
				//toggle led red with frequency 2Hz

				toggleRed_horizontal();
 8001542:	f000 fe6b 	bl	800221c <toggleRed_horizontal>
				setTimer8(500);
 8001546:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800154a:	f000 fad9 	bl	8001b00 <setTimer8>
			}
			break;
 800154e:	e017      	b.n	8001580 <fsm_traffic_horizontal_run+0x90>
		case modifying_led_yellow_horizontal:
//			offGreenRed_horizontal();
//			offAllLed_horizontal();
			if(timer8_flag == 1){
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <fsm_traffic_horizontal_run+0xa4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d115      	bne.n	8001584 <fsm_traffic_horizontal_run+0x94>
				//toggle led yellow with frequency 2Hz
				toggleYellow_horizontal();
 8001558:	f000 fe84 	bl	8002264 <toggleYellow_horizontal>
				setTimer8(500);
 800155c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001560:	f000 face 	bl	8001b00 <setTimer8>
			}
			break;
 8001564:	e00e      	b.n	8001584 <fsm_traffic_horizontal_run+0x94>
		case modifying_led_green_horizontal:
//			offRedYellow_horizontal();
			if(timer8_flag == 1){
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <fsm_traffic_horizontal_run+0xa4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d10c      	bne.n	8001588 <fsm_traffic_horizontal_run+0x98>
				//toggle led green with frequency 2Hz
				toggleGreen_horizontal();
 800156e:	f000 fe67 	bl	8002240 <toggleGreen_horizontal>
				setTimer8(500);
 8001572:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001576:	f000 fac3 	bl	8001b00 <setTimer8>
			}
			break;
 800157a:	e005      	b.n	8001588 <fsm_traffic_horizontal_run+0x98>
		case mannual_horizontal:
			break;
		default:
			break;
 800157c:	bf00      	nop
 800157e:	e004      	b.n	800158a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001580:	bf00      	nop
 8001582:	e002      	b.n	800158a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001584:	bf00      	nop
 8001586:	e000      	b.n	800158a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001588:	bf00      	nop
	}
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000009c 	.word	0x2000009c
 8001594:	200001d0 	.word	0x200001d0

08001598 <fsm_traffic_vertical_run>:
#include "traffic.h"
#include "fsm_traffic_blink.h"

int status_traffic_vertical = display_traffic_vertical;

void fsm_traffic_vertical_run(){
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	switch(status_traffic_vertical){
 800159c:	4b3f      	ldr	r3, [pc, #252]	; (800169c <fsm_traffic_vertical_run+0x104>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b24      	cmp	r3, #36	; 0x24
 80015a4:	d870      	bhi.n	8001688 <fsm_traffic_vertical_run+0xf0>
 80015a6:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <fsm_traffic_vertical_run+0x14>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	08001689 	.word	0x08001689
 80015b0:	08001689 	.word	0x08001689
 80015b4:	08001689 	.word	0x08001689
 80015b8:	08001689 	.word	0x08001689
 80015bc:	08001689 	.word	0x08001689
 80015c0:	08001689 	.word	0x08001689
 80015c4:	08001689 	.word	0x08001689
 80015c8:	08001689 	.word	0x08001689
 80015cc:	08001689 	.word	0x08001689
 80015d0:	08001689 	.word	0x08001689
 80015d4:	08001689 	.word	0x08001689
 80015d8:	08001689 	.word	0x08001689
 80015dc:	08001689 	.word	0x08001689
 80015e0:	08001641 	.word	0x08001641
 80015e4:	08001689 	.word	0x08001689
 80015e8:	08001689 	.word	0x08001689
 80015ec:	08001689 	.word	0x08001689
 80015f0:	08001689 	.word	0x08001689
 80015f4:	08001689 	.word	0x08001689
 80015f8:	08001689 	.word	0x08001689
 80015fc:	08001689 	.word	0x08001689
 8001600:	08001689 	.word	0x08001689
 8001604:	08001689 	.word	0x08001689
 8001608:	08001689 	.word	0x08001689
 800160c:	08001689 	.word	0x08001689
 8001610:	08001689 	.word	0x08001689
 8001614:	08001689 	.word	0x08001689
 8001618:	08001689 	.word	0x08001689
 800161c:	08001689 	.word	0x08001689
 8001620:	08001689 	.word	0x08001689
 8001624:	08001689 	.word	0x08001689
 8001628:	08001689 	.word	0x08001689
 800162c:	08001689 	.word	0x08001689
 8001630:	08001689 	.word	0x08001689
 8001634:	08001647 	.word	0x08001647
 8001638:	08001673 	.word	0x08001673
 800163c:	0800165d 	.word	0x0800165d
		case display_traffic_vertical:
//			status_traffic_blink_vertical = init_vertical;
			fsm_traffic_blink_vertical_run();
 8001640:	f7ff fe28 	bl	8001294 <fsm_traffic_blink_vertical_run>
			break;
 8001644:	e027      	b.n	8001696 <fsm_traffic_vertical_run+0xfe>
		case modifying_led_red_vertical:
//			offGreenYellow_vertical();
			if(timer7_flag == 1){
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <fsm_traffic_vertical_run+0x108>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d11e      	bne.n	800168c <fsm_traffic_vertical_run+0xf4>
				toggleRed_vertical();
 800164e:	f000 fe25 	bl	800229c <toggleRed_vertical>
				setTimer7(500);
 8001652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001656:	f000 fa39 	bl	8001acc <setTimer7>
			}
			break;
 800165a:	e017      	b.n	800168c <fsm_traffic_vertical_run+0xf4>
		case modifying_led_yellow_vertical:
//			offGreenRed_vertical();
//			offAllLed_vertical();
			if(timer7_flag == 1){
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <fsm_traffic_vertical_run+0x108>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d115      	bne.n	8001690 <fsm_traffic_vertical_run+0xf8>
				toggleYellow_vertical();
 8001664:	f000 fe3a 	bl	80022dc <toggleYellow_vertical>
				setTimer7(500);
 8001668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800166c:	f000 fa2e 	bl	8001acc <setTimer7>
			}
			break;
 8001670:	e00e      	b.n	8001690 <fsm_traffic_vertical_run+0xf8>
		case modifying_led_green_vertical:
			// turn off red and yellow led
//			offRedYellow_vertical();
			if(timer7_flag == 1){
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <fsm_traffic_vertical_run+0x108>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d10c      	bne.n	8001694 <fsm_traffic_vertical_run+0xfc>
				//toggle green led with frequency 2Hz
				toggleGreen_vertical();
 800167a:	f000 fe1f 	bl	80022bc <toggleGreen_vertical>
				setTimer7(500);
 800167e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001682:	f000 fa23 	bl	8001acc <setTimer7>
			}
			break;
 8001686:	e005      	b.n	8001694 <fsm_traffic_vertical_run+0xfc>
		case mannual_vertical:
			break;
		default:
			break;
 8001688:	bf00      	nop
 800168a:	e004      	b.n	8001696 <fsm_traffic_vertical_run+0xfe>
			break;
 800168c:	bf00      	nop
 800168e:	e002      	b.n	8001696 <fsm_traffic_vertical_run+0xfe>
			break;
 8001690:	bf00      	nop
 8001692:	e000      	b.n	8001696 <fsm_traffic_vertical_run+0xfe>
			break;
 8001694:	bf00      	nop
	}
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200000a0 	.word	0x200000a0
 80016a0:	200001c8 	.word	0x200001c8

080016a4 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a8:	f000 fee0 	bl	800246c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ac:	f000 f83e 	bl	800172c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b0:	f000 f8ee 	bl	8001890 <MX_GPIO_Init>
  MX_TIM2_Init();
 80016b4:	f000 f876 	bl	80017a4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80016b8:	f000 f8c0 	bl	800183c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80016bc:	4819      	ldr	r0, [pc, #100]	; (8001724 <main+0x80>)
 80016be:	f001 ff21 	bl	8003504 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	setTimer4(10);
 80016c2:	200a      	movs	r0, #10
 80016c4:	f000 f9b4 	bl	8001a30 <setTimer4>
    setTimer6(10);
 80016c8:	200a      	movs	r0, #10
 80016ca:	f000 f9e5 	bl	8001a98 <setTimer6>
    setTimer7(500);// toggle led-red/green/yellow vertical road 2Hz while modifying time of it
 80016ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016d2:	f000 f9fb 	bl	8001acc <setTimer7>
    setTimer8(500);// toggle led-red/green/yellow horizontal road 2Hz while modifying time of it
 80016d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016da:	f000 fa11 	bl	8001b00 <setTimer8>
    setTimer10(500);// timer blink led-red for debugging
 80016de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016e2:	f000 fa41 	bl	8001b68 <setTimer10>
    setTimer32(10);
 80016e6:	200a      	movs	r0, #10
 80016e8:	f000 fa72 	bl	8001bd0 <setTimer32>
    setTimer34(10);
 80016ec:	200a      	movs	r0, #10
 80016ee:	f000 fa89 	bl	8001c04 <setTimer34>

    /* USER CODE BEGIN 3 */
  //	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,i);

  	  //blink led-red for debugging
  	  if(timer10_flag == 1){
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <main+0x84>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d105      	bne.n	8001706 <main+0x62>
  		  toggleLedRed();
 80016fa:	f000 fd83 	bl	8002204 <toggleLedRed>
  		  setTimer10(1000);
 80016fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001702:	f000 fa31 	bl	8001b68 <setTimer10>
  	  }

  	  fsm_system_run();
 8001706:	f7ff f967 	bl	80009d8 <fsm_system_run>
  	  fsm_7SEG_horizontal_run();
 800170a:	f7fe ff67 	bl	80005dc <fsm_7SEG_horizontal_run>
  	  fsm_7SEG_vertical_run();
 800170e:	f7fe ffad 	bl	800066c <fsm_7SEG_vertical_run>
  	  fsm_traffic_vertical_run();
 8001712:	f7ff ff41 	bl	8001598 <fsm_traffic_vertical_run>
  	  fsm_traffic_horizontal_run();
 8001716:	f7ff feeb 	bl	80014f0 <fsm_traffic_horizontal_run>
  	  ///add function
  	  fsm_pedestrian_run();
 800171a:	f7ff f913 	bl	8000944 <fsm_pedestrian_run>
  	  FSM_Buzzer();
 800171e:	f7fe ff07 	bl	8000530 <FSM_Buzzer>
  	  if(timer10_flag == 1){
 8001722:	e7e6      	b.n	80016f2 <main+0x4e>
 8001724:	20000254 	.word	0x20000254
 8001728:	200001e0 	.word	0x200001e0

0800172c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b090      	sub	sp, #64	; 0x40
 8001730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001732:	f107 0318 	add.w	r3, r7, #24
 8001736:	2228      	movs	r2, #40	; 0x28
 8001738:	2100      	movs	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f002 ff78 	bl	8004630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800174e:	2302      	movs	r3, #2
 8001750:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001752:	2301      	movs	r3, #1
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001756:	2310      	movs	r3, #16
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800175a:	2300      	movs	r3, #0
 800175c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175e:	f107 0318 	add.w	r3, r7, #24
 8001762:	4618      	mov	r0, r3
 8001764:	f001 fa64 	bl	8002c30 <HAL_RCC_OscConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800176e:	f000 f90b 	bl	8001988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001772:	230f      	movs	r3, #15
 8001774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2100      	movs	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fcd0 	bl	8003130 <HAL_RCC_ClockConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001796:	f000 f8f7 	bl	8001988 <Error_Handler>
  }
}
 800179a:	bf00      	nop
 800179c:	3740      	adds	r7, #64	; 0x40
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	463b      	mov	r3, r7
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <MX_TIM2_Init+0x94>)
 80017c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_TIM2_Init+0x94>)
 80017ca:	2207      	movs	r2, #7
 80017cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <MX_TIM2_Init+0x94>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <MX_TIM2_Init+0x94>)
 80017d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80017da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017dc:	4b16      	ldr	r3, [pc, #88]	; (8001838 <MX_TIM2_Init+0x94>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <MX_TIM2_Init+0x94>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017e8:	4813      	ldr	r0, [pc, #76]	; (8001838 <MX_TIM2_Init+0x94>)
 80017ea:	f001 fe3b 	bl	8003464 <HAL_TIM_Base_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017f4:	f000 f8c8 	bl	8001988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	4619      	mov	r1, r3
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <MX_TIM2_Init+0x94>)
 8001806:	f001 ffd1 	bl	80037ac <HAL_TIM_ConfigClockSource>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001810:	f000 f8ba 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001814:	2300      	movs	r3, #0
 8001816:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_TIM2_Init+0x94>)
 8001822:	f002 f999 	bl	8003b58 <HAL_TIMEx_MasterConfigSynchronization>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800182c:	f000 f8ac 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000254 	.word	0x20000254

0800183c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <MX_USART2_UART_Init+0x50>)
 8001844:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001848:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800184c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART2_UART_Init+0x4c>)
 8001874:	f002 f9da 	bl	8003c2c <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800187e:	f000 f883 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000029c 	.word	0x2000029c
 800188c:	40004400 	.word	0x40004400

08001890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a2e      	ldr	r2, [pc, #184]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b2c      	ldr	r3, [pc, #176]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018bc:	4b29      	ldr	r3, [pc, #164]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a28      	ldr	r2, [pc, #160]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <MX_GPIO_Init+0xd4>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 80018da:	4823      	ldr	r0, [pc, #140]	; (8001968 <MX_GPIO_Init+0xd8>)
 80018dc:	f001 f977 	bl	8002bce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 80018e0:	2200      	movs	r2, #0
 80018e2:	f242 013c 	movw	r1, #8252	; 0x203c
 80018e6:	4821      	ldr	r0, [pc, #132]	; (800196c <MX_GPIO_Init+0xdc>)
 80018e8:	f001 f971 	bl	8002bce <HAL_GPIO_WritePin>
                          |D4_TRAFFIC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_BLUE_Pin D7_PEDES_LIGHT_Pin D2_TRAFFIC1_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin;
 80018ec:	f44f 63a2 	mov.w	r3, #1296	; 0x510
 80018f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2302      	movs	r3, #2
 80018fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	4619      	mov	r1, r3
 8001904:	4818      	ldr	r0, [pc, #96]	; (8001968 <MX_GPIO_Init+0xd8>)
 8001906:	f000 ffd1 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : A2_BUTTON2_Pin A0_PEDES_BUTTON_Pin */
  GPIO_InitStruct.Pin = A2_BUTTON2_Pin|A0_PEDES_BUTTON_Pin;
 800190a:	2360      	movs	r3, #96	; 0x60
 800190c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001912:	2301      	movs	r3, #1
 8001914:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4619      	mov	r1, r3
 800191c:	4812      	ldr	r0, [pc, #72]	; (8001968 <MX_GPIO_Init+0xd8>)
 800191e:	f000 ffc5 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_BUTTON3_Pin A1_BUTTON1_Pin */
  GPIO_InitStruct.Pin = A3_BUTTON3_Pin|A1_BUTTON1_Pin;
 8001922:	f244 0301 	movw	r3, #16385	; 0x4001
 8001926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192c:	2301      	movs	r3, #1
 800192e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4619      	mov	r1, r3
 8001936:	480d      	ldr	r0, [pc, #52]	; (800196c <MX_GPIO_Init+0xdc>)
 8001938:	f000 ffb8 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDES_LIGHT_Pin LED_RED_Pin D3_TRAFFIC1_Pin D5_TRAFFIC2_Pin
                           D4_TRAFFIC2_Pin */
  GPIO_InitStruct.Pin = D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 800193c:	f242 033c 	movw	r3, #8252	; 0x203c
 8001940:	60bb      	str	r3, [r7, #8]
                          |D4_TRAFFIC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2302      	movs	r3, #2
 800194c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_GPIO_Init+0xdc>)
 8001956:	f000 ffa9 	bl	80028ac <HAL_GPIO_Init>

}
 800195a:	bf00      	nop
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40010800 	.word	0x40010800
 800196c:	40010c00 	.word	0x40010c00

08001970 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	timerRun();
 8001978:	f000 f95e 	bl	8001c38 <timerRun>
	getKeyInput();
 800197c:	f7fe fc2e 	bl	80001dc <getKeyInput>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001990:	e7fe      	b.n	8001990 <Error_Handler+0x8>
	...

08001994 <setTimer1>:
int timer34_counter = 0;

int timer35_flag = 0;
int timer35_counter = 0;

void setTimer1(int duration){
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <setTimer1+0x28>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80019a6:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <setTimer1+0x2c>)
 80019a8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <setTimer1+0x30>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	200000dc 	.word	0x200000dc
 80019c0:	2000019c 	.word	0x2000019c
 80019c4:	20000198 	.word	0x20000198

080019c8 <setTimer2>:

void setTimer2(int duration){
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <setTimer2+0x28>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80019da:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <setTimer2+0x2c>)
 80019dc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <setTimer2+0x30>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	200000dc 	.word	0x200000dc
 80019f4:	200001a4 	.word	0x200001a4
 80019f8:	200001a0 	.word	0x200001a0

080019fc <setTimer3>:

void setTimer3(int duration){
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <setTimer3+0x28>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a0e:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <setTimer3+0x2c>)
 8001a10:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <setTimer3+0x30>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	200000dc 	.word	0x200000dc
 8001a28:	200001ac 	.word	0x200001ac
 8001a2c:	200001a8 	.word	0x200001a8

08001a30 <setTimer4>:

void setTimer4(int duration){
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <setTimer4+0x28>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a42:	4a06      	ldr	r2, [pc, #24]	; (8001a5c <setTimer4+0x2c>)
 8001a44:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <setTimer4+0x30>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	200000dc 	.word	0x200000dc
 8001a5c:	200001b4 	.word	0x200001b4
 8001a60:	200001b0 	.word	0x200001b0

08001a64 <setTimer5>:

void setTimer5(int duration){
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <setTimer5+0x28>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a76:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <setTimer5+0x2c>)
 8001a78:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <setTimer5+0x30>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	200000dc 	.word	0x200000dc
 8001a90:	200001bc 	.word	0x200001bc
 8001a94:	200001b8 	.word	0x200001b8

08001a98 <setTimer6>:

void setTimer6(int duration){
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 8001aa0:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <setTimer6+0x28>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001aaa:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <setTimer6+0x2c>)
 8001aac:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <setTimer6+0x30>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	200000dc 	.word	0x200000dc
 8001ac4:	200001c4 	.word	0x200001c4
 8001ac8:	200001c0 	.word	0x200001c0

08001acc <setTimer7>:

void setTimer7(int duration){
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <setTimer7+0x28>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ade:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <setTimer7+0x2c>)
 8001ae0:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <setTimer7+0x30>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	200000dc 	.word	0x200000dc
 8001af8:	200001cc 	.word	0x200001cc
 8001afc:	200001c8 	.word	0x200001c8

08001b00 <setTimer8>:

void setTimer8(int duration){
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <setTimer8+0x28>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b12:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <setTimer8+0x2c>)
 8001b14:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <setTimer8+0x30>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200000dc 	.word	0x200000dc
 8001b2c:	200001d4 	.word	0x200001d4
 8001b30:	200001d0 	.word	0x200001d0

08001b34 <setTimer9>:

void setTimer9(int duration){
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	timer9_counter = duration/TICK;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <setTimer9+0x28>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b46:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <setTimer9+0x2c>)
 8001b48:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <setTimer9+0x30>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	200000dc 	.word	0x200000dc
 8001b60:	200001dc 	.word	0x200001dc
 8001b64:	200001d8 	.word	0x200001d8

08001b68 <setTimer10>:

void setTimer10(int duration){
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	timer10_counter = duration/TICK;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <setTimer10+0x28>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b7a:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <setTimer10+0x2c>)
 8001b7c:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <setTimer10+0x30>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200000dc 	.word	0x200000dc
 8001b94:	200001e4 	.word	0x200001e4
 8001b98:	200001e0 	.word	0x200001e0

08001b9c <setTimer30>:
void setTimer11(int duration){
	timer11_counter = duration/TICK;
	timer11_flag = 0;
}

void setTimer30(int duration){
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	timer30_counter = duration/TICK;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <setTimer30+0x28>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bae:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <setTimer30+0x2c>)
 8001bb0:	6013      	str	r3, [r2, #0]
	timer30_flag = 0;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <setTimer30+0x30>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bc80      	pop	{r7}
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200000dc 	.word	0x200000dc
 8001bc8:	200001f4 	.word	0x200001f4
 8001bcc:	200001f0 	.word	0x200001f0

08001bd0 <setTimer32>:
void setTimer31(int duration){
	timer31_counter = duration/TICK;
	timer31_flag = 0;
}

void setTimer32(int duration){
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	timer32_counter = duration/TICK;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <setTimer32+0x28>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	fb92 f3f3 	sdiv	r3, r2, r3
 8001be2:	4a06      	ldr	r2, [pc, #24]	; (8001bfc <setTimer32+0x2c>)
 8001be4:	6013      	str	r3, [r2, #0]
	timer32_flag = 0;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <setTimer32+0x30>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	200000dc 	.word	0x200000dc
 8001bfc:	20000204 	.word	0x20000204
 8001c00:	20000200 	.word	0x20000200

08001c04 <setTimer34>:
void setTimer33(int duration){
	timer33_counter = duration/TICK;
	timer33_flag = 0;
}

void setTimer34(int duration){
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	timer34_counter = duration/TICK;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <setTimer34+0x28>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c16:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <setTimer34+0x2c>)
 8001c18:	6013      	str	r3, [r2, #0]
	timer34_flag = 0;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <setTimer34+0x30>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200000dc 	.word	0x200000dc
 8001c30:	20000214 	.word	0x20000214
 8001c34:	20000210 	.word	0x20000210

08001c38 <timerRun>:
void setTimer35(int duration){
	timer35_counter = duration/TICK;
	timer35_flag = 0;
}

void timerRun(){
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 8001c3c:	4b89      	ldr	r3, [pc, #548]	; (8001e64 <timerRun+0x22c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	dd04      	ble.n	8001c4e <timerRun+0x16>
 8001c44:	4b87      	ldr	r3, [pc, #540]	; (8001e64 <timerRun+0x22c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	4a86      	ldr	r2, [pc, #536]	; (8001e64 <timerRun+0x22c>)
 8001c4c:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 8001c4e:	4b85      	ldr	r3, [pc, #532]	; (8001e64 <timerRun+0x22c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <timerRun+0x24>
		timer1_flag = 1;
 8001c56:	4b84      	ldr	r3, [pc, #528]	; (8001e68 <timerRun+0x230>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 8001c5c:	4b83      	ldr	r3, [pc, #524]	; (8001e6c <timerRun+0x234>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	dd04      	ble.n	8001c6e <timerRun+0x36>
 8001c64:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <timerRun+0x234>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	4a80      	ldr	r2, [pc, #512]	; (8001e6c <timerRun+0x234>)
 8001c6c:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <timerRun+0x234>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <timerRun+0x44>
		timer2_flag = 1;
 8001c76:	4b7e      	ldr	r3, [pc, #504]	; (8001e70 <timerRun+0x238>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 8001c7c:	4b7d      	ldr	r3, [pc, #500]	; (8001e74 <timerRun+0x23c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	dd04      	ble.n	8001c8e <timerRun+0x56>
 8001c84:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <timerRun+0x23c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	; (8001e74 <timerRun+0x23c>)
 8001c8c:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 8001c8e:	4b79      	ldr	r3, [pc, #484]	; (8001e74 <timerRun+0x23c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <timerRun+0x64>
		timer3_flag = 1;
 8001c96:	4b78      	ldr	r3, [pc, #480]	; (8001e78 <timerRun+0x240>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 8001c9c:	4b77      	ldr	r3, [pc, #476]	; (8001e7c <timerRun+0x244>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	dd04      	ble.n	8001cae <timerRun+0x76>
 8001ca4:	4b75      	ldr	r3, [pc, #468]	; (8001e7c <timerRun+0x244>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	4a74      	ldr	r2, [pc, #464]	; (8001e7c <timerRun+0x244>)
 8001cac:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <timerRun+0x244>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <timerRun+0x84>
		timer4_flag = 1;
 8001cb6:	4b72      	ldr	r3, [pc, #456]	; (8001e80 <timerRun+0x248>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0) timer5_counter--;
 8001cbc:	4b71      	ldr	r3, [pc, #452]	; (8001e84 <timerRun+0x24c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	dd04      	ble.n	8001cce <timerRun+0x96>
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <timerRun+0x24c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <timerRun+0x24c>)
 8001ccc:	6013      	str	r3, [r2, #0]
	if(timer5_counter == 0){
 8001cce:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <timerRun+0x24c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <timerRun+0xa4>
		timer5_flag = 1;
 8001cd6:	4b6c      	ldr	r3, [pc, #432]	; (8001e88 <timerRun+0x250>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0) timer6_counter--;
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <timerRun+0x254>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	dd04      	ble.n	8001cee <timerRun+0xb6>
 8001ce4:	4b69      	ldr	r3, [pc, #420]	; (8001e8c <timerRun+0x254>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	4a68      	ldr	r2, [pc, #416]	; (8001e8c <timerRun+0x254>)
 8001cec:	6013      	str	r3, [r2, #0]
	if(timer6_counter == 0){
 8001cee:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <timerRun+0x254>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <timerRun+0xc4>
		timer6_flag = 1;
 8001cf6:	4b66      	ldr	r3, [pc, #408]	; (8001e90 <timerRun+0x258>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0) timer7_counter--;
 8001cfc:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <timerRun+0x25c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	dd04      	ble.n	8001d0e <timerRun+0xd6>
 8001d04:	4b63      	ldr	r3, [pc, #396]	; (8001e94 <timerRun+0x25c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	4a62      	ldr	r2, [pc, #392]	; (8001e94 <timerRun+0x25c>)
 8001d0c:	6013      	str	r3, [r2, #0]
	if(timer7_counter == 0){
 8001d0e:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <timerRun+0x25c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d102      	bne.n	8001d1c <timerRun+0xe4>
		timer7_flag = 1;
 8001d16:	4b60      	ldr	r3, [pc, #384]	; (8001e98 <timerRun+0x260>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0) timer8_counter--;
 8001d1c:	4b5f      	ldr	r3, [pc, #380]	; (8001e9c <timerRun+0x264>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	dd04      	ble.n	8001d2e <timerRun+0xf6>
 8001d24:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <timerRun+0x264>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	4a5c      	ldr	r2, [pc, #368]	; (8001e9c <timerRun+0x264>)
 8001d2c:	6013      	str	r3, [r2, #0]
	if(timer8_counter == 0){
 8001d2e:	4b5b      	ldr	r3, [pc, #364]	; (8001e9c <timerRun+0x264>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <timerRun+0x104>
		timer8_flag = 1;
 8001d36:	4b5a      	ldr	r3, [pc, #360]	; (8001ea0 <timerRun+0x268>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0) timer9_counter--;
 8001d3c:	4b59      	ldr	r3, [pc, #356]	; (8001ea4 <timerRun+0x26c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	dd04      	ble.n	8001d4e <timerRun+0x116>
 8001d44:	4b57      	ldr	r3, [pc, #348]	; (8001ea4 <timerRun+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	4a56      	ldr	r2, [pc, #344]	; (8001ea4 <timerRun+0x26c>)
 8001d4c:	6013      	str	r3, [r2, #0]
	if(timer9_counter == 0){
 8001d4e:	4b55      	ldr	r3, [pc, #340]	; (8001ea4 <timerRun+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <timerRun+0x124>
		timer9_flag = 1;
 8001d56:	4b54      	ldr	r3, [pc, #336]	; (8001ea8 <timerRun+0x270>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
	}

	if(timer10_counter > 0) timer10_counter--;
 8001d5c:	4b53      	ldr	r3, [pc, #332]	; (8001eac <timerRun+0x274>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	dd04      	ble.n	8001d6e <timerRun+0x136>
 8001d64:	4b51      	ldr	r3, [pc, #324]	; (8001eac <timerRun+0x274>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	4a50      	ldr	r2, [pc, #320]	; (8001eac <timerRun+0x274>)
 8001d6c:	6013      	str	r3, [r2, #0]
	if(timer10_counter == 0){
 8001d6e:	4b4f      	ldr	r3, [pc, #316]	; (8001eac <timerRun+0x274>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <timerRun+0x144>
		timer10_flag = 1;
 8001d76:	4b4e      	ldr	r3, [pc, #312]	; (8001eb0 <timerRun+0x278>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
	}

	if(timer11_counter > 0) timer11_counter--;
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <timerRun+0x27c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	dd04      	ble.n	8001d8e <timerRun+0x156>
 8001d84:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <timerRun+0x27c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	4a4a      	ldr	r2, [pc, #296]	; (8001eb4 <timerRun+0x27c>)
 8001d8c:	6013      	str	r3, [r2, #0]
	if(timer11_counter == 0){
 8001d8e:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <timerRun+0x27c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <timerRun+0x164>
		timer11_flag = 1;
 8001d96:	4b48      	ldr	r3, [pc, #288]	; (8001eb8 <timerRun+0x280>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
	}

	if(timer30_counter > 0) timer30_counter--;
 8001d9c:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <timerRun+0x284>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	dd04      	ble.n	8001dae <timerRun+0x176>
 8001da4:	4b45      	ldr	r3, [pc, #276]	; (8001ebc <timerRun+0x284>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	3b01      	subs	r3, #1
 8001daa:	4a44      	ldr	r2, [pc, #272]	; (8001ebc <timerRun+0x284>)
 8001dac:	6013      	str	r3, [r2, #0]
	if(timer30_counter == 0){
 8001dae:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <timerRun+0x284>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <timerRun+0x184>
		timer30_flag = 1;
 8001db6:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <timerRun+0x288>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
	}

	if(timer31_counter > 0) timer31_counter--;
 8001dbc:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <timerRun+0x28c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	dd04      	ble.n	8001dce <timerRun+0x196>
 8001dc4:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <timerRun+0x28c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	4a3e      	ldr	r2, [pc, #248]	; (8001ec4 <timerRun+0x28c>)
 8001dcc:	6013      	str	r3, [r2, #0]
	if(timer31_counter == 0){
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <timerRun+0x28c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <timerRun+0x1a4>
		timer31_flag = 1;
 8001dd6:	4b3c      	ldr	r3, [pc, #240]	; (8001ec8 <timerRun+0x290>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
	}

	if(timer32_counter > 0) timer32_counter--;
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <timerRun+0x294>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	dd04      	ble.n	8001dee <timerRun+0x1b6>
 8001de4:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <timerRun+0x294>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	4a38      	ldr	r2, [pc, #224]	; (8001ecc <timerRun+0x294>)
 8001dec:	6013      	str	r3, [r2, #0]
	if(timer32_counter == 0){
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <timerRun+0x294>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d102      	bne.n	8001dfc <timerRun+0x1c4>
		timer32_flag = 1;
 8001df6:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <timerRun+0x298>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
	}

	if(timer33_counter > 0) timer33_counter--;
 8001dfc:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <timerRun+0x29c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	dd04      	ble.n	8001e0e <timerRun+0x1d6>
 8001e04:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <timerRun+0x29c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	4a32      	ldr	r2, [pc, #200]	; (8001ed4 <timerRun+0x29c>)
 8001e0c:	6013      	str	r3, [r2, #0]
	if(timer33_counter == 0){
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <timerRun+0x29c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <timerRun+0x1e4>
		timer33_flag = 1;
 8001e16:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <timerRun+0x2a0>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
	}

	if(timer34_counter > 0) timer34_counter--;
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <timerRun+0x2a4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	dd04      	ble.n	8001e2e <timerRun+0x1f6>
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <timerRun+0x2a4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	; (8001edc <timerRun+0x2a4>)
 8001e2c:	6013      	str	r3, [r2, #0]
	if(timer34_counter == 0){
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <timerRun+0x2a4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <timerRun+0x204>
		timer34_flag = 1;
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <timerRun+0x2a8>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
	}
	if(timer35_counter > 0) timer35_counter--;
 8001e3c:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <timerRun+0x2ac>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	dd04      	ble.n	8001e4e <timerRun+0x216>
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <timerRun+0x2ac>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	4a26      	ldr	r2, [pc, #152]	; (8001ee4 <timerRun+0x2ac>)
 8001e4c:	6013      	str	r3, [r2, #0]
	if(timer35_counter == 0){
 8001e4e:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <timerRun+0x2ac>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <timerRun+0x224>
		timer35_flag = 1;
 8001e56:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <timerRun+0x2b0>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
	}
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	2000019c 	.word	0x2000019c
 8001e68:	20000198 	.word	0x20000198
 8001e6c:	200001a4 	.word	0x200001a4
 8001e70:	200001a0 	.word	0x200001a0
 8001e74:	200001ac 	.word	0x200001ac
 8001e78:	200001a8 	.word	0x200001a8
 8001e7c:	200001b4 	.word	0x200001b4
 8001e80:	200001b0 	.word	0x200001b0
 8001e84:	200001bc 	.word	0x200001bc
 8001e88:	200001b8 	.word	0x200001b8
 8001e8c:	200001c4 	.word	0x200001c4
 8001e90:	200001c0 	.word	0x200001c0
 8001e94:	200001cc 	.word	0x200001cc
 8001e98:	200001c8 	.word	0x200001c8
 8001e9c:	200001d4 	.word	0x200001d4
 8001ea0:	200001d0 	.word	0x200001d0
 8001ea4:	200001dc 	.word	0x200001dc
 8001ea8:	200001d8 	.word	0x200001d8
 8001eac:	200001e4 	.word	0x200001e4
 8001eb0:	200001e0 	.word	0x200001e0
 8001eb4:	200001ec 	.word	0x200001ec
 8001eb8:	200001e8 	.word	0x200001e8
 8001ebc:	200001f4 	.word	0x200001f4
 8001ec0:	200001f0 	.word	0x200001f0
 8001ec4:	200001fc 	.word	0x200001fc
 8001ec8:	200001f8 	.word	0x200001f8
 8001ecc:	20000204 	.word	0x20000204
 8001ed0:	20000200 	.word	0x20000200
 8001ed4:	2000020c 	.word	0x2000020c
 8001ed8:	20000208 	.word	0x20000208
 8001edc:	20000214 	.word	0x20000214
 8001ee0:	20000210 	.word	0x20000210
 8001ee4:	2000021c 	.word	0x2000021c
 8001ee8:	20000218 	.word	0x20000218

08001eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_MspInit+0x5c>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <HAL_MspInit+0x5c>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6193      	str	r3, [r2, #24]
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_MspInit+0x5c>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_MspInit+0x5c>)
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_MspInit+0x5c>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	61d3      	str	r3, [r2, #28]
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_MspInit+0x5c>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_MspInit+0x60>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <HAL_MspInit+0x60>)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010000 	.word	0x40010000

08001f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f60:	d113      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f62:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <HAL_TIM_Base_MspInit+0x44>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HAL_TIM_Base_MspInit+0x44>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	61d3      	str	r3, [r2, #28]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_TIM_Base_MspInit+0x44>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	201c      	movs	r0, #28
 8001f80:	f000 fbad 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f84:	201c      	movs	r0, #28
 8001f86:	f000 fbc6 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0310 	add.w	r3, r7, #16
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_UART_MspInit+0x98>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d137      	bne.n	8002028 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_UART_MspInit+0x9c>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <HAL_UART_MspInit+0x9c>)
 8001fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc2:	61d3      	str	r3, [r2, #28]
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_UART_MspInit+0x9c>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_UART_MspInit+0x9c>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a17      	ldr	r2, [pc, #92]	; (8002034 <HAL_UART_MspInit+0x9c>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b15      	ldr	r3, [pc, #84]	; (8002034 <HAL_UART_MspInit+0x9c>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	480f      	ldr	r0, [pc, #60]	; (8002038 <HAL_UART_MspInit+0xa0>)
 8001ffc:	f000 fc56 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002000:	2308      	movs	r3, #8
 8002002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	4619      	mov	r1, r3
 8002012:	4809      	ldr	r0, [pc, #36]	; (8002038 <HAL_UART_MspInit+0xa0>)
 8002014:	f000 fc4a 	bl	80028ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	2026      	movs	r0, #38	; 0x26
 800201e:	f000 fb5e 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002022:	2026      	movs	r0, #38	; 0x26
 8002024:	f000 fb77 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002028:	bf00      	nop
 800202a:	3720      	adds	r7, #32
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40004400 	.word	0x40004400
 8002034:	40021000 	.word	0x40021000
 8002038:	40010800 	.word	0x40010800

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <NMI_Handler+0x4>

08002042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <HardFault_Handler+0x4>

08002048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <MemManage_Handler+0x4>

0800204e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <BusFault_Handler+0x4>

08002054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <UsageFault_Handler+0x4>

0800205a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr

08002072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002082:	f000 fa39 	bl	80024f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <TIM2_IRQHandler+0x10>)
 8002092:	f001 fa83 	bl	800359c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000254 	.word	0x20000254

080020a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <USART2_IRQHandler+0x10>)
 80020a6:	f001 fea1 	bl	8003dec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000029c 	.word	0x2000029c

080020b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <_sbrk+0x5c>)
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <_sbrk+0x60>)
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <_sbrk+0x64>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <_sbrk+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d207      	bcs.n	80020f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e4:	f002 fa7a 	bl	80045dc <__errno>
 80020e8:	4603      	mov	r3, r0
 80020ea:	220c      	movs	r2, #12
 80020ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	e009      	b.n	8002108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	4a05      	ldr	r2, [pc, #20]	; (8002118 <_sbrk+0x64>)
 8002104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20002800 	.word	0x20002800
 8002114:	00000400 	.word	0x00000400
 8002118:	20000220 	.word	0x20000220
 800211c:	200002f8 	.word	0x200002f8

08002120 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <setRed_horizontal>:
 */
#include "traffic.h"
#include "global.h"
#include "main.h"

void setRed_horizontal(){
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <setRed_horizontal+0x20>)
 8002138:	f000 fd49 	bl	8002bce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 800213c:	2200      	movs	r2, #0
 800213e:	2108      	movs	r1, #8
 8002140:	4803      	ldr	r0, [pc, #12]	; (8002150 <setRed_horizontal+0x24>)
 8002142:	f000 fd44 	bl	8002bce <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40010800 	.word	0x40010800
 8002150:	40010c00 	.word	0x40010c00

08002154 <setGreen_horizontal>:

void setGreen_horizontal(){
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <setGreen_horizontal+0x20>)
 8002160:	f000 fd35 	bl	8002bce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8002164:	2201      	movs	r2, #1
 8002166:	2108      	movs	r1, #8
 8002168:	4803      	ldr	r0, [pc, #12]	; (8002178 <setGreen_horizontal+0x24>)
 800216a:	f000 fd30 	bl	8002bce <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_SET);
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40010800 	.word	0x40010800
 8002178:	40010c00 	.word	0x40010c00

0800217c <setYellow_horizontal>:

void setYellow_horizontal(){
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8002180:	2201      	movs	r2, #1
 8002182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <setYellow_horizontal+0x20>)
 8002188:	f000 fd21 	bl	8002bce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 800218c:	2201      	movs	r2, #1
 800218e:	2108      	movs	r1, #8
 8002190:	4803      	ldr	r0, [pc, #12]	; (80021a0 <setYellow_horizontal+0x24>)
 8002192:	f000 fd1c 	bl	8002bce <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40010800 	.word	0x40010800
 80021a0:	40010c00 	.word	0x40010c00

080021a4 <setRed_vertical>:

void setRed_vertical(){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 80021a8:	2201      	movs	r2, #1
 80021aa:	2120      	movs	r1, #32
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <setRed_vertical+0x1c>)
 80021ae:	f000 fd0e 	bl	8002bce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2110      	movs	r1, #16
 80021b6:	4802      	ldr	r0, [pc, #8]	; (80021c0 <setRed_vertical+0x1c>)
 80021b8:	f000 fd09 	bl	8002bce <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40010c00 	.word	0x40010c00

080021c4 <setGreen_vertical>:

void setGreen_vertical(){
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	2120      	movs	r1, #32
 80021cc:	4804      	ldr	r0, [pc, #16]	; (80021e0 <setGreen_vertical+0x1c>)
 80021ce:	f000 fcfe 	bl	8002bce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	2110      	movs	r1, #16
 80021d6:	4802      	ldr	r0, [pc, #8]	; (80021e0 <setGreen_vertical+0x1c>)
 80021d8:	f000 fcf9 	bl	8002bce <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_SET);
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40010c00 	.word	0x40010c00

080021e4 <setYellow_vertical>:

void setYellow_vertical(){
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 80021e8:	2201      	movs	r2, #1
 80021ea:	2120      	movs	r1, #32
 80021ec:	4804      	ldr	r0, [pc, #16]	; (8002200 <setYellow_vertical+0x1c>)
 80021ee:	f000 fcee 	bl	8002bce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 80021f2:	2201      	movs	r2, #1
 80021f4:	2110      	movs	r1, #16
 80021f6:	4802      	ldr	r0, [pc, #8]	; (8002200 <setYellow_vertical+0x1c>)
 80021f8:	f000 fce9 	bl	8002bce <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 80021fc:	bf00      	nop
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40010c00 	.word	0x40010c00

08002204 <toggleLedRed>:


void toggleLedRed(){
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <toggleLedRed+0x14>)
 800220e:	f000 fcf6 	bl	8002bfe <HAL_GPIO_TogglePin>
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40010c00 	.word	0x40010c00

0800221c <toggleRed_horizontal>:

void toggleRed_horizontal(){
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDA_GPIO_Port, REDA_Pin);
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8002220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002224:	4804      	ldr	r0, [pc, #16]	; (8002238 <toggleRed_horizontal+0x1c>)
 8002226:	f000 fcea 	bl	8002bfe <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 800222a:	2200      	movs	r2, #0
 800222c:	2108      	movs	r1, #8
 800222e:	4803      	ldr	r0, [pc, #12]	; (800223c <toggleRed_horizontal+0x20>)
 8002230:	f000 fccd 	bl	8002bce <HAL_GPIO_WritePin>
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40010800 	.word	0x40010800
 800223c:	40010c00 	.word	0x40010c00

08002240 <toggleGreen_horizontal>:

void toggleGreen_horizontal(){
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENA_GPIO_Port, GREENA_Pin);
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8002244:	2108      	movs	r1, #8
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <toggleGreen_horizontal+0x1c>)
 8002248:	f000 fcd9 	bl	8002bfe <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 800224c:	2200      	movs	r2, #0
 800224e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002252:	4803      	ldr	r0, [pc, #12]	; (8002260 <toggleGreen_horizontal+0x20>)
 8002254:	f000 fcbb 	bl	8002bce <HAL_GPIO_WritePin>
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010c00 	.word	0x40010c00
 8002260:	40010800 	.word	0x40010800

08002264 <toggleYellow_horizontal>:

void toggleYellow_horizontal(){
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWA_GPIO_Port, YELLOWA_Pin);
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, HAL_GPIO_ReadPin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin));
 8002268:	2108      	movs	r1, #8
 800226a:	480a      	ldr	r0, [pc, #40]	; (8002294 <toggleYellow_horizontal+0x30>)
 800226c:	f000 fc98 	bl	8002ba0 <HAL_GPIO_ReadPin>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002278:	4807      	ldr	r0, [pc, #28]	; (8002298 <toggleYellow_horizontal+0x34>)
 800227a:	f000 fca8 	bl	8002bce <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 800227e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002282:	4805      	ldr	r0, [pc, #20]	; (8002298 <toggleYellow_horizontal+0x34>)
 8002284:	f000 fcbb 	bl	8002bfe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8002288:	2108      	movs	r1, #8
 800228a:	4802      	ldr	r0, [pc, #8]	; (8002294 <toggleYellow_horizontal+0x30>)
 800228c:	f000 fcb7 	bl	8002bfe <HAL_GPIO_TogglePin>
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010c00 	.word	0x40010c00
 8002298:	40010800 	.word	0x40010800

0800229c <toggleRed_vertical>:

void toggleRed_vertical(){
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDB_GPIO_Port, REDB_Pin);
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 80022a0:	2120      	movs	r1, #32
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <toggleRed_vertical+0x1c>)
 80022a4:	f000 fcab 	bl	8002bfe <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2110      	movs	r1, #16
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <toggleRed_vertical+0x1c>)
 80022ae:	f000 fc8e 	bl	8002bce <HAL_GPIO_WritePin>
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40010c00 	.word	0x40010c00

080022bc <toggleGreen_vertical>:

void toggleGreen_vertical(){
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENB_GPIO_Port, GREENB_Pin);
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 80022c0:	2110      	movs	r1, #16
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <toggleGreen_vertical+0x1c>)
 80022c4:	f000 fc9b 	bl	8002bfe <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 80022c8:	2200      	movs	r2, #0
 80022ca:	2120      	movs	r1, #32
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <toggleGreen_vertical+0x1c>)
 80022ce:	f000 fc7e 	bl	8002bce <HAL_GPIO_WritePin>
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40010c00 	.word	0x40010c00

080022dc <toggleYellow_vertical>:

void toggleYellow_vertical(){
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWB_GPIO_Port, YELLOWB_Pin);
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, HAL_GPIO_ReadPin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin));
 80022e0:	2110      	movs	r1, #16
 80022e2:	4809      	ldr	r0, [pc, #36]	; (8002308 <toggleYellow_vertical+0x2c>)
 80022e4:	f000 fc5c 	bl	8002ba0 <HAL_GPIO_ReadPin>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	2120      	movs	r1, #32
 80022ee:	4806      	ldr	r0, [pc, #24]	; (8002308 <toggleYellow_vertical+0x2c>)
 80022f0:	f000 fc6d 	bl	8002bce <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 80022f4:	2120      	movs	r1, #32
 80022f6:	4804      	ldr	r0, [pc, #16]	; (8002308 <toggleYellow_vertical+0x2c>)
 80022f8:	f000 fc81 	bl	8002bfe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 80022fc:	2110      	movs	r1, #16
 80022fe:	4802      	ldr	r0, [pc, #8]	; (8002308 <toggleYellow_vertical+0x2c>)
 8002300:	f000 fc7d 	bl	8002bfe <HAL_GPIO_TogglePin>
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40010c00 	.word	0x40010c00

0800230c <resetTimeTraffic>:
void offRedYellow_vertical(){
//	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
}

void resetTimeTraffic(){
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
	time_red_horizontal_temp = time_red_horizontal;
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <resetTimeTraffic+0x3c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <resetTimeTraffic+0x40>)
 8002316:	6013      	str	r3, [r2, #0]
	time_green_horizontal_temp = time_green_horizontal;
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <resetTimeTraffic+0x44>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <resetTimeTraffic+0x48>)
 800231e:	6013      	str	r3, [r2, #0]
	time_yellow_horizontal_temp = time_yellow_horizontal;
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <resetTimeTraffic+0x4c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <resetTimeTraffic+0x50>)
 8002326:	6013      	str	r3, [r2, #0]

	time_red_vertical_temp = time_red_vertical;
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <resetTimeTraffic+0x54>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <resetTimeTraffic+0x58>)
 800232e:	6013      	str	r3, [r2, #0]
	time_green_vertical_temp = time_green_vertical;
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <resetTimeTraffic+0x5c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <resetTimeTraffic+0x60>)
 8002336:	6013      	str	r3, [r2, #0]
	time_yellow_vertical_temp = time_yellow_vertical;
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <resetTimeTraffic+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <resetTimeTraffic+0x68>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	200000a4 	.word	0x200000a4
 800234c:	200000b0 	.word	0x200000b0
 8002350:	200000a8 	.word	0x200000a8
 8002354:	200000b4 	.word	0x200000b4
 8002358:	200000ac 	.word	0x200000ac
 800235c:	200000b8 	.word	0x200000b8
 8002360:	200000c4 	.word	0x200000c4
 8002364:	200000d0 	.word	0x200000d0
 8002368:	200000bc 	.word	0x200000bc
 800236c:	200000c8 	.word	0x200000c8
 8002370:	200000c0 	.word	0x200000c0
 8002374:	200000cc 	.word	0x200000cc

08002378 <set_off_pedes>:

void set_off_pedes(){
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 800237c:	2200      	movs	r2, #0
 800237e:	2104      	movs	r1, #4
 8002380:	4805      	ldr	r0, [pc, #20]	; (8002398 <set_off_pedes+0x20>)
 8002382:	f000 fc24 	bl	8002bce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <set_off_pedes+0x24>)
 800238e:	f000 fc1e 	bl	8002bce <HAL_GPIO_WritePin>
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40010c00 	.word	0x40010c00
 800239c:	40010800 	.word	0x40010800

080023a0 <set_red_pedes>:
void set_red_pedes(){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 80023a4:	2201      	movs	r2, #1
 80023a6:	2104      	movs	r1, #4
 80023a8:	4805      	ldr	r0, [pc, #20]	; (80023c0 <set_red_pedes+0x20>)
 80023aa:	f000 fc10 	bl	8002bce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b4:	4803      	ldr	r0, [pc, #12]	; (80023c4 <set_red_pedes+0x24>)
 80023b6:	f000 fc0a 	bl	8002bce <HAL_GPIO_WritePin>
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40010c00 	.word	0x40010c00
 80023c4:	40010800 	.word	0x40010800

080023c8 <set_green_pedes>:
void set_green_pedes(){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2104      	movs	r1, #4
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <set_green_pedes+0x20>)
 80023d2:	f000 fbfc 	bl	8002bce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 80023d6:	2201      	movs	r2, #1
 80023d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023dc:	4803      	ldr	r0, [pc, #12]	; (80023ec <set_green_pedes+0x24>)
 80023de:	f000 fbf6 	bl	8002bce <HAL_GPIO_WritePin>
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40010c00 	.word	0x40010c00
 80023ec:	40010800 	.word	0x40010800

080023f0 <set_on_buzzer>:

void set_on_buzzer(){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 80023f4:	2201      	movs	r2, #1
 80023f6:	2110      	movs	r1, #16
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <set_on_buzzer+0x14>)
 80023fa:	f000 fbe8 	bl	8002bce <HAL_GPIO_WritePin>
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40010800 	.word	0x40010800

08002408 <set_off_buzzer>:

void set_off_buzzer(){
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	2110      	movs	r1, #16
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <set_off_buzzer+0x14>)
 8002412:	f000 fbdc 	bl	8002bce <HAL_GPIO_WritePin>
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40010800 	.word	0x40010800

08002420 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002420:	480c      	ldr	r0, [pc, #48]	; (8002454 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002422:	490d      	ldr	r1, [pc, #52]	; (8002458 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002438:	4c0a      	ldr	r4, [pc, #40]	; (8002464 <LoopFillZerobss+0x22>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002446:	f7ff fe6b 	bl	8002120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f002 f8cd 	bl	80045e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800244e:	f7ff f929 	bl	80016a4 <main>
  bx lr
 8002452:	4770      	bx	lr
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 800245c:	08004fa0 	.word	0x08004fa0
  ldr r2, =_sbss
 8002460:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8002464:	200002f4 	.word	0x200002f4

08002468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC1_2_IRQHandler>
	...

0800246c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_Init+0x28>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_Init+0x28>)
 8002476:	f043 0310 	orr.w	r3, r3, #16
 800247a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247c:	2003      	movs	r0, #3
 800247e:	f000 f923 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002482:	200f      	movs	r0, #15
 8002484:	f000 f808 	bl	8002498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002488:	f7ff fd30 	bl	8001eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000

08002498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_InitTick+0x54>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_InitTick+0x58>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 f93b 	bl	8002732 <HAL_SYSTICK_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00e      	b.n	80024e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0f      	cmp	r3, #15
 80024ca:	d80a      	bhi.n	80024e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024cc:	2200      	movs	r2, #0
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f000 f903 	bl	80026de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d8:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <HAL_InitTick+0x5c>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200000e0 	.word	0x200000e0
 80024f0:	200000e8 	.word	0x200000e8
 80024f4:	200000e4 	.word	0x200000e4

080024f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_IncTick+0x1c>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_IncTick+0x20>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a03      	ldr	r2, [pc, #12]	; (8002518 <HAL_IncTick+0x20>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	200000e8 	.word	0x200000e8
 8002518:	200002e0 	.word	0x200002e0

0800251c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return uwTick;
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <HAL_GetTick+0x10>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	200002e0 	.word	0x200002e0

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4906      	ldr	r1, [pc, #24]	; (80025c8 <__NVIC_EnableIRQ+0x34>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	e000e100 	.word	0xe000e100

080025cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	db0a      	blt.n	80025f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	490c      	ldr	r1, [pc, #48]	; (8002618 <__NVIC_SetPriority+0x4c>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	440b      	add	r3, r1
 80025f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f4:	e00a      	b.n	800260c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4908      	ldr	r1, [pc, #32]	; (800261c <__NVIC_SetPriority+0x50>)
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3b04      	subs	r3, #4
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	440b      	add	r3, r1
 800260a:	761a      	strb	r2, [r3, #24]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f1c3 0307 	rsb	r3, r3, #7
 800263a:	2b04      	cmp	r3, #4
 800263c:	bf28      	it	cs
 800263e:	2304      	movcs	r3, #4
 8002640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3304      	adds	r3, #4
 8002646:	2b06      	cmp	r3, #6
 8002648:	d902      	bls.n	8002650 <NVIC_EncodePriority+0x30>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3b03      	subs	r3, #3
 800264e:	e000      	b.n	8002652 <NVIC_EncodePriority+0x32>
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	401a      	ands	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002668:	f04f 31ff 	mov.w	r1, #4294967295
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43d9      	mvns	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	4313      	orrs	r3, r2
         );
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	; 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff90 	bl	80025cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff2d 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f0:	f7ff ff42 	bl	8002578 <__NVIC_GetPriorityGrouping>
 80026f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff ff90 	bl	8002620 <NVIC_EncodePriority>
 8002700:	4602      	mov	r2, r0
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff5f 	bl	80025cc <__NVIC_SetPriority>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff35 	bl	8002594 <__NVIC_EnableIRQ>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffa2 	bl	8002684 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800275c:	2b02      	cmp	r3, #2
 800275e:	d008      	beq.n	8002772 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2204      	movs	r2, #4
 8002764:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e020      	b.n	80027b4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 020e 	bic.w	r2, r2, #14
 8002780:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2101      	movs	r1, #1
 800279c:	fa01 f202 	lsl.w	r2, r1, r2
 80027a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
	...

080027c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d005      	beq.n	80027e2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2204      	movs	r2, #4
 80027da:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e051      	b.n	8002886 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 020e 	bic.w	r2, r2, #14
 80027f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a22      	ldr	r2, [pc, #136]	; (8002890 <HAL_DMA_Abort_IT+0xd0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d029      	beq.n	8002860 <HAL_DMA_Abort_IT+0xa0>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a20      	ldr	r2, [pc, #128]	; (8002894 <HAL_DMA_Abort_IT+0xd4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d022      	beq.n	800285c <HAL_DMA_Abort_IT+0x9c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <HAL_DMA_Abort_IT+0xd8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d01a      	beq.n	8002856 <HAL_DMA_Abort_IT+0x96>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1d      	ldr	r2, [pc, #116]	; (800289c <HAL_DMA_Abort_IT+0xdc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d012      	beq.n	8002850 <HAL_DMA_Abort_IT+0x90>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_DMA_Abort_IT+0xe0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00a      	beq.n	800284a <HAL_DMA_Abort_IT+0x8a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1a      	ldr	r2, [pc, #104]	; (80028a4 <HAL_DMA_Abort_IT+0xe4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d102      	bne.n	8002844 <HAL_DMA_Abort_IT+0x84>
 800283e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002842:	e00e      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 8002844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002848:	e00b      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 800284a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800284e:	e008      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 8002850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002854:	e005      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 8002856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800285a:	e002      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 800285c:	2310      	movs	r3, #16
 800285e:	e000      	b.n	8002862 <HAL_DMA_Abort_IT+0xa2>
 8002860:	2301      	movs	r3, #1
 8002862:	4a11      	ldr	r2, [pc, #68]	; (80028a8 <HAL_DMA_Abort_IT+0xe8>)
 8002864:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4798      	blx	r3
    } 
  }
  return status;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40020008 	.word	0x40020008
 8002894:	4002001c 	.word	0x4002001c
 8002898:	40020030 	.word	0x40020030
 800289c:	40020044 	.word	0x40020044
 80028a0:	40020058 	.word	0x40020058
 80028a4:	4002006c 	.word	0x4002006c
 80028a8:	40020000 	.word	0x40020000

080028ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b08b      	sub	sp, #44	; 0x2c
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028b6:	2300      	movs	r3, #0
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028be:	e148      	b.n	8002b52 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028c0:	2201      	movs	r2, #1
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	429a      	cmp	r2, r3
 80028da:	f040 8137 	bne.w	8002b4c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4aa3      	ldr	r2, [pc, #652]	; (8002b70 <HAL_GPIO_Init+0x2c4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d05e      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 80028e8:	4aa1      	ldr	r2, [pc, #644]	; (8002b70 <HAL_GPIO_Init+0x2c4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d875      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 80028ee:	4aa1      	ldr	r2, [pc, #644]	; (8002b74 <HAL_GPIO_Init+0x2c8>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d058      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 80028f4:	4a9f      	ldr	r2, [pc, #636]	; (8002b74 <HAL_GPIO_Init+0x2c8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d86f      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 80028fa:	4a9f      	ldr	r2, [pc, #636]	; (8002b78 <HAL_GPIO_Init+0x2cc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d052      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 8002900:	4a9d      	ldr	r2, [pc, #628]	; (8002b78 <HAL_GPIO_Init+0x2cc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d869      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002906:	4a9d      	ldr	r2, [pc, #628]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d04c      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 800290c:	4a9b      	ldr	r2, [pc, #620]	; (8002b7c <HAL_GPIO_Init+0x2d0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d863      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002912:	4a9b      	ldr	r2, [pc, #620]	; (8002b80 <HAL_GPIO_Init+0x2d4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d046      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
 8002918:	4a99      	ldr	r2, [pc, #612]	; (8002b80 <HAL_GPIO_Init+0x2d4>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d85d      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 800291e:	2b12      	cmp	r3, #18
 8002920:	d82a      	bhi.n	8002978 <HAL_GPIO_Init+0xcc>
 8002922:	2b12      	cmp	r3, #18
 8002924:	d859      	bhi.n	80029da <HAL_GPIO_Init+0x12e>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <HAL_GPIO_Init+0x80>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	080029a7 	.word	0x080029a7
 8002930:	08002981 	.word	0x08002981
 8002934:	08002993 	.word	0x08002993
 8002938:	080029d5 	.word	0x080029d5
 800293c:	080029db 	.word	0x080029db
 8002940:	080029db 	.word	0x080029db
 8002944:	080029db 	.word	0x080029db
 8002948:	080029db 	.word	0x080029db
 800294c:	080029db 	.word	0x080029db
 8002950:	080029db 	.word	0x080029db
 8002954:	080029db 	.word	0x080029db
 8002958:	080029db 	.word	0x080029db
 800295c:	080029db 	.word	0x080029db
 8002960:	080029db 	.word	0x080029db
 8002964:	080029db 	.word	0x080029db
 8002968:	080029db 	.word	0x080029db
 800296c:	080029db 	.word	0x080029db
 8002970:	08002989 	.word	0x08002989
 8002974:	0800299d 	.word	0x0800299d
 8002978:	4a82      	ldr	r2, [pc, #520]	; (8002b84 <HAL_GPIO_Init+0x2d8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800297e:	e02c      	b.n	80029da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	623b      	str	r3, [r7, #32]
          break;
 8002986:	e029      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	3304      	adds	r3, #4
 800298e:	623b      	str	r3, [r7, #32]
          break;
 8002990:	e024      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	3308      	adds	r3, #8
 8002998:	623b      	str	r3, [r7, #32]
          break;
 800299a:	e01f      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	330c      	adds	r3, #12
 80029a2:	623b      	str	r3, [r7, #32]
          break;
 80029a4:	e01a      	b.n	80029dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029ae:	2304      	movs	r3, #4
 80029b0:	623b      	str	r3, [r7, #32]
          break;
 80029b2:	e013      	b.n	80029dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029bc:	2308      	movs	r3, #8
 80029be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	611a      	str	r2, [r3, #16]
          break;
 80029c6:	e009      	b.n	80029dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c8:	2308      	movs	r3, #8
 80029ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	615a      	str	r2, [r3, #20]
          break;
 80029d2:	e003      	b.n	80029dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
          break;
 80029d8:	e000      	b.n	80029dc <HAL_GPIO_Init+0x130>
          break;
 80029da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2bff      	cmp	r3, #255	; 0xff
 80029e0:	d801      	bhi.n	80029e6 <HAL_GPIO_Init+0x13a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	e001      	b.n	80029ea <HAL_GPIO_Init+0x13e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2bff      	cmp	r3, #255	; 0xff
 80029f0:	d802      	bhi.n	80029f8 <HAL_GPIO_Init+0x14c>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	e002      	b.n	80029fe <HAL_GPIO_Init+0x152>
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	3b08      	subs	r3, #8
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	210f      	movs	r1, #15
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	401a      	ands	r2, r3
 8002a10:	6a39      	ldr	r1, [r7, #32]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8090 	beq.w	8002b4c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a2c:	4b56      	ldr	r3, [pc, #344]	; (8002b88 <HAL_GPIO_Init+0x2dc>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	4a55      	ldr	r2, [pc, #340]	; (8002b88 <HAL_GPIO_Init+0x2dc>)
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6193      	str	r3, [r2, #24]
 8002a38:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_GPIO_Init+0x2dc>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a44:	4a51      	ldr	r2, [pc, #324]	; (8002b8c <HAL_GPIO_Init+0x2e0>)
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a49      	ldr	r2, [pc, #292]	; (8002b90 <HAL_GPIO_Init+0x2e4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00d      	beq.n	8002a8c <HAL_GPIO_Init+0x1e0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a48      	ldr	r2, [pc, #288]	; (8002b94 <HAL_GPIO_Init+0x2e8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <HAL_GPIO_Init+0x1dc>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a47      	ldr	r2, [pc, #284]	; (8002b98 <HAL_GPIO_Init+0x2ec>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d101      	bne.n	8002a84 <HAL_GPIO_Init+0x1d8>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e004      	b.n	8002a8e <HAL_GPIO_Init+0x1e2>
 8002a84:	2303      	movs	r3, #3
 8002a86:	e002      	b.n	8002a8e <HAL_GPIO_Init+0x1e2>
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e000      	b.n	8002a8e <HAL_GPIO_Init+0x1e2>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	f002 0203 	and.w	r2, r2, #3
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	4093      	lsls	r3, r2
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a9e:	493b      	ldr	r1, [pc, #236]	; (8002b8c <HAL_GPIO_Init+0x2e0>)
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ab8:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4937      	ldr	r1, [pc, #220]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ac6:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	4933      	ldr	r1, [pc, #204]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ae0:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	492d      	ldr	r1, [pc, #180]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]
 8002aec:	e006      	b.n	8002afc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aee:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	4929      	ldr	r1, [pc, #164]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d006      	beq.n	8002b16 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4923      	ldr	r1, [pc, #140]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]
 8002b14:	e006      	b.n	8002b24 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b16:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	491f      	ldr	r1, [pc, #124]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d006      	beq.n	8002b3e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b30:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	4919      	ldr	r1, [pc, #100]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60cb      	str	r3, [r1, #12]
 8002b3c:	e006      	b.n	8002b4c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	4915      	ldr	r1, [pc, #84]	; (8002b9c <HAL_GPIO_Init+0x2f0>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	3301      	adds	r3, #1
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f47f aeaf 	bne.w	80028c0 <HAL_GPIO_Init+0x14>
  }
}
 8002b62:	bf00      	nop
 8002b64:	bf00      	nop
 8002b66:	372c      	adds	r7, #44	; 0x2c
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	10320000 	.word	0x10320000
 8002b74:	10310000 	.word	0x10310000
 8002b78:	10220000 	.word	0x10220000
 8002b7c:	10210000 	.word	0x10210000
 8002b80:	10120000 	.word	0x10120000
 8002b84:	10110000 	.word	0x10110000
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40010000 	.word	0x40010000
 8002b90:	40010800 	.word	0x40010800
 8002b94:	40010c00 	.word	0x40010c00
 8002b98:	40011000 	.word	0x40011000
 8002b9c:	40010400 	.word	0x40010400

08002ba0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	887b      	ldrh	r3, [r7, #2]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
 8002bbc:	e001      	b.n	8002bc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	807b      	strh	r3, [r7, #2]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bde:	787b      	ldrb	r3, [r7, #1]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be4:	887a      	ldrh	r2, [r7, #2]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bea:	e003      	b.n	8002bf4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bec:	887b      	ldrh	r3, [r7, #2]
 8002bee:	041a      	lsls	r2, r3, #16
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	611a      	str	r2, [r3, #16]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c10:	887a      	ldrh	r2, [r7, #2]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4013      	ands	r3, r2
 8002c16:	041a      	lsls	r2, r3, #16
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	43d9      	mvns	r1, r3
 8002c1c:	887b      	ldrh	r3, [r7, #2]
 8002c1e:	400b      	ands	r3, r1
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	611a      	str	r2, [r3, #16]
}
 8002c26:	bf00      	nop
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e26c      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8087 	beq.w	8002d5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c50:	4b92      	ldr	r3, [pc, #584]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d00c      	beq.n	8002c76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c5c:	4b8f      	ldr	r3, [pc, #572]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d112      	bne.n	8002c8e <HAL_RCC_OscConfig+0x5e>
 8002c68:	4b8c      	ldr	r3, [pc, #560]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c74:	d10b      	bne.n	8002c8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c76:	4b89      	ldr	r3, [pc, #548]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d06c      	beq.n	8002d5c <HAL_RCC_OscConfig+0x12c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d168      	bne.n	8002d5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e246      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x76>
 8002c98:	4b80      	ldr	r3, [pc, #512]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a7f      	ldr	r2, [pc, #508]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	e02e      	b.n	8002d04 <HAL_RCC_OscConfig+0xd4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x98>
 8002cae:	4b7b      	ldr	r3, [pc, #492]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7a      	ldr	r2, [pc, #488]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b78      	ldr	r3, [pc, #480]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a77      	ldr	r2, [pc, #476]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc4:	6013      	str	r3, [r2, #0]
 8002cc6:	e01d      	b.n	8002d04 <HAL_RCC_OscConfig+0xd4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0xbc>
 8002cd2:	4b72      	ldr	r3, [pc, #456]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a71      	ldr	r2, [pc, #452]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b6f      	ldr	r3, [pc, #444]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6e      	ldr	r2, [pc, #440]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e00b      	b.n	8002d04 <HAL_RCC_OscConfig+0xd4>
 8002cec:	4b6b      	ldr	r3, [pc, #428]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a6a      	ldr	r2, [pc, #424]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a67      	ldr	r2, [pc, #412]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7ff fc06 	bl	800251c <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d14:	f7ff fc02 	bl	800251c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1fa      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	4b5d      	ldr	r3, [pc, #372]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0f0      	beq.n	8002d14 <HAL_RCC_OscConfig+0xe4>
 8002d32:	e014      	b.n	8002d5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7ff fbf2 	bl	800251c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d3c:	f7ff fbee 	bl	800251c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b64      	cmp	r3, #100	; 0x64
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e1e6      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x10c>
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d063      	beq.n	8002e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d6a:	4b4c      	ldr	r3, [pc, #304]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d76:	4b49      	ldr	r3, [pc, #292]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d11c      	bne.n	8002dbc <HAL_RCC_OscConfig+0x18c>
 8002d82:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d116      	bne.n	8002dbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8e:	4b43      	ldr	r3, [pc, #268]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <HAL_RCC_OscConfig+0x176>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d001      	beq.n	8002da6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e1ba      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da6:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4939      	ldr	r1, [pc, #228]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dba:	e03a      	b.n	8002e32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc4:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dca:	f7ff fba7 	bl	800251c <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd2:	f7ff fba3 	bl	800251c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e19b      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de4:	4b2d      	ldr	r3, [pc, #180]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0f0      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4927      	ldr	r1, [pc, #156]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
 8002e04:	e015      	b.n	8002e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e06:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <HAL_RCC_OscConfig+0x270>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7ff fb86 	bl	800251c <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e14:	f7ff fb82 	bl	800251c <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e17a      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0308 	and.w	r3, r3, #8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d03a      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d019      	beq.n	8002e7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4c:	f7ff fb66 	bl	800251c <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e54:	f7ff fb62 	bl	800251c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e15a      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <HAL_RCC_OscConfig+0x26c>)
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e72:	2001      	movs	r0, #1
 8002e74:	f000 fad8 	bl	8003428 <RCC_Delay>
 8002e78:	e01c      	b.n	8002eb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e80:	f7ff fb4c 	bl	800251c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e86:	e00f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e88:	f7ff fb48 	bl	800251c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d908      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e140      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	42420000 	.word	0x42420000
 8002ea4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea8:	4b9e      	ldr	r3, [pc, #632]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e9      	bne.n	8002e88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80a6 	beq.w	800300e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec6:	4b97      	ldr	r3, [pc, #604]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10d      	bne.n	8002eee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	4b94      	ldr	r3, [pc, #592]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	4a93      	ldr	r2, [pc, #588]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002edc:	61d3      	str	r3, [r2, #28]
 8002ede:	4b91      	ldr	r3, [pc, #580]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eee:	4b8e      	ldr	r3, [pc, #568]	; (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d118      	bne.n	8002f2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efa:	4b8b      	ldr	r3, [pc, #556]	; (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a8a      	ldr	r2, [pc, #552]	; (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f06:	f7ff fb09 	bl	800251c <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f0e:	f7ff fb05 	bl	800251c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b64      	cmp	r3, #100	; 0x64
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0fd      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f20:	4b81      	ldr	r3, [pc, #516]	; (8003128 <HAL_RCC_OscConfig+0x4f8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d106      	bne.n	8002f42 <HAL_RCC_OscConfig+0x312>
 8002f34:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	4a7a      	ldr	r2, [pc, #488]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f3a:	f043 0301 	orr.w	r3, r3, #1
 8002f3e:	6213      	str	r3, [r2, #32]
 8002f40:	e02d      	b.n	8002f9e <HAL_RCC_OscConfig+0x36e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0x334>
 8002f4a:	4b76      	ldr	r3, [pc, #472]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4a75      	ldr	r2, [pc, #468]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f50:	f023 0301 	bic.w	r3, r3, #1
 8002f54:	6213      	str	r3, [r2, #32]
 8002f56:	4b73      	ldr	r3, [pc, #460]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	4a72      	ldr	r2, [pc, #456]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f5c:	f023 0304 	bic.w	r3, r3, #4
 8002f60:	6213      	str	r3, [r2, #32]
 8002f62:	e01c      	b.n	8002f9e <HAL_RCC_OscConfig+0x36e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b05      	cmp	r3, #5
 8002f6a:	d10c      	bne.n	8002f86 <HAL_RCC_OscConfig+0x356>
 8002f6c:	4b6d      	ldr	r3, [pc, #436]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	4a6c      	ldr	r2, [pc, #432]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f72:	f043 0304 	orr.w	r3, r3, #4
 8002f76:	6213      	str	r3, [r2, #32]
 8002f78:	4b6a      	ldr	r3, [pc, #424]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4a69      	ldr	r2, [pc, #420]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6213      	str	r3, [r2, #32]
 8002f84:	e00b      	b.n	8002f9e <HAL_RCC_OscConfig+0x36e>
 8002f86:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4a66      	ldr	r2, [pc, #408]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	6213      	str	r3, [r2, #32]
 8002f92:	4b64      	ldr	r3, [pc, #400]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	4a63      	ldr	r2, [pc, #396]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002f98:	f023 0304 	bic.w	r3, r3, #4
 8002f9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d015      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa6:	f7ff fab9 	bl	800251c <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fac:	e00a      	b.n	8002fc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fae:	f7ff fab5 	bl	800251c <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e0ab      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	4b57      	ldr	r3, [pc, #348]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ee      	beq.n	8002fae <HAL_RCC_OscConfig+0x37e>
 8002fd0:	e014      	b.n	8002ffc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd2:	f7ff faa3 	bl	800251c <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd8:	e00a      	b.n	8002ff0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fda:	f7ff fa9f 	bl	800251c <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e095      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff0:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1ee      	bne.n	8002fda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ffc:	7dfb      	ldrb	r3, [r7, #23]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d105      	bne.n	800300e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003002:	4b48      	ldr	r3, [pc, #288]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	4a47      	ldr	r2, [pc, #284]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800300c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8081 	beq.w	800311a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003018:	4b42      	ldr	r3, [pc, #264]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b08      	cmp	r3, #8
 8003022:	d061      	beq.n	80030e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d146      	bne.n	80030ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302c:	4b3f      	ldr	r3, [pc, #252]	; (800312c <HAL_RCC_OscConfig+0x4fc>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7ff fa73 	bl	800251c <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303a:	f7ff fa6f 	bl	800251c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e067      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304c:	4b35      	ldr	r3, [pc, #212]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003060:	d108      	bne.n	8003074 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003062:	4b30      	ldr	r3, [pc, #192]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	492d      	ldr	r1, [pc, #180]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a19      	ldr	r1, [r3, #32]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	430b      	orrs	r3, r1
 8003086:	4927      	ldr	r1, [pc, #156]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308c:	4b27      	ldr	r3, [pc, #156]	; (800312c <HAL_RCC_OscConfig+0x4fc>)
 800308e:	2201      	movs	r2, #1
 8003090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003092:	f7ff fa43 	bl	800251c <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003098:	e008      	b.n	80030ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309a:	f7ff fa3f 	bl	800251c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e037      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f0      	beq.n	800309a <HAL_RCC_OscConfig+0x46a>
 80030b8:	e02f      	b.n	800311a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ba:	4b1c      	ldr	r3, [pc, #112]	; (800312c <HAL_RCC_OscConfig+0x4fc>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7ff fa2c 	bl	800251c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7ff fa28 	bl	800251c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e020      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030da:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x498>
 80030e6:	e018      	b.n	800311a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e013      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030f4:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_OscConfig+0x4f4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	429a      	cmp	r2, r3
 8003106:	d106      	bne.n	8003116 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d001      	beq.n	800311a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	40007000 	.word	0x40007000
 800312c:	42420060 	.word	0x42420060

08003130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0d0      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003144:	4b6a      	ldr	r3, [pc, #424]	; (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d910      	bls.n	8003174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b67      	ldr	r3, [pc, #412]	; (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 0207 	bic.w	r2, r3, #7
 800315a:	4965      	ldr	r1, [pc, #404]	; (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	; (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d040      	beq.n	8003250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d115      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e073      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06b      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4936      	ldr	r1, [pc, #216]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003220:	f7ff f97c 	bl	800251c <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7ff f978 	bl	800251c <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e053      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d210      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 0207 	bic.w	r2, r3, #7
 8003266:	4922      	ldr	r1, [pc, #136]	; (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	4313      	orrs	r3, r2
 800329c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	490a      	ldr	r1, [pc, #40]	; (80032f8 <HAL_RCC_ClockConfig+0x1c8>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1cc>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1d0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff f8da 	bl	8002498 <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08004f4c 	.word	0x08004f4c
 80032fc:	200000e0 	.word	0x200000e0
 8003300:	200000e4 	.word	0x200000e4

08003304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b490      	push	{r4, r7}
 8003306:	b08a      	sub	sp, #40	; 0x28
 8003308:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800330a:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800330c:	1d3c      	adds	r4, r7, #4
 800330e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003314:	f240 2301 	movw	r3, #513	; 0x201
 8003318:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	2300      	movs	r3, #0
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	2300      	movs	r3, #0
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b04      	cmp	r3, #4
 800333c:	d002      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x40>
 800333e:	2b08      	cmp	r3, #8
 8003340:	d003      	beq.n	800334a <HAL_RCC_GetSysClockFreq+0x46>
 8003342:	e02d      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003346:	623b      	str	r3, [r7, #32]
      break;
 8003348:	e02d      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	0c9b      	lsrs	r3, r3, #18
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003356:	4413      	add	r3, r2
 8003358:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800335c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d013      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003368:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0c5b      	lsrs	r3, r3, #17
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003376:	4413      	add	r3, r2
 8003378:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800337c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003382:	fb02 f203 	mul.w	r2, r2, r3
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
 800338e:	e004      	b.n	800339a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003394:	fb02 f303 	mul.w	r3, r2, r3
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	623b      	str	r3, [r7, #32]
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80033a2:	623b      	str	r3, [r7, #32]
      break;
 80033a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3728      	adds	r7, #40	; 0x28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc90      	pop	{r4, r7}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	08004f3c 	.word	0x08004f3c
 80033b8:	40021000 	.word	0x40021000
 80033bc:	007a1200 	.word	0x007a1200
 80033c0:	003d0900 	.word	0x003d0900

080033c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c8:	4b02      	ldr	r3, [pc, #8]	; (80033d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	200000e0 	.word	0x200000e0

080033d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033dc:	f7ff fff2 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	f003 0307 	and.w	r3, r3, #7
 80033ec:	4903      	ldr	r1, [pc, #12]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40021000 	.word	0x40021000
 80033fc:	08004f5c 	.word	0x08004f5c

08003400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003404:	f7ff ffde 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x20>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	0adb      	lsrs	r3, r3, #11
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4903      	ldr	r1, [pc, #12]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	08004f5c 	.word	0x08004f5c

08003428 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <RCC_Delay+0x34>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <RCC_Delay+0x38>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0a5b      	lsrs	r3, r3, #9
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003444:	bf00      	nop
  }
  while (Delay --);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1e5a      	subs	r2, r3, #1
 800344a:	60fa      	str	r2, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f9      	bne.n	8003444 <RCC_Delay+0x1c>
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr
 800345c:	200000e0 	.word	0x200000e0
 8003460:	10624dd3 	.word	0x10624dd3

08003464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e041      	b.n	80034fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fe fd60 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3304      	adds	r3, #4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4610      	mov	r0, r2
 80034a4:	f000 fa6a 	bl	800397c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d001      	beq.n	800351c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e035      	b.n	8003588 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a16      	ldr	r2, [pc, #88]	; (8003594 <HAL_TIM_Base_Start_IT+0x90>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d009      	beq.n	8003552 <HAL_TIM_Base_Start_IT+0x4e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003546:	d004      	beq.n	8003552 <HAL_TIM_Base_Start_IT+0x4e>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a12      	ldr	r2, [pc, #72]	; (8003598 <HAL_TIM_Base_Start_IT+0x94>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d111      	bne.n	8003576 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b06      	cmp	r3, #6
 8003562:	d010      	beq.n	8003586 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003574:	e007      	b.n	8003586 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40000400 	.word	0x40000400

0800359c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d122      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d11b      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0202 	mvn.w	r2, #2
 80035c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9b1 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f9a4 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f9b3 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	2b04      	cmp	r3, #4
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0304 	and.w	r3, r3, #4
 8003610:	2b04      	cmp	r3, #4
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0204 	mvn.w	r2, #4
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2202      	movs	r2, #2
 8003622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f987 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f97a 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f989 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b08      	cmp	r3, #8
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b08      	cmp	r3, #8
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0208 	mvn.w	r2, #8
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2204      	movs	r2, #4
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 0303 	and.w	r3, r3, #3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f95d 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f950 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f95f 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	2b10      	cmp	r3, #16
 80036ac:	d122      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d11b      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0210 	mvn.w	r2, #16
 80036c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2208      	movs	r2, #8
 80036ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f933 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 80036e0:	e005      	b.n	80036ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f926 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f935 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d10e      	bne.n	8003720 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d107      	bne.n	8003720 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0201 	mvn.w	r2, #1
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fe f928 	bl	8001970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d10e      	bne.n	800374c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003738:	2b80      	cmp	r3, #128	; 0x80
 800373a:	d107      	bne.n	800374c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fa67 	bl	8003c1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d10e      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d107      	bne.n	8003778 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f8f9 	bl	800396a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b20      	cmp	r3, #32
 8003784:	d10e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b20      	cmp	r3, #32
 8003792:	d107      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0220 	mvn.w	r2, #32
 800379c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa32 	bl	8003c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_TIM_ConfigClockSource+0x18>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e0b3      	b.n	800392c <HAL_TIM_ConfigClockSource+0x180>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fc:	d03e      	beq.n	800387c <HAL_TIM_ConfigClockSource+0xd0>
 80037fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003802:	f200 8087 	bhi.w	8003914 <HAL_TIM_ConfigClockSource+0x168>
 8003806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380a:	f000 8085 	beq.w	8003918 <HAL_TIM_ConfigClockSource+0x16c>
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003812:	d87f      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 8003814:	2b70      	cmp	r3, #112	; 0x70
 8003816:	d01a      	beq.n	800384e <HAL_TIM_ConfigClockSource+0xa2>
 8003818:	2b70      	cmp	r3, #112	; 0x70
 800381a:	d87b      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 800381c:	2b60      	cmp	r3, #96	; 0x60
 800381e:	d050      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x116>
 8003820:	2b60      	cmp	r3, #96	; 0x60
 8003822:	d877      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 8003824:	2b50      	cmp	r3, #80	; 0x50
 8003826:	d03c      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0xf6>
 8003828:	2b50      	cmp	r3, #80	; 0x50
 800382a:	d873      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d058      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x136>
 8003830:	2b40      	cmp	r3, #64	; 0x40
 8003832:	d86f      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 8003834:	2b30      	cmp	r3, #48	; 0x30
 8003836:	d064      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x156>
 8003838:	2b30      	cmp	r3, #48	; 0x30
 800383a:	d86b      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 800383c:	2b20      	cmp	r3, #32
 800383e:	d060      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x156>
 8003840:	2b20      	cmp	r3, #32
 8003842:	d867      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d05c      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x156>
 8003848:	2b10      	cmp	r3, #16
 800384a:	d05a      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800384c:	e062      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6899      	ldr	r1, [r3, #8]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f000 f95c 	bl	8003b1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003870:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	609a      	str	r2, [r3, #8]
      break;
 800387a:	e04e      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6899      	ldr	r1, [r3, #8]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f000 f945 	bl	8003b1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389e:	609a      	str	r2, [r3, #8]
      break;
 80038a0:	e03b      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 f8bc 	bl	8003a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2150      	movs	r1, #80	; 0x50
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f913 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 80038c0:	e02b      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 f8da 	bl	8003a88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2160      	movs	r1, #96	; 0x60
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f903 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 80038e0:	e01b      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f000 f89c 	bl	8003a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2140      	movs	r1, #64	; 0x40
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f8f3 	bl	8003ae6 <TIM_ITRx_SetConfig>
      break;
 8003900:	e00b      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f000 f8ea 	bl	8003ae6 <TIM_ITRx_SetConfig>
        break;
 8003912:	e002      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003914:	bf00      	nop
 8003916:	e000      	b.n	800391a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003918:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a25      	ldr	r2, [pc, #148]	; (8003a24 <TIM_Base_SetConfig+0xa8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d007      	beq.n	80039a4 <TIM_Base_SetConfig+0x28>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d003      	beq.n	80039a4 <TIM_Base_SetConfig+0x28>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a22      	ldr	r2, [pc, #136]	; (8003a28 <TIM_Base_SetConfig+0xac>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d108      	bne.n	80039b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a1a      	ldr	r2, [pc, #104]	; (8003a24 <TIM_Base_SetConfig+0xa8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_Base_SetConfig+0x52>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c4:	d003      	beq.n	80039ce <TIM_Base_SetConfig+0x52>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <TIM_Base_SetConfig+0xac>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d108      	bne.n	80039e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a07      	ldr	r2, [pc, #28]	; (8003a24 <TIM_Base_SetConfig+0xa8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d103      	bne.n	8003a14 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	615a      	str	r2, [r3, #20]
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40000400 	.word	0x40000400

08003a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0201 	bic.w	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f023 030a 	bic.w	r3, r3, #10
 8003a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	621a      	str	r2, [r3, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f023 0210 	bic.w	r2, r3, #16
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ab2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	031b      	lsls	r3, r3, #12
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ac4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	621a      	str	r2, [r3, #32]
}
 8003adc:	bf00      	nop
 8003ade:	371c      	adds	r7, #28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bc80      	pop	{r7}
 8003ae4:	4770      	bx	lr

08003ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f043 0307 	orr.w	r3, r3, #7
 8003b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	609a      	str	r2, [r3, #8]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b087      	sub	sp, #28
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	021a      	lsls	r2, r3, #8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	609a      	str	r2, [r3, #8]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e041      	b.n	8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a10      	ldr	r2, [pc, #64]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d10c      	bne.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40000400 	.word	0x40000400

08003c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e03f      	b.n	8003cbe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d106      	bne.n	8003c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fe f9a0 	bl	8001f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2224      	movs	r2, #36	; 0x24
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fc25 	bl	80044c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b08a      	sub	sp, #40	; 0x28
 8003cca:	af02      	add	r7, sp, #8
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	d17c      	bne.n	8003de0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_UART_Transmit+0x2c>
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e075      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_UART_Transmit+0x3e>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e06e      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2221      	movs	r2, #33	; 0x21
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d1a:	f7fe fbff 	bl	800251c <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	88fa      	ldrh	r2, [r7, #6]
 8003d2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d34:	d108      	bne.n	8003d48 <HAL_UART_Transmit+0x82>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	e003      	b.n	8003d50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d58:	e02a      	b.n	8003db0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2200      	movs	r2, #0
 8003d62:	2180      	movs	r1, #128	; 0x80
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f000 fa11 	bl	800418c <UART_WaitOnFlagUntilTimeout>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e036      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10b      	bne.n	8003d92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	61bb      	str	r3, [r7, #24]
 8003d90:	e007      	b.n	8003da2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1cf      	bne.n	8003d5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2140      	movs	r1, #64	; 0x40
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f9e1 	bl	800418c <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e006      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	f003 0320 	and.w	r3, r3, #32
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_UART_IRQHandler+0x52>
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fa99 	bl	800436e <UART_Receive_IT>
      return;
 8003e3c:	e17b      	b.n	8004136 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 80b1 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x1bc>
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_UART_IRQHandler+0x70>
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80a6 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_UART_IRQHandler+0x90>
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	f043 0201 	orr.w	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_UART_IRQHandler+0xb0>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	f043 0202 	orr.w	r2, r3, #2
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00a      	beq.n	8003ebc <HAL_UART_IRQHandler+0xd0>
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f043 0204 	orr.w	r2, r3, #4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00f      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xfa>
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d104      	bne.n	8003eda <HAL_UART_IRQHandler+0xee>
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f043 0208 	orr.w	r2, r3, #8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 811e 	beq.w	800412c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	f003 0320 	and.w	r3, r3, #32
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d007      	beq.n	8003f0a <HAL_UART_IRQHandler+0x11e>
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	f003 0320 	and.w	r3, r3, #32
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fa32 	bl	800436e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <HAL_UART_IRQHandler+0x146>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d031      	beq.n	8003f96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f974 	bl	8004220 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d023      	beq.n	8003f8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d013      	beq.n	8003f86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	4a76      	ldr	r2, [pc, #472]	; (800413c <HAL_UART_IRQHandler+0x350>)
 8003f64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fe fc28 	bl	80027c0 <HAL_DMA_Abort_IT>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d016      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f80:	4610      	mov	r0, r2
 8003f82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f84:	e00e      	b.n	8003fa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8ec 	bl	8004164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e00a      	b.n	8003fa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8e8 	bl	8004164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f94:	e006      	b.n	8003fa4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8e4 	bl	8004164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fa2:	e0c3      	b.n	800412c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	bf00      	nop
    return;
 8003fa6:	e0c1      	b.n	800412c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	f040 80a1 	bne.w	80040f4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 809b 	beq.w	80040f4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	f003 0310 	and.w	r3, r3, #16
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8095 	beq.w	80040f4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04e      	beq.n	800408c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003ff8:	8a3b      	ldrh	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8098 	beq.w	8004130 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004004:	8a3a      	ldrh	r2, [r7, #16]
 8004006:	429a      	cmp	r2, r3
 8004008:	f080 8092 	bcs.w	8004130 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8a3a      	ldrh	r2, [r7, #16]
 8004010:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	2b20      	cmp	r3, #32
 800401a:	d02b      	beq.n	8004074 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800402a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695a      	ldr	r2, [r3, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800404a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0210 	bic.w	r2, r2, #16
 8004068:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fb6b 	bl	800274a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800407c:	b29b      	uxth	r3, r3
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	b29b      	uxth	r3, r3
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f876 	bl	8004176 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800408a:	e051      	b.n	8004130 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004094:	b29b      	uxth	r3, r3
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d047      	beq.n	8004134 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80040a4:	8a7b      	ldrh	r3, [r7, #18]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d044      	beq.n	8004134 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040b8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0210 	bic.w	r2, r2, #16
 80040e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040e8:	8a7b      	ldrh	r3, [r7, #18]
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f842 	bl	8004176 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80040f2:	e01f      	b.n	8004134 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <HAL_UART_IRQHandler+0x324>
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f8c9 	bl	80042a0 <UART_Transmit_IT>
    return;
 800410e:	e012      	b.n	8004136 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <HAL_UART_IRQHandler+0x34a>
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f90a 	bl	800433e <UART_EndTransmit_IT>
    return;
 800412a:	e004      	b.n	8004136 <HAL_UART_IRQHandler+0x34a>
    return;
 800412c:	bf00      	nop
 800412e:	e002      	b.n	8004136 <HAL_UART_IRQHandler+0x34a>
      return;
 8004130:	bf00      	nop
 8004132:	e000      	b.n	8004136 <HAL_UART_IRQHandler+0x34a>
      return;
 8004134:	bf00      	nop
  }
}
 8004136:	3728      	adds	r7, #40	; 0x28
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	08004279 	.word	0x08004279

08004140 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	460b      	mov	r3, r1
 8004180:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr

0800418c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	4613      	mov	r3, r2
 800419a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419c:	e02c      	b.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a4:	d028      	beq.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <UART_WaitOnFlagUntilTimeout+0x30>
 80041ac:	f7fe f9b6 	bl	800251c <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d21d      	bcs.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041ca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e00f      	b.n	8004218 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4013      	ands	r3, r2
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	429a      	cmp	r2, r3
 8004206:	bf0c      	ite	eq
 8004208:	2301      	moveq	r3, #1
 800420a:	2300      	movne	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	429a      	cmp	r2, r3
 8004214:	d0c3      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004236:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	2b01      	cmp	r3, #1
 800424e:	d107      	bne.n	8004260 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0210 	bic.w	r2, r2, #16
 800425e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff ff66 	bl	8004164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b21      	cmp	r3, #33	; 0x21
 80042b2:	d13e      	bne.n	8004332 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	d114      	bne.n	80042e8 <UART_Transmit_IT+0x48>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d110      	bne.n	80042e8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	1c9a      	adds	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	621a      	str	r2, [r3, #32]
 80042e6:	e008      	b.n	80042fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	1c59      	adds	r1, r3, #1
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6211      	str	r1, [r2, #32]
 80042f2:	781a      	ldrb	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29b      	uxth	r3, r3
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	4619      	mov	r1, r3
 8004308:	84d1      	strh	r1, [r2, #38]	; 0x26
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10f      	bne.n	800432e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800431c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800432c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	e000      	b.n	8004334 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004332:	2302      	movs	r3, #2
  }
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004354:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff feee 	bl	8004140 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b086      	sub	sp, #24
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b22      	cmp	r3, #34	; 0x22
 8004380:	f040 8099 	bne.w	80044b6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438c:	d117      	bne.n	80043be <UART_Receive_IT+0x50>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d113      	bne.n	80043be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	1c9a      	adds	r2, r3, #2
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28
 80043bc:	e026      	b.n	800440c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d0:	d007      	beq.n	80043e2 <UART_Receive_IT+0x74>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10a      	bne.n	80043f0 <UART_Receive_IT+0x82>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	e008      	b.n	8004402 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29b      	uxth	r3, r3
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	4619      	mov	r1, r3
 800441a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800441c:	2b00      	cmp	r3, #0
 800441e:	d148      	bne.n	80044b2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0220 	bic.w	r2, r2, #32
 800442e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800443e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	2b01      	cmp	r3, #1
 800445e:	d123      	bne.n	80044a8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0210 	bic.w	r2, r2, #16
 8004474:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b10      	cmp	r3, #16
 8004482:	d10a      	bne.n	800449a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fe68 	bl	8004176 <HAL_UARTEx_RxEventCallback>
 80044a6:	e002      	b.n	80044ae <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fe52 	bl	8004152 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e002      	b.n	80044b8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044fa:	f023 030c 	bic.w	r3, r3, #12
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	430b      	orrs	r3, r1
 8004506:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2c      	ldr	r2, [pc, #176]	; (80045d4 <UART_SetConfig+0x114>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d103      	bne.n	8004530 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004528:	f7fe ff6a 	bl	8003400 <HAL_RCC_GetPCLK2Freq>
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	e002      	b.n	8004536 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004530:	f7fe ff52 	bl	80033d8 <HAL_RCC_GetPCLK1Freq>
 8004534:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009a      	lsls	r2, r3, #2
 8004540:	441a      	add	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	4a22      	ldr	r2, [pc, #136]	; (80045d8 <UART_SetConfig+0x118>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	0119      	lsls	r1, r3, #4
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4613      	mov	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	009a      	lsls	r2, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	fbb2 f2f3 	udiv	r2, r2, r3
 800456c:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <UART_SetConfig+0x118>)
 800456e:	fba3 0302 	umull	r0, r3, r3, r2
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2064      	movs	r0, #100	; 0x64
 8004576:	fb00 f303 	mul.w	r3, r0, r3
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	3332      	adds	r3, #50	; 0x32
 8004580:	4a15      	ldr	r2, [pc, #84]	; (80045d8 <UART_SetConfig+0x118>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458c:	4419      	add	r1, r3
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009a      	lsls	r2, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <UART_SetConfig+0x118>)
 80045a6:	fba3 0302 	umull	r0, r3, r3, r2
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2064      	movs	r0, #100	; 0x64
 80045ae:	fb00 f303 	mul.w	r3, r0, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	3332      	adds	r3, #50	; 0x32
 80045b8:	4a07      	ldr	r2, [pc, #28]	; (80045d8 <UART_SetConfig+0x118>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	f003 020f 	and.w	r2, r3, #15
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	440a      	add	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40013800 	.word	0x40013800
 80045d8:	51eb851f 	.word	0x51eb851f

080045dc <__errno>:
 80045dc:	4b01      	ldr	r3, [pc, #4]	; (80045e4 <__errno+0x8>)
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	200000ec 	.word	0x200000ec

080045e8 <__libc_init_array>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	2600      	movs	r6, #0
 80045ec:	4d0c      	ldr	r5, [pc, #48]	; (8004620 <__libc_init_array+0x38>)
 80045ee:	4c0d      	ldr	r4, [pc, #52]	; (8004624 <__libc_init_array+0x3c>)
 80045f0:	1b64      	subs	r4, r4, r5
 80045f2:	10a4      	asrs	r4, r4, #2
 80045f4:	42a6      	cmp	r6, r4
 80045f6:	d109      	bne.n	800460c <__libc_init_array+0x24>
 80045f8:	f000 fc5c 	bl	8004eb4 <_init>
 80045fc:	2600      	movs	r6, #0
 80045fe:	4d0a      	ldr	r5, [pc, #40]	; (8004628 <__libc_init_array+0x40>)
 8004600:	4c0a      	ldr	r4, [pc, #40]	; (800462c <__libc_init_array+0x44>)
 8004602:	1b64      	subs	r4, r4, r5
 8004604:	10a4      	asrs	r4, r4, #2
 8004606:	42a6      	cmp	r6, r4
 8004608:	d105      	bne.n	8004616 <__libc_init_array+0x2e>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004610:	4798      	blx	r3
 8004612:	3601      	adds	r6, #1
 8004614:	e7ee      	b.n	80045f4 <__libc_init_array+0xc>
 8004616:	f855 3b04 	ldr.w	r3, [r5], #4
 800461a:	4798      	blx	r3
 800461c:	3601      	adds	r6, #1
 800461e:	e7f2      	b.n	8004606 <__libc_init_array+0x1e>
 8004620:	08004f98 	.word	0x08004f98
 8004624:	08004f98 	.word	0x08004f98
 8004628:	08004f98 	.word	0x08004f98
 800462c:	08004f9c 	.word	0x08004f9c

08004630 <memset>:
 8004630:	4603      	mov	r3, r0
 8004632:	4402      	add	r2, r0
 8004634:	4293      	cmp	r3, r2
 8004636:	d100      	bne.n	800463a <memset+0xa>
 8004638:	4770      	bx	lr
 800463a:	f803 1b01 	strb.w	r1, [r3], #1
 800463e:	e7f9      	b.n	8004634 <memset+0x4>

08004640 <siprintf>:
 8004640:	b40e      	push	{r1, r2, r3}
 8004642:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004646:	b500      	push	{lr}
 8004648:	b09c      	sub	sp, #112	; 0x70
 800464a:	ab1d      	add	r3, sp, #116	; 0x74
 800464c:	9002      	str	r0, [sp, #8]
 800464e:	9006      	str	r0, [sp, #24]
 8004650:	9107      	str	r1, [sp, #28]
 8004652:	9104      	str	r1, [sp, #16]
 8004654:	4808      	ldr	r0, [pc, #32]	; (8004678 <siprintf+0x38>)
 8004656:	4909      	ldr	r1, [pc, #36]	; (800467c <siprintf+0x3c>)
 8004658:	f853 2b04 	ldr.w	r2, [r3], #4
 800465c:	9105      	str	r1, [sp, #20]
 800465e:	6800      	ldr	r0, [r0, #0]
 8004660:	a902      	add	r1, sp, #8
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	f000 f868 	bl	8004738 <_svfiprintf_r>
 8004668:	2200      	movs	r2, #0
 800466a:	9b02      	ldr	r3, [sp, #8]
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	b01c      	add	sp, #112	; 0x70
 8004670:	f85d eb04 	ldr.w	lr, [sp], #4
 8004674:	b003      	add	sp, #12
 8004676:	4770      	bx	lr
 8004678:	200000ec 	.word	0x200000ec
 800467c:	ffff0208 	.word	0xffff0208

08004680 <__ssputs_r>:
 8004680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004684:	688e      	ldr	r6, [r1, #8]
 8004686:	4682      	mov	sl, r0
 8004688:	429e      	cmp	r6, r3
 800468a:	460c      	mov	r4, r1
 800468c:	4690      	mov	r8, r2
 800468e:	461f      	mov	r7, r3
 8004690:	d838      	bhi.n	8004704 <__ssputs_r+0x84>
 8004692:	898a      	ldrh	r2, [r1, #12]
 8004694:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004698:	d032      	beq.n	8004700 <__ssputs_r+0x80>
 800469a:	6825      	ldr	r5, [r4, #0]
 800469c:	6909      	ldr	r1, [r1, #16]
 800469e:	3301      	adds	r3, #1
 80046a0:	eba5 0901 	sub.w	r9, r5, r1
 80046a4:	6965      	ldr	r5, [r4, #20]
 80046a6:	444b      	add	r3, r9
 80046a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046b0:	106d      	asrs	r5, r5, #1
 80046b2:	429d      	cmp	r5, r3
 80046b4:	bf38      	it	cc
 80046b6:	461d      	movcc	r5, r3
 80046b8:	0553      	lsls	r3, r2, #21
 80046ba:	d531      	bpl.n	8004720 <__ssputs_r+0xa0>
 80046bc:	4629      	mov	r1, r5
 80046be:	f000 fb53 	bl	8004d68 <_malloc_r>
 80046c2:	4606      	mov	r6, r0
 80046c4:	b950      	cbnz	r0, 80046dc <__ssputs_r+0x5c>
 80046c6:	230c      	movs	r3, #12
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	f8ca 3000 	str.w	r3, [sl]
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d6:	81a3      	strh	r3, [r4, #12]
 80046d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046dc:	464a      	mov	r2, r9
 80046de:	6921      	ldr	r1, [r4, #16]
 80046e0:	f000 face 	bl	8004c80 <memcpy>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	6126      	str	r6, [r4, #16]
 80046f2:	444e      	add	r6, r9
 80046f4:	6026      	str	r6, [r4, #0]
 80046f6:	463e      	mov	r6, r7
 80046f8:	6165      	str	r5, [r4, #20]
 80046fa:	eba5 0509 	sub.w	r5, r5, r9
 80046fe:	60a5      	str	r5, [r4, #8]
 8004700:	42be      	cmp	r6, r7
 8004702:	d900      	bls.n	8004706 <__ssputs_r+0x86>
 8004704:	463e      	mov	r6, r7
 8004706:	4632      	mov	r2, r6
 8004708:	4641      	mov	r1, r8
 800470a:	6820      	ldr	r0, [r4, #0]
 800470c:	f000 fac6 	bl	8004c9c <memmove>
 8004710:	68a3      	ldr	r3, [r4, #8]
 8004712:	6822      	ldr	r2, [r4, #0]
 8004714:	1b9b      	subs	r3, r3, r6
 8004716:	4432      	add	r2, r6
 8004718:	2000      	movs	r0, #0
 800471a:	60a3      	str	r3, [r4, #8]
 800471c:	6022      	str	r2, [r4, #0]
 800471e:	e7db      	b.n	80046d8 <__ssputs_r+0x58>
 8004720:	462a      	mov	r2, r5
 8004722:	f000 fb7b 	bl	8004e1c <_realloc_r>
 8004726:	4606      	mov	r6, r0
 8004728:	2800      	cmp	r0, #0
 800472a:	d1e1      	bne.n	80046f0 <__ssputs_r+0x70>
 800472c:	4650      	mov	r0, sl
 800472e:	6921      	ldr	r1, [r4, #16]
 8004730:	f000 face 	bl	8004cd0 <_free_r>
 8004734:	e7c7      	b.n	80046c6 <__ssputs_r+0x46>
	...

08004738 <_svfiprintf_r>:
 8004738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473c:	4698      	mov	r8, r3
 800473e:	898b      	ldrh	r3, [r1, #12]
 8004740:	4607      	mov	r7, r0
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	460d      	mov	r5, r1
 8004746:	4614      	mov	r4, r2
 8004748:	b09d      	sub	sp, #116	; 0x74
 800474a:	d50e      	bpl.n	800476a <_svfiprintf_r+0x32>
 800474c:	690b      	ldr	r3, [r1, #16]
 800474e:	b963      	cbnz	r3, 800476a <_svfiprintf_r+0x32>
 8004750:	2140      	movs	r1, #64	; 0x40
 8004752:	f000 fb09 	bl	8004d68 <_malloc_r>
 8004756:	6028      	str	r0, [r5, #0]
 8004758:	6128      	str	r0, [r5, #16]
 800475a:	b920      	cbnz	r0, 8004766 <_svfiprintf_r+0x2e>
 800475c:	230c      	movs	r3, #12
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	f04f 30ff 	mov.w	r0, #4294967295
 8004764:	e0d1      	b.n	800490a <_svfiprintf_r+0x1d2>
 8004766:	2340      	movs	r3, #64	; 0x40
 8004768:	616b      	str	r3, [r5, #20]
 800476a:	2300      	movs	r3, #0
 800476c:	9309      	str	r3, [sp, #36]	; 0x24
 800476e:	2320      	movs	r3, #32
 8004770:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004774:	2330      	movs	r3, #48	; 0x30
 8004776:	f04f 0901 	mov.w	r9, #1
 800477a:	f8cd 800c 	str.w	r8, [sp, #12]
 800477e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004924 <_svfiprintf_r+0x1ec>
 8004782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004786:	4623      	mov	r3, r4
 8004788:	469a      	mov	sl, r3
 800478a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800478e:	b10a      	cbz	r2, 8004794 <_svfiprintf_r+0x5c>
 8004790:	2a25      	cmp	r2, #37	; 0x25
 8004792:	d1f9      	bne.n	8004788 <_svfiprintf_r+0x50>
 8004794:	ebba 0b04 	subs.w	fp, sl, r4
 8004798:	d00b      	beq.n	80047b2 <_svfiprintf_r+0x7a>
 800479a:	465b      	mov	r3, fp
 800479c:	4622      	mov	r2, r4
 800479e:	4629      	mov	r1, r5
 80047a0:	4638      	mov	r0, r7
 80047a2:	f7ff ff6d 	bl	8004680 <__ssputs_r>
 80047a6:	3001      	adds	r0, #1
 80047a8:	f000 80aa 	beq.w	8004900 <_svfiprintf_r+0x1c8>
 80047ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ae:	445a      	add	r2, fp
 80047b0:	9209      	str	r2, [sp, #36]	; 0x24
 80047b2:	f89a 3000 	ldrb.w	r3, [sl]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 80a2 	beq.w	8004900 <_svfiprintf_r+0x1c8>
 80047bc:	2300      	movs	r3, #0
 80047be:	f04f 32ff 	mov.w	r2, #4294967295
 80047c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047c6:	f10a 0a01 	add.w	sl, sl, #1
 80047ca:	9304      	str	r3, [sp, #16]
 80047cc:	9307      	str	r3, [sp, #28]
 80047ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047d2:	931a      	str	r3, [sp, #104]	; 0x68
 80047d4:	4654      	mov	r4, sl
 80047d6:	2205      	movs	r2, #5
 80047d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047dc:	4851      	ldr	r0, [pc, #324]	; (8004924 <_svfiprintf_r+0x1ec>)
 80047de:	f000 fa41 	bl	8004c64 <memchr>
 80047e2:	9a04      	ldr	r2, [sp, #16]
 80047e4:	b9d8      	cbnz	r0, 800481e <_svfiprintf_r+0xe6>
 80047e6:	06d0      	lsls	r0, r2, #27
 80047e8:	bf44      	itt	mi
 80047ea:	2320      	movmi	r3, #32
 80047ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047f0:	0711      	lsls	r1, r2, #28
 80047f2:	bf44      	itt	mi
 80047f4:	232b      	movmi	r3, #43	; 0x2b
 80047f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047fa:	f89a 3000 	ldrb.w	r3, [sl]
 80047fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004800:	d015      	beq.n	800482e <_svfiprintf_r+0xf6>
 8004802:	4654      	mov	r4, sl
 8004804:	2000      	movs	r0, #0
 8004806:	f04f 0c0a 	mov.w	ip, #10
 800480a:	9a07      	ldr	r2, [sp, #28]
 800480c:	4621      	mov	r1, r4
 800480e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004812:	3b30      	subs	r3, #48	; 0x30
 8004814:	2b09      	cmp	r3, #9
 8004816:	d94e      	bls.n	80048b6 <_svfiprintf_r+0x17e>
 8004818:	b1b0      	cbz	r0, 8004848 <_svfiprintf_r+0x110>
 800481a:	9207      	str	r2, [sp, #28]
 800481c:	e014      	b.n	8004848 <_svfiprintf_r+0x110>
 800481e:	eba0 0308 	sub.w	r3, r0, r8
 8004822:	fa09 f303 	lsl.w	r3, r9, r3
 8004826:	4313      	orrs	r3, r2
 8004828:	46a2      	mov	sl, r4
 800482a:	9304      	str	r3, [sp, #16]
 800482c:	e7d2      	b.n	80047d4 <_svfiprintf_r+0x9c>
 800482e:	9b03      	ldr	r3, [sp, #12]
 8004830:	1d19      	adds	r1, r3, #4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	9103      	str	r1, [sp, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	bfbb      	ittet	lt
 800483a:	425b      	neglt	r3, r3
 800483c:	f042 0202 	orrlt.w	r2, r2, #2
 8004840:	9307      	strge	r3, [sp, #28]
 8004842:	9307      	strlt	r3, [sp, #28]
 8004844:	bfb8      	it	lt
 8004846:	9204      	strlt	r2, [sp, #16]
 8004848:	7823      	ldrb	r3, [r4, #0]
 800484a:	2b2e      	cmp	r3, #46	; 0x2e
 800484c:	d10c      	bne.n	8004868 <_svfiprintf_r+0x130>
 800484e:	7863      	ldrb	r3, [r4, #1]
 8004850:	2b2a      	cmp	r3, #42	; 0x2a
 8004852:	d135      	bne.n	80048c0 <_svfiprintf_r+0x188>
 8004854:	9b03      	ldr	r3, [sp, #12]
 8004856:	3402      	adds	r4, #2
 8004858:	1d1a      	adds	r2, r3, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	9203      	str	r2, [sp, #12]
 800485e:	2b00      	cmp	r3, #0
 8004860:	bfb8      	it	lt
 8004862:	f04f 33ff 	movlt.w	r3, #4294967295
 8004866:	9305      	str	r3, [sp, #20]
 8004868:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004934 <_svfiprintf_r+0x1fc>
 800486c:	2203      	movs	r2, #3
 800486e:	4650      	mov	r0, sl
 8004870:	7821      	ldrb	r1, [r4, #0]
 8004872:	f000 f9f7 	bl	8004c64 <memchr>
 8004876:	b140      	cbz	r0, 800488a <_svfiprintf_r+0x152>
 8004878:	2340      	movs	r3, #64	; 0x40
 800487a:	eba0 000a 	sub.w	r0, r0, sl
 800487e:	fa03 f000 	lsl.w	r0, r3, r0
 8004882:	9b04      	ldr	r3, [sp, #16]
 8004884:	3401      	adds	r4, #1
 8004886:	4303      	orrs	r3, r0
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800488e:	2206      	movs	r2, #6
 8004890:	4825      	ldr	r0, [pc, #148]	; (8004928 <_svfiprintf_r+0x1f0>)
 8004892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004896:	f000 f9e5 	bl	8004c64 <memchr>
 800489a:	2800      	cmp	r0, #0
 800489c:	d038      	beq.n	8004910 <_svfiprintf_r+0x1d8>
 800489e:	4b23      	ldr	r3, [pc, #140]	; (800492c <_svfiprintf_r+0x1f4>)
 80048a0:	bb1b      	cbnz	r3, 80048ea <_svfiprintf_r+0x1b2>
 80048a2:	9b03      	ldr	r3, [sp, #12]
 80048a4:	3307      	adds	r3, #7
 80048a6:	f023 0307 	bic.w	r3, r3, #7
 80048aa:	3308      	adds	r3, #8
 80048ac:	9303      	str	r3, [sp, #12]
 80048ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b0:	4433      	add	r3, r6
 80048b2:	9309      	str	r3, [sp, #36]	; 0x24
 80048b4:	e767      	b.n	8004786 <_svfiprintf_r+0x4e>
 80048b6:	460c      	mov	r4, r1
 80048b8:	2001      	movs	r0, #1
 80048ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80048be:	e7a5      	b.n	800480c <_svfiprintf_r+0xd4>
 80048c0:	2300      	movs	r3, #0
 80048c2:	f04f 0c0a 	mov.w	ip, #10
 80048c6:	4619      	mov	r1, r3
 80048c8:	3401      	adds	r4, #1
 80048ca:	9305      	str	r3, [sp, #20]
 80048cc:	4620      	mov	r0, r4
 80048ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048d2:	3a30      	subs	r2, #48	; 0x30
 80048d4:	2a09      	cmp	r2, #9
 80048d6:	d903      	bls.n	80048e0 <_svfiprintf_r+0x1a8>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0c5      	beq.n	8004868 <_svfiprintf_r+0x130>
 80048dc:	9105      	str	r1, [sp, #20]
 80048de:	e7c3      	b.n	8004868 <_svfiprintf_r+0x130>
 80048e0:	4604      	mov	r4, r0
 80048e2:	2301      	movs	r3, #1
 80048e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048e8:	e7f0      	b.n	80048cc <_svfiprintf_r+0x194>
 80048ea:	ab03      	add	r3, sp, #12
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	462a      	mov	r2, r5
 80048f0:	4638      	mov	r0, r7
 80048f2:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <_svfiprintf_r+0x1f8>)
 80048f4:	a904      	add	r1, sp, #16
 80048f6:	f3af 8000 	nop.w
 80048fa:	1c42      	adds	r2, r0, #1
 80048fc:	4606      	mov	r6, r0
 80048fe:	d1d6      	bne.n	80048ae <_svfiprintf_r+0x176>
 8004900:	89ab      	ldrh	r3, [r5, #12]
 8004902:	065b      	lsls	r3, r3, #25
 8004904:	f53f af2c 	bmi.w	8004760 <_svfiprintf_r+0x28>
 8004908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800490a:	b01d      	add	sp, #116	; 0x74
 800490c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004910:	ab03      	add	r3, sp, #12
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	462a      	mov	r2, r5
 8004916:	4638      	mov	r0, r7
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <_svfiprintf_r+0x1f8>)
 800491a:	a904      	add	r1, sp, #16
 800491c:	f000 f87c 	bl	8004a18 <_printf_i>
 8004920:	e7eb      	b.n	80048fa <_svfiprintf_r+0x1c2>
 8004922:	bf00      	nop
 8004924:	08004f64 	.word	0x08004f64
 8004928:	08004f6e 	.word	0x08004f6e
 800492c:	00000000 	.word	0x00000000
 8004930:	08004681 	.word	0x08004681
 8004934:	08004f6a 	.word	0x08004f6a

08004938 <_printf_common>:
 8004938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800493c:	4616      	mov	r6, r2
 800493e:	4699      	mov	r9, r3
 8004940:	688a      	ldr	r2, [r1, #8]
 8004942:	690b      	ldr	r3, [r1, #16]
 8004944:	4607      	mov	r7, r0
 8004946:	4293      	cmp	r3, r2
 8004948:	bfb8      	it	lt
 800494a:	4613      	movlt	r3, r2
 800494c:	6033      	str	r3, [r6, #0]
 800494e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004952:	460c      	mov	r4, r1
 8004954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004958:	b10a      	cbz	r2, 800495e <_printf_common+0x26>
 800495a:	3301      	adds	r3, #1
 800495c:	6033      	str	r3, [r6, #0]
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	0699      	lsls	r1, r3, #26
 8004962:	bf42      	ittt	mi
 8004964:	6833      	ldrmi	r3, [r6, #0]
 8004966:	3302      	addmi	r3, #2
 8004968:	6033      	strmi	r3, [r6, #0]
 800496a:	6825      	ldr	r5, [r4, #0]
 800496c:	f015 0506 	ands.w	r5, r5, #6
 8004970:	d106      	bne.n	8004980 <_printf_common+0x48>
 8004972:	f104 0a19 	add.w	sl, r4, #25
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	6832      	ldr	r2, [r6, #0]
 800497a:	1a9b      	subs	r3, r3, r2
 800497c:	42ab      	cmp	r3, r5
 800497e:	dc28      	bgt.n	80049d2 <_printf_common+0x9a>
 8004980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004984:	1e13      	subs	r3, r2, #0
 8004986:	6822      	ldr	r2, [r4, #0]
 8004988:	bf18      	it	ne
 800498a:	2301      	movne	r3, #1
 800498c:	0692      	lsls	r2, r2, #26
 800498e:	d42d      	bmi.n	80049ec <_printf_common+0xb4>
 8004990:	4649      	mov	r1, r9
 8004992:	4638      	mov	r0, r7
 8004994:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004998:	47c0      	blx	r8
 800499a:	3001      	adds	r0, #1
 800499c:	d020      	beq.n	80049e0 <_printf_common+0xa8>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	68e5      	ldr	r5, [r4, #12]
 80049a2:	f003 0306 	and.w	r3, r3, #6
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	bf18      	it	ne
 80049aa:	2500      	movne	r5, #0
 80049ac:	6832      	ldr	r2, [r6, #0]
 80049ae:	f04f 0600 	mov.w	r6, #0
 80049b2:	68a3      	ldr	r3, [r4, #8]
 80049b4:	bf08      	it	eq
 80049b6:	1aad      	subeq	r5, r5, r2
 80049b8:	6922      	ldr	r2, [r4, #16]
 80049ba:	bf08      	it	eq
 80049bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049c0:	4293      	cmp	r3, r2
 80049c2:	bfc4      	itt	gt
 80049c4:	1a9b      	subgt	r3, r3, r2
 80049c6:	18ed      	addgt	r5, r5, r3
 80049c8:	341a      	adds	r4, #26
 80049ca:	42b5      	cmp	r5, r6
 80049cc:	d11a      	bne.n	8004a04 <_printf_common+0xcc>
 80049ce:	2000      	movs	r0, #0
 80049d0:	e008      	b.n	80049e4 <_printf_common+0xac>
 80049d2:	2301      	movs	r3, #1
 80049d4:	4652      	mov	r2, sl
 80049d6:	4649      	mov	r1, r9
 80049d8:	4638      	mov	r0, r7
 80049da:	47c0      	blx	r8
 80049dc:	3001      	adds	r0, #1
 80049de:	d103      	bne.n	80049e8 <_printf_common+0xb0>
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295
 80049e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e8:	3501      	adds	r5, #1
 80049ea:	e7c4      	b.n	8004976 <_printf_common+0x3e>
 80049ec:	2030      	movs	r0, #48	; 0x30
 80049ee:	18e1      	adds	r1, r4, r3
 80049f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049fa:	4422      	add	r2, r4
 80049fc:	3302      	adds	r3, #2
 80049fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a02:	e7c5      	b.n	8004990 <_printf_common+0x58>
 8004a04:	2301      	movs	r3, #1
 8004a06:	4622      	mov	r2, r4
 8004a08:	4649      	mov	r1, r9
 8004a0a:	4638      	mov	r0, r7
 8004a0c:	47c0      	blx	r8
 8004a0e:	3001      	adds	r0, #1
 8004a10:	d0e6      	beq.n	80049e0 <_printf_common+0xa8>
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7d9      	b.n	80049ca <_printf_common+0x92>
	...

08004a18 <_printf_i>:
 8004a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	7e27      	ldrb	r7, [r4, #24]
 8004a20:	4691      	mov	r9, r2
 8004a22:	2f78      	cmp	r7, #120	; 0x78
 8004a24:	4680      	mov	r8, r0
 8004a26:	469a      	mov	sl, r3
 8004a28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a2e:	d807      	bhi.n	8004a40 <_printf_i+0x28>
 8004a30:	2f62      	cmp	r7, #98	; 0x62
 8004a32:	d80a      	bhi.n	8004a4a <_printf_i+0x32>
 8004a34:	2f00      	cmp	r7, #0
 8004a36:	f000 80d9 	beq.w	8004bec <_printf_i+0x1d4>
 8004a3a:	2f58      	cmp	r7, #88	; 0x58
 8004a3c:	f000 80a4 	beq.w	8004b88 <_printf_i+0x170>
 8004a40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a48:	e03a      	b.n	8004ac0 <_printf_i+0xa8>
 8004a4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a4e:	2b15      	cmp	r3, #21
 8004a50:	d8f6      	bhi.n	8004a40 <_printf_i+0x28>
 8004a52:	a001      	add	r0, pc, #4	; (adr r0, 8004a58 <_printf_i+0x40>)
 8004a54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a58:	08004ab1 	.word	0x08004ab1
 8004a5c:	08004ac5 	.word	0x08004ac5
 8004a60:	08004a41 	.word	0x08004a41
 8004a64:	08004a41 	.word	0x08004a41
 8004a68:	08004a41 	.word	0x08004a41
 8004a6c:	08004a41 	.word	0x08004a41
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004a41 	.word	0x08004a41
 8004a78:	08004a41 	.word	0x08004a41
 8004a7c:	08004a41 	.word	0x08004a41
 8004a80:	08004a41 	.word	0x08004a41
 8004a84:	08004bd3 	.word	0x08004bd3
 8004a88:	08004af5 	.word	0x08004af5
 8004a8c:	08004bb5 	.word	0x08004bb5
 8004a90:	08004a41 	.word	0x08004a41
 8004a94:	08004a41 	.word	0x08004a41
 8004a98:	08004bf5 	.word	0x08004bf5
 8004a9c:	08004a41 	.word	0x08004a41
 8004aa0:	08004af5 	.word	0x08004af5
 8004aa4:	08004a41 	.word	0x08004a41
 8004aa8:	08004a41 	.word	0x08004a41
 8004aac:	08004bbd 	.word	0x08004bbd
 8004ab0:	680b      	ldr	r3, [r1, #0]
 8004ab2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ab6:	1d1a      	adds	r2, r3, #4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	600a      	str	r2, [r1, #0]
 8004abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0a4      	b.n	8004c0e <_printf_i+0x1f6>
 8004ac4:	6825      	ldr	r5, [r4, #0]
 8004ac6:	6808      	ldr	r0, [r1, #0]
 8004ac8:	062e      	lsls	r6, r5, #24
 8004aca:	f100 0304 	add.w	r3, r0, #4
 8004ace:	d50a      	bpl.n	8004ae6 <_printf_i+0xce>
 8004ad0:	6805      	ldr	r5, [r0, #0]
 8004ad2:	600b      	str	r3, [r1, #0]
 8004ad4:	2d00      	cmp	r5, #0
 8004ad6:	da03      	bge.n	8004ae0 <_printf_i+0xc8>
 8004ad8:	232d      	movs	r3, #45	; 0x2d
 8004ada:	426d      	negs	r5, r5
 8004adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae0:	230a      	movs	r3, #10
 8004ae2:	485e      	ldr	r0, [pc, #376]	; (8004c5c <_printf_i+0x244>)
 8004ae4:	e019      	b.n	8004b1a <_printf_i+0x102>
 8004ae6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004aea:	6805      	ldr	r5, [r0, #0]
 8004aec:	600b      	str	r3, [r1, #0]
 8004aee:	bf18      	it	ne
 8004af0:	b22d      	sxthne	r5, r5
 8004af2:	e7ef      	b.n	8004ad4 <_printf_i+0xbc>
 8004af4:	680b      	ldr	r3, [r1, #0]
 8004af6:	6825      	ldr	r5, [r4, #0]
 8004af8:	1d18      	adds	r0, r3, #4
 8004afa:	6008      	str	r0, [r1, #0]
 8004afc:	0628      	lsls	r0, r5, #24
 8004afe:	d501      	bpl.n	8004b04 <_printf_i+0xec>
 8004b00:	681d      	ldr	r5, [r3, #0]
 8004b02:	e002      	b.n	8004b0a <_printf_i+0xf2>
 8004b04:	0669      	lsls	r1, r5, #25
 8004b06:	d5fb      	bpl.n	8004b00 <_printf_i+0xe8>
 8004b08:	881d      	ldrh	r5, [r3, #0]
 8004b0a:	2f6f      	cmp	r7, #111	; 0x6f
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2308      	moveq	r3, #8
 8004b10:	230a      	movne	r3, #10
 8004b12:	4852      	ldr	r0, [pc, #328]	; (8004c5c <_printf_i+0x244>)
 8004b14:	2100      	movs	r1, #0
 8004b16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b1a:	6866      	ldr	r6, [r4, #4]
 8004b1c:	2e00      	cmp	r6, #0
 8004b1e:	bfa8      	it	ge
 8004b20:	6821      	ldrge	r1, [r4, #0]
 8004b22:	60a6      	str	r6, [r4, #8]
 8004b24:	bfa4      	itt	ge
 8004b26:	f021 0104 	bicge.w	r1, r1, #4
 8004b2a:	6021      	strge	r1, [r4, #0]
 8004b2c:	b90d      	cbnz	r5, 8004b32 <_printf_i+0x11a>
 8004b2e:	2e00      	cmp	r6, #0
 8004b30:	d04d      	beq.n	8004bce <_printf_i+0x1b6>
 8004b32:	4616      	mov	r6, r2
 8004b34:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b38:	fb03 5711 	mls	r7, r3, r1, r5
 8004b3c:	5dc7      	ldrb	r7, [r0, r7]
 8004b3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b42:	462f      	mov	r7, r5
 8004b44:	42bb      	cmp	r3, r7
 8004b46:	460d      	mov	r5, r1
 8004b48:	d9f4      	bls.n	8004b34 <_printf_i+0x11c>
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d10b      	bne.n	8004b66 <_printf_i+0x14e>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	07df      	lsls	r7, r3, #31
 8004b52:	d508      	bpl.n	8004b66 <_printf_i+0x14e>
 8004b54:	6923      	ldr	r3, [r4, #16]
 8004b56:	6861      	ldr	r1, [r4, #4]
 8004b58:	4299      	cmp	r1, r3
 8004b5a:	bfde      	ittt	le
 8004b5c:	2330      	movle	r3, #48	; 0x30
 8004b5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b66:	1b92      	subs	r2, r2, r6
 8004b68:	6122      	str	r2, [r4, #16]
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4640      	mov	r0, r8
 8004b70:	f8cd a000 	str.w	sl, [sp]
 8004b74:	aa03      	add	r2, sp, #12
 8004b76:	f7ff fedf 	bl	8004938 <_printf_common>
 8004b7a:	3001      	adds	r0, #1
 8004b7c:	d14c      	bne.n	8004c18 <_printf_i+0x200>
 8004b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b82:	b004      	add	sp, #16
 8004b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b88:	4834      	ldr	r0, [pc, #208]	; (8004c5c <_printf_i+0x244>)
 8004b8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b8e:	680e      	ldr	r6, [r1, #0]
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b96:	061f      	lsls	r7, r3, #24
 8004b98:	600e      	str	r6, [r1, #0]
 8004b9a:	d514      	bpl.n	8004bc6 <_printf_i+0x1ae>
 8004b9c:	07d9      	lsls	r1, r3, #31
 8004b9e:	bf44      	itt	mi
 8004ba0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ba4:	6023      	strmi	r3, [r4, #0]
 8004ba6:	b91d      	cbnz	r5, 8004bb0 <_printf_i+0x198>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	f023 0320 	bic.w	r3, r3, #32
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	e7af      	b.n	8004b14 <_printf_i+0xfc>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	f043 0320 	orr.w	r3, r3, #32
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	2378      	movs	r3, #120	; 0x78
 8004bbe:	4828      	ldr	r0, [pc, #160]	; (8004c60 <_printf_i+0x248>)
 8004bc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bc4:	e7e3      	b.n	8004b8e <_printf_i+0x176>
 8004bc6:	065e      	lsls	r6, r3, #25
 8004bc8:	bf48      	it	mi
 8004bca:	b2ad      	uxthmi	r5, r5
 8004bcc:	e7e6      	b.n	8004b9c <_printf_i+0x184>
 8004bce:	4616      	mov	r6, r2
 8004bd0:	e7bb      	b.n	8004b4a <_printf_i+0x132>
 8004bd2:	680b      	ldr	r3, [r1, #0]
 8004bd4:	6826      	ldr	r6, [r4, #0]
 8004bd6:	1d1d      	adds	r5, r3, #4
 8004bd8:	6960      	ldr	r0, [r4, #20]
 8004bda:	600d      	str	r5, [r1, #0]
 8004bdc:	0635      	lsls	r5, r6, #24
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	d501      	bpl.n	8004be6 <_printf_i+0x1ce>
 8004be2:	6018      	str	r0, [r3, #0]
 8004be4:	e002      	b.n	8004bec <_printf_i+0x1d4>
 8004be6:	0671      	lsls	r1, r6, #25
 8004be8:	d5fb      	bpl.n	8004be2 <_printf_i+0x1ca>
 8004bea:	8018      	strh	r0, [r3, #0]
 8004bec:	2300      	movs	r3, #0
 8004bee:	4616      	mov	r6, r2
 8004bf0:	6123      	str	r3, [r4, #16]
 8004bf2:	e7ba      	b.n	8004b6a <_printf_i+0x152>
 8004bf4:	680b      	ldr	r3, [r1, #0]
 8004bf6:	1d1a      	adds	r2, r3, #4
 8004bf8:	600a      	str	r2, [r1, #0]
 8004bfa:	681e      	ldr	r6, [r3, #0]
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4630      	mov	r0, r6
 8004c00:	6862      	ldr	r2, [r4, #4]
 8004c02:	f000 f82f 	bl	8004c64 <memchr>
 8004c06:	b108      	cbz	r0, 8004c0c <_printf_i+0x1f4>
 8004c08:	1b80      	subs	r0, r0, r6
 8004c0a:	6060      	str	r0, [r4, #4]
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	6123      	str	r3, [r4, #16]
 8004c10:	2300      	movs	r3, #0
 8004c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c16:	e7a8      	b.n	8004b6a <_printf_i+0x152>
 8004c18:	4632      	mov	r2, r6
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	6923      	ldr	r3, [r4, #16]
 8004c20:	47d0      	blx	sl
 8004c22:	3001      	adds	r0, #1
 8004c24:	d0ab      	beq.n	8004b7e <_printf_i+0x166>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	079b      	lsls	r3, r3, #30
 8004c2a:	d413      	bmi.n	8004c54 <_printf_i+0x23c>
 8004c2c:	68e0      	ldr	r0, [r4, #12]
 8004c2e:	9b03      	ldr	r3, [sp, #12]
 8004c30:	4298      	cmp	r0, r3
 8004c32:	bfb8      	it	lt
 8004c34:	4618      	movlt	r0, r3
 8004c36:	e7a4      	b.n	8004b82 <_printf_i+0x16a>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	4632      	mov	r2, r6
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	4640      	mov	r0, r8
 8004c40:	47d0      	blx	sl
 8004c42:	3001      	adds	r0, #1
 8004c44:	d09b      	beq.n	8004b7e <_printf_i+0x166>
 8004c46:	3501      	adds	r5, #1
 8004c48:	68e3      	ldr	r3, [r4, #12]
 8004c4a:	9903      	ldr	r1, [sp, #12]
 8004c4c:	1a5b      	subs	r3, r3, r1
 8004c4e:	42ab      	cmp	r3, r5
 8004c50:	dcf2      	bgt.n	8004c38 <_printf_i+0x220>
 8004c52:	e7eb      	b.n	8004c2c <_printf_i+0x214>
 8004c54:	2500      	movs	r5, #0
 8004c56:	f104 0619 	add.w	r6, r4, #25
 8004c5a:	e7f5      	b.n	8004c48 <_printf_i+0x230>
 8004c5c:	08004f75 	.word	0x08004f75
 8004c60:	08004f86 	.word	0x08004f86

08004c64 <memchr>:
 8004c64:	4603      	mov	r3, r0
 8004c66:	b510      	push	{r4, lr}
 8004c68:	b2c9      	uxtb	r1, r1
 8004c6a:	4402      	add	r2, r0
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	4618      	mov	r0, r3
 8004c70:	d101      	bne.n	8004c76 <memchr+0x12>
 8004c72:	2000      	movs	r0, #0
 8004c74:	e003      	b.n	8004c7e <memchr+0x1a>
 8004c76:	7804      	ldrb	r4, [r0, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	428c      	cmp	r4, r1
 8004c7c:	d1f6      	bne.n	8004c6c <memchr+0x8>
 8004c7e:	bd10      	pop	{r4, pc}

08004c80 <memcpy>:
 8004c80:	440a      	add	r2, r1
 8004c82:	4291      	cmp	r1, r2
 8004c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c88:	d100      	bne.n	8004c8c <memcpy+0xc>
 8004c8a:	4770      	bx	lr
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c92:	4291      	cmp	r1, r2
 8004c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c98:	d1f9      	bne.n	8004c8e <memcpy+0xe>
 8004c9a:	bd10      	pop	{r4, pc}

08004c9c <memmove>:
 8004c9c:	4288      	cmp	r0, r1
 8004c9e:	b510      	push	{r4, lr}
 8004ca0:	eb01 0402 	add.w	r4, r1, r2
 8004ca4:	d902      	bls.n	8004cac <memmove+0x10>
 8004ca6:	4284      	cmp	r4, r0
 8004ca8:	4623      	mov	r3, r4
 8004caa:	d807      	bhi.n	8004cbc <memmove+0x20>
 8004cac:	1e43      	subs	r3, r0, #1
 8004cae:	42a1      	cmp	r1, r4
 8004cb0:	d008      	beq.n	8004cc4 <memmove+0x28>
 8004cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cba:	e7f8      	b.n	8004cae <memmove+0x12>
 8004cbc:	4601      	mov	r1, r0
 8004cbe:	4402      	add	r2, r0
 8004cc0:	428a      	cmp	r2, r1
 8004cc2:	d100      	bne.n	8004cc6 <memmove+0x2a>
 8004cc4:	bd10      	pop	{r4, pc}
 8004cc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cce:	e7f7      	b.n	8004cc0 <memmove+0x24>

08004cd0 <_free_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	2900      	cmp	r1, #0
 8004cd6:	d043      	beq.n	8004d60 <_free_r+0x90>
 8004cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cdc:	1f0c      	subs	r4, r1, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bfb8      	it	lt
 8004ce2:	18e4      	addlt	r4, r4, r3
 8004ce4:	f000 f8d0 	bl	8004e88 <__malloc_lock>
 8004ce8:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <_free_r+0x94>)
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	4610      	mov	r0, r2
 8004cee:	b933      	cbnz	r3, 8004cfe <_free_r+0x2e>
 8004cf0:	6063      	str	r3, [r4, #4]
 8004cf2:	6014      	str	r4, [r2, #0]
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cfa:	f000 b8cb 	b.w	8004e94 <__malloc_unlock>
 8004cfe:	42a3      	cmp	r3, r4
 8004d00:	d90a      	bls.n	8004d18 <_free_r+0x48>
 8004d02:	6821      	ldr	r1, [r4, #0]
 8004d04:	1862      	adds	r2, r4, r1
 8004d06:	4293      	cmp	r3, r2
 8004d08:	bf01      	itttt	eq
 8004d0a:	681a      	ldreq	r2, [r3, #0]
 8004d0c:	685b      	ldreq	r3, [r3, #4]
 8004d0e:	1852      	addeq	r2, r2, r1
 8004d10:	6022      	streq	r2, [r4, #0]
 8004d12:	6063      	str	r3, [r4, #4]
 8004d14:	6004      	str	r4, [r0, #0]
 8004d16:	e7ed      	b.n	8004cf4 <_free_r+0x24>
 8004d18:	461a      	mov	r2, r3
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	b10b      	cbz	r3, 8004d22 <_free_r+0x52>
 8004d1e:	42a3      	cmp	r3, r4
 8004d20:	d9fa      	bls.n	8004d18 <_free_r+0x48>
 8004d22:	6811      	ldr	r1, [r2, #0]
 8004d24:	1850      	adds	r0, r2, r1
 8004d26:	42a0      	cmp	r0, r4
 8004d28:	d10b      	bne.n	8004d42 <_free_r+0x72>
 8004d2a:	6820      	ldr	r0, [r4, #0]
 8004d2c:	4401      	add	r1, r0
 8004d2e:	1850      	adds	r0, r2, r1
 8004d30:	4283      	cmp	r3, r0
 8004d32:	6011      	str	r1, [r2, #0]
 8004d34:	d1de      	bne.n	8004cf4 <_free_r+0x24>
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4401      	add	r1, r0
 8004d3c:	6011      	str	r1, [r2, #0]
 8004d3e:	6053      	str	r3, [r2, #4]
 8004d40:	e7d8      	b.n	8004cf4 <_free_r+0x24>
 8004d42:	d902      	bls.n	8004d4a <_free_r+0x7a>
 8004d44:	230c      	movs	r3, #12
 8004d46:	602b      	str	r3, [r5, #0]
 8004d48:	e7d4      	b.n	8004cf4 <_free_r+0x24>
 8004d4a:	6820      	ldr	r0, [r4, #0]
 8004d4c:	1821      	adds	r1, r4, r0
 8004d4e:	428b      	cmp	r3, r1
 8004d50:	bf01      	itttt	eq
 8004d52:	6819      	ldreq	r1, [r3, #0]
 8004d54:	685b      	ldreq	r3, [r3, #4]
 8004d56:	1809      	addeq	r1, r1, r0
 8004d58:	6021      	streq	r1, [r4, #0]
 8004d5a:	6063      	str	r3, [r4, #4]
 8004d5c:	6054      	str	r4, [r2, #4]
 8004d5e:	e7c9      	b.n	8004cf4 <_free_r+0x24>
 8004d60:	bd38      	pop	{r3, r4, r5, pc}
 8004d62:	bf00      	nop
 8004d64:	2000024c 	.word	0x2000024c

08004d68 <_malloc_r>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	1ccd      	adds	r5, r1, #3
 8004d6c:	f025 0503 	bic.w	r5, r5, #3
 8004d70:	3508      	adds	r5, #8
 8004d72:	2d0c      	cmp	r5, #12
 8004d74:	bf38      	it	cc
 8004d76:	250c      	movcc	r5, #12
 8004d78:	2d00      	cmp	r5, #0
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	db01      	blt.n	8004d82 <_malloc_r+0x1a>
 8004d7e:	42a9      	cmp	r1, r5
 8004d80:	d903      	bls.n	8004d8a <_malloc_r+0x22>
 8004d82:	230c      	movs	r3, #12
 8004d84:	6033      	str	r3, [r6, #0]
 8004d86:	2000      	movs	r0, #0
 8004d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d8a:	f000 f87d 	bl	8004e88 <__malloc_lock>
 8004d8e:	4921      	ldr	r1, [pc, #132]	; (8004e14 <_malloc_r+0xac>)
 8004d90:	680a      	ldr	r2, [r1, #0]
 8004d92:	4614      	mov	r4, r2
 8004d94:	b99c      	cbnz	r4, 8004dbe <_malloc_r+0x56>
 8004d96:	4f20      	ldr	r7, [pc, #128]	; (8004e18 <_malloc_r+0xb0>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	b923      	cbnz	r3, 8004da6 <_malloc_r+0x3e>
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4630      	mov	r0, r6
 8004da0:	f000 f862 	bl	8004e68 <_sbrk_r>
 8004da4:	6038      	str	r0, [r7, #0]
 8004da6:	4629      	mov	r1, r5
 8004da8:	4630      	mov	r0, r6
 8004daa:	f000 f85d 	bl	8004e68 <_sbrk_r>
 8004dae:	1c43      	adds	r3, r0, #1
 8004db0:	d123      	bne.n	8004dfa <_malloc_r+0x92>
 8004db2:	230c      	movs	r3, #12
 8004db4:	4630      	mov	r0, r6
 8004db6:	6033      	str	r3, [r6, #0]
 8004db8:	f000 f86c 	bl	8004e94 <__malloc_unlock>
 8004dbc:	e7e3      	b.n	8004d86 <_malloc_r+0x1e>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	1b5b      	subs	r3, r3, r5
 8004dc2:	d417      	bmi.n	8004df4 <_malloc_r+0x8c>
 8004dc4:	2b0b      	cmp	r3, #11
 8004dc6:	d903      	bls.n	8004dd0 <_malloc_r+0x68>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	441c      	add	r4, r3
 8004dcc:	6025      	str	r5, [r4, #0]
 8004dce:	e004      	b.n	8004dda <_malloc_r+0x72>
 8004dd0:	6863      	ldr	r3, [r4, #4]
 8004dd2:	42a2      	cmp	r2, r4
 8004dd4:	bf0c      	ite	eq
 8004dd6:	600b      	streq	r3, [r1, #0]
 8004dd8:	6053      	strne	r3, [r2, #4]
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f000 f85a 	bl	8004e94 <__malloc_unlock>
 8004de0:	f104 000b 	add.w	r0, r4, #11
 8004de4:	1d23      	adds	r3, r4, #4
 8004de6:	f020 0007 	bic.w	r0, r0, #7
 8004dea:	1ac2      	subs	r2, r0, r3
 8004dec:	d0cc      	beq.n	8004d88 <_malloc_r+0x20>
 8004dee:	1a1b      	subs	r3, r3, r0
 8004df0:	50a3      	str	r3, [r4, r2]
 8004df2:	e7c9      	b.n	8004d88 <_malloc_r+0x20>
 8004df4:	4622      	mov	r2, r4
 8004df6:	6864      	ldr	r4, [r4, #4]
 8004df8:	e7cc      	b.n	8004d94 <_malloc_r+0x2c>
 8004dfa:	1cc4      	adds	r4, r0, #3
 8004dfc:	f024 0403 	bic.w	r4, r4, #3
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d0e3      	beq.n	8004dcc <_malloc_r+0x64>
 8004e04:	1a21      	subs	r1, r4, r0
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 f82e 	bl	8004e68 <_sbrk_r>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d1dd      	bne.n	8004dcc <_malloc_r+0x64>
 8004e10:	e7cf      	b.n	8004db2 <_malloc_r+0x4a>
 8004e12:	bf00      	nop
 8004e14:	2000024c 	.word	0x2000024c
 8004e18:	20000250 	.word	0x20000250

08004e1c <_realloc_r>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	4607      	mov	r7, r0
 8004e20:	4614      	mov	r4, r2
 8004e22:	460e      	mov	r6, r1
 8004e24:	b921      	cbnz	r1, 8004e30 <_realloc_r+0x14>
 8004e26:	4611      	mov	r1, r2
 8004e28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e2c:	f7ff bf9c 	b.w	8004d68 <_malloc_r>
 8004e30:	b922      	cbnz	r2, 8004e3c <_realloc_r+0x20>
 8004e32:	f7ff ff4d 	bl	8004cd0 <_free_r>
 8004e36:	4625      	mov	r5, r4
 8004e38:	4628      	mov	r0, r5
 8004e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e3c:	f000 f830 	bl	8004ea0 <_malloc_usable_size_r>
 8004e40:	42a0      	cmp	r0, r4
 8004e42:	d20f      	bcs.n	8004e64 <_realloc_r+0x48>
 8004e44:	4621      	mov	r1, r4
 8004e46:	4638      	mov	r0, r7
 8004e48:	f7ff ff8e 	bl	8004d68 <_malloc_r>
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d0f2      	beq.n	8004e38 <_realloc_r+0x1c>
 8004e52:	4631      	mov	r1, r6
 8004e54:	4622      	mov	r2, r4
 8004e56:	f7ff ff13 	bl	8004c80 <memcpy>
 8004e5a:	4631      	mov	r1, r6
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f7ff ff37 	bl	8004cd0 <_free_r>
 8004e62:	e7e9      	b.n	8004e38 <_realloc_r+0x1c>
 8004e64:	4635      	mov	r5, r6
 8004e66:	e7e7      	b.n	8004e38 <_realloc_r+0x1c>

08004e68 <_sbrk_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	4d05      	ldr	r5, [pc, #20]	; (8004e84 <_sbrk_r+0x1c>)
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	602b      	str	r3, [r5, #0]
 8004e74:	f7fd f91e 	bl	80020b4 <_sbrk>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_sbrk_r+0x1a>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_sbrk_r+0x1a>
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	200002e4 	.word	0x200002e4

08004e88 <__malloc_lock>:
 8004e88:	4801      	ldr	r0, [pc, #4]	; (8004e90 <__malloc_lock+0x8>)
 8004e8a:	f000 b811 	b.w	8004eb0 <__retarget_lock_acquire_recursive>
 8004e8e:	bf00      	nop
 8004e90:	200002ec 	.word	0x200002ec

08004e94 <__malloc_unlock>:
 8004e94:	4801      	ldr	r0, [pc, #4]	; (8004e9c <__malloc_unlock+0x8>)
 8004e96:	f000 b80c 	b.w	8004eb2 <__retarget_lock_release_recursive>
 8004e9a:	bf00      	nop
 8004e9c:	200002ec 	.word	0x200002ec

08004ea0 <_malloc_usable_size_r>:
 8004ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ea4:	1f18      	subs	r0, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bfbc      	itt	lt
 8004eaa:	580b      	ldrlt	r3, [r1, r0]
 8004eac:	18c0      	addlt	r0, r0, r3
 8004eae:	4770      	bx	lr

08004eb0 <__retarget_lock_acquire_recursive>:
 8004eb0:	4770      	bx	lr

08004eb2 <__retarget_lock_release_recursive>:
 8004eb2:	4770      	bx	lr

08004eb4 <_init>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	bf00      	nop
 8004eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eba:	bc08      	pop	{r3}
 8004ebc:	469e      	mov	lr, r3
 8004ebe:	4770      	bx	lr

08004ec0 <_fini>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	bf00      	nop
 8004ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec6:	bc08      	pop	{r3}
 8004ec8:	469e      	mov	lr, r3
 8004eca:	4770      	bx	lr
