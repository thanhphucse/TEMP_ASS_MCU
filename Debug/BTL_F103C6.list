
BTL_F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004418  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800454c  0800454c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800454c  0800454c  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800454c  0800454c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08004554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  200000a4  080045f8  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080045f8  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d472  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228c  00000000  00000000  0002d53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  0002f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  000306a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017792  00000000  00000000  000313f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f66f  00000000  00000000  00048b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000851f4  00000000  00000000  000581f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd3ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003940  00000000  00000000  000dd440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a4 	.word	0x200000a4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800450c 	.word	0x0800450c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000a8 	.word	0x200000a8
 8000148:	0800450c 	.word	0x0800450c

0800014c <isButton_BUT1_Pressed>:
int button_BUT3_LongPressed_flag = 0;
int button_PEDES_LongPressed_flag = 0;


int isButton_BUT1_Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_BUT1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton_BUT1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton_BUT1_Pressed+0x16>
	{
		button_BUT1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton_BUT1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton_BUT1_Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000c0 	.word	0x200000c0

08000170 <isButton_BUT2_Pressed>:
int isButton_BUT2_Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_BUT2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton_BUT2_Pressed+0x16>
	{
		button_BUT2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton_BUT2_Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000c4 	.word	0x200000c4

08000194 <isButton_BUT3_Pressed>:
int isButton_BUT3_Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_BUT3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton_BUT3_Pressed+0x16>
	{
		button_BUT3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton_BUT3_Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000c8 	.word	0x200000c8

080001b8 <isButton_Pedes_Pressed>:
int isButton_Pedes_Pressed()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button_PEDES_flag == 1)
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton_Pedes_Pressed+0x16>
	{
		button_PEDES_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton_Pedes_Pressed+0x18>
	}
	else return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200000cc 	.word	0x200000cc

080001dc <getKeyInput>:
	else return 0;
}


void getKeyInput()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e187      	b.n	80004f8 <getKeyInput+0x31c>
		// button debouncing
		keyReg0[i] = keyReg1[i];
 80001e8:	4a7f      	ldr	r2, [pc, #508]	; (80003e8 <getKeyInput+0x20c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	497e      	ldr	r1, [pc, #504]	; (80003ec <getKeyInput+0x210>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001f8:	4a7d      	ldr	r2, [pc, #500]	; (80003f0 <getKeyInput+0x214>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4979      	ldr	r1, [pc, #484]	; (80003e8 <getKeyInput+0x20c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//handle button 1
		if(i == 0){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d154      	bne.n	80002b8 <getKeyInput+0xdc>
			keyReg2[i] = HAL_GPIO_ReadPin(A1_BUTTON1_GPIO_Port, A1_BUTTON1_Pin);
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	4878      	ldr	r0, [pc, #480]	; (80003f4 <getKeyInput+0x218>)
 8000214:	f002 f9ae 	bl	8002574 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	4619      	mov	r1, r3
 800021c:	4a74      	ldr	r2, [pc, #464]	; (80003f0 <getKeyInput+0x214>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000224:	4a71      	ldr	r2, [pc, #452]	; (80003ec <getKeyInput+0x210>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	496e      	ldr	r1, [pc, #440]	; (80003e8 <getKeyInput+0x20c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d13f      	bne.n	80002b8 <getKeyInput+0xdc>
 8000238:	4a6b      	ldr	r2, [pc, #428]	; (80003e8 <getKeyInput+0x20c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	496b      	ldr	r1, [pc, #428]	; (80003f0 <getKeyInput+0x214>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d135      	bne.n	80002b8 <getKeyInput+0xdc>
			{
				 //case short pressed
				if(keyReg3[i] != keyReg2[i])
 800024c:	4a6a      	ldr	r2, [pc, #424]	; (80003f8 <getKeyInput+0x21c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4966      	ldr	r1, [pc, #408]	; (80003f0 <getKeyInput+0x214>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d015      	beq.n	800028c <getKeyInput+0xb0>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 8000260:	4a63      	ldr	r2, [pc, #396]	; (80003f0 <getKeyInput+0x214>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	4963      	ldr	r1, [pc, #396]	; (80003f8 <getKeyInput+0x21c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000270:	4a5f      	ldr	r2, [pc, #380]	; (80003f0 <getKeyInput+0x214>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d11d      	bne.n	80002b8 <getKeyInput+0xdc>
					{
						//TODO
						button_BUT1_flag = 1;
 800027c:	4b5f      	ldr	r3, [pc, #380]	; (80003fc <getKeyInput+0x220>)
 800027e:	2201      	movs	r2, #1
 8000280:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000282:	4b5f      	ldr	r3, [pc, #380]	; (8000400 <getKeyInput+0x224>)
 8000284:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	e015      	b.n	80002b8 <getKeyInput+0xdc>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800028c:	4a58      	ldr	r2, [pc, #352]	; (80003f0 <getKeyInput+0x214>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10f      	bne.n	80002b8 <getKeyInput+0xdc>
						timerForKeyPress--;
 8000298:	4b59      	ldr	r3, [pc, #356]	; (8000400 <getKeyInput+0x224>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a58      	ldr	r2, [pc, #352]	; (8000400 <getKeyInput+0x224>)
 80002a0:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80002a2:	4b57      	ldr	r3, [pc, #348]	; (8000400 <getKeyInput+0x224>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d106      	bne.n	80002b8 <getKeyInput+0xdc>
						{
							//TODO
							button_BUT1_LongPressed_flag = 1;
 80002aa:	4b56      	ldr	r3, [pc, #344]	; (8000404 <getKeyInput+0x228>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80002b0:	4b53      	ldr	r3, [pc, #332]	; (8000400 <getKeyInput+0x224>)
 80002b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002b6:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 2
		if(i == 1){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d153      	bne.n	8000366 <getKeyInput+0x18a>
			keyReg2[i] = HAL_GPIO_ReadPin(A2_BUTTON2_GPIO_Port, A2_BUTTON2_Pin);
 80002be:	2120      	movs	r1, #32
 80002c0:	4851      	ldr	r0, [pc, #324]	; (8000408 <getKeyInput+0x22c>)
 80002c2:	f002 f957 	bl	8002574 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4619      	mov	r1, r3
 80002ca:	4a49      	ldr	r2, [pc, #292]	; (80003f0 <getKeyInput+0x214>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80002d2:	4a46      	ldr	r2, [pc, #280]	; (80003ec <getKeyInput+0x210>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002da:	4943      	ldr	r1, [pc, #268]	; (80003e8 <getKeyInput+0x20c>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d13f      	bne.n	8000366 <getKeyInput+0x18a>
 80002e6:	4a40      	ldr	r2, [pc, #256]	; (80003e8 <getKeyInput+0x20c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ee:	4940      	ldr	r1, [pc, #256]	; (80003f0 <getKeyInput+0x214>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d135      	bne.n	8000366 <getKeyInput+0x18a>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80002fa:	4a3f      	ldr	r2, [pc, #252]	; (80003f8 <getKeyInput+0x21c>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000302:	493b      	ldr	r1, [pc, #236]	; (80003f0 <getKeyInput+0x214>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800030a:	429a      	cmp	r2, r3
 800030c:	d015      	beq.n	800033a <getKeyInput+0x15e>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 800030e:	4a38      	ldr	r2, [pc, #224]	; (80003f0 <getKeyInput+0x214>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000316:	4938      	ldr	r1, [pc, #224]	; (80003f8 <getKeyInput+0x21c>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 800031e:	4a34      	ldr	r2, [pc, #208]	; (80003f0 <getKeyInput+0x214>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11d      	bne.n	8000366 <getKeyInput+0x18a>
					{
						//TODO
						button_BUT2_flag = 1;
 800032a:	4b38      	ldr	r3, [pc, #224]	; (800040c <getKeyInput+0x230>)
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000330:	4b33      	ldr	r3, [pc, #204]	; (8000400 <getKeyInput+0x224>)
 8000332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	e015      	b.n	8000366 <getKeyInput+0x18a>
					}
				}
				else// key long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800033a:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <getKeyInput+0x214>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10f      	bne.n	8000366 <getKeyInput+0x18a>
						timerForKeyPress--;
 8000346:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <getKeyInput+0x224>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a2c      	ldr	r2, [pc, #176]	; (8000400 <getKeyInput+0x224>)
 800034e:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <getKeyInput+0x224>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d106      	bne.n	8000366 <getKeyInput+0x18a>
						{
							//TODO
							button_BUT2_LongPressed_flag = 1;
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <getKeyInput+0x234>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <getKeyInput+0x224>)
 8000360:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000364:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 3
		if(i == 2){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d16b      	bne.n	8000444 <getKeyInput+0x268>
			keyReg2[i] = HAL_GPIO_ReadPin(A3_BUTTON3_GPIO_Port, A3_BUTTON3_Pin);
 800036c:	2101      	movs	r1, #1
 800036e:	4821      	ldr	r0, [pc, #132]	; (80003f4 <getKeyInput+0x218>)
 8000370:	f002 f900 	bl	8002574 <HAL_GPIO_ReadPin>
 8000374:	4603      	mov	r3, r0
 8000376:	4619      	mov	r1, r3
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <getKeyInput+0x214>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000380:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <getKeyInput+0x210>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000388:	4917      	ldr	r1, [pc, #92]	; (80003e8 <getKeyInput+0x20c>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000390:	429a      	cmp	r2, r3
 8000392:	d157      	bne.n	8000444 <getKeyInput+0x268>
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <getKeyInput+0x20c>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <getKeyInput+0x214>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d14d      	bne.n	8000444 <getKeyInput+0x268>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <getKeyInput+0x21c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b0:	490f      	ldr	r1, [pc, #60]	; (80003f0 <getKeyInput+0x214>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d02d      	beq.n	8000418 <getKeyInput+0x23c>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <getKeyInput+0x214>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <getKeyInput+0x21c>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80003cc:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <getKeyInput+0x214>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d135      	bne.n	8000444 <getKeyInput+0x268>
					{
						//TODO
						button_BUT3_flag = 1;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <getKeyInput+0x238>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <getKeyInput+0x224>)
 80003e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e02d      	b.n	8000444 <getKeyInput+0x268>
 80003e8:	20000010 	.word	0x20000010
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000020 	.word	0x20000020
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	20000030 	.word	0x20000030
 80003fc:	200000c0 	.word	0x200000c0
 8000400:	20000040 	.word	0x20000040
 8000404:	200000d0 	.word	0x200000d0
 8000408:	40010800 	.word	0x40010800
 800040c:	200000c4 	.word	0x200000c4
 8000410:	200000d4 	.word	0x200000d4
 8000414:	200000c8 	.word	0x200000c8
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <getKeyInput+0x330>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10f      	bne.n	8000444 <getKeyInput+0x268>
						timerForKeyPress--;
 8000424:	4b3a      	ldr	r3, [pc, #232]	; (8000510 <getKeyInput+0x334>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	4a39      	ldr	r2, [pc, #228]	; (8000510 <getKeyInput+0x334>)
 800042c:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <getKeyInput+0x334>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d106      	bne.n	8000444 <getKeyInput+0x268>
						{
							//TODO
							button_BUT3_LongPressed_flag = 1;
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <getKeyInput+0x338>)
 8000438:	2201      	movs	r2, #1
 800043a:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <getKeyInput+0x334>)
 800043e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000442:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button pedestrian
		if(i == 3){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d153      	bne.n	80004f2 <getKeyInput+0x316>
			keyReg2[i] = HAL_GPIO_ReadPin(A0_PEDES_BUTTON_GPIO_Port, A0_PEDES_BUTTON_Pin);
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	4832      	ldr	r0, [pc, #200]	; (8000518 <getKeyInput+0x33c>)
 800044e:	f002 f891 	bl	8002574 <HAL_GPIO_ReadPin>
 8000452:	4603      	mov	r3, r0
 8000454:	4619      	mov	r1, r3
 8000456:	4a2d      	ldr	r2, [pc, #180]	; (800050c <getKeyInput+0x330>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 800045e:	4a2f      	ldr	r2, [pc, #188]	; (800051c <getKeyInput+0x340>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000466:	492e      	ldr	r1, [pc, #184]	; (8000520 <getKeyInput+0x344>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800046e:	429a      	cmp	r2, r3
 8000470:	d13f      	bne.n	80004f2 <getKeyInput+0x316>
 8000472:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <getKeyInput+0x344>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047a:	4924      	ldr	r1, [pc, #144]	; (800050c <getKeyInput+0x330>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000482:	429a      	cmp	r2, r3
 8000484:	d135      	bne.n	80004f2 <getKeyInput+0x316>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 8000486:	4a27      	ldr	r2, [pc, #156]	; (8000524 <getKeyInput+0x348>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	491f      	ldr	r1, [pc, #124]	; (800050c <getKeyInput+0x330>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000496:	429a      	cmp	r2, r3
 8000498:	d015      	beq.n	80004c6 <getKeyInput+0x2ea>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <getKeyInput+0x330>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a2:	4920      	ldr	r1, [pc, #128]	; (8000524 <getKeyInput+0x348>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80004aa:	4a18      	ldr	r2, [pc, #96]	; (800050c <getKeyInput+0x330>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d11d      	bne.n	80004f2 <getKeyInput+0x316>
					{
						//TODO
						button_PEDES_flag = 1;
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <getKeyInput+0x34c>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <getKeyInput+0x334>)
 80004be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	e015      	b.n	80004f2 <getKeyInput+0x316>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <getKeyInput+0x330>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d10f      	bne.n	80004f2 <getKeyInput+0x316>
						timerForKeyPress--;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <getKeyInput+0x334>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <getKeyInput+0x334>)
 80004da:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <getKeyInput+0x334>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d106      	bne.n	80004f2 <getKeyInput+0x316>
						{
							//TODO
							button_PEDES_LongPressed_flag = 1;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <getKeyInput+0x350>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <getKeyInput+0x334>)
 80004ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004f0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f77f ae74 	ble.w	80001e8 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000020 	.word	0x20000020
 8000510:	20000040 	.word	0x20000040
 8000514:	200000d8 	.word	0x200000d8
 8000518:	40010800 	.word	0x40010800
 800051c:	20000000 	.word	0x20000000
 8000520:	20000010 	.word	0x20000010
 8000524:	20000030 	.word	0x20000030
 8000528:	200000cc 	.word	0x200000cc
 800052c:	200000dc 	.word	0x200000dc

08000530 <fsm_7SEG_horizontal_run>:
#include "control_7SEG.h"

int status_7SEG_horizontal = display_countDown_horizontal;


void fsm_7SEG_horizontal_run(){
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	switch(status_7SEG_horizontal){
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <fsm_7SEG_horizontal_run+0x88>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	2b0f      	cmp	r3, #15
 800053c:	d837      	bhi.n	80005ae <fsm_7SEG_horizontal_run+0x7e>
 800053e:	a201      	add	r2, pc, #4	; (adr r2, 8000544 <fsm_7SEG_horizontal_run+0x14>)
 8000540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000544:	080005af 	.word	0x080005af
 8000548:	080005af 	.word	0x080005af
 800054c:	080005af 	.word	0x080005af
 8000550:	080005af 	.word	0x080005af
 8000554:	080005af 	.word	0x080005af
 8000558:	080005af 	.word	0x080005af
 800055c:	080005af 	.word	0x080005af
 8000560:	080005af 	.word	0x080005af
 8000564:	080005af 	.word	0x080005af
 8000568:	080005af 	.word	0x080005af
 800056c:	080005af 	.word	0x080005af
 8000570:	080005af 	.word	0x080005af
 8000574:	080005af 	.word	0x080005af
 8000578:	08000585 	.word	0x08000585
 800057c:	08000593 	.word	0x08000593
 8000580:	080005a1 	.word	0x080005a1
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
		case display_mode02:
			_7SEG_buffer_horizontal[0] = 0;
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <fsm_7SEG_horizontal_run+0x8c>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 2;
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <fsm_7SEG_horizontal_run+0x8c>)
 800058c:	2202      	movs	r2, #2
 800058e:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 8000590:	e00e      	b.n	80005b0 <fsm_7SEG_horizontal_run+0x80>
		case display_mode03:
			_7SEG_buffer_horizontal[0] = 0;
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <fsm_7SEG_horizontal_run+0x8c>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 3;
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <fsm_7SEG_horizontal_run+0x8c>)
 800059a:	2203      	movs	r2, #3
 800059c:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 800059e:	e007      	b.n	80005b0 <fsm_7SEG_horizontal_run+0x80>
		case display_mode04:
			_7SEG_buffer_horizontal[0] = 0;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <fsm_7SEG_horizontal_run+0x8c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 4;
 80005a6:	4b05      	ldr	r3, [pc, #20]	; (80005bc <fsm_7SEG_horizontal_run+0x8c>)
 80005a8:	2204      	movs	r2, #4
 80005aa:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 80005ac:	e000      	b.n	80005b0 <fsm_7SEG_horizontal_run+0x80>
		case off_horizontal:
//			off7SEG_horizontal();
			break;
		default:
			break;
 80005ae:	bf00      	nop
	}
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	20000044 	.word	0x20000044
 80005bc:	2000015c 	.word	0x2000015c

080005c0 <fsm_7SEG_vertical_run>:

int status_7SEG_vertical = display_countDown_vertical;



void fsm_7SEG_vertical_run(){
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	switch(status_7SEG_vertical){
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <fsm_7SEG_vertical_run+0x2c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b10      	cmp	r3, #16
 80005ca:	d006      	beq.n	80005da <fsm_7SEG_vertical_run+0x1a>
 80005cc:	2b10      	cmp	r3, #16
 80005ce:	dc06      	bgt.n	80005de <fsm_7SEG_vertical_run+0x1e>
 80005d0:	f113 0f02 	cmn.w	r3, #2
 80005d4:	d005      	beq.n	80005e2 <fsm_7SEG_vertical_run+0x22>
 80005d6:	2b0f      	cmp	r3, #15
			break;
		case off_vertical:
//			off7SEG_vertical();
			break;
		default:
			break;
 80005d8:	e001      	b.n	80005de <fsm_7SEG_vertical_run+0x1e>
			break;
 80005da:	bf00      	nop
 80005dc:	e002      	b.n	80005e4 <fsm_7SEG_vertical_run+0x24>
			break;
 80005de:	bf00      	nop
 80005e0:	e000      	b.n	80005e4 <fsm_7SEG_vertical_run+0x24>
			break;
 80005e2:	bf00      	nop
	}
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000048 	.word	0x20000048

080005f0 <fsm_mannual_run>:
#include "button.h"
#include "fsm_traffic_blink.h"

status_mannual = mannual_init;

void fsm_mannual_run(){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	switch(status_mannual){
 80005f4:	4b54      	ldr	r3, [pc, #336]	; (8000748 <fsm_mannual_run+0x158>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3b3c      	subs	r3, #60	; 0x3c
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	f200 80a1 	bhi.w	8000742 <fsm_mannual_run+0x152>
 8000600:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <fsm_mannual_run+0x18>)
 8000602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000606:	bf00      	nop
 8000608:	08000619 	.word	0x08000619
 800060c:	08000629 	.word	0x08000629
 8000610:	08000687 	.word	0x08000687
 8000614:	080006e5 	.word	0x080006e5
		case mannual_init:
			status_mannual = mannual_red;
 8000618:	4b4b      	ldr	r3, [pc, #300]	; (8000748 <fsm_mannual_run+0x158>)
 800061a:	223d      	movs	r2, #61	; 0x3d
 800061c:	601a      	str	r2, [r3, #0]
			setTimer9(5000);
 800061e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000622:	f001 f827 	bl	8001674 <setTimer9>
			break;
 8000626:	e08d      	b.n	8000744 <fsm_mannual_run+0x154>
		case mannual_red:
			if(timer9_flag == 1){
 8000628:	4b48      	ldr	r3, [pc, #288]	; (800074c <fsm_mannual_run+0x15c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d10e      	bne.n	800064e <fsm_mannual_run+0x5e>
				status_system = INIT;
 8000630:	4b47      	ldr	r3, [pc, #284]	; (8000750 <fsm_mannual_run+0x160>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000636:	4b44      	ldr	r3, [pc, #272]	; (8000748 <fsm_mannual_run+0x158>)
 8000638:	223c      	movs	r2, #60	; 0x3c
 800063a:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 800063c:	4b45      	ldr	r3, [pc, #276]	; (8000754 <fsm_mannual_run+0x164>)
 800063e:	2213      	movs	r2, #19
 8000640:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000642:	4b45      	ldr	r3, [pc, #276]	; (8000758 <fsm_mannual_run+0x168>)
 8000644:	2217      	movs	r2, #23
 8000646:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 8000648:	f001 fb62 	bl	8001d10 <resetTimeTraffic>
				break;
 800064c:	e07a      	b.n	8000744 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 800064e:	f7ff fd8f 	bl	8000170 <isButton_BUT2_Pressed>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d106      	bne.n	8000666 <fsm_mannual_run+0x76>
				status_mannual = mannual_green;
 8000658:	4b3b      	ldr	r3, [pc, #236]	; (8000748 <fsm_mannual_run+0x158>)
 800065a:	223e      	movs	r2, #62	; 0x3e
 800065c:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 800065e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000662:	f001 f807 	bl	8001674 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000666:	f7ff fd71 	bl	800014c <isButton_BUT1_Pressed>
 800066a:	4603      	mov	r3, r0
 800066c:	2b01      	cmp	r3, #1
 800066e:	d105      	bne.n	800067c <fsm_mannual_run+0x8c>
				status_mannual = mannual_init;
 8000670:	4b35      	ldr	r3, [pc, #212]	; (8000748 <fsm_mannual_run+0x158>)
 8000672:	223c      	movs	r2, #60	; 0x3c
 8000674:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 8000676:	4b36      	ldr	r3, [pc, #216]	; (8000750 <fsm_mannual_run+0x160>)
 8000678:	2202      	movs	r2, #2
 800067a:	601a      	str	r2, [r3, #0]
			}
			setRed_horizontal();
 800067c:	f001 fa58 	bl	8001b30 <setRed_horizontal>
			setGreen_vertical();
 8000680:	f001 faa2 	bl	8001bc8 <setGreen_vertical>
			break;
 8000684:	e05e      	b.n	8000744 <fsm_mannual_run+0x154>
		case mannual_green:
			if(timer9_flag == 1){
 8000686:	4b31      	ldr	r3, [pc, #196]	; (800074c <fsm_mannual_run+0x15c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d10e      	bne.n	80006ac <fsm_mannual_run+0xbc>
				status_system = INIT;
 800068e:	4b30      	ldr	r3, [pc, #192]	; (8000750 <fsm_mannual_run+0x160>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000694:	4b2c      	ldr	r3, [pc, #176]	; (8000748 <fsm_mannual_run+0x158>)
 8000696:	223c      	movs	r2, #60	; 0x3c
 8000698:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 800069a:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <fsm_mannual_run+0x164>)
 800069c:	2213      	movs	r2, #19
 800069e:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80006a0:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <fsm_mannual_run+0x168>)
 80006a2:	2217      	movs	r2, #23
 80006a4:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 80006a6:	f001 fb33 	bl	8001d10 <resetTimeTraffic>
				break;
 80006aa:	e04b      	b.n	8000744 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 80006ac:	f7ff fd60 	bl	8000170 <isButton_BUT2_Pressed>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d106      	bne.n	80006c4 <fsm_mannual_run+0xd4>
				status_mannual = mannual_yellow;
 80006b6:	4b24      	ldr	r3, [pc, #144]	; (8000748 <fsm_mannual_run+0x158>)
 80006b8:	223f      	movs	r2, #63	; 0x3f
 80006ba:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80006bc:	f241 3088 	movw	r0, #5000	; 0x1388
 80006c0:	f000 ffd8 	bl	8001674 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 80006c4:	f7ff fd42 	bl	800014c <isButton_BUT1_Pressed>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d105      	bne.n	80006da <fsm_mannual_run+0xea>
				status_mannual = mannual_init;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <fsm_mannual_run+0x158>)
 80006d0:	223c      	movs	r2, #60	; 0x3c
 80006d2:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 80006d4:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <fsm_mannual_run+0x160>)
 80006d6:	2202      	movs	r2, #2
 80006d8:	601a      	str	r2, [r3, #0]
			}
			setGreen_horizontal();
 80006da:	f001 fa3d 	bl	8001b58 <setGreen_horizontal>
			setYellow_vertical();
 80006de:	f001 fa83 	bl	8001be8 <setYellow_vertical>
			break;
 80006e2:	e02f      	b.n	8000744 <fsm_mannual_run+0x154>
		case mannual_yellow:
			if(timer9_flag == 1){
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <fsm_mannual_run+0x15c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d10e      	bne.n	800070a <fsm_mannual_run+0x11a>
				status_system = INIT;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <fsm_mannual_run+0x160>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <fsm_mannual_run+0x158>)
 80006f4:	223c      	movs	r2, #60	; 0x3c
 80006f6:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <fsm_mannual_run+0x164>)
 80006fa:	2213      	movs	r2, #19
 80006fc:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <fsm_mannual_run+0x168>)
 8000700:	2217      	movs	r2, #23
 8000702:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 8000704:	f001 fb04 	bl	8001d10 <resetTimeTraffic>
				break;
 8000708:	e01c      	b.n	8000744 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 800070a:	f7ff fd31 	bl	8000170 <isButton_BUT2_Pressed>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d106      	bne.n	8000722 <fsm_mannual_run+0x132>
				status_mannual = mannual_red;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <fsm_mannual_run+0x158>)
 8000716:	223d      	movs	r2, #61	; 0x3d
 8000718:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 800071a:	f241 3088 	movw	r0, #5000	; 0x1388
 800071e:	f000 ffa9 	bl	8001674 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000722:	f7ff fd13 	bl	800014c <isButton_BUT1_Pressed>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d105      	bne.n	8000738 <fsm_mannual_run+0x148>
				status_system = MODE2;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <fsm_mannual_run+0x160>)
 800072e:	2202      	movs	r2, #2
 8000730:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <fsm_mannual_run+0x158>)
 8000734:	223c      	movs	r2, #60	; 0x3c
 8000736:	601a      	str	r2, [r3, #0]
			}
			setYellow_horizontal();
 8000738:	f001 fa22 	bl	8001b80 <setYellow_horizontal>
			setRed_vertical();
 800073c:	f001 fa34 	bl	8001ba8 <setRed_vertical>
			break;
 8000740:	e000      	b.n	8000744 <fsm_mannual_run+0x154>
		default:
			break;
 8000742:	bf00      	nop
	}
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000004c 	.word	0x2000004c
 800074c:	20000124 	.word	0x20000124
 8000750:	200000e0 	.word	0x200000e0
 8000754:	20000054 	.word	0x20000054
 8000758:	20000058 	.word	0x20000058

0800075c <fsm_pedestrian_run>:
#include "global.h"


int status_pedestrian_light = pedes_off;

void fsm_pedestrian_run(){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	switch(status_pedestrian_light){
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <fsm_pedestrian_run+0x74>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b84      	cmp	r3, #132	; 0x84
 8000766:	d01e      	beq.n	80007a6 <fsm_pedestrian_run+0x4a>
 8000768:	2b84      	cmp	r3, #132	; 0x84
 800076a:	dc2d      	bgt.n	80007c8 <fsm_pedestrian_run+0x6c>
 800076c:	2b82      	cmp	r3, #130	; 0x82
 800076e:	d002      	beq.n	8000776 <fsm_pedestrian_run+0x1a>
 8000770:	2b83      	cmp	r3, #131	; 0x83
 8000772:	d003      	beq.n	800077c <fsm_pedestrian_run+0x20>

			}

			break;
		default:
			break;
 8000774:	e028      	b.n	80007c8 <fsm_pedestrian_run+0x6c>
			set_off_pedes();
 8000776:	f001 fb01 	bl	8001d7c <set_off_pedes>
			break;
 800077a:	e026      	b.n	80007ca <fsm_pedestrian_run+0x6e>
			set_red_pedes();
 800077c:	f001 fb12 	bl	8001da4 <set_red_pedes>
			if (timer30_flag == 1){
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <fsm_pedestrian_run+0x78>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d102      	bne.n	800078e <fsm_pedestrian_run+0x32>
				status_pedestrian_light = pedes_off;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <fsm_pedestrian_run+0x74>)
 800078a:	2282      	movs	r2, #130	; 0x82
 800078c:	601a      	str	r2, [r3, #0]
			if (status_traffic_blink_horizontal == red_horizontal)
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <fsm_pedestrian_run+0x7c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b14      	cmp	r3, #20
 8000794:	d103      	bne.n	800079e <fsm_pedestrian_run+0x42>
				status_pedestrian_light = pedes_green;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <fsm_pedestrian_run+0x74>)
 8000798:	2284      	movs	r2, #132	; 0x84
 800079a:	601a      	str	r2, [r3, #0]
			break;
 800079c:	e015      	b.n	80007ca <fsm_pedestrian_run+0x6e>
				status_pedestrian_light = pedes_red;
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <fsm_pedestrian_run+0x74>)
 80007a0:	2283      	movs	r2, #131	; 0x83
 80007a2:	601a      	str	r2, [r3, #0]
			break;
 80007a4:	e011      	b.n	80007ca <fsm_pedestrian_run+0x6e>
			set_green_pedes();
 80007a6:	f001 fb11 	bl	8001dcc <set_green_pedes>
			if (status_traffic_blink_horizontal == red_horizontal)
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <fsm_pedestrian_run+0x7c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2b14      	cmp	r3, #20
 80007b0:	d103      	bne.n	80007ba <fsm_pedestrian_run+0x5e>
				status_pedestrian_light = pedes_green;
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <fsm_pedestrian_run+0x74>)
 80007b4:	2284      	movs	r2, #132	; 0x84
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e002      	b.n	80007c0 <fsm_pedestrian_run+0x64>
				status_pedestrian_light = pedes_red;
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <fsm_pedestrian_run+0x74>)
 80007bc:	2283      	movs	r2, #131	; 0x83
 80007be:	601a      	str	r2, [r3, #0]
			if (time_red_horizontal_temp <= 3){
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <fsm_pedestrian_run+0x80>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b03      	cmp	r3, #3
			break;
 80007c6:	e000      	b.n	80007ca <fsm_pedestrian_run+0x6e>
			break;
 80007c8:	bf00      	nop
	}
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000050 	.word	0x20000050
 80007d4:	2000013c 	.word	0x2000013c
 80007d8:	20000054 	.word	0x20000054
 80007dc:	20000070 	.word	0x20000070

080007e0 <fsm_system_run>:
#include "fsm_traffic_blink.h"
#include "fsm_mannual.h"
#include "software_timer.h"


fsm_system_run(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	switch(status_system){
 80007e4:	4b88      	ldr	r3, [pc, #544]	; (8000a08 <fsm_system_run+0x228>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	dc13      	bgt.n	8000814 <fsm_system_run+0x34>
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	f2c0 8188 	blt.w	8000b02 <fsm_system_run+0x322>
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	f200 8185 	bhi.w	8000b02 <fsm_system_run+0x322>
 80007f8:	a201      	add	r2, pc, #4	; (adr r2, 8000800 <fsm_system_run+0x20>)
 80007fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007fe:	bf00      	nop
 8000800:	0800081b 	.word	0x0800081b
 8000804:	08000823 	.word	0x08000823
 8000808:	080008dd 	.word	0x080008dd
 800080c:	08000973 	.word	0x08000973
 8000810:	08000a55 	.word	0x08000a55
 8000814:	2b5f      	cmp	r3, #95	; 0x5f
 8000816:	d04e      	beq.n	80008b6 <fsm_system_run+0xd6>
				status_traffic_blink_vertical = init_vertical;
				status_system = INIT;
			}
			break;
	}
}
 8000818:	e173      	b.n	8000b02 <fsm_system_run+0x322>
			status_system = MODE1;
 800081a:	4b7b      	ldr	r3, [pc, #492]	; (8000a08 <fsm_system_run+0x228>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
			break;
 8000820:	e16f      	b.n	8000b02 <fsm_system_run+0x322>
			status_traffic_horizontal = display_traffic_horizontal;
 8000822:	4b7a      	ldr	r3, [pc, #488]	; (8000a0c <fsm_system_run+0x22c>)
 8000824:	2205      	movs	r2, #5
 8000826:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = display_traffic_vertical;
 8000828:	4b79      	ldr	r3, [pc, #484]	; (8000a10 <fsm_system_run+0x230>)
 800082a:	2209      	movs	r2, #9
 800082c:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_countDown_horizontal;
 800082e:	4b79      	ldr	r3, [pc, #484]	; (8000a14 <fsm_system_run+0x234>)
 8000830:	220b      	movs	r2, #11
 8000832:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_countDown_vertical;
 8000834:	4b78      	ldr	r3, [pc, #480]	; (8000a18 <fsm_system_run+0x238>)
 8000836:	220f      	movs	r2, #15
 8000838:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 800083a:	f7ff fc87 	bl	800014c <isButton_BUT1_Pressed>
 800083e:	4603      	mov	r3, r0
 8000840:	2b01      	cmp	r3, #1
 8000842:	d105      	bne.n	8000850 <fsm_system_run+0x70>
				status_system = MODE2;
 8000844:	4b70      	ldr	r3, [pc, #448]	; (8000a08 <fsm_system_run+0x228>)
 8000846:	2202      	movs	r2, #2
 8000848:	601a      	str	r2, [r3, #0]
				status_pedestrian_light = pedes_off;
 800084a:	4b74      	ldr	r3, [pc, #464]	; (8000a1c <fsm_system_run+0x23c>)
 800084c:	2282      	movs	r2, #130	; 0x82
 800084e:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000850:	f7ff fc8e 	bl	8000170 <isButton_BUT2_Pressed>
 8000854:	4603      	mov	r3, r0
 8000856:	2b01      	cmp	r3, #1
 8000858:	d105      	bne.n	8000866 <fsm_system_run+0x86>
				status_system = MAN_MODE;
 800085a:	4b6b      	ldr	r3, [pc, #428]	; (8000a08 <fsm_system_run+0x228>)
 800085c:	225f      	movs	r2, #95	; 0x5f
 800085e:	601a      	str	r2, [r3, #0]
				status_pedestrian_light = pedes_off;
 8000860:	4b6e      	ldr	r3, [pc, #440]	; (8000a1c <fsm_system_run+0x23c>)
 8000862:	2282      	movs	r2, #130	; 0x82
 8000864:	601a      	str	r2, [r3, #0]
			if (isButton_Pedes_Pressed() == 1 ){
 8000866:	f7ff fca7 	bl	80001b8 <isButton_Pedes_Pressed>
 800086a:	4603      	mov	r3, r0
 800086c:	2b01      	cmp	r3, #1
 800086e:	d119      	bne.n	80008a4 <fsm_system_run+0xc4>
				setTimer30(2000*(time_red_horizontal+time_green_horizontal+time_yellow_horizontal));
 8000870:	4b6b      	ldr	r3, [pc, #428]	; (8000a20 <fsm_system_run+0x240>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b6b      	ldr	r3, [pc, #428]	; (8000a24 <fsm_system_run+0x244>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	441a      	add	r2, r3
 800087a:	4b6b      	ldr	r3, [pc, #428]	; (8000a28 <fsm_system_run+0x248>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4413      	add	r3, r2
 8000880:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000884:	fb02 f303 	mul.w	r3, r2, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f000 ff27 	bl	80016dc <setTimer30>
				if (status_traffic_blink_horizontal == red_horizontal)
 800088e:	4b67      	ldr	r3, [pc, #412]	; (8000a2c <fsm_system_run+0x24c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b14      	cmp	r3, #20
 8000894:	d103      	bne.n	800089e <fsm_system_run+0xbe>
					status_pedestrian_light = pedes_green;
 8000896:	4b61      	ldr	r3, [pc, #388]	; (8000a1c <fsm_system_run+0x23c>)
 8000898:	2284      	movs	r2, #132	; 0x84
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	e002      	b.n	80008a4 <fsm_system_run+0xc4>
					status_pedestrian_light = pedes_red;
 800089e:	4b5f      	ldr	r3, [pc, #380]	; (8000a1c <fsm_system_run+0x23c>)
 80008a0:	2283      	movs	r2, #131	; 0x83
 80008a2:	601a      	str	r2, [r3, #0]
			if (timer30_flag == 1){
 80008a4:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <fsm_system_run+0x250>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	f040 8123 	bne.w	8000af4 <fsm_system_run+0x314>
				status_pedestrian_light = pedes_off;
 80008ae:	4b5b      	ldr	r3, [pc, #364]	; (8000a1c <fsm_system_run+0x23c>)
 80008b0:	2282      	movs	r2, #130	; 0x82
 80008b2:	601a      	str	r2, [r3, #0]
			break;
 80008b4:	e11e      	b.n	8000af4 <fsm_system_run+0x314>
			fsm_mannual_run();
 80008b6:	f7ff fe9b 	bl	80005f0 <fsm_mannual_run>
			status_7SEG_horizontal = off_horizontal;
 80008ba:	4b56      	ldr	r3, [pc, #344]	; (8000a14 <fsm_system_run+0x234>)
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295
 80008c0:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = off_vertical;
 80008c2:	4b55      	ldr	r3, [pc, #340]	; (8000a18 <fsm_system_run+0x238>)
 80008c4:	f06f 0201 	mvn.w	r2, #1
 80008c8:	601a      	str	r2, [r3, #0]
			status_traffic_horizontal = mannual_horizontal;
 80008ca:	4b50      	ldr	r3, [pc, #320]	; (8000a0c <fsm_system_run+0x22c>)
 80008cc:	f06f 0202 	mvn.w	r2, #2
 80008d0:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = mannual_vertical;
 80008d2:	4b4f      	ldr	r3, [pc, #316]	; (8000a10 <fsm_system_run+0x230>)
 80008d4:	f06f 0203 	mvn.w	r2, #3
 80008d8:	601a      	str	r2, [r3, #0]
			break;
 80008da:	e112      	b.n	8000b02 <fsm_system_run+0x322>
			status_traffic_horizontal = modifying_led_red_horizontal;
 80008dc:	4b4b      	ldr	r3, [pc, #300]	; (8000a0c <fsm_system_run+0x22c>)
 80008de:	2206      	movs	r2, #6
 80008e0:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_red_vertical;
 80008e2:	4b4b      	ldr	r3, [pc, #300]	; (8000a10 <fsm_system_run+0x230>)
 80008e4:	221e      	movs	r2, #30
 80008e6:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode02;
 80008e8:	4b4a      	ldr	r3, [pc, #296]	; (8000a14 <fsm_system_run+0x234>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 80008ee:	4b4a      	ldr	r3, [pc, #296]	; (8000a18 <fsm_system_run+0x238>)
 80008f0:	2210      	movs	r2, #16
 80008f2:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 80008f4:	f7ff fc3c 	bl	8000170 <isButton_BUT2_Pressed>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d109      	bne.n	8000912 <fsm_system_run+0x132>
				time_red_horizontal++;
 80008fe:	4b48      	ldr	r3, [pc, #288]	; (8000a20 <fsm_system_run+0x240>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	3301      	adds	r3, #1
 8000904:	4a46      	ldr	r2, [pc, #280]	; (8000a20 <fsm_system_run+0x240>)
 8000906:	6013      	str	r3, [r2, #0]
				time_red_vertical++;
 8000908:	4b4a      	ldr	r3, [pc, #296]	; (8000a34 <fsm_system_run+0x254>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3301      	adds	r3, #1
 800090e:	4a49      	ldr	r2, [pc, #292]	; (8000a34 <fsm_system_run+0x254>)
 8000910:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_red_vertical/10;
 8000912:	4b48      	ldr	r3, [pc, #288]	; (8000a34 <fsm_system_run+0x254>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a48      	ldr	r2, [pc, #288]	; (8000a38 <fsm_system_run+0x258>)
 8000918:	fb82 1203 	smull	r1, r2, r2, r3
 800091c:	1092      	asrs	r2, r2, #2
 800091e:	17db      	asrs	r3, r3, #31
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	4a46      	ldr	r2, [pc, #280]	; (8000a3c <fsm_system_run+0x25c>)
 8000924:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical%10;
 8000926:	4b43      	ldr	r3, [pc, #268]	; (8000a34 <fsm_system_run+0x254>)
 8000928:	6819      	ldr	r1, [r3, #0]
 800092a:	4b43      	ldr	r3, [pc, #268]	; (8000a38 <fsm_system_run+0x258>)
 800092c:	fb83 2301 	smull	r2, r3, r3, r1
 8000930:	109a      	asrs	r2, r3, #2
 8000932:	17cb      	asrs	r3, r1, #31
 8000934:	1ad2      	subs	r2, r2, r3
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	1aca      	subs	r2, r1, r3
 8000940:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <fsm_system_run+0x25c>)
 8000942:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000944:	f7ff fc26 	bl	8000194 <isButton_BUT3_Pressed>
 8000948:	4603      	mov	r3, r0
 800094a:	2b01      	cmp	r3, #1
 800094c:	d107      	bne.n	800095e <fsm_system_run+0x17e>
				time_red_horizontal_temp= time_red_horizontal;
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <fsm_system_run+0x240>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a3b      	ldr	r2, [pc, #236]	; (8000a40 <fsm_system_run+0x260>)
 8000954:	6013      	str	r3, [r2, #0]
				time_red_vertical_temp= time_red_vertical;
 8000956:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <fsm_system_run+0x254>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a3a      	ldr	r2, [pc, #232]	; (8000a44 <fsm_system_run+0x264>)
 800095c:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 800095e:	f7ff fbf5 	bl	800014c <isButton_BUT1_Pressed>
 8000962:	4603      	mov	r3, r0
 8000964:	2b01      	cmp	r3, #1
 8000966:	f040 80c7 	bne.w	8000af8 <fsm_system_run+0x318>
				status_system = MODE3;
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <fsm_system_run+0x228>)
 800096c:	2203      	movs	r2, #3
 800096e:	601a      	str	r2, [r3, #0]
			break;
 8000970:	e0c2      	b.n	8000af8 <fsm_system_run+0x318>
			status_traffic_horizontal = modifying_led_yellow_horizontal;
 8000972:	4b26      	ldr	r3, [pc, #152]	; (8000a0c <fsm_system_run+0x22c>)
 8000974:	2208      	movs	r2, #8
 8000976:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_yellow_vertical;
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <fsm_system_run+0x230>)
 800097a:	2220      	movs	r2, #32
 800097c:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode03;
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <fsm_system_run+0x234>)
 8000980:	220d      	movs	r2, #13
 8000982:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000984:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <fsm_system_run+0x238>)
 8000986:	2210      	movs	r2, #16
 8000988:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 800098a:	f7ff fbf1 	bl	8000170 <isButton_BUT2_Pressed>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d109      	bne.n	80009a8 <fsm_system_run+0x1c8>
				time_yellow_horizontal++;
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <fsm_system_run+0x248>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3301      	adds	r3, #1
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <fsm_system_run+0x248>)
 800099c:	6013      	str	r3, [r2, #0]
				time_yellow_vertical++;
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <fsm_system_run+0x268>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	4a28      	ldr	r2, [pc, #160]	; (8000a48 <fsm_system_run+0x268>)
 80009a6:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_yellow_vertical/10;
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <fsm_system_run+0x268>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <fsm_system_run+0x258>)
 80009ae:	fb82 1203 	smull	r1, r2, r2, r3
 80009b2:	1092      	asrs	r2, r2, #2
 80009b4:	17db      	asrs	r3, r3, #31
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	4a20      	ldr	r2, [pc, #128]	; (8000a3c <fsm_system_run+0x25c>)
 80009ba:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical%10;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <fsm_system_run+0x268>)
 80009be:	6819      	ldr	r1, [r3, #0]
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <fsm_system_run+0x258>)
 80009c2:	fb83 2301 	smull	r2, r3, r3, r1
 80009c6:	109a      	asrs	r2, r3, #2
 80009c8:	17cb      	asrs	r3, r1, #31
 80009ca:	1ad2      	subs	r2, r2, r3
 80009cc:	4613      	mov	r3, r2
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4413      	add	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	1aca      	subs	r2, r1, r3
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <fsm_system_run+0x25c>)
 80009d8:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 80009da:	f7ff fbdb 	bl	8000194 <isButton_BUT3_Pressed>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d107      	bne.n	80009f4 <fsm_system_run+0x214>
				time_yellow_horizontal_temp= time_yellow_horizontal;
 80009e4:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <fsm_system_run+0x248>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <fsm_system_run+0x26c>)
 80009ea:	6013      	str	r3, [r2, #0]
				time_yellow_vertical_temp= time_yellow_vertical;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <fsm_system_run+0x268>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <fsm_system_run+0x270>)
 80009f2:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 80009f4:	f7ff fbaa 	bl	800014c <isButton_BUT1_Pressed>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d17e      	bne.n	8000afc <fsm_system_run+0x31c>
				status_system = MODE4;
 80009fe:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <fsm_system_run+0x228>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	601a      	str	r2, [r3, #0]
			break;
 8000a04:	e07a      	b.n	8000afc <fsm_system_run+0x31c>
 8000a06:	bf00      	nop
 8000a08:	200000e0 	.word	0x200000e0
 8000a0c:	2000005c 	.word	0x2000005c
 8000a10:	20000060 	.word	0x20000060
 8000a14:	20000044 	.word	0x20000044
 8000a18:	20000048 	.word	0x20000048
 8000a1c:	20000050 	.word	0x20000050
 8000a20:	20000064 	.word	0x20000064
 8000a24:	20000068 	.word	0x20000068
 8000a28:	2000006c 	.word	0x2000006c
 8000a2c:	20000054 	.word	0x20000054
 8000a30:	2000013c 	.word	0x2000013c
 8000a34:	20000084 	.word	0x20000084
 8000a38:	66666667 	.word	0x66666667
 8000a3c:	20000164 	.word	0x20000164
 8000a40:	20000070 	.word	0x20000070
 8000a44:	20000090 	.word	0x20000090
 8000a48:	20000080 	.word	0x20000080
 8000a4c:	20000078 	.word	0x20000078
 8000a50:	2000008c 	.word	0x2000008c
			status_traffic_horizontal = modifying_led_green_horizontal;
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <fsm_system_run+0x328>)
 8000a56:	2207      	movs	r2, #7
 8000a58:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_green_vertical;
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <fsm_system_run+0x32c>)
 8000a5c:	221f      	movs	r2, #31
 8000a5e:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode04;
 8000a60:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <fsm_system_run+0x330>)
 8000a62:	220e      	movs	r2, #14
 8000a64:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000a66:	4b2b      	ldr	r3, [pc, #172]	; (8000b14 <fsm_system_run+0x334>)
 8000a68:	2210      	movs	r2, #16
 8000a6a:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000a6c:	f7ff fb80 	bl	8000170 <isButton_BUT2_Pressed>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d109      	bne.n	8000a8a <fsm_system_run+0x2aa>
				time_green_horizontal++;
 8000a76:	4b28      	ldr	r3, [pc, #160]	; (8000b18 <fsm_system_run+0x338>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <fsm_system_run+0x338>)
 8000a7e:	6013      	str	r3, [r2, #0]
				time_green_vertical++;
 8000a80:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <fsm_system_run+0x33c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a25      	ldr	r2, [pc, #148]	; (8000b1c <fsm_system_run+0x33c>)
 8000a88:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_green_vertical/10;
 8000a8a:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <fsm_system_run+0x33c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a24      	ldr	r2, [pc, #144]	; (8000b20 <fsm_system_run+0x340>)
 8000a90:	fb82 1203 	smull	r1, r2, r2, r3
 8000a94:	1092      	asrs	r2, r2, #2
 8000a96:	17db      	asrs	r3, r3, #31
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <fsm_system_run+0x344>)
 8000a9c:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical%10;
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <fsm_system_run+0x33c>)
 8000aa0:	6819      	ldr	r1, [r3, #0]
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <fsm_system_run+0x340>)
 8000aa4:	fb83 2301 	smull	r2, r3, r3, r1
 8000aa8:	109a      	asrs	r2, r3, #2
 8000aaa:	17cb      	asrs	r3, r1, #31
 8000aac:	1ad2      	subs	r2, r2, r3
 8000aae:	4613      	mov	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	4413      	add	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	1aca      	subs	r2, r1, r3
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <fsm_system_run+0x344>)
 8000aba:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000abc:	f7ff fb6a 	bl	8000194 <isButton_BUT3_Pressed>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d107      	bne.n	8000ad6 <fsm_system_run+0x2f6>
				time_green_horizontal_temp= time_green_horizontal;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <fsm_system_run+0x338>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <fsm_system_run+0x348>)
 8000acc:	6013      	str	r3, [r2, #0]
				time_green_vertical_temp= time_green_vertical;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <fsm_system_run+0x33c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <fsm_system_run+0x34c>)
 8000ad4:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000ad6:	f7ff fb39 	bl	800014c <isButton_BUT1_Pressed>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d10f      	bne.n	8000b00 <fsm_system_run+0x320>
				status_traffic_blink_horizontal = init_horizontal;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <fsm_system_run+0x350>)
 8000ae2:	2213      	movs	r2, #19
 8000ae4:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <fsm_system_run+0x354>)
 8000ae8:	2217      	movs	r2, #23
 8000aea:	601a      	str	r2, [r3, #0]
				status_system = INIT;
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <fsm_system_run+0x358>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
			break;
 8000af2:	e005      	b.n	8000b00 <fsm_system_run+0x320>
			break;
 8000af4:	bf00      	nop
 8000af6:	e004      	b.n	8000b02 <fsm_system_run+0x322>
			break;
 8000af8:	bf00      	nop
 8000afa:	e002      	b.n	8000b02 <fsm_system_run+0x322>
			break;
 8000afc:	bf00      	nop
 8000afe:	e000      	b.n	8000b02 <fsm_system_run+0x322>
			break;
 8000b00:	bf00      	nop
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000005c 	.word	0x2000005c
 8000b0c:	20000060 	.word	0x20000060
 8000b10:	20000044 	.word	0x20000044
 8000b14:	20000048 	.word	0x20000048
 8000b18:	20000068 	.word	0x20000068
 8000b1c:	2000007c 	.word	0x2000007c
 8000b20:	66666667 	.word	0x66666667
 8000b24:	20000164 	.word	0x20000164
 8000b28:	20000074 	.word	0x20000074
 8000b2c:	20000088 	.word	0x20000088
 8000b30:	20000054 	.word	0x20000054
 8000b34:	20000058 	.word	0x20000058
 8000b38:	200000e0 	.word	0x200000e0

08000b3c <fsm_traffic_blink_horizontal_run>:
#include "control_7SEG.h"

int status_traffic_blink_horizontal = init_horizontal;
int status_traffic_blink_vertical = init_vertical;

void fsm_traffic_blink_horizontal_run(){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_horizontal){
 8000b40:	4b85      	ldr	r3, [pc, #532]	; (8000d58 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3b13      	subs	r3, #19
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	f200 80fd 	bhi.w	8000d46 <fsm_traffic_blink_horizontal_run+0x20a>
 8000b4c:	a201      	add	r2, pc, #4	; (adr r2, 8000b54 <fsm_traffic_blink_horizontal_run+0x18>)
 8000b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b52:	bf00      	nop
 8000b54:	08000b65 	.word	0x08000b65
 8000b58:	08000b8f 	.word	0x08000b8f
 8000b5c:	08000c23 	.word	0x08000c23
 8000b60:	08000cb5 	.word	0x08000cb5
		case init_horizontal:
			status_traffic_blink_horizontal = red_horizontal;
 8000b64:	4b7c      	ldr	r3, [pc, #496]	; (8000d58 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000b66:	2214      	movs	r2, #20
 8000b68:	601a      	str	r2, [r3, #0]
			traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000b6a:	4b7c      	ldr	r3, [pc, #496]	; (8000d5c <fsm_traffic_blink_horizontal_run+0x220>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	4a7a      	ldr	r2, [pc, #488]	; (8000d60 <fsm_traffic_blink_horizontal_run+0x224>)
 8000b78:	6013      	str	r3, [r2, #0]
			//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
			setTimer1(traffic_buffer_horizontal[0]);
 8000b7a:	4b79      	ldr	r3, [pc, #484]	; (8000d60 <fsm_traffic_blink_horizontal_run+0x224>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 fca8 	bl	80014d4 <setTimer1>
			setTimer3(1000);// count down as a clock
 8000b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b88:	f000 fcd8 	bl	800153c <setTimer3>
			break;
 8000b8c:	e0e2      	b.n	8000d54 <fsm_traffic_blink_horizontal_run+0x218>
		case red_horizontal:
			setRed_horizontal();
 8000b8e:	f000 ffcf 	bl	8001b30 <setRed_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_red_horizontal_temp/10;
 8000b92:	4b74      	ldr	r3, [pc, #464]	; (8000d64 <fsm_traffic_blink_horizontal_run+0x228>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a74      	ldr	r2, [pc, #464]	; (8000d68 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000b98:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9c:	1092      	asrs	r2, r2, #2
 8000b9e:	17db      	asrs	r3, r3, #31
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	4a72      	ldr	r2, [pc, #456]	; (8000d6c <fsm_traffic_blink_horizontal_run+0x230>)
 8000ba4:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_red_horizontal_temp%10;
 8000ba6:	4b6f      	ldr	r3, [pc, #444]	; (8000d64 <fsm_traffic_blink_horizontal_run+0x228>)
 8000ba8:	6819      	ldr	r1, [r3, #0]
 8000baa:	4b6f      	ldr	r3, [pc, #444]	; (8000d68 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000bac:	fb83 2301 	smull	r2, r3, r3, r1
 8000bb0:	109a      	asrs	r2, r3, #2
 8000bb2:	17cb      	asrs	r3, r1, #31
 8000bb4:	1ad2      	subs	r2, r2, r3
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	4413      	add	r3, r2
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	1aca      	subs	r2, r1, r3
 8000bc0:	4b6a      	ldr	r3, [pc, #424]	; (8000d6c <fsm_traffic_blink_horizontal_run+0x230>)
 8000bc2:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000bc4:	4b6a      	ldr	r3, [pc, #424]	; (8000d70 <fsm_traffic_blink_horizontal_run+0x234>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d110      	bne.n	8000bee <fsm_traffic_blink_horizontal_run+0xb2>
				time_red_horizontal_temp--;
 8000bcc:	4b65      	ldr	r3, [pc, #404]	; (8000d64 <fsm_traffic_blink_horizontal_run+0x228>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	4a64      	ldr	r2, [pc, #400]	; (8000d64 <fsm_traffic_blink_horizontal_run+0x228>)
 8000bd4:	6013      	str	r3, [r2, #0]
				if(time_red_horizontal_temp == 0){
 8000bd6:	4b63      	ldr	r3, [pc, #396]	; (8000d64 <fsm_traffic_blink_horizontal_run+0x228>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <fsm_traffic_blink_horizontal_run+0xaa>
					time_red_horizontal_temp = time_red_horizontal;
 8000bde:	4b5f      	ldr	r3, [pc, #380]	; (8000d5c <fsm_traffic_blink_horizontal_run+0x220>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a60      	ldr	r2, [pc, #384]	; (8000d64 <fsm_traffic_blink_horizontal_run+0x228>)
 8000be4:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bea:	f000 fca7 	bl	800153c <setTimer3>
			}

			if(timer1_flag == 1){
 8000bee:	4b61      	ldr	r3, [pc, #388]	; (8000d74 <fsm_traffic_blink_horizontal_run+0x238>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	f040 80a9 	bne.w	8000d4a <fsm_traffic_blink_horizontal_run+0x20e>
				status_traffic_blink_horizontal = green_horizontal;
 8000bf8:	4b57      	ldr	r3, [pc, #348]	; (8000d58 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000bfa:	2215      	movs	r2, #21
 8000bfc:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[1] = time_green_horizontal*1000;
 8000bfe:	4b5e      	ldr	r3, [pc, #376]	; (8000d78 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c06:	fb02 f303 	mul.w	r3, r2, r3
 8000c0a:	4a55      	ldr	r2, [pc, #340]	; (8000d60 <fsm_traffic_blink_horizontal_run+0x224>)
 8000c0c:	6053      	str	r3, [r2, #4]
				//led green will turn on in traffic_buffer_horizontal[1]/1000 seconds
				setTimer1(traffic_buffer_horizontal[1]);
 8000c0e:	4b54      	ldr	r3, [pc, #336]	; (8000d60 <fsm_traffic_blink_horizontal_run+0x224>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fc5e 	bl	80014d4 <setTimer1>
				setTimer3(1000);
 8000c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1c:	f000 fc8e 	bl	800153c <setTimer3>
			}
			break;
 8000c20:	e093      	b.n	8000d4a <fsm_traffic_blink_horizontal_run+0x20e>
		case green_horizontal:
			setGreen_horizontal();
 8000c22:	f000 ff99 	bl	8001b58 <setGreen_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_green_horizontal_temp/10;
 8000c26:	4b55      	ldr	r3, [pc, #340]	; (8000d7c <fsm_traffic_blink_horizontal_run+0x240>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a4f      	ldr	r2, [pc, #316]	; (8000d68 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c30:	1092      	asrs	r2, r2, #2
 8000c32:	17db      	asrs	r3, r3, #31
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	4a4d      	ldr	r2, [pc, #308]	; (8000d6c <fsm_traffic_blink_horizontal_run+0x230>)
 8000c38:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_green_horizontal_temp%10;
 8000c3a:	4b50      	ldr	r3, [pc, #320]	; (8000d7c <fsm_traffic_blink_horizontal_run+0x240>)
 8000c3c:	6819      	ldr	r1, [r3, #0]
 8000c3e:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000c40:	fb83 2301 	smull	r2, r3, r3, r1
 8000c44:	109a      	asrs	r2, r3, #2
 8000c46:	17cb      	asrs	r3, r1, #31
 8000c48:	1ad2      	subs	r2, r2, r3
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	1aca      	subs	r2, r1, r3
 8000c54:	4b45      	ldr	r3, [pc, #276]	; (8000d6c <fsm_traffic_blink_horizontal_run+0x230>)
 8000c56:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000c58:	4b45      	ldr	r3, [pc, #276]	; (8000d70 <fsm_traffic_blink_horizontal_run+0x234>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d110      	bne.n	8000c82 <fsm_traffic_blink_horizontal_run+0x146>
				time_green_horizontal_temp--;
 8000c60:	4b46      	ldr	r3, [pc, #280]	; (8000d7c <fsm_traffic_blink_horizontal_run+0x240>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	4a45      	ldr	r2, [pc, #276]	; (8000d7c <fsm_traffic_blink_horizontal_run+0x240>)
 8000c68:	6013      	str	r3, [r2, #0]
				if(time_green_horizontal_temp == 0){
 8000c6a:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <fsm_traffic_blink_horizontal_run+0x240>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d103      	bne.n	8000c7a <fsm_traffic_blink_horizontal_run+0x13e>
					time_green_horizontal_temp = time_green_horizontal;
 8000c72:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a41      	ldr	r2, [pc, #260]	; (8000d7c <fsm_traffic_blink_horizontal_run+0x240>)
 8000c78:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7e:	f000 fc5d 	bl	800153c <setTimer3>
			}

			if(timer1_flag == 1){
 8000c82:	4b3c      	ldr	r3, [pc, #240]	; (8000d74 <fsm_traffic_blink_horizontal_run+0x238>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d161      	bne.n	8000d4e <fsm_traffic_blink_horizontal_run+0x212>
				status_traffic_blink_horizontal = yellow_horizontal;
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000c8c:	2216      	movs	r2, #22
 8000c8e:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[2] = time_yellow_horizontal*1000;
 8000c90:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <fsm_traffic_blink_horizontal_run+0x244>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c98:	fb02 f303 	mul.w	r3, r2, r3
 8000c9c:	4a30      	ldr	r2, [pc, #192]	; (8000d60 <fsm_traffic_blink_horizontal_run+0x224>)
 8000c9e:	6093      	str	r3, [r2, #8]
				//led yellow will turn on in traffic_buffer_horizontal[2]/1000 seconds
				setTimer1(traffic_buffer_horizontal[2]);
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <fsm_traffic_blink_horizontal_run+0x224>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fc15 	bl	80014d4 <setTimer1>
				setTimer3(1000);
 8000caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cae:	f000 fc45 	bl	800153c <setTimer3>
			}
			break;
 8000cb2:	e04c      	b.n	8000d4e <fsm_traffic_blink_horizontal_run+0x212>
		case yellow_horizontal:
			setYellow_horizontal();
 8000cb4:	f000 ff64 	bl	8001b80 <setYellow_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_yellow_horizontal_temp/10;
 8000cb8:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <fsm_traffic_blink_horizontal_run+0x248>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a2a      	ldr	r2, [pc, #168]	; (8000d68 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc2:	1092      	asrs	r2, r2, #2
 8000cc4:	17db      	asrs	r3, r3, #31
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	4a28      	ldr	r2, [pc, #160]	; (8000d6c <fsm_traffic_blink_horizontal_run+0x230>)
 8000cca:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_yellow_horizontal_temp%10;
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <fsm_traffic_blink_horizontal_run+0x248>)
 8000cce:	6819      	ldr	r1, [r3, #0]
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000cd2:	fb83 2301 	smull	r2, r3, r3, r1
 8000cd6:	109a      	asrs	r2, r3, #2
 8000cd8:	17cb      	asrs	r3, r1, #31
 8000cda:	1ad2      	subs	r2, r2, r3
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	1aca      	subs	r2, r1, r3
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <fsm_traffic_blink_horizontal_run+0x230>)
 8000ce8:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <fsm_traffic_blink_horizontal_run+0x234>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d110      	bne.n	8000d14 <fsm_traffic_blink_horizontal_run+0x1d8>
				time_yellow_horizontal_temp--;
 8000cf2:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <fsm_traffic_blink_horizontal_run+0x248>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <fsm_traffic_blink_horizontal_run+0x248>)
 8000cfa:	6013      	str	r3, [r2, #0]
				if(time_yellow_horizontal_temp == 0){
 8000cfc:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <fsm_traffic_blink_horizontal_run+0x248>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d103      	bne.n	8000d0c <fsm_traffic_blink_horizontal_run+0x1d0>
					time_yellow_horizontal_temp = time_yellow_horizontal;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	; (8000d80 <fsm_traffic_blink_horizontal_run+0x244>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1e      	ldr	r2, [pc, #120]	; (8000d84 <fsm_traffic_blink_horizontal_run+0x248>)
 8000d0a:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d10:	f000 fc14 	bl	800153c <setTimer3>
			}

			if(timer1_flag == 1){
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <fsm_traffic_blink_horizontal_run+0x238>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d11a      	bne.n	8000d52 <fsm_traffic_blink_horizontal_run+0x216>
				status_traffic_blink_horizontal = red_horizontal;
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000d1e:	2214      	movs	r2, #20
 8000d20:	601a      	str	r2, [r3, #0]
				//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
				traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <fsm_traffic_blink_horizontal_run+0x220>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d2a:	fb02 f303 	mul.w	r3, r2, r3
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <fsm_traffic_blink_horizontal_run+0x224>)
 8000d30:	6013      	str	r3, [r2, #0]
				setTimer1(traffic_buffer_horizontal[0]);
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <fsm_traffic_blink_horizontal_run+0x224>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 fbcc 	bl	80014d4 <setTimer1>
				setTimer3(1000);
 8000d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d40:	f000 fbfc 	bl	800153c <setTimer3>
			}
			break;
 8000d44:	e005      	b.n	8000d52 <fsm_traffic_blink_horizontal_run+0x216>
		default:
			break;
 8000d46:	bf00      	nop
 8000d48:	e004      	b.n	8000d54 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000d4a:	bf00      	nop
 8000d4c:	e002      	b.n	8000d54 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000d4e:	bf00      	nop
 8000d50:	e000      	b.n	8000d54 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000d52:	bf00      	nop
	}
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000054 	.word	0x20000054
 8000d5c:	20000064 	.word	0x20000064
 8000d60:	20000144 	.word	0x20000144
 8000d64:	20000070 	.word	0x20000070
 8000d68:	66666667 	.word	0x66666667
 8000d6c:	2000015c 	.word	0x2000015c
 8000d70:	200000f4 	.word	0x200000f4
 8000d74:	200000e4 	.word	0x200000e4
 8000d78:	20000068 	.word	0x20000068
 8000d7c:	20000074 	.word	0x20000074
 8000d80:	2000006c 	.word	0x2000006c
 8000d84:	20000078 	.word	0x20000078

08000d88 <fsm_traffic_blink_vertical_run>:

void fsm_traffic_blink_vertical_run(){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_vertical){
 8000d8c:	4b89      	ldr	r3, [pc, #548]	; (8000fb4 <fsm_traffic_blink_vertical_run+0x22c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	3b17      	subs	r3, #23
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	f200 8105 	bhi.w	8000fa2 <fsm_traffic_blink_vertical_run+0x21a>
 8000d98:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <fsm_traffic_blink_vertical_run+0x18>)
 8000d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9e:	bf00      	nop
 8000da0:	08000db1 	.word	0x08000db1
 8000da4:	08000f11 	.word	0x08000f11
 8000da8:	08000ddb 	.word	0x08000ddb
 8000dac:	08000e7f 	.word	0x08000e7f
		case init_vertical:
			status_traffic_blink_vertical = green_vertical;
 8000db0:	4b80      	ldr	r3, [pc, #512]	; (8000fb4 <fsm_traffic_blink_vertical_run+0x22c>)
 8000db2:	2219      	movs	r2, #25
 8000db4:	601a      	str	r2, [r3, #0]
			traffic_buffer_vertical[0] = time_green_vertical*1000;
 8000db6:	4b80      	ldr	r3, [pc, #512]	; (8000fb8 <fsm_traffic_blink_vertical_run+0x230>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dbe:	fb02 f303 	mul.w	r3, r2, r3
 8000dc2:	4a7e      	ldr	r2, [pc, #504]	; (8000fbc <fsm_traffic_blink_vertical_run+0x234>)
 8000dc4:	6013      	str	r3, [r2, #0]
			setTimer2(traffic_buffer_vertical[0]);
 8000dc6:	4b7d      	ldr	r3, [pc, #500]	; (8000fbc <fsm_traffic_blink_vertical_run+0x234>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fb9c 	bl	8001508 <setTimer2>
			setTimer5(1000);// count down as a clock
 8000dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd4:	f000 fbe6 	bl	80015a4 <setTimer5>
			break;
 8000dd8:	e0ea      	b.n	8000fb0 <fsm_traffic_blink_vertical_run+0x228>
		case green_vertical:
			setGreen_vertical();
 8000dda:	f000 fef5 	bl	8001bc8 <setGreen_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_green_vertical_temp/10;
 8000dde:	4b78      	ldr	r3, [pc, #480]	; (8000fc0 <fsm_traffic_blink_vertical_run+0x238>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a78      	ldr	r2, [pc, #480]	; (8000fc4 <fsm_traffic_blink_vertical_run+0x23c>)
 8000de4:	fb82 1203 	smull	r1, r2, r2, r3
 8000de8:	1092      	asrs	r2, r2, #2
 8000dea:	17db      	asrs	r3, r3, #31
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	4a76      	ldr	r2, [pc, #472]	; (8000fc8 <fsm_traffic_blink_vertical_run+0x240>)
 8000df0:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical_temp%10;
 8000df2:	4b73      	ldr	r3, [pc, #460]	; (8000fc0 <fsm_traffic_blink_vertical_run+0x238>)
 8000df4:	6819      	ldr	r1, [r3, #0]
 8000df6:	4b73      	ldr	r3, [pc, #460]	; (8000fc4 <fsm_traffic_blink_vertical_run+0x23c>)
 8000df8:	fb83 2301 	smull	r2, r3, r3, r1
 8000dfc:	109a      	asrs	r2, r3, #2
 8000dfe:	17cb      	asrs	r3, r1, #31
 8000e00:	1ad2      	subs	r2, r2, r3
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	1aca      	subs	r2, r1, r3
 8000e0c:	4b6e      	ldr	r3, [pc, #440]	; (8000fc8 <fsm_traffic_blink_vertical_run+0x240>)
 8000e0e:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000e10:	4b6e      	ldr	r3, [pc, #440]	; (8000fcc <fsm_traffic_blink_vertical_run+0x244>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d118      	bne.n	8000e4a <fsm_traffic_blink_vertical_run+0xc2>
				time_green_vertical_temp--;
 8000e18:	4b69      	ldr	r3, [pc, #420]	; (8000fc0 <fsm_traffic_blink_vertical_run+0x238>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	4a68      	ldr	r2, [pc, #416]	; (8000fc0 <fsm_traffic_blink_vertical_run+0x238>)
 8000e20:	6013      	str	r3, [r2, #0]
				if(time_green_vertical_temp != 0) setTimer5(1000);
 8000e22:	4b67      	ldr	r3, [pc, #412]	; (8000fc0 <fsm_traffic_blink_vertical_run+0x238>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <fsm_traffic_blink_vertical_run+0xaa>
 8000e2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e2e:	f000 fbb9 	bl	80015a4 <setTimer5>
				if(time_green_vertical_temp == 0){
 8000e32:	4b63      	ldr	r3, [pc, #396]	; (8000fc0 <fsm_traffic_blink_vertical_run+0x238>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d103      	bne.n	8000e42 <fsm_traffic_blink_vertical_run+0xba>
					time_green_vertical_temp = time_green_vertical;
 8000e3a:	4b5f      	ldr	r3, [pc, #380]	; (8000fb8 <fsm_traffic_blink_vertical_run+0x230>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a60      	ldr	r2, [pc, #384]	; (8000fc0 <fsm_traffic_blink_vertical_run+0x238>)
 8000e40:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000e42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e46:	f000 fbad 	bl	80015a4 <setTimer5>
			}

			if(timer2_flag == 1){
 8000e4a:	4b61      	ldr	r3, [pc, #388]	; (8000fd0 <fsm_traffic_blink_vertical_run+0x248>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	f040 80a9 	bne.w	8000fa6 <fsm_traffic_blink_vertical_run+0x21e>
				status_traffic_blink_vertical = yellow_vertical;
 8000e54:	4b57      	ldr	r3, [pc, #348]	; (8000fb4 <fsm_traffic_blink_vertical_run+0x22c>)
 8000e56:	221a      	movs	r2, #26
 8000e58:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[1] = time_yellow_vertical*1000;
 8000e5a:	4b5e      	ldr	r3, [pc, #376]	; (8000fd4 <fsm_traffic_blink_vertical_run+0x24c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e62:	fb02 f303 	mul.w	r3, r2, r3
 8000e66:	4a55      	ldr	r2, [pc, #340]	; (8000fbc <fsm_traffic_blink_vertical_run+0x234>)
 8000e68:	6053      	str	r3, [r2, #4]
				setTimer2(traffic_buffer_vertical[1]);
 8000e6a:	4b54      	ldr	r3, [pc, #336]	; (8000fbc <fsm_traffic_blink_vertical_run+0x234>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fb4a 	bl	8001508 <setTimer2>
				setTimer5(1000);
 8000e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e78:	f000 fb94 	bl	80015a4 <setTimer5>
			}
			break;
 8000e7c:	e093      	b.n	8000fa6 <fsm_traffic_blink_vertical_run+0x21e>
		case yellow_vertical:
			setYellow_vertical();
 8000e7e:	f000 feb3 	bl	8001be8 <setYellow_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_yellow_vertical_temp/10;
 8000e82:	4b55      	ldr	r3, [pc, #340]	; (8000fd8 <fsm_traffic_blink_vertical_run+0x250>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a4f      	ldr	r2, [pc, #316]	; (8000fc4 <fsm_traffic_blink_vertical_run+0x23c>)
 8000e88:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8c:	1092      	asrs	r2, r2, #2
 8000e8e:	17db      	asrs	r3, r3, #31
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	4a4d      	ldr	r2, [pc, #308]	; (8000fc8 <fsm_traffic_blink_vertical_run+0x240>)
 8000e94:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical_temp%10;
 8000e96:	4b50      	ldr	r3, [pc, #320]	; (8000fd8 <fsm_traffic_blink_vertical_run+0x250>)
 8000e98:	6819      	ldr	r1, [r3, #0]
 8000e9a:	4b4a      	ldr	r3, [pc, #296]	; (8000fc4 <fsm_traffic_blink_vertical_run+0x23c>)
 8000e9c:	fb83 2301 	smull	r2, r3, r3, r1
 8000ea0:	109a      	asrs	r2, r3, #2
 8000ea2:	17cb      	asrs	r3, r1, #31
 8000ea4:	1ad2      	subs	r2, r2, r3
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	1aca      	subs	r2, r1, r3
 8000eb0:	4b45      	ldr	r3, [pc, #276]	; (8000fc8 <fsm_traffic_blink_vertical_run+0x240>)
 8000eb2:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000eb4:	4b45      	ldr	r3, [pc, #276]	; (8000fcc <fsm_traffic_blink_vertical_run+0x244>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d110      	bne.n	8000ede <fsm_traffic_blink_vertical_run+0x156>
				time_yellow_vertical_temp--;
 8000ebc:	4b46      	ldr	r3, [pc, #280]	; (8000fd8 <fsm_traffic_blink_vertical_run+0x250>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	4a45      	ldr	r2, [pc, #276]	; (8000fd8 <fsm_traffic_blink_vertical_run+0x250>)
 8000ec4:	6013      	str	r3, [r2, #0]
				if(time_yellow_vertical_temp == 0){
 8000ec6:	4b44      	ldr	r3, [pc, #272]	; (8000fd8 <fsm_traffic_blink_vertical_run+0x250>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <fsm_traffic_blink_vertical_run+0x14e>
					time_yellow_vertical_temp = time_yellow_vertical;
 8000ece:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <fsm_traffic_blink_vertical_run+0x24c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a41      	ldr	r2, [pc, #260]	; (8000fd8 <fsm_traffic_blink_vertical_run+0x250>)
 8000ed4:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eda:	f000 fb63 	bl	80015a4 <setTimer5>
			}

			if(timer2_flag == 1){
 8000ede:	4b3c      	ldr	r3, [pc, #240]	; (8000fd0 <fsm_traffic_blink_vertical_run+0x248>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d161      	bne.n	8000faa <fsm_traffic_blink_vertical_run+0x222>
				status_traffic_blink_vertical = red_vertical;
 8000ee6:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <fsm_traffic_blink_vertical_run+0x22c>)
 8000ee8:	2218      	movs	r2, #24
 8000eea:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[2] = time_red_vertical*1000;
 8000eec:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <fsm_traffic_blink_vertical_run+0x254>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ef4:	fb02 f303 	mul.w	r3, r2, r3
 8000ef8:	4a30      	ldr	r2, [pc, #192]	; (8000fbc <fsm_traffic_blink_vertical_run+0x234>)
 8000efa:	6093      	str	r3, [r2, #8]
				setTimer2(traffic_buffer_vertical[2]);
 8000efc:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <fsm_traffic_blink_vertical_run+0x234>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 fb01 	bl	8001508 <setTimer2>
				setTimer5(1000);
 8000f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0a:	f000 fb4b 	bl	80015a4 <setTimer5>
			}
			break;
 8000f0e:	e04c      	b.n	8000faa <fsm_traffic_blink_vertical_run+0x222>
		case red_vertical:
			setRed_vertical();
 8000f10:	f000 fe4a 	bl	8001ba8 <setRed_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_red_vertical_temp/10;
 8000f14:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <fsm_traffic_blink_vertical_run+0x258>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a2a      	ldr	r2, [pc, #168]	; (8000fc4 <fsm_traffic_blink_vertical_run+0x23c>)
 8000f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1e:	1092      	asrs	r2, r2, #2
 8000f20:	17db      	asrs	r3, r3, #31
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	4a28      	ldr	r2, [pc, #160]	; (8000fc8 <fsm_traffic_blink_vertical_run+0x240>)
 8000f26:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical_temp%10;
 8000f28:	4b2d      	ldr	r3, [pc, #180]	; (8000fe0 <fsm_traffic_blink_vertical_run+0x258>)
 8000f2a:	6819      	ldr	r1, [r3, #0]
 8000f2c:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <fsm_traffic_blink_vertical_run+0x23c>)
 8000f2e:	fb83 2301 	smull	r2, r3, r3, r1
 8000f32:	109a      	asrs	r2, r3, #2
 8000f34:	17cb      	asrs	r3, r1, #31
 8000f36:	1ad2      	subs	r2, r2, r3
 8000f38:	4613      	mov	r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	1aca      	subs	r2, r1, r3
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <fsm_traffic_blink_vertical_run+0x240>)
 8000f44:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <fsm_traffic_blink_vertical_run+0x244>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d110      	bne.n	8000f70 <fsm_traffic_blink_vertical_run+0x1e8>
				time_red_vertical_temp--;
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <fsm_traffic_blink_vertical_run+0x258>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	4a22      	ldr	r2, [pc, #136]	; (8000fe0 <fsm_traffic_blink_vertical_run+0x258>)
 8000f56:	6013      	str	r3, [r2, #0]
				if(time_red_vertical_temp == 0){
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <fsm_traffic_blink_vertical_run+0x258>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d103      	bne.n	8000f68 <fsm_traffic_blink_vertical_run+0x1e0>
					time_red_vertical_temp = time_red_vertical;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <fsm_traffic_blink_vertical_run+0x254>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <fsm_traffic_blink_vertical_run+0x258>)
 8000f66:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6c:	f000 fb1a 	bl	80015a4 <setTimer5>
			}

			if(timer2_flag == 1){
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <fsm_traffic_blink_vertical_run+0x248>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d11a      	bne.n	8000fae <fsm_traffic_blink_vertical_run+0x226>
				status_traffic_blink_vertical = green_vertical;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <fsm_traffic_blink_vertical_run+0x22c>)
 8000f7a:	2219      	movs	r2, #25
 8000f7c:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[0] = time_green_vertical*1000;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <fsm_traffic_blink_vertical_run+0x230>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	4a0c      	ldr	r2, [pc, #48]	; (8000fbc <fsm_traffic_blink_vertical_run+0x234>)
 8000f8c:	6013      	str	r3, [r2, #0]
				setTimer2(traffic_buffer_vertical[0]);
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <fsm_traffic_blink_vertical_run+0x234>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fab8 	bl	8001508 <setTimer2>
				setTimer5(1000);
 8000f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9c:	f000 fb02 	bl	80015a4 <setTimer5>
			}
			break;
 8000fa0:	e005      	b.n	8000fae <fsm_traffic_blink_vertical_run+0x226>
		default:
			break;
 8000fa2:	bf00      	nop
 8000fa4:	e004      	b.n	8000fb0 <fsm_traffic_blink_vertical_run+0x228>
			break;
 8000fa6:	bf00      	nop
 8000fa8:	e002      	b.n	8000fb0 <fsm_traffic_blink_vertical_run+0x228>
			break;
 8000faa:	bf00      	nop
 8000fac:	e000      	b.n	8000fb0 <fsm_traffic_blink_vertical_run+0x228>
			break;
 8000fae:	bf00      	nop
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000058 	.word	0x20000058
 8000fb8:	2000007c 	.word	0x2000007c
 8000fbc:	20000150 	.word	0x20000150
 8000fc0:	20000088 	.word	0x20000088
 8000fc4:	66666667 	.word	0x66666667
 8000fc8:	20000164 	.word	0x20000164
 8000fcc:	20000104 	.word	0x20000104
 8000fd0:	200000ec 	.word	0x200000ec
 8000fd4:	20000080 	.word	0x20000080
 8000fd8:	2000008c 	.word	0x2000008c
 8000fdc:	20000084 	.word	0x20000084
 8000fe0:	20000090 	.word	0x20000090

08000fe4 <fsm_traffic_horizontal_run>:
#include "traffic.h"

int status_traffic_horizontal = display_traffic_horizontal;


void fsm_traffic_horizontal_run(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	switch(status_traffic_horizontal){
 8000fe8:	4b26      	ldr	r3, [pc, #152]	; (8001084 <fsm_traffic_horizontal_run+0xa0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3303      	adds	r3, #3
 8000fee:	2b0b      	cmp	r3, #11
 8000ff0:	d83e      	bhi.n	8001070 <fsm_traffic_horizontal_run+0x8c>
 8000ff2:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <fsm_traffic_horizontal_run+0x14>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001071 	.word	0x08001071
 8000ffc:	08001071 	.word	0x08001071
 8001000:	08001071 	.word	0x08001071
 8001004:	08001071 	.word	0x08001071
 8001008:	08001071 	.word	0x08001071
 800100c:	08001071 	.word	0x08001071
 8001010:	08001071 	.word	0x08001071
 8001014:	08001071 	.word	0x08001071
 8001018:	08001029 	.word	0x08001029
 800101c:	0800102f 	.word	0x0800102f
 8001020:	0800105b 	.word	0x0800105b
 8001024:	08001045 	.word	0x08001045
		case display_traffic_horizontal:
			fsm_traffic_blink_horizontal_run();
 8001028:	f7ff fd88 	bl	8000b3c <fsm_traffic_blink_horizontal_run>
			break;
 800102c:	e027      	b.n	800107e <fsm_traffic_horizontal_run+0x9a>
		case modifying_led_red_horizontal:
			// turn off led green and yellow
//			offGreenYellow_horizontal();
			if(timer8_flag == 1){
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <fsm_traffic_horizontal_run+0xa4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d11e      	bne.n	8001074 <fsm_traffic_horizontal_run+0x90>
				//toggle led red with frequency 2Hz
				toggleRed_horizontal();
 8001036:	f000 fdf3 	bl	8001c20 <toggleRed_horizontal>
				setTimer8(500);
 800103a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800103e:	f000 faff 	bl	8001640 <setTimer8>
			}
			break;
 8001042:	e017      	b.n	8001074 <fsm_traffic_horizontal_run+0x90>
		case modifying_led_yellow_horizontal:
//			offGreenRed_horizontal();
//			offAllLed_horizontal();
			if(timer8_flag == 1){
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <fsm_traffic_horizontal_run+0xa4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d115      	bne.n	8001078 <fsm_traffic_horizontal_run+0x94>
				//toggle led yellow with frequency 2Hz
				toggleYellow_horizontal();
 800104c:	f000 fe0c 	bl	8001c68 <toggleYellow_horizontal>
				setTimer8(500);
 8001050:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001054:	f000 faf4 	bl	8001640 <setTimer8>
			}
			break;
 8001058:	e00e      	b.n	8001078 <fsm_traffic_horizontal_run+0x94>
		case modifying_led_green_horizontal:
//			offRedYellow_horizontal();
			if(timer8_flag == 1){
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <fsm_traffic_horizontal_run+0xa4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10c      	bne.n	800107c <fsm_traffic_horizontal_run+0x98>
				//toggle led green with frequency 2Hz
				toggleGreen_horizontal();
 8001062:	f000 fdef 	bl	8001c44 <toggleGreen_horizontal>
				setTimer8(500);
 8001066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800106a:	f000 fae9 	bl	8001640 <setTimer8>
			}
			break;
 800106e:	e005      	b.n	800107c <fsm_traffic_horizontal_run+0x98>
		case mannual_horizontal:
			break;
		default:
			break;
 8001070:	bf00      	nop
 8001072:	e004      	b.n	800107e <fsm_traffic_horizontal_run+0x9a>
			break;
 8001074:	bf00      	nop
 8001076:	e002      	b.n	800107e <fsm_traffic_horizontal_run+0x9a>
			break;
 8001078:	bf00      	nop
 800107a:	e000      	b.n	800107e <fsm_traffic_horizontal_run+0x9a>
			break;
 800107c:	bf00      	nop
	}
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000005c 	.word	0x2000005c
 8001088:	2000011c 	.word	0x2000011c

0800108c <fsm_traffic_vertical_run>:
#include "traffic.h"
#include "fsm_traffic_blink.h"

int status_traffic_vertical = display_traffic_vertical;

void fsm_traffic_vertical_run(){
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	switch(status_traffic_vertical){
 8001090:	4b3f      	ldr	r3, [pc, #252]	; (8001190 <fsm_traffic_vertical_run+0x104>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3304      	adds	r3, #4
 8001096:	2b24      	cmp	r3, #36	; 0x24
 8001098:	d870      	bhi.n	800117c <fsm_traffic_vertical_run+0xf0>
 800109a:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <fsm_traffic_vertical_run+0x14>)
 800109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a0:	0800117d 	.word	0x0800117d
 80010a4:	0800117d 	.word	0x0800117d
 80010a8:	0800117d 	.word	0x0800117d
 80010ac:	0800117d 	.word	0x0800117d
 80010b0:	0800117d 	.word	0x0800117d
 80010b4:	0800117d 	.word	0x0800117d
 80010b8:	0800117d 	.word	0x0800117d
 80010bc:	0800117d 	.word	0x0800117d
 80010c0:	0800117d 	.word	0x0800117d
 80010c4:	0800117d 	.word	0x0800117d
 80010c8:	0800117d 	.word	0x0800117d
 80010cc:	0800117d 	.word	0x0800117d
 80010d0:	0800117d 	.word	0x0800117d
 80010d4:	08001135 	.word	0x08001135
 80010d8:	0800117d 	.word	0x0800117d
 80010dc:	0800117d 	.word	0x0800117d
 80010e0:	0800117d 	.word	0x0800117d
 80010e4:	0800117d 	.word	0x0800117d
 80010e8:	0800117d 	.word	0x0800117d
 80010ec:	0800117d 	.word	0x0800117d
 80010f0:	0800117d 	.word	0x0800117d
 80010f4:	0800117d 	.word	0x0800117d
 80010f8:	0800117d 	.word	0x0800117d
 80010fc:	0800117d 	.word	0x0800117d
 8001100:	0800117d 	.word	0x0800117d
 8001104:	0800117d 	.word	0x0800117d
 8001108:	0800117d 	.word	0x0800117d
 800110c:	0800117d 	.word	0x0800117d
 8001110:	0800117d 	.word	0x0800117d
 8001114:	0800117d 	.word	0x0800117d
 8001118:	0800117d 	.word	0x0800117d
 800111c:	0800117d 	.word	0x0800117d
 8001120:	0800117d 	.word	0x0800117d
 8001124:	0800117d 	.word	0x0800117d
 8001128:	0800113b 	.word	0x0800113b
 800112c:	08001167 	.word	0x08001167
 8001130:	08001151 	.word	0x08001151
		case display_traffic_vertical:
//			status_traffic_blink_vertical = init_vertical;
			fsm_traffic_blink_vertical_run();
 8001134:	f7ff fe28 	bl	8000d88 <fsm_traffic_blink_vertical_run>
			break;
 8001138:	e027      	b.n	800118a <fsm_traffic_vertical_run+0xfe>
		case modifying_led_red_vertical:
//			offGreenYellow_vertical();
			if(timer7_flag == 1){
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <fsm_traffic_vertical_run+0x108>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d11e      	bne.n	8001180 <fsm_traffic_vertical_run+0xf4>
				toggleRed_vertical();
 8001142:	f000 fdad 	bl	8001ca0 <toggleRed_vertical>
				setTimer7(500);
 8001146:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114a:	f000 fa5f 	bl	800160c <setTimer7>
			}
			break;
 800114e:	e017      	b.n	8001180 <fsm_traffic_vertical_run+0xf4>
		case modifying_led_yellow_vertical:
//			offGreenRed_vertical();
//			offAllLed_vertical();
			if(timer7_flag == 1){
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <fsm_traffic_vertical_run+0x108>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d115      	bne.n	8001184 <fsm_traffic_vertical_run+0xf8>
				toggleYellow_vertical();
 8001158:	f000 fdc2 	bl	8001ce0 <toggleYellow_vertical>
				setTimer7(500);
 800115c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001160:	f000 fa54 	bl	800160c <setTimer7>
			}
			break;
 8001164:	e00e      	b.n	8001184 <fsm_traffic_vertical_run+0xf8>
		case modifying_led_green_vertical:
			// turn off red and yellow led
//			offRedYellow_vertical();
			if(timer7_flag == 1){
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <fsm_traffic_vertical_run+0x108>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10c      	bne.n	8001188 <fsm_traffic_vertical_run+0xfc>
				//toggle green led with frequency 2Hz
				toggleGreen_vertical();
 800116e:	f000 fda7 	bl	8001cc0 <toggleGreen_vertical>
				setTimer7(500);
 8001172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001176:	f000 fa49 	bl	800160c <setTimer7>
			}
			break;
 800117a:	e005      	b.n	8001188 <fsm_traffic_vertical_run+0xfc>
		case mannual_vertical:
			break;
		default:
			break;
 800117c:	bf00      	nop
 800117e:	e004      	b.n	800118a <fsm_traffic_vertical_run+0xfe>
			break;
 8001180:	bf00      	nop
 8001182:	e002      	b.n	800118a <fsm_traffic_vertical_run+0xfe>
			break;
 8001184:	bf00      	nop
 8001186:	e000      	b.n	800118a <fsm_traffic_vertical_run+0xfe>
			break;
 8001188:	bf00      	nop
	}
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000060 	.word	0x20000060
 8001194:	20000114 	.word	0x20000114

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f000 fe50 	bl	8001e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f83a 	bl	8001218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f000 f914 	bl	80013d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011a8:	f000 f872 	bl	8001290 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80011ac:	f000 f8e6 	bl	800137c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011b0:	4817      	ldr	r0, [pc, #92]	; (8001210 <main+0x78>)
 80011b2:	f001 fe91 	bl	8002ed8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011b6:	2100      	movs	r1, #0
 80011b8:	4815      	ldr	r0, [pc, #84]	; (8001210 <main+0x78>)
 80011ba:	f001 ff31 	bl	8003020 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	setTimer4(10);
 80011be:	200a      	movs	r0, #10
 80011c0:	f000 f9d6 	bl	8001570 <setTimer4>
    setTimer6(10);
 80011c4:	200a      	movs	r0, #10
 80011c6:	f000 fa07 	bl	80015d8 <setTimer6>
    setTimer7(500);// toggle led-red/green/yellow vertical road 2Hz while modifying time of it
 80011ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ce:	f000 fa1d 	bl	800160c <setTimer7>
    setTimer8(500);// toggle led-red/green/yellow horizontal road 2Hz while modifying time of it
 80011d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011d6:	f000 fa33 	bl	8001640 <setTimer8>
    setTimer10(500);// timer blink led-red for debugging
 80011da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011de:	f000 fa63 	bl	80016a8 <setTimer10>

    /* USER CODE BEGIN 3 */
  //	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,i);

  	  //blink led-red for debugging
  	  if(timer10_flag == 1){
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <main+0x7c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d105      	bne.n	80011f6 <main+0x5e>
  		  toggleLedRed();
 80011ea:	f000 fd0d 	bl	8001c08 <toggleLedRed>
  		  setTimer10(1000);
 80011ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f2:	f000 fa59 	bl	80016a8 <setTimer10>
  	  }

  	  fsm_system_run();
 80011f6:	f7ff faf3 	bl	80007e0 <fsm_system_run>
  	  fsm_7SEG_horizontal_run();
 80011fa:	f7ff f999 	bl	8000530 <fsm_7SEG_horizontal_run>
  	  fsm_7SEG_vertical_run();
 80011fe:	f7ff f9df 	bl	80005c0 <fsm_7SEG_vertical_run>
  	  fsm_traffic_vertical_run();
 8001202:	f7ff ff43 	bl	800108c <fsm_traffic_vertical_run>
  	  fsm_traffic_horizontal_run();
 8001206:	f7ff feed 	bl	8000fe4 <fsm_traffic_horizontal_run>
  	  ///add function
  	  //***
  	  fsm_pedestrian_run();
 800120a:	f7ff faa7 	bl	800075c <fsm_pedestrian_run>
  	  if(timer10_flag == 1){
 800120e:	e7e8      	b.n	80011e2 <main+0x4a>
 8001210:	2000016c 	.word	0x2000016c
 8001214:	2000012c 	.word	0x2000012c

08001218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b090      	sub	sp, #64	; 0x40
 800121c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	f107 0318 	add.w	r3, r7, #24
 8001222:	2228      	movs	r2, #40	; 0x28
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f003 f968 	bl	80044fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123e:	2301      	movs	r3, #1
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001242:	2310      	movs	r3, #16
 8001244:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	4618      	mov	r0, r3
 8001250:	f001 f9d8 	bl	8002604 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800125a:	f000 f935 	bl	80014c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125e:	230f      	movs	r3, #15
 8001260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fc44 	bl	8002b04 <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001282:	f000 f921 	bl	80014c8 <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3740      	adds	r7, #64	; 0x40
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08e      	sub	sp, #56	; 0x38
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
 80012bc:	615a      	str	r2, [r3, #20]
 80012be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c0:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <MX_TIM2_Init+0xe8>)
 80012c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <MX_TIM2_Init+0xe8>)
 80012ca:	2207      	movs	r2, #7
 80012cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <MX_TIM2_Init+0xe8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <MX_TIM2_Init+0xe8>)
 80012d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80012da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <MX_TIM2_Init+0xe8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <MX_TIM2_Init+0xe8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e8:	4823      	ldr	r0, [pc, #140]	; (8001378 <MX_TIM2_Init+0xe8>)
 80012ea:	f001 fda5 	bl	8002e38 <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80012f4:	f000 f8e8 	bl	80014c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001302:	4619      	mov	r1, r3
 8001304:	481c      	ldr	r0, [pc, #112]	; (8001378 <MX_TIM2_Init+0xe8>)
 8001306:	f002 f8ed 	bl	80034e4 <HAL_TIM_ConfigClockSource>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001310:	f000 f8da 	bl	80014c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001314:	4818      	ldr	r0, [pc, #96]	; (8001378 <MX_TIM2_Init+0xe8>)
 8001316:	f001 fe2b 	bl	8002f70 <HAL_TIM_PWM_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001320:	f000 f8d2 	bl	80014c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4619      	mov	r1, r3
 8001332:	4811      	ldr	r0, [pc, #68]	; (8001378 <MX_TIM2_Init+0xe8>)
 8001334:	f002 fc58 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800133e:	f000 f8c3 	bl	80014c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001342:	2360      	movs	r3, #96	; 0x60
 8001344:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2200      	movs	r2, #0
 8001356:	4619      	mov	r1, r3
 8001358:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_TIM2_Init+0xe8>)
 800135a:	f002 f805 	bl	8003368 <HAL_TIM_PWM_ConfigChannel>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001364:	f000 f8b0 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001368:	4803      	ldr	r0, [pc, #12]	; (8001378 <MX_TIM2_Init+0xe8>)
 800136a:	f000 fb1d 	bl	80019a8 <HAL_TIM_MspPostInit>

}
 800136e:	bf00      	nop
 8001370:	3738      	adds	r7, #56	; 0x38
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	2000016c 	.word	0x2000016c

0800137c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <MX_USART2_UART_Init+0x50>)
 8001384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800138c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b2:	4805      	ldr	r0, [pc, #20]	; (80013c8 <MX_USART2_UART_Init+0x4c>)
 80013b4:	f002 fc82 	bl	8003cbc <HAL_UART_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013be:	f000 f883 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200001b4 	.word	0x200001b4
 80013cc:	40004400 	.word	0x40004400

080013d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <MX_GPIO_Init+0xd4>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a2e      	ldr	r2, [pc, #184]	; (80014a4 <MX_GPIO_Init+0xd4>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <MX_GPIO_Init+0xd4>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <MX_GPIO_Init+0xd4>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <MX_GPIO_Init+0xd4>)
 8001402:	f043 0308 	orr.w	r3, r3, #8
 8001406:	6193      	str	r3, [r2, #24]
 8001408:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_GPIO_Init+0xd4>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 8001414:	2200      	movs	r2, #0
 8001416:	f242 013c 	movw	r1, #8252	; 0x203c
 800141a:	4823      	ldr	r0, [pc, #140]	; (80014a8 <MX_GPIO_Init+0xd8>)
 800141c:	f001 f8c1 	bl	80025a2 <HAL_GPIO_WritePin>
                          |D4_TRAFFIC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001426:	4821      	ldr	r0, [pc, #132]	; (80014ac <MX_GPIO_Init+0xdc>)
 8001428:	f001 f8bb 	bl	80025a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A2_BUTTON2_Pin A0_PEDES_BUTTON_Pin */
  GPIO_InitStruct.Pin = A2_BUTTON2_Pin|A0_PEDES_BUTTON_Pin;
 800142c:	2360      	movs	r3, #96	; 0x60
 800142e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001434:	2301      	movs	r3, #1
 8001436:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4619      	mov	r1, r3
 800143e:	481b      	ldr	r0, [pc, #108]	; (80014ac <MX_GPIO_Init+0xdc>)
 8001440:	f000 ff1e 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_BUTTON3_Pin A1_BUTTON1_Pin */
  GPIO_InitStruct.Pin = A3_BUTTON3_Pin|A1_BUTTON1_Pin;
 8001444:	f244 0301 	movw	r3, #16385	; 0x4001
 8001448:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144e:	2301      	movs	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	4619      	mov	r1, r3
 8001458:	4813      	ldr	r0, [pc, #76]	; (80014a8 <MX_GPIO_Init+0xd8>)
 800145a:	f000 ff11 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDES_LIGHT_Pin LED_RED_Pin D3_TRAFFIC1_Pin D5_TRAFFIC2_Pin
                           D4_TRAFFIC2_Pin */
  GPIO_InitStruct.Pin = D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 800145e:	f242 033c 	movw	r3, #8252	; 0x203c
 8001462:	60bb      	str	r3, [r7, #8]
                          |D4_TRAFFIC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001464:	2301      	movs	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	2302      	movs	r3, #2
 800146e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	4619      	mov	r1, r3
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <MX_GPIO_Init+0xd8>)
 8001478:	f000 ff02 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDES_LIGHT_Pin D2_TRAFFIC1_Pin */
  GPIO_InitStruct.Pin = D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin;
 800147c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2302      	movs	r3, #2
 800148c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_GPIO_Init+0xdc>)
 8001496:	f000 fef3 	bl	8002280 <HAL_GPIO_Init>

}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40010800 	.word	0x40010800

080014b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	timerRun();
 80014b8:	f000 f92a 	bl	8001710 <timerRun>
	getKeyInput();
 80014bc:	f7fe fe8e 	bl	80001dc <getKeyInput>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>
	...

080014d4 <setTimer1>:
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <setTimer1+0x28>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80014e6:	4a06      	ldr	r2, [pc, #24]	; (8001500 <setTimer1+0x2c>)
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <setTimer1+0x30>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000094 	.word	0x20000094
 8001500:	200000e8 	.word	0x200000e8
 8001504:	200000e4 	.word	0x200000e4

08001508 <setTimer2>:
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <setTimer2+0x28>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	fb92 f3f3 	sdiv	r3, r2, r3
 800151a:	4a06      	ldr	r2, [pc, #24]	; (8001534 <setTimer2+0x2c>)
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <setTimer2+0x30>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000094 	.word	0x20000094
 8001534:	200000f0 	.word	0x200000f0
 8001538:	200000ec 	.word	0x200000ec

0800153c <setTimer3>:
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <setTimer3+0x28>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	fb92 f3f3 	sdiv	r3, r2, r3
 800154e:	4a06      	ldr	r2, [pc, #24]	; (8001568 <setTimer3+0x2c>)
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <setTimer3+0x30>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20000094 	.word	0x20000094
 8001568:	200000f8 	.word	0x200000f8
 800156c:	200000f4 	.word	0x200000f4

08001570 <setTimer4>:
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <setTimer4+0x28>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001582:	4a06      	ldr	r2, [pc, #24]	; (800159c <setTimer4+0x2c>)
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <setTimer4+0x30>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000094 	.word	0x20000094
 800159c:	20000100 	.word	0x20000100
 80015a0:	200000fc 	.word	0x200000fc

080015a4 <setTimer5>:
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <setTimer5+0x28>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015b6:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <setTimer5+0x2c>)
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <setTimer5+0x30>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000094 	.word	0x20000094
 80015d0:	20000108 	.word	0x20000108
 80015d4:	20000104 	.word	0x20000104

080015d8 <setTimer6>:
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <setTimer6+0x28>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ea:	4a06      	ldr	r2, [pc, #24]	; (8001604 <setTimer6+0x2c>)
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <setTimer6+0x30>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000094 	.word	0x20000094
 8001604:	20000110 	.word	0x20000110
 8001608:	2000010c 	.word	0x2000010c

0800160c <setTimer7>:
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <setTimer7+0x28>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	fb92 f3f3 	sdiv	r3, r2, r3
 800161e:	4a06      	ldr	r2, [pc, #24]	; (8001638 <setTimer7+0x2c>)
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <setTimer7+0x30>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000094 	.word	0x20000094
 8001638:	20000118 	.word	0x20000118
 800163c:	20000114 	.word	0x20000114

08001640 <setTimer8>:
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <setTimer8+0x28>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001652:	4a06      	ldr	r2, [pc, #24]	; (800166c <setTimer8+0x2c>)
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <setTimer8+0x30>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000094 	.word	0x20000094
 800166c:	20000120 	.word	0x20000120
 8001670:	2000011c 	.word	0x2000011c

08001674 <setTimer9>:
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <setTimer9+0x28>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	fb92 f3f3 	sdiv	r3, r2, r3
 8001686:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <setTimer9+0x2c>)
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <setTimer9+0x30>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000094 	.word	0x20000094
 80016a0:	20000128 	.word	0x20000128
 80016a4:	20000124 	.word	0x20000124

080016a8 <setTimer10>:
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <setTimer10+0x28>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ba:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <setTimer10+0x2c>)
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <setTimer10+0x30>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000094 	.word	0x20000094
 80016d4:	20000130 	.word	0x20000130
 80016d8:	2000012c 	.word	0x2000012c

080016dc <setTimer30>:
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <setTimer30+0x28>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <setTimer30+0x2c>)
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <setTimer30+0x30>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000094 	.word	0x20000094
 8001708:	20000140 	.word	0x20000140
 800170c:	2000013c 	.word	0x2000013c

08001710 <timerRun>:
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
 8001714:	4b61      	ldr	r3, [pc, #388]	; (800189c <timerRun+0x18c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	dd04      	ble.n	8001726 <timerRun+0x16>
 800171c:	4b5f      	ldr	r3, [pc, #380]	; (800189c <timerRun+0x18c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	3b01      	subs	r3, #1
 8001722:	4a5e      	ldr	r2, [pc, #376]	; (800189c <timerRun+0x18c>)
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b5d      	ldr	r3, [pc, #372]	; (800189c <timerRun+0x18c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <timerRun+0x24>
 800172e:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <timerRun+0x190>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	4b5b      	ldr	r3, [pc, #364]	; (80018a4 <timerRun+0x194>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	dd04      	ble.n	8001746 <timerRun+0x36>
 800173c:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <timerRun+0x194>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	3b01      	subs	r3, #1
 8001742:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <timerRun+0x194>)
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <timerRun+0x194>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <timerRun+0x44>
 800174e:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <timerRun+0x198>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	4b55      	ldr	r3, [pc, #340]	; (80018ac <timerRun+0x19c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	dd04      	ble.n	8001766 <timerRun+0x56>
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <timerRun+0x19c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3b01      	subs	r3, #1
 8001762:	4a52      	ldr	r2, [pc, #328]	; (80018ac <timerRun+0x19c>)
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b51      	ldr	r3, [pc, #324]	; (80018ac <timerRun+0x19c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <timerRun+0x64>
 800176e:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <timerRun+0x1a0>)
 8001770:	2201      	movs	r2, #1
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <timerRun+0x1a4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	dd04      	ble.n	8001786 <timerRun+0x76>
 800177c:	4b4d      	ldr	r3, [pc, #308]	; (80018b4 <timerRun+0x1a4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3b01      	subs	r3, #1
 8001782:	4a4c      	ldr	r2, [pc, #304]	; (80018b4 <timerRun+0x1a4>)
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b4b      	ldr	r3, [pc, #300]	; (80018b4 <timerRun+0x1a4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d102      	bne.n	8001794 <timerRun+0x84>
 800178e:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <timerRun+0x1a8>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	4b49      	ldr	r3, [pc, #292]	; (80018bc <timerRun+0x1ac>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	dd04      	ble.n	80017a6 <timerRun+0x96>
 800179c:	4b47      	ldr	r3, [pc, #284]	; (80018bc <timerRun+0x1ac>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	4a46      	ldr	r2, [pc, #280]	; (80018bc <timerRun+0x1ac>)
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b45      	ldr	r3, [pc, #276]	; (80018bc <timerRun+0x1ac>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <timerRun+0xa4>
 80017ae:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <timerRun+0x1b0>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <timerRun+0x1b4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	dd04      	ble.n	80017c6 <timerRun+0xb6>
 80017bc:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <timerRun+0x1b4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	4a40      	ldr	r2, [pc, #256]	; (80018c4 <timerRun+0x1b4>)
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <timerRun+0x1b4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <timerRun+0xc4>
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <timerRun+0x1b8>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <timerRun+0x1bc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dd04      	ble.n	80017e6 <timerRun+0xd6>
 80017dc:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <timerRun+0x1bc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	4a3a      	ldr	r2, [pc, #232]	; (80018cc <timerRun+0x1bc>)
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <timerRun+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <timerRun+0xe4>
 80017ee:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <timerRun+0x1c0>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <timerRun+0x1c4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	dd04      	ble.n	8001806 <timerRun+0xf6>
 80017fc:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <timerRun+0x1c4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3b01      	subs	r3, #1
 8001802:	4a34      	ldr	r2, [pc, #208]	; (80018d4 <timerRun+0x1c4>)
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b33      	ldr	r3, [pc, #204]	; (80018d4 <timerRun+0x1c4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <timerRun+0x104>
 800180e:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <timerRun+0x1c8>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	4b31      	ldr	r3, [pc, #196]	; (80018dc <timerRun+0x1cc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	dd04      	ble.n	8001826 <timerRun+0x116>
 800181c:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <timerRun+0x1cc>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	4a2e      	ldr	r2, [pc, #184]	; (80018dc <timerRun+0x1cc>)
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <timerRun+0x1cc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d102      	bne.n	8001834 <timerRun+0x124>
 800182e:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <timerRun+0x1d0>)
 8001830:	2201      	movs	r2, #1
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <timerRun+0x1d4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	dd04      	ble.n	8001846 <timerRun+0x136>
 800183c:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <timerRun+0x1d4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <timerRun+0x1d4>)
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <timerRun+0x1d4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <timerRun+0x144>
 800184e:	4b26      	ldr	r3, [pc, #152]	; (80018e8 <timerRun+0x1d8>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <timerRun+0x1dc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	dd04      	ble.n	8001866 <timerRun+0x156>
 800185c:	4b23      	ldr	r3, [pc, #140]	; (80018ec <timerRun+0x1dc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3b01      	subs	r3, #1
 8001862:	4a22      	ldr	r2, [pc, #136]	; (80018ec <timerRun+0x1dc>)
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b21      	ldr	r3, [pc, #132]	; (80018ec <timerRun+0x1dc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <timerRun+0x164>
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <timerRun+0x1e0>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <timerRun+0x1e4>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	dd04      	ble.n	8001886 <timerRun+0x176>
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <timerRun+0x1e4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	3b01      	subs	r3, #1
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <timerRun+0x1e4>)
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <timerRun+0x1e4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d102      	bne.n	8001894 <timerRun+0x184>
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <timerRun+0x1e8>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	200000e8 	.word	0x200000e8
 80018a0:	200000e4 	.word	0x200000e4
 80018a4:	200000f0 	.word	0x200000f0
 80018a8:	200000ec 	.word	0x200000ec
 80018ac:	200000f8 	.word	0x200000f8
 80018b0:	200000f4 	.word	0x200000f4
 80018b4:	20000100 	.word	0x20000100
 80018b8:	200000fc 	.word	0x200000fc
 80018bc:	20000108 	.word	0x20000108
 80018c0:	20000104 	.word	0x20000104
 80018c4:	20000110 	.word	0x20000110
 80018c8:	2000010c 	.word	0x2000010c
 80018cc:	20000118 	.word	0x20000118
 80018d0:	20000114 	.word	0x20000114
 80018d4:	20000120 	.word	0x20000120
 80018d8:	2000011c 	.word	0x2000011c
 80018dc:	20000128 	.word	0x20000128
 80018e0:	20000124 	.word	0x20000124
 80018e4:	20000130 	.word	0x20000130
 80018e8:	2000012c 	.word	0x2000012c
 80018ec:	20000138 	.word	0x20000138
 80018f0:	20000134 	.word	0x20000134
 80018f4:	20000140 	.word	0x20000140
 80018f8:	2000013c 	.word	0x2000013c

080018fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_MspInit+0x5c>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a14      	ldr	r2, [pc, #80]	; (8001958 <HAL_MspInit+0x5c>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_MspInit+0x5c>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_MspInit+0x5c>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_MspInit+0x5c>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <HAL_MspInit+0x5c>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_MspInit+0x60>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_MspInit+0x60>)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000

08001960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001970:	d113      	bne.n	800199a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_TIM_Base_MspInit+0x44>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_TIM_Base_MspInit+0x44>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_TIM_Base_MspInit+0x44>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	201c      	movs	r0, #28
 8001990:	f000 fb8f 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001994:	201c      	movs	r0, #28
 8001996:	f000 fba8 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c6:	d117      	bne.n	80019f8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_TIM_MspPostInit+0x58>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a0c      	ldr	r2, [pc, #48]	; (8001a00 <HAL_TIM_MspPostInit+0x58>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_TIM_MspPostInit+0x58>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019e0:	2301      	movs	r3, #1
 80019e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e4:	2302      	movs	r3, #2
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	4804      	ldr	r0, [pc, #16]	; (8001a04 <HAL_TIM_MspPostInit+0x5c>)
 80019f4:	f000 fc44 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019f8:	bf00      	nop
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010800 	.word	0x40010800

08001a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1f      	ldr	r2, [pc, #124]	; (8001aa0 <HAL_UART_MspInit+0x98>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d137      	bne.n	8001a98 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a32:	61d3      	str	r3, [r2, #28]
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a17      	ldr	r2, [pc, #92]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_UART_MspInit+0x9c>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a58:	2304      	movs	r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f107 0310 	add.w	r3, r7, #16
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480f      	ldr	r0, [pc, #60]	; (8001aa8 <HAL_UART_MspInit+0xa0>)
 8001a6c:	f000 fc08 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a70:	2308      	movs	r3, #8
 8001a72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	4619      	mov	r1, r3
 8001a82:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <HAL_UART_MspInit+0xa0>)
 8001a84:	f000 fbfc 	bl	8002280 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2026      	movs	r0, #38	; 0x26
 8001a8e:	f000 fb10 	bl	80020b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a92:	2026      	movs	r0, #38	; 0x26
 8001a94:	f000 fb29 	bl	80020ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a98:	bf00      	nop
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40004400 	.word	0x40004400
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab6:	e7fe      	b.n	8001ab6 <HardFault_Handler+0x4>

08001ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <MemManage_Handler+0x4>

08001abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <BusFault_Handler+0x4>

08001ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <UsageFault_Handler+0x4>

08001aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af2:	f000 f9eb 	bl	8001ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <TIM2_IRQHandler+0x10>)
 8001b02:	f001 fb29 	bl	8003158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	2000016c 	.word	0x2000016c

08001b10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <USART2_IRQHandler+0x10>)
 8001b16:	f002 f91f 	bl	8003d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200001b4 	.word	0x200001b4

08001b24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <setRed_horizontal>:
 */
#include "traffic.h"
#include "global.h"
#include "main.h"

void setRed_horizontal(){
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001b34:	2201      	movs	r2, #1
 8001b36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <setRed_horizontal+0x20>)
 8001b3c:	f000 fd31 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2108      	movs	r1, #8
 8001b44:	4803      	ldr	r0, [pc, #12]	; (8001b54 <setRed_horizontal+0x24>)
 8001b46:	f000 fd2c 	bl	80025a2 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40010800 	.word	0x40010800
 8001b54:	40010c00 	.word	0x40010c00

08001b58 <setGreen_horizontal>:

void setGreen_horizontal(){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <setGreen_horizontal+0x20>)
 8001b64:	f000 fd1d 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <setGreen_horizontal+0x24>)
 8001b6e:	f000 fd18 	bl	80025a2 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_SET);
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40010800 	.word	0x40010800
 8001b7c:	40010c00 	.word	0x40010c00

08001b80 <setYellow_horizontal>:

void setYellow_horizontal(){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <setYellow_horizontal+0x20>)
 8001b8c:	f000 fd09 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001b90:	2201      	movs	r2, #1
 8001b92:	2108      	movs	r1, #8
 8001b94:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <setYellow_horizontal+0x24>)
 8001b96:	f000 fd04 	bl	80025a2 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40010800 	.word	0x40010800
 8001ba4:	40010c00 	.word	0x40010c00

08001ba8 <setRed_vertical>:

void setRed_vertical(){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	2120      	movs	r1, #32
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <setRed_vertical+0x1c>)
 8001bb2:	f000 fcf6 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2110      	movs	r1, #16
 8001bba:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <setRed_vertical+0x1c>)
 8001bbc:	f000 fcf1 	bl	80025a2 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40010c00 	.word	0x40010c00

08001bc8 <setGreen_vertical>:

void setGreen_vertical(){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2120      	movs	r1, #32
 8001bd0:	4804      	ldr	r0, [pc, #16]	; (8001be4 <setGreen_vertical+0x1c>)
 8001bd2:	f000 fce6 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2110      	movs	r1, #16
 8001bda:	4802      	ldr	r0, [pc, #8]	; (8001be4 <setGreen_vertical+0x1c>)
 8001bdc:	f000 fce1 	bl	80025a2 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_SET);
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40010c00 	.word	0x40010c00

08001be8 <setYellow_vertical>:

void setYellow_vertical(){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001bec:	2201      	movs	r2, #1
 8001bee:	2120      	movs	r1, #32
 8001bf0:	4804      	ldr	r0, [pc, #16]	; (8001c04 <setYellow_vertical+0x1c>)
 8001bf2:	f000 fcd6 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	4802      	ldr	r0, [pc, #8]	; (8001c04 <setYellow_vertical+0x1c>)
 8001bfc:	f000 fcd1 	bl	80025a2 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40010c00 	.word	0x40010c00

08001c08 <toggleLedRed>:


void toggleLedRed(){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001c0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <toggleLedRed+0x14>)
 8001c12:	f000 fcde 	bl	80025d2 <HAL_GPIO_TogglePin>
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40010c00 	.word	0x40010c00

08001c20 <toggleRed_horizontal>:

void toggleRed_horizontal(){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDA_GPIO_Port, REDA_Pin);
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8001c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c28:	4804      	ldr	r0, [pc, #16]	; (8001c3c <toggleRed_horizontal+0x1c>)
 8001c2a:	f000 fcd2 	bl	80025d2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2108      	movs	r1, #8
 8001c32:	4803      	ldr	r0, [pc, #12]	; (8001c40 <toggleRed_horizontal+0x20>)
 8001c34:	f000 fcb5 	bl	80025a2 <HAL_GPIO_WritePin>
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40010800 	.word	0x40010800
 8001c40:	40010c00 	.word	0x40010c00

08001c44 <toggleGreen_horizontal>:

void toggleGreen_horizontal(){
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENA_GPIO_Port, GREENA_Pin);
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8001c48:	2108      	movs	r1, #8
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <toggleGreen_horizontal+0x1c>)
 8001c4c:	f000 fcc1 	bl	80025d2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c56:	4803      	ldr	r0, [pc, #12]	; (8001c64 <toggleGreen_horizontal+0x20>)
 8001c58:	f000 fca3 	bl	80025a2 <HAL_GPIO_WritePin>
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40010c00 	.word	0x40010c00
 8001c64:	40010800 	.word	0x40010800

08001c68 <toggleYellow_horizontal>:

void toggleYellow_horizontal(){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWA_GPIO_Port, YELLOWA_Pin);
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, HAL_GPIO_ReadPin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin));
 8001c6c:	2108      	movs	r1, #8
 8001c6e:	480a      	ldr	r0, [pc, #40]	; (8001c98 <toggleYellow_horizontal+0x30>)
 8001c70:	f000 fc80 	bl	8002574 <HAL_GPIO_ReadPin>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c7c:	4807      	ldr	r0, [pc, #28]	; (8001c9c <toggleYellow_horizontal+0x34>)
 8001c7e:	f000 fc90 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8001c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <toggleYellow_horizontal+0x34>)
 8001c88:	f000 fca3 	bl	80025d2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8001c8c:	2108      	movs	r1, #8
 8001c8e:	4802      	ldr	r0, [pc, #8]	; (8001c98 <toggleYellow_horizontal+0x30>)
 8001c90:	f000 fc9f 	bl	80025d2 <HAL_GPIO_TogglePin>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40010c00 	.word	0x40010c00
 8001c9c:	40010800 	.word	0x40010800

08001ca0 <toggleRed_vertical>:

void toggleRed_vertical(){
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDB_GPIO_Port, REDB_Pin);
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8001ca4:	2120      	movs	r1, #32
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <toggleRed_vertical+0x1c>)
 8001ca8:	f000 fc93 	bl	80025d2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4802      	ldr	r0, [pc, #8]	; (8001cbc <toggleRed_vertical+0x1c>)
 8001cb2:	f000 fc76 	bl	80025a2 <HAL_GPIO_WritePin>
}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40010c00 	.word	0x40010c00

08001cc0 <toggleGreen_vertical>:

void toggleGreen_vertical(){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENB_GPIO_Port, GREENB_Pin);
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8001cc4:	2110      	movs	r1, #16
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <toggleGreen_vertical+0x1c>)
 8001cc8:	f000 fc83 	bl	80025d2 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2120      	movs	r1, #32
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <toggleGreen_vertical+0x1c>)
 8001cd2:	f000 fc66 	bl	80025a2 <HAL_GPIO_WritePin>
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40010c00 	.word	0x40010c00

08001ce0 <toggleYellow_vertical>:

void toggleYellow_vertical(){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWB_GPIO_Port, YELLOWB_Pin);
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, HAL_GPIO_ReadPin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin));
 8001ce4:	2110      	movs	r1, #16
 8001ce6:	4809      	ldr	r0, [pc, #36]	; (8001d0c <toggleYellow_vertical+0x2c>)
 8001ce8:	f000 fc44 	bl	8002574 <HAL_GPIO_ReadPin>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <toggleYellow_vertical+0x2c>)
 8001cf4:	f000 fc55 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8001cf8:	2120      	movs	r1, #32
 8001cfa:	4804      	ldr	r0, [pc, #16]	; (8001d0c <toggleYellow_vertical+0x2c>)
 8001cfc:	f000 fc69 	bl	80025d2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8001d00:	2110      	movs	r1, #16
 8001d02:	4802      	ldr	r0, [pc, #8]	; (8001d0c <toggleYellow_vertical+0x2c>)
 8001d04:	f000 fc65 	bl	80025d2 <HAL_GPIO_TogglePin>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40010c00 	.word	0x40010c00

08001d10 <resetTimeTraffic>:
void offRedYellow_vertical(){
//	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
}

void resetTimeTraffic(){
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
	time_red_horizontal_temp = time_red_horizontal;
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <resetTimeTraffic+0x3c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <resetTimeTraffic+0x40>)
 8001d1a:	6013      	str	r3, [r2, #0]
	time_green_horizontal_temp = time_green_horizontal;
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <resetTimeTraffic+0x44>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <resetTimeTraffic+0x48>)
 8001d22:	6013      	str	r3, [r2, #0]
	time_yellow_horizontal_temp = time_yellow_horizontal;
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <resetTimeTraffic+0x4c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0d      	ldr	r2, [pc, #52]	; (8001d60 <resetTimeTraffic+0x50>)
 8001d2a:	6013      	str	r3, [r2, #0]

	time_red_vertical_temp = time_red_vertical;
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <resetTimeTraffic+0x54>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0d      	ldr	r2, [pc, #52]	; (8001d68 <resetTimeTraffic+0x58>)
 8001d32:	6013      	str	r3, [r2, #0]
	time_green_vertical_temp = time_green_vertical;
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <resetTimeTraffic+0x5c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <resetTimeTraffic+0x60>)
 8001d3a:	6013      	str	r3, [r2, #0]
	time_yellow_vertical_temp = time_yellow_vertical;
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <resetTimeTraffic+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a0d      	ldr	r2, [pc, #52]	; (8001d78 <resetTimeTraffic+0x68>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	20000064 	.word	0x20000064
 8001d50:	20000070 	.word	0x20000070
 8001d54:	20000068 	.word	0x20000068
 8001d58:	20000074 	.word	0x20000074
 8001d5c:	2000006c 	.word	0x2000006c
 8001d60:	20000078 	.word	0x20000078
 8001d64:	20000084 	.word	0x20000084
 8001d68:	20000090 	.word	0x20000090
 8001d6c:	2000007c 	.word	0x2000007c
 8001d70:	20000088 	.word	0x20000088
 8001d74:	20000080 	.word	0x20000080
 8001d78:	2000008c 	.word	0x2000008c

08001d7c <set_off_pedes>:

void set_off_pedes(){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2104      	movs	r1, #4
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <set_off_pedes+0x20>)
 8001d86:	f000 fc0c 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d90:	4803      	ldr	r0, [pc, #12]	; (8001da0 <set_off_pedes+0x24>)
 8001d92:	f000 fc06 	bl	80025a2 <HAL_GPIO_WritePin>
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40010c00 	.word	0x40010c00
 8001da0:	40010800 	.word	0x40010800

08001da4 <set_red_pedes>:
void set_red_pedes(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2104      	movs	r1, #4
 8001dac:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <set_red_pedes+0x20>)
 8001dae:	f000 fbf8 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db8:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <set_red_pedes+0x24>)
 8001dba:	f000 fbf2 	bl	80025a2 <HAL_GPIO_WritePin>
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40010800 	.word	0x40010800

08001dcc <set_green_pedes>:
void set_green_pedes(){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <set_green_pedes+0x20>)
 8001dd6:	f000 fbe4 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <set_green_pedes+0x24>)
 8001de2:	f000 fbde 	bl	80025a2 <HAL_GPIO_WritePin>
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40010c00 	.word	0x40010c00
 8001df0:	40010800 	.word	0x40010800

08001df4 <Reset_Handler>:
 8001df4:	480c      	ldr	r0, [pc, #48]	; (8001e28 <LoopFillZerobss+0x12>)
 8001df6:	490d      	ldr	r1, [pc, #52]	; (8001e2c <LoopFillZerobss+0x16>)
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <LoopFillZerobss+0x1a>)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e002      	b.n	8001e04 <LoopCopyDataInit>

08001dfe <CopyDataInit>:
 8001dfe:	58d4      	ldr	r4, [r2, r3]
 8001e00:	50c4      	str	r4, [r0, r3]
 8001e02:	3304      	adds	r3, #4

08001e04 <LoopCopyDataInit>:
 8001e04:	18c4      	adds	r4, r0, r3
 8001e06:	428c      	cmp	r4, r1
 8001e08:	d3f9      	bcc.n	8001dfe <CopyDataInit>
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <LoopFillZerobss+0x1e>)
 8001e0c:	4c0a      	ldr	r4, [pc, #40]	; (8001e38 <LoopFillZerobss+0x22>)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e001      	b.n	8001e16 <LoopFillZerobss>

08001e12 <FillZerobss>:
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	3204      	adds	r2, #4

08001e16 <LoopFillZerobss>:
 8001e16:	42a2      	cmp	r2, r4
 8001e18:	d3fb      	bcc.n	8001e12 <FillZerobss>
 8001e1a:	f7ff fe83 	bl	8001b24 <SystemInit>
 8001e1e:	f002 fb49 	bl	80044b4 <__libc_init_array>
 8001e22:	f7ff f9b9 	bl	8001198 <main>
 8001e26:	4770      	bx	lr
 8001e28:	20000000 	.word	0x20000000
 8001e2c:	200000a4 	.word	0x200000a4
 8001e30:	08004554 	.word	0x08004554
 8001e34:	200000a4 	.word	0x200000a4
 8001e38:	200001fc 	.word	0x200001fc

08001e3c <ADC1_2_IRQHandler>:
 8001e3c:	e7fe      	b.n	8001e3c <ADC1_2_IRQHandler>
	...

08001e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_Init+0x28>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_Init+0x28>)
 8001e4a:	f043 0310 	orr.w	r3, r3, #16
 8001e4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e50:	2003      	movs	r0, #3
 8001e52:	f000 f923 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e56:	200f      	movs	r0, #15
 8001e58:	f000 f808 	bl	8001e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5c:	f7ff fd4e 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40022000 	.word	0x40022000

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_InitTick+0x54>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_InitTick+0x58>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f93b 	bl	8002106 <HAL_SYSTICK_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00e      	b.n	8001eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b0f      	cmp	r3, #15
 8001e9e:	d80a      	bhi.n	8001eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea8:	f000 f903 	bl	80020b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eac:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <HAL_InitTick+0x5c>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000098 	.word	0x20000098
 8001ec4:	200000a0 	.word	0x200000a0
 8001ec8:	2000009c 	.word	0x2000009c

08001ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_IncTick+0x1c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_IncTick+0x20>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a03      	ldr	r2, [pc, #12]	; (8001eec <HAL_IncTick+0x20>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	200000a0 	.word	0x200000a0
 8001eec:	200001f8 	.word	0x200001f8

08001ef0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_GetTick+0x10>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	200001f8 	.word	0x200001f8

08001f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4906      	ldr	r1, [pc, #24]	; (8001f9c <__NVIC_EnableIRQ+0x34>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100

08001fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	db0a      	blt.n	8001fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	490c      	ldr	r1, [pc, #48]	; (8001fec <__NVIC_SetPriority+0x4c>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	0112      	lsls	r2, r2, #4
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc8:	e00a      	b.n	8001fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <__NVIC_SetPriority+0x50>)
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	3b04      	subs	r3, #4
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	761a      	strb	r2, [r3, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	e000e100 	.word	0xe000e100
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f1c3 0307 	rsb	r3, r3, #7
 800200e:	2b04      	cmp	r3, #4
 8002010:	bf28      	it	cs
 8002012:	2304      	movcs	r3, #4
 8002014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3304      	adds	r3, #4
 800201a:	2b06      	cmp	r3, #6
 800201c:	d902      	bls.n	8002024 <NVIC_EncodePriority+0x30>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3b03      	subs	r3, #3
 8002022:	e000      	b.n	8002026 <NVIC_EncodePriority+0x32>
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	401a      	ands	r2, r3
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203c:	f04f 31ff 	mov.w	r1, #4294967295
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	43d9      	mvns	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	4313      	orrs	r3, r2
         );
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff90 	bl	8001fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff2d 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c4:	f7ff ff42 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ff90 	bl	8001ff4 <NVIC_EncodePriority>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff5f 	bl	8001fa0 <__NVIC_SetPriority>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff35 	bl	8001f68 <__NVIC_EnableIRQ>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ffa2 	bl	8002058 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002130:	2b02      	cmp	r3, #2
 8002132:	d008      	beq.n	8002146 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2204      	movs	r2, #4
 8002138:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e020      	b.n	8002188 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 020e 	bic.w	r2, r2, #14
 8002154:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	2101      	movs	r1, #1
 8002170:	fa01 f202 	lsl.w	r2, r1, r2
 8002174:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
	...

08002194 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d005      	beq.n	80021b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2204      	movs	r2, #4
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e051      	b.n	800225a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 020e 	bic.w	r2, r2, #14
 80021c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0201 	bic.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_DMA_Abort_IT+0xd0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d029      	beq.n	8002234 <HAL_DMA_Abort_IT+0xa0>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a20      	ldr	r2, [pc, #128]	; (8002268 <HAL_DMA_Abort_IT+0xd4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d022      	beq.n	8002230 <HAL_DMA_Abort_IT+0x9c>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_DMA_Abort_IT+0xd8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d01a      	beq.n	800222a <HAL_DMA_Abort_IT+0x96>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_DMA_Abort_IT+0xdc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d012      	beq.n	8002224 <HAL_DMA_Abort_IT+0x90>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_DMA_Abort_IT+0xe0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00a      	beq.n	800221e <HAL_DMA_Abort_IT+0x8a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1a      	ldr	r2, [pc, #104]	; (8002278 <HAL_DMA_Abort_IT+0xe4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d102      	bne.n	8002218 <HAL_DMA_Abort_IT+0x84>
 8002212:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002216:	e00e      	b.n	8002236 <HAL_DMA_Abort_IT+0xa2>
 8002218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800221c:	e00b      	b.n	8002236 <HAL_DMA_Abort_IT+0xa2>
 800221e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002222:	e008      	b.n	8002236 <HAL_DMA_Abort_IT+0xa2>
 8002224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002228:	e005      	b.n	8002236 <HAL_DMA_Abort_IT+0xa2>
 800222a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800222e:	e002      	b.n	8002236 <HAL_DMA_Abort_IT+0xa2>
 8002230:	2310      	movs	r3, #16
 8002232:	e000      	b.n	8002236 <HAL_DMA_Abort_IT+0xa2>
 8002234:	2301      	movs	r3, #1
 8002236:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_DMA_Abort_IT+0xe8>)
 8002238:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
    } 
  }
  return status;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40020008 	.word	0x40020008
 8002268:	4002001c 	.word	0x4002001c
 800226c:	40020030 	.word	0x40020030
 8002270:	40020044 	.word	0x40020044
 8002274:	40020058 	.word	0x40020058
 8002278:	4002006c 	.word	0x4002006c
 800227c:	40020000 	.word	0x40020000

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b08b      	sub	sp, #44	; 0x2c
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002292:	e148      	b.n	8002526 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002294:	2201      	movs	r2, #1
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	f040 8137 	bne.w	8002520 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4aa3      	ldr	r2, [pc, #652]	; (8002544 <HAL_GPIO_Init+0x2c4>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d05e      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022bc:	4aa1      	ldr	r2, [pc, #644]	; (8002544 <HAL_GPIO_Init+0x2c4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d875      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022c2:	4aa1      	ldr	r2, [pc, #644]	; (8002548 <HAL_GPIO_Init+0x2c8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d058      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022c8:	4a9f      	ldr	r2, [pc, #636]	; (8002548 <HAL_GPIO_Init+0x2c8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d86f      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022ce:	4a9f      	ldr	r2, [pc, #636]	; (800254c <HAL_GPIO_Init+0x2cc>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d052      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022d4:	4a9d      	ldr	r2, [pc, #628]	; (800254c <HAL_GPIO_Init+0x2cc>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d869      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022da:	4a9d      	ldr	r2, [pc, #628]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d04c      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022e0:	4a9b      	ldr	r2, [pc, #620]	; (8002550 <HAL_GPIO_Init+0x2d0>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d863      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022e6:	4a9b      	ldr	r2, [pc, #620]	; (8002554 <HAL_GPIO_Init+0x2d4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d046      	beq.n	800237a <HAL_GPIO_Init+0xfa>
 80022ec:	4a99      	ldr	r2, [pc, #612]	; (8002554 <HAL_GPIO_Init+0x2d4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d85d      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d82a      	bhi.n	800234c <HAL_GPIO_Init+0xcc>
 80022f6:	2b12      	cmp	r3, #18
 80022f8:	d859      	bhi.n	80023ae <HAL_GPIO_Init+0x12e>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <HAL_GPIO_Init+0x80>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	0800237b 	.word	0x0800237b
 8002304:	08002355 	.word	0x08002355
 8002308:	08002367 	.word	0x08002367
 800230c:	080023a9 	.word	0x080023a9
 8002310:	080023af 	.word	0x080023af
 8002314:	080023af 	.word	0x080023af
 8002318:	080023af 	.word	0x080023af
 800231c:	080023af 	.word	0x080023af
 8002320:	080023af 	.word	0x080023af
 8002324:	080023af 	.word	0x080023af
 8002328:	080023af 	.word	0x080023af
 800232c:	080023af 	.word	0x080023af
 8002330:	080023af 	.word	0x080023af
 8002334:	080023af 	.word	0x080023af
 8002338:	080023af 	.word	0x080023af
 800233c:	080023af 	.word	0x080023af
 8002340:	080023af 	.word	0x080023af
 8002344:	0800235d 	.word	0x0800235d
 8002348:	08002371 	.word	0x08002371
 800234c:	4a82      	ldr	r2, [pc, #520]	; (8002558 <HAL_GPIO_Init+0x2d8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002352:	e02c      	b.n	80023ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	623b      	str	r3, [r7, #32]
          break;
 800235a:	e029      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	3304      	adds	r3, #4
 8002362:	623b      	str	r3, [r7, #32]
          break;
 8002364:	e024      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	3308      	adds	r3, #8
 800236c:	623b      	str	r3, [r7, #32]
          break;
 800236e:	e01f      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	330c      	adds	r3, #12
 8002376:	623b      	str	r3, [r7, #32]
          break;
 8002378:	e01a      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002382:	2304      	movs	r3, #4
 8002384:	623b      	str	r3, [r7, #32]
          break;
 8002386:	e013      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002390:	2308      	movs	r3, #8
 8002392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	611a      	str	r2, [r3, #16]
          break;
 800239a:	e009      	b.n	80023b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800239c:	2308      	movs	r3, #8
 800239e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69fa      	ldr	r2, [r7, #28]
 80023a4:	615a      	str	r2, [r3, #20]
          break;
 80023a6:	e003      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023a8:	2300      	movs	r3, #0
 80023aa:	623b      	str	r3, [r7, #32]
          break;
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x130>
          break;
 80023ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2bff      	cmp	r3, #255	; 0xff
 80023b4:	d801      	bhi.n	80023ba <HAL_GPIO_Init+0x13a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	e001      	b.n	80023be <HAL_GPIO_Init+0x13e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3304      	adds	r3, #4
 80023be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2bff      	cmp	r3, #255	; 0xff
 80023c4:	d802      	bhi.n	80023cc <HAL_GPIO_Init+0x14c>
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0x152>
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	3b08      	subs	r3, #8
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	210f      	movs	r1, #15
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	6a39      	ldr	r1, [r7, #32]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8090 	beq.w	8002520 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002400:	4b56      	ldr	r3, [pc, #344]	; (800255c <HAL_GPIO_Init+0x2dc>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a55      	ldr	r2, [pc, #340]	; (800255c <HAL_GPIO_Init+0x2dc>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b53      	ldr	r3, [pc, #332]	; (800255c <HAL_GPIO_Init+0x2dc>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002418:	4a51      	ldr	r2, [pc, #324]	; (8002560 <HAL_GPIO_Init+0x2e0>)
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	220f      	movs	r2, #15
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a49      	ldr	r2, [pc, #292]	; (8002564 <HAL_GPIO_Init+0x2e4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00d      	beq.n	8002460 <HAL_GPIO_Init+0x1e0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a48      	ldr	r2, [pc, #288]	; (8002568 <HAL_GPIO_Init+0x2e8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d007      	beq.n	800245c <HAL_GPIO_Init+0x1dc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a47      	ldr	r2, [pc, #284]	; (800256c <HAL_GPIO_Init+0x2ec>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d101      	bne.n	8002458 <HAL_GPIO_Init+0x1d8>
 8002454:	2302      	movs	r3, #2
 8002456:	e004      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 8002458:	2303      	movs	r3, #3
 800245a:	e002      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_GPIO_Init+0x1e2>
 8002460:	2300      	movs	r3, #0
 8002462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002464:	f002 0203 	and.w	r2, r2, #3
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	4093      	lsls	r3, r2
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002472:	493b      	ldr	r1, [pc, #236]	; (8002560 <HAL_GPIO_Init+0x2e0>)
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d006      	beq.n	800249a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800248c:	4b38      	ldr	r3, [pc, #224]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4937      	ldr	r1, [pc, #220]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800249a:	4b35      	ldr	r3, [pc, #212]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	4933      	ldr	r1, [pc, #204]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	492d      	ldr	r1, [pc, #180]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024c2:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4929      	ldr	r1, [pc, #164]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	4923      	ldr	r1, [pc, #140]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024ea:	4b21      	ldr	r3, [pc, #132]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	491f      	ldr	r1, [pc, #124]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002504:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	4919      	ldr	r1, [pc, #100]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	60cb      	str	r3, [r1, #12]
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	43db      	mvns	r3, r3
 800251a:	4915      	ldr	r1, [pc, #84]	; (8002570 <HAL_GPIO_Init+0x2f0>)
 800251c:	4013      	ands	r3, r2
 800251e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	3301      	adds	r3, #1
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	f47f aeaf 	bne.w	8002294 <HAL_GPIO_Init+0x14>
  }
}
 8002536:	bf00      	nop
 8002538:	bf00      	nop
 800253a:	372c      	adds	r7, #44	; 0x2c
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	10320000 	.word	0x10320000
 8002548:	10310000 	.word	0x10310000
 800254c:	10220000 	.word	0x10220000
 8002550:	10210000 	.word	0x10210000
 8002554:	10120000 	.word	0x10120000
 8002558:	10110000 	.word	0x10110000
 800255c:	40021000 	.word	0x40021000
 8002560:	40010000 	.word	0x40010000
 8002564:	40010800 	.word	0x40010800
 8002568:	40010c00 	.word	0x40010c00
 800256c:	40011000 	.word	0x40011000
 8002570:	40010400 	.word	0x40010400

08002574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	887b      	ldrh	r3, [r7, #2]
 8002586:	4013      	ands	r3, r2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e001      	b.n	8002596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr

080025a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	807b      	strh	r3, [r7, #2]
 80025ae:	4613      	mov	r3, r2
 80025b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b2:	787b      	ldrb	r3, [r7, #1]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b8:	887a      	ldrh	r2, [r7, #2]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025be:	e003      	b.n	80025c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025c0:	887b      	ldrh	r3, [r7, #2]
 80025c2:	041a      	lsls	r2, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	611a      	str	r2, [r3, #16]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025e4:	887a      	ldrh	r2, [r7, #2]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4013      	ands	r3, r2
 80025ea:	041a      	lsls	r2, r3, #16
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	887b      	ldrh	r3, [r7, #2]
 80025f2:	400b      	ands	r3, r1
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	611a      	str	r2, [r3, #16]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e26c      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8087 	beq.w	8002732 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002624:	4b92      	ldr	r3, [pc, #584]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b04      	cmp	r3, #4
 800262e:	d00c      	beq.n	800264a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002630:	4b8f      	ldr	r3, [pc, #572]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b08      	cmp	r3, #8
 800263a:	d112      	bne.n	8002662 <HAL_RCC_OscConfig+0x5e>
 800263c:	4b8c      	ldr	r3, [pc, #560]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002648:	d10b      	bne.n	8002662 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264a:	4b89      	ldr	r3, [pc, #548]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d06c      	beq.n	8002730 <HAL_RCC_OscConfig+0x12c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d168      	bne.n	8002730 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e246      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x76>
 800266c:	4b80      	ldr	r3, [pc, #512]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a7f      	ldr	r2, [pc, #508]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	e02e      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x98>
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7a      	ldr	r2, [pc, #488]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a77      	ldr	r2, [pc, #476]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002694:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e01d      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0xbc>
 80026a6:	4b72      	ldr	r3, [pc, #456]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a71      	ldr	r2, [pc, #452]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b6f      	ldr	r3, [pc, #444]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6e      	ldr	r2, [pc, #440]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xd4>
 80026c0:	4b6b      	ldr	r3, [pc, #428]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a6a      	ldr	r2, [pc, #424]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b68      	ldr	r3, [pc, #416]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a67      	ldr	r2, [pc, #412]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fc06 	bl	8001ef0 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7ff fc02 	bl	8001ef0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e1fa      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe4>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7ff fbf2 	bl	8001ef0 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7ff fbee 	bl	8001ef0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e1e6      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x10c>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d063      	beq.n	8002806 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800273e:	4b4c      	ldr	r3, [pc, #304]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800274a:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b08      	cmp	r3, #8
 8002754:	d11c      	bne.n	8002790 <HAL_RCC_OscConfig+0x18c>
 8002756:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d116      	bne.n	8002790 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x176>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e1ba      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277a:	4b3d      	ldr	r3, [pc, #244]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4939      	ldr	r1, [pc, #228]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800278e:	e03a      	b.n	8002806 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d020      	beq.n	80027da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002798:	4b36      	ldr	r3, [pc, #216]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7ff fba7 	bl	8001ef0 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a6:	f7ff fba3 	bl	8001ef0 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e19b      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0f0      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c4:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4927      	ldr	r1, [pc, #156]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	600b      	str	r3, [r1, #0]
 80027d8:	e015      	b.n	8002806 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_RCC_OscConfig+0x270>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff fb86 	bl	8001ef0 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e8:	f7ff fb82 	bl	8001ef0 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e17a      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	4b1d      	ldr	r3, [pc, #116]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03a      	beq.n	8002888 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d019      	beq.n	800284e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_RCC_OscConfig+0x274>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7ff fb66 	bl	8001ef0 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7ff fb62 	bl	8001ef0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e15a      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_RCC_OscConfig+0x26c>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002846:	2001      	movs	r0, #1
 8002848:	f000 fad8 	bl	8002dfc <RCC_Delay>
 800284c:	e01c      	b.n	8002888 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_OscConfig+0x274>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7ff fb4c 	bl	8001ef0 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285a:	e00f      	b.n	800287c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7ff fb48 	bl	8001ef0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d908      	bls.n	800287c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e140      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	42420000 	.word	0x42420000
 8002878:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287c:	4b9e      	ldr	r3, [pc, #632]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e9      	bne.n	800285c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a6 	beq.w	80029e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289a:	4b97      	ldr	r3, [pc, #604]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10d      	bne.n	80028c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	4b94      	ldr	r3, [pc, #592]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a93      	ldr	r2, [pc, #588]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]
 80028b2:	4b91      	ldr	r3, [pc, #580]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028be:	2301      	movs	r3, #1
 80028c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c2:	4b8e      	ldr	r3, [pc, #568]	; (8002afc <HAL_RCC_OscConfig+0x4f8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d118      	bne.n	8002900 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ce:	4b8b      	ldr	r3, [pc, #556]	; (8002afc <HAL_RCC_OscConfig+0x4f8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a8a      	ldr	r2, [pc, #552]	; (8002afc <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028da:	f7ff fb09 	bl	8001ef0 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e2:	f7ff fb05 	bl	8001ef0 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	; 0x64
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0fd      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	4b81      	ldr	r3, [pc, #516]	; (8002afc <HAL_RCC_OscConfig+0x4f8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d106      	bne.n	8002916 <HAL_RCC_OscConfig+0x312>
 8002908:	4b7b      	ldr	r3, [pc, #492]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a7a      	ldr	r2, [pc, #488]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	e02d      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x334>
 800291e:	4b76      	ldr	r3, [pc, #472]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4a75      	ldr	r2, [pc, #468]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002924:	f023 0301 	bic.w	r3, r3, #1
 8002928:	6213      	str	r3, [r2, #32]
 800292a:	4b73      	ldr	r3, [pc, #460]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a72      	ldr	r2, [pc, #456]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002930:	f023 0304 	bic.w	r3, r3, #4
 8002934:	6213      	str	r3, [r2, #32]
 8002936:	e01c      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b05      	cmp	r3, #5
 800293e:	d10c      	bne.n	800295a <HAL_RCC_OscConfig+0x356>
 8002940:	4b6d      	ldr	r3, [pc, #436]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a6c      	ldr	r2, [pc, #432]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	4b6a      	ldr	r3, [pc, #424]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4a69      	ldr	r2, [pc, #420]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6213      	str	r3, [r2, #32]
 8002958:	e00b      	b.n	8002972 <HAL_RCC_OscConfig+0x36e>
 800295a:	4b67      	ldr	r3, [pc, #412]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4a66      	ldr	r2, [pc, #408]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	6213      	str	r3, [r2, #32]
 8002966:	4b64      	ldr	r3, [pc, #400]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a63      	ldr	r2, [pc, #396]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	f023 0304 	bic.w	r3, r3, #4
 8002970:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d015      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7ff fab9 	bl	8001ef0 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7ff fab5 	bl	8001ef0 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0ab      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0ee      	beq.n	8002982 <HAL_RCC_OscConfig+0x37e>
 80029a4:	e014      	b.n	80029d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a6:	f7ff faa3 	bl	8001ef0 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7ff fa9f 	bl	8001ef0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e095      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c4:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1ee      	bne.n	80029ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d105      	bne.n	80029e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d6:	4b48      	ldr	r3, [pc, #288]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4a47      	ldr	r2, [pc, #284]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 8081 	beq.w	8002aee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ec:	4b42      	ldr	r3, [pc, #264]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d061      	beq.n	8002abc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d146      	bne.n	8002a8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a00:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <HAL_RCC_OscConfig+0x4fc>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7ff fa73 	bl	8001ef0 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7ff fa6f 	bl	8001ef0 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e067      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a20:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1f0      	bne.n	8002a0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a34:	d108      	bne.n	8002a48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a36:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	492d      	ldr	r1, [pc, #180]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a48:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a19      	ldr	r1, [r3, #32]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	4927      	ldr	r1, [pc, #156]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <HAL_RCC_OscConfig+0x4fc>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a66:	f7ff fa43 	bl	8001ef0 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7ff fa3f 	bl	8001ef0 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e037      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x46a>
 8002a8c:	e02f      	b.n	8002aee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <HAL_RCC_OscConfig+0x4fc>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7ff fa2c 	bl	8001ef0 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9c:	f7ff fa28 	bl	8001ef0 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e020      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x498>
 8002aba:	e018      	b.n	8002aee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e013      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_OscConfig+0x4f4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d106      	bne.n	8002aea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d001      	beq.n	8002aee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
 8002b00:	42420060 	.word	0x42420060

08002b04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0d0      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d910      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 0207 	bic.w	r2, r3, #7
 8002b2e:	4965      	ldr	r1, [pc, #404]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b8      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4a58      	ldr	r2, [pc, #352]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494d      	ldr	r1, [pc, #308]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d040      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d115      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d107      	bne.n	8002bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc2:	4b41      	ldr	r3, [pc, #260]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e073      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd2:	4b3d      	ldr	r3, [pc, #244]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e06b      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be2:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f023 0203 	bic.w	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4936      	ldr	r1, [pc, #216]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf4:	f7ff f97c 	bl	8001ef0 <HAL_GetTick>
 8002bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bfc:	f7ff f978 	bl	8001ef0 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e053      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 020c 	and.w	r2, r3, #12
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1eb      	bne.n	8002bfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c24:	4b27      	ldr	r3, [pc, #156]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d210      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c32:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f023 0207 	bic.w	r2, r3, #7
 8002c3a:	4922      	ldr	r1, [pc, #136]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e032      	b.n	8002cba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f821 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	490a      	ldr	r1, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	5ccb      	ldrb	r3, [r1, r3]
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff f8da 	bl	8001e6c <HAL_InitTick>

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40022000 	.word	0x40022000
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	08004534 	.word	0x08004534
 8002cd0:	20000098 	.word	0x20000098
 8002cd4:	2000009c 	.word	0x2000009c

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	b490      	push	{r4, r7}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cde:	4b2a      	ldr	r3, [pc, #168]	; (8002d88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ce0:	1d3c      	adds	r4, r7, #4
 8002ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ce8:	f240 2301 	movw	r3, #513	; 0x201
 8002cec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d02:	4b22      	ldr	r3, [pc, #136]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d002      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x40>
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_GetSysClockFreq+0x46>
 8002d16:	e02d      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d1a:	623b      	str	r3, [r7, #32]
      break;
 8002d1c:	e02d      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	0c9b      	lsrs	r3, r3, #18
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d30:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d3c:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	0c5b      	lsrs	r3, r3, #17
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d56:	fb02 f203 	mul.w	r2, r2, r3
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	e004      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	623b      	str	r3, [r7, #32]
      break;
 8002d72:	e002      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d76:	623b      	str	r3, [r7, #32]
      break;
 8002d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc90      	pop	{r4, r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	08004524 	.word	0x08004524
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	007a1200 	.word	0x007a1200
 8002d94:	003d0900 	.word	0x003d0900

08002d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d9c:	4b02      	ldr	r3, [pc, #8]	; (8002da8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	20000098 	.word	0x20000098

08002dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002db0:	f7ff fff2 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	0a1b      	lsrs	r3, r3, #8
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	4903      	ldr	r1, [pc, #12]	; (8002dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dc2:	5ccb      	ldrb	r3, [r1, r3]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	08004544 	.word	0x08004544

08002dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dd8:	f7ff ffde 	bl	8002d98 <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	0adb      	lsrs	r3, r3, #11
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4903      	ldr	r1, [pc, #12]	; (8002df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40021000 	.word	0x40021000
 8002df8:	08004544 	.word	0x08004544

08002dfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <RCC_Delay+0x34>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <RCC_Delay+0x38>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0a5b      	lsrs	r3, r3, #9
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	fb02 f303 	mul.w	r3, r2, r3
 8002e16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e18:	bf00      	nop
  }
  while (Delay --);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	1e5a      	subs	r2, r3, #1
 8002e1e:	60fa      	str	r2, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f9      	bne.n	8002e18 <RCC_Delay+0x1c>
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	20000098 	.word	0x20000098
 8002e34:	10624dd3 	.word	0x10624dd3

08002e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e041      	b.n	8002ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe fd7e 	bl	8001960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f000 fc1c 	bl	80036b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d001      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e035      	b.n	8002f5c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <HAL_TIM_Base_Start_IT+0x90>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d009      	beq.n	8002f26 <HAL_TIM_Base_Start_IT+0x4e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1a:	d004      	beq.n	8002f26 <HAL_TIM_Base_Start_IT+0x4e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <HAL_TIM_Base_Start_IT+0x94>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d111      	bne.n	8002f4a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b06      	cmp	r3, #6
 8002f36:	d010      	beq.n	8002f5a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f48:	e007      	b.n	8002f5a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40000400 	.word	0x40000400

08002f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e041      	b.n	8003006 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f839 	bl	800300e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3304      	adds	r3, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f000 fb80 	bl	80036b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_TIM_PWM_Start+0x24>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b01      	cmp	r3, #1
 800303a:	bf14      	ite	ne
 800303c:	2301      	movne	r3, #1
 800303e:	2300      	moveq	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e022      	b.n	800308a <HAL_TIM_PWM_Start+0x6a>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2b04      	cmp	r3, #4
 8003048:	d109      	bne.n	800305e <HAL_TIM_PWM_Start+0x3e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	bf14      	ite	ne
 8003056:	2301      	movne	r3, #1
 8003058:	2300      	moveq	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	e015      	b.n	800308a <HAL_TIM_PWM_Start+0x6a>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d109      	bne.n	8003078 <HAL_TIM_PWM_Start+0x58>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e008      	b.n	800308a <HAL_TIM_PWM_Start+0x6a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b01      	cmp	r3, #1
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e059      	b.n	8003146 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d104      	bne.n	80030a2 <HAL_TIM_PWM_Start+0x82>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a0:	e013      	b.n	80030ca <HAL_TIM_PWM_Start+0xaa>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d104      	bne.n	80030b2 <HAL_TIM_PWM_Start+0x92>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030b0:	e00b      	b.n	80030ca <HAL_TIM_PWM_Start+0xaa>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d104      	bne.n	80030c2 <HAL_TIM_PWM_Start+0xa2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030c0:	e003      	b.n	80030ca <HAL_TIM_PWM_Start+0xaa>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2201      	movs	r2, #1
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fd64 	bl	8003ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	; (8003150 <HAL_TIM_PWM_Start+0x130>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d107      	bne.n	80030f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a16      	ldr	r2, [pc, #88]	; (8003150 <HAL_TIM_PWM_Start+0x130>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d009      	beq.n	8003110 <HAL_TIM_PWM_Start+0xf0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d004      	beq.n	8003110 <HAL_TIM_PWM_Start+0xf0>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <HAL_TIM_PWM_Start+0x134>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d111      	bne.n	8003134 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b06      	cmp	r3, #6
 8003120:	d010      	beq.n	8003144 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0201 	orr.w	r2, r2, #1
 8003130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003132:	e007      	b.n	8003144 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40000400 	.word	0x40000400

08003158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d122      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d11b      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0202 	mvn.w	r2, #2
 8003184:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa6f 	bl	800367e <HAL_TIM_IC_CaptureCallback>
 80031a0:	e005      	b.n	80031ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fa62 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fa71 	bl	8003690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d122      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	d11b      	bne.n	8003208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0204 	mvn.w	r2, #4
 80031d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa45 	bl	800367e <HAL_TIM_IC_CaptureCallback>
 80031f4:	e005      	b.n	8003202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fa38 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fa47 	bl	8003690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b08      	cmp	r3, #8
 8003214:	d122      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b08      	cmp	r3, #8
 8003222:	d11b      	bne.n	800325c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0208 	mvn.w	r2, #8
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2204      	movs	r2, #4
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fa1b 	bl	800367e <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fa0e 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fa1d 	bl	8003690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b10      	cmp	r3, #16
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b10      	cmp	r3, #16
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0210 	mvn.w	r2, #16
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2208      	movs	r2, #8
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9f1 	bl	800367e <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9e4 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f9f3 	bl	8003690 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d10e      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d107      	bne.n	80032dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0201 	mvn.w	r2, #1
 80032d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe f8ea 	bl	80014b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e6:	2b80      	cmp	r3, #128	; 0x80
 80032e8:	d10e      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b80      	cmp	r3, #128	; 0x80
 80032f6:	d107      	bne.n	8003308 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fcd1 	bl	8003caa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b40      	cmp	r3, #64	; 0x40
 8003314:	d10e      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b40      	cmp	r3, #64	; 0x40
 8003322:	d107      	bne.n	8003334 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800332c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f9b7 	bl	80036a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	2b20      	cmp	r3, #32
 8003340:	d10e      	bne.n	8003360 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b20      	cmp	r3, #32
 800334e:	d107      	bne.n	8003360 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0220 	mvn.w	r2, #32
 8003358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fc9c 	bl	8003c98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800337e:	2302      	movs	r3, #2
 8003380:	e0ac      	b.n	80034dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	f200 809f 	bhi.w	80034d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003392:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033cd 	.word	0x080033cd
 800339c:	080034d1 	.word	0x080034d1
 80033a0:	080034d1 	.word	0x080034d1
 80033a4:	080034d1 	.word	0x080034d1
 80033a8:	0800340d 	.word	0x0800340d
 80033ac:	080034d1 	.word	0x080034d1
 80033b0:	080034d1 	.word	0x080034d1
 80033b4:	080034d1 	.word	0x080034d1
 80033b8:	0800344f 	.word	0x0800344f
 80033bc:	080034d1 	.word	0x080034d1
 80033c0:	080034d1 	.word	0x080034d1
 80033c4:	080034d1 	.word	0x080034d1
 80033c8:	0800348f 	.word	0x0800348f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f9c6 	bl	8003764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0208 	orr.w	r2, r2, #8
 80033e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0204 	bic.w	r2, r2, #4
 80033f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6999      	ldr	r1, [r3, #24]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	619a      	str	r2, [r3, #24]
      break;
 800340a:	e062      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fa0c 	bl	8003830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6999      	ldr	r1, [r3, #24]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	021a      	lsls	r2, r3, #8
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	619a      	str	r2, [r3, #24]
      break;
 800344c:	e041      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fa55 	bl	8003904 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0208 	orr.w	r2, r2, #8
 8003468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0204 	bic.w	r2, r2, #4
 8003478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69d9      	ldr	r1, [r3, #28]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	61da      	str	r2, [r3, #28]
      break;
 800348c:	e021      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fa9f 	bl	80039d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69d9      	ldr	r1, [r3, #28]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	021a      	lsls	r2, r3, #8
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	61da      	str	r2, [r3, #28]
      break;
 80034ce:	e000      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80034d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIM_ConfigClockSource+0x18>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e0b3      	b.n	8003664 <HAL_TIM_ConfigClockSource+0x180>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800351a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003522:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003534:	d03e      	beq.n	80035b4 <HAL_TIM_ConfigClockSource+0xd0>
 8003536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353a:	f200 8087 	bhi.w	800364c <HAL_TIM_ConfigClockSource+0x168>
 800353e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003542:	f000 8085 	beq.w	8003650 <HAL_TIM_ConfigClockSource+0x16c>
 8003546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800354a:	d87f      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x168>
 800354c:	2b70      	cmp	r3, #112	; 0x70
 800354e:	d01a      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0xa2>
 8003550:	2b70      	cmp	r3, #112	; 0x70
 8003552:	d87b      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x168>
 8003554:	2b60      	cmp	r3, #96	; 0x60
 8003556:	d050      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0x116>
 8003558:	2b60      	cmp	r3, #96	; 0x60
 800355a:	d877      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x168>
 800355c:	2b50      	cmp	r3, #80	; 0x50
 800355e:	d03c      	beq.n	80035da <HAL_TIM_ConfigClockSource+0xf6>
 8003560:	2b50      	cmp	r3, #80	; 0x50
 8003562:	d873      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x168>
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d058      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x136>
 8003568:	2b40      	cmp	r3, #64	; 0x40
 800356a:	d86f      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x168>
 800356c:	2b30      	cmp	r3, #48	; 0x30
 800356e:	d064      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x156>
 8003570:	2b30      	cmp	r3, #48	; 0x30
 8003572:	d86b      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x168>
 8003574:	2b20      	cmp	r3, #32
 8003576:	d060      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x156>
 8003578:	2b20      	cmp	r3, #32
 800357a:	d867      	bhi.n	800364c <HAL_TIM_ConfigClockSource+0x168>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d05c      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x156>
 8003580:	2b10      	cmp	r3, #16
 8003582:	d05a      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003584:	e062      	b.n	800364c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6899      	ldr	r1, [r3, #8]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f000 fae4 	bl	8003b62 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	609a      	str	r2, [r3, #8]
      break;
 80035b2:	e04e      	b.n	8003652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6899      	ldr	r1, [r3, #8]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f000 facd 	bl	8003b62 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035d6:	609a      	str	r2, [r3, #8]
      break;
 80035d8:	e03b      	b.n	8003652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6859      	ldr	r1, [r3, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	461a      	mov	r2, r3
 80035e8:	f000 fa44 	bl	8003a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2150      	movs	r1, #80	; 0x50
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fa9b 	bl	8003b2e <TIM_ITRx_SetConfig>
      break;
 80035f8:	e02b      	b.n	8003652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	461a      	mov	r2, r3
 8003608:	f000 fa62 	bl	8003ad0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2160      	movs	r1, #96	; 0x60
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fa8b 	bl	8003b2e <TIM_ITRx_SetConfig>
      break;
 8003618:	e01b      	b.n	8003652 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	461a      	mov	r2, r3
 8003628:	f000 fa24 	bl	8003a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2140      	movs	r1, #64	; 0x40
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fa7b 	bl	8003b2e <TIM_ITRx_SetConfig>
      break;
 8003638:	e00b      	b.n	8003652 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4619      	mov	r1, r3
 8003644:	4610      	mov	r0, r2
 8003646:	f000 fa72 	bl	8003b2e <TIM_ITRx_SetConfig>
        break;
 800364a:	e002      	b.n	8003652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800364c:	bf00      	nop
 800364e:	e000      	b.n	8003652 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003650:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a25      	ldr	r2, [pc, #148]	; (800375c <TIM_Base_SetConfig+0xa8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d007      	beq.n	80036dc <TIM_Base_SetConfig+0x28>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d2:	d003      	beq.n	80036dc <TIM_Base_SetConfig+0x28>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a22      	ldr	r2, [pc, #136]	; (8003760 <TIM_Base_SetConfig+0xac>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d108      	bne.n	80036ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a1a      	ldr	r2, [pc, #104]	; (800375c <TIM_Base_SetConfig+0xa8>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d007      	beq.n	8003706 <TIM_Base_SetConfig+0x52>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d003      	beq.n	8003706 <TIM_Base_SetConfig+0x52>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a17      	ldr	r2, [pc, #92]	; (8003760 <TIM_Base_SetConfig+0xac>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d108      	bne.n	8003718 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800370c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4313      	orrs	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a07      	ldr	r2, [pc, #28]	; (800375c <TIM_Base_SetConfig+0xa8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d103      	bne.n	800374c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	615a      	str	r2, [r3, #20]
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40000400 	.word	0x40000400

08003764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	f023 0201 	bic.w	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0303 	bic.w	r3, r3, #3
 800379a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f023 0302 	bic.w	r3, r3, #2
 80037ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a1c      	ldr	r2, [pc, #112]	; (800382c <TIM_OC1_SetConfig+0xc8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10c      	bne.n	80037da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f023 0308 	bic.w	r3, r3, #8
 80037c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <TIM_OC1_SetConfig+0xc8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d111      	bne.n	8003806 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	621a      	str	r2, [r3, #32]
}
 8003820:	bf00      	nop
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40012c00 	.word	0x40012c00

08003830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0210 	bic.w	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f023 0320 	bic.w	r3, r3, #32
 800387a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <TIM_OC2_SetConfig+0xd0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d10d      	bne.n	80038ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a14      	ldr	r2, [pc, #80]	; (8003900 <TIM_OC2_SetConfig+0xd0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d113      	bne.n	80038dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	621a      	str	r2, [r3, #32]
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	40012c00 	.word	0x40012c00

08003904 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0303 	bic.w	r3, r3, #3
 800393a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800394c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <TIM_OC3_SetConfig+0xd0>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d10d      	bne.n	800397e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800397c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a14      	ldr	r2, [pc, #80]	; (80039d4 <TIM_OC3_SetConfig+0xd0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d113      	bne.n	80039ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800398c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	621a      	str	r2, [r3, #32]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40012c00 	.word	0x40012c00

080039d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0f      	ldr	r2, [pc, #60]	; (8003a70 <TIM_OC4_SetConfig+0x98>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d109      	bne.n	8003a4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	019b      	lsls	r3, r3, #6
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr
 8003a70:	40012c00 	.word	0x40012c00

08003a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0201 	bic.w	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 030a 	bic.w	r3, r3, #10
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	f023 0210 	bic.w	r2, r3, #16
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003afa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	031b      	lsls	r3, r3, #12
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	621a      	str	r2, [r3, #32]
}
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b085      	sub	sp, #20
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f043 0307 	orr.w	r3, r3, #7
 8003b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	609a      	str	r2, [r3, #8]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b087      	sub	sp, #28
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	021a      	lsls	r2, r3, #8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	431a      	orrs	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	609a      	str	r2, [r3, #8]
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b087      	sub	sp, #28
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a1a      	ldr	r2, [r3, #32]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a1a      	ldr	r2, [r3, #32]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	621a      	str	r2, [r3, #32]
}
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e041      	b.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4c:	d004      	beq.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a10      	ldr	r2, [pc, #64]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d10c      	bne.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40012c00 	.word	0x40012c00
 8003c94:	40000400 	.word	0x40000400

08003c98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e03f      	b.n	8003d4e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7fd fe90 	bl	8001a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2224      	movs	r2, #36	; 0x24
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fb49 	bl	8004398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08a      	sub	sp, #40	; 0x28
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	f003 030f 	and.w	r3, r3, #15
 8003d86:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_UART_IRQHandler+0x52>
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa4f 	bl	8004246 <UART_Receive_IT>
      return;
 8003da8:	e17b      	b.n	80040a2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80b1 	beq.w	8003f14 <HAL_UART_IRQHandler+0x1bc>
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d105      	bne.n	8003dc8 <HAL_UART_IRQHandler+0x70>
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 80a6 	beq.w	8003f14 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_UART_IRQHandler+0x90>
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f043 0201 	orr.w	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_UART_IRQHandler+0xb0>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f043 0202 	orr.w	r2, r3, #2
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HAL_UART_IRQHandler+0xd0>
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f043 0204 	orr.w	r2, r3, #4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00f      	beq.n	8003e52 <HAL_UART_IRQHandler+0xfa>
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d104      	bne.n	8003e46 <HAL_UART_IRQHandler+0xee>
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f043 0208 	orr.w	r2, r3, #8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 811e 	beq.w	8004098 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <HAL_UART_IRQHandler+0x11e>
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f9e8 	bl	8004246 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <HAL_UART_IRQHandler+0x146>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d031      	beq.n	8003f02 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f92a 	bl	80040f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d023      	beq.n	8003efa <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ec0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d013      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	4a76      	ldr	r2, [pc, #472]	; (80040a8 <HAL_UART_IRQHandler+0x350>)
 8003ed0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe f95c 	bl	8002194 <HAL_DMA_Abort_IT>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d016      	beq.n	8003f10 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eec:	4610      	mov	r0, r2
 8003eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	e00e      	b.n	8003f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f8ec 	bl	80040d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef8:	e00a      	b.n	8003f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8e8 	bl	80040d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	e006      	b.n	8003f10 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8e4 	bl	80040d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f0e:	e0c3      	b.n	8004098 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	bf00      	nop
    return;
 8003f12:	e0c1      	b.n	8004098 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	f040 80a1 	bne.w	8004060 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	f003 0310 	and.w	r3, r3, #16
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 809b 	beq.w	8004060 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8095 	beq.w	8004060 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d04e      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f64:	8a3b      	ldrh	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8098 	beq.w	800409c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f70:	8a3a      	ldrh	r2, [r7, #16]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	f080 8092 	bcs.w	800409c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8a3a      	ldrh	r2, [r7, #16]
 8003f7c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d02b      	beq.n	8003fe0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f96:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695a      	ldr	r2, [r3, #20]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0210 	bic.w	r2, r2, #16
 8003fd4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe f89f 	bl	800211e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f876 	bl	80040e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ff6:	e051      	b.n	800409c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004000:	b29b      	uxth	r3, r3
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d047      	beq.n	80040a0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004010:	8a7b      	ldrh	r3, [r7, #18]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d044      	beq.n	80040a0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004024:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0201 	bic.w	r2, r2, #1
 8004034:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0210 	bic.w	r2, r2, #16
 8004052:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004054:	8a7b      	ldrh	r3, [r7, #18]
 8004056:	4619      	mov	r1, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f842 	bl	80040e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800405e:	e01f      	b.n	80040a0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d008      	beq.n	800407c <HAL_UART_IRQHandler+0x324>
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f87f 	bl	8004178 <UART_Transmit_IT>
    return;
 800407a:	e012      	b.n	80040a2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <HAL_UART_IRQHandler+0x34a>
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f8c0 	bl	8004216 <UART_EndTransmit_IT>
    return;
 8004096:	e004      	b.n	80040a2 <HAL_UART_IRQHandler+0x34a>
    return;
 8004098:	bf00      	nop
 800409a:	e002      	b.n	80040a2 <HAL_UART_IRQHandler+0x34a>
      return;
 800409c:	bf00      	nop
 800409e:	e000      	b.n	80040a2 <HAL_UART_IRQHandler+0x34a>
      return;
 80040a0:	bf00      	nop
  }
}
 80040a2:	3728      	adds	r7, #40	; 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	08004151 	.word	0x08004151

080040ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr

080040be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr

080040d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr

080040e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800410e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	2b01      	cmp	r3, #1
 8004126:	d107      	bne.n	8004138 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0210 	bic.w	r2, r2, #16
 8004136:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff ffb0 	bl	80040d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b21      	cmp	r3, #33	; 0x21
 800418a:	d13e      	bne.n	800420a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004194:	d114      	bne.n	80041c0 <UART_Transmit_IT+0x48>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d110      	bne.n	80041c0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	1c9a      	adds	r2, r3, #2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	621a      	str	r2, [r3, #32]
 80041be:	e008      	b.n	80041d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	1c59      	adds	r1, r3, #1
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6211      	str	r1, [r2, #32]
 80041ca:	781a      	ldrb	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29b      	uxth	r3, r3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	4619      	mov	r1, r3
 80041e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10f      	bne.n	8004206 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004204:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800420a:	2302      	movs	r3, #2
  }
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr

08004216 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ff38 	bl	80040ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b22      	cmp	r3, #34	; 0x22
 8004258:	f040 8099 	bne.w	800438e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004264:	d117      	bne.n	8004296 <UART_Receive_IT+0x50>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d113      	bne.n	8004296 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004284:	b29a      	uxth	r2, r3
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	1c9a      	adds	r2, r3, #2
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
 8004294:	e026      	b.n	80042e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a8:	d007      	beq.n	80042ba <UART_Receive_IT+0x74>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <UART_Receive_IT+0x82>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e008      	b.n	80042da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4619      	mov	r1, r3
 80042f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d148      	bne.n	800438a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0220 	bic.w	r2, r2, #32
 8004306:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	2b01      	cmp	r3, #1
 8004336:	d123      	bne.n	8004380 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68da      	ldr	r2, [r3, #12]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0210 	bic.w	r2, r2, #16
 800434c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b10      	cmp	r3, #16
 800435a:	d10a      	bne.n	8004372 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff feb2 	bl	80040e2 <HAL_UARTEx_RxEventCallback>
 800437e:	e002      	b.n	8004386 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff fe9c 	bl	80040be <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e002      	b.n	8004390 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	e000      	b.n	8004390 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
  }
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80043d2:	f023 030c 	bic.w	r3, r3, #12
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	430b      	orrs	r3, r1
 80043de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a2c      	ldr	r2, [pc, #176]	; (80044ac <UART_SetConfig+0x114>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d103      	bne.n	8004408 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004400:	f7fe fce8 	bl	8002dd4 <HAL_RCC_GetPCLK2Freq>
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	e002      	b.n	800440e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004408:	f7fe fcd0 	bl	8002dac <HAL_RCC_GetPCLK1Freq>
 800440c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009a      	lsls	r2, r3, #2
 8004418:	441a      	add	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	4a22      	ldr	r2, [pc, #136]	; (80044b0 <UART_SetConfig+0x118>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	0119      	lsls	r1, r3, #4
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	009a      	lsls	r2, r3, #2
 8004438:	441a      	add	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	fbb2 f2f3 	udiv	r2, r2, r3
 8004444:	4b1a      	ldr	r3, [pc, #104]	; (80044b0 <UART_SetConfig+0x118>)
 8004446:	fba3 0302 	umull	r0, r3, r3, r2
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	2064      	movs	r0, #100	; 0x64
 800444e:	fb00 f303 	mul.w	r3, r0, r3
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	3332      	adds	r3, #50	; 0x32
 8004458:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <UART_SetConfig+0x118>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	095b      	lsrs	r3, r3, #5
 8004460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004464:	4419      	add	r1, r3
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009a      	lsls	r2, r3, #2
 8004470:	441a      	add	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	fbb2 f2f3 	udiv	r2, r2, r3
 800447c:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <UART_SetConfig+0x118>)
 800447e:	fba3 0302 	umull	r0, r3, r3, r2
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	2064      	movs	r0, #100	; 0x64
 8004486:	fb00 f303 	mul.w	r3, r0, r3
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	3332      	adds	r3, #50	; 0x32
 8004490:	4a07      	ldr	r2, [pc, #28]	; (80044b0 <UART_SetConfig+0x118>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	f003 020f 	and.w	r2, r3, #15
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	440a      	add	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40013800 	.word	0x40013800
 80044b0:	51eb851f 	.word	0x51eb851f

080044b4 <__libc_init_array>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	2600      	movs	r6, #0
 80044b8:	4d0c      	ldr	r5, [pc, #48]	; (80044ec <__libc_init_array+0x38>)
 80044ba:	4c0d      	ldr	r4, [pc, #52]	; (80044f0 <__libc_init_array+0x3c>)
 80044bc:	1b64      	subs	r4, r4, r5
 80044be:	10a4      	asrs	r4, r4, #2
 80044c0:	42a6      	cmp	r6, r4
 80044c2:	d109      	bne.n	80044d8 <__libc_init_array+0x24>
 80044c4:	f000 f822 	bl	800450c <_init>
 80044c8:	2600      	movs	r6, #0
 80044ca:	4d0a      	ldr	r5, [pc, #40]	; (80044f4 <__libc_init_array+0x40>)
 80044cc:	4c0a      	ldr	r4, [pc, #40]	; (80044f8 <__libc_init_array+0x44>)
 80044ce:	1b64      	subs	r4, r4, r5
 80044d0:	10a4      	asrs	r4, r4, #2
 80044d2:	42a6      	cmp	r6, r4
 80044d4:	d105      	bne.n	80044e2 <__libc_init_array+0x2e>
 80044d6:	bd70      	pop	{r4, r5, r6, pc}
 80044d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044dc:	4798      	blx	r3
 80044de:	3601      	adds	r6, #1
 80044e0:	e7ee      	b.n	80044c0 <__libc_init_array+0xc>
 80044e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e6:	4798      	blx	r3
 80044e8:	3601      	adds	r6, #1
 80044ea:	e7f2      	b.n	80044d2 <__libc_init_array+0x1e>
 80044ec:	0800454c 	.word	0x0800454c
 80044f0:	0800454c 	.word	0x0800454c
 80044f4:	0800454c 	.word	0x0800454c
 80044f8:	08004550 	.word	0x08004550

080044fc <memset>:
 80044fc:	4603      	mov	r3, r0
 80044fe:	4402      	add	r2, r0
 8004500:	4293      	cmp	r3, r2
 8004502:	d100      	bne.n	8004506 <memset+0xa>
 8004504:	4770      	bx	lr
 8004506:	f803 1b01 	strb.w	r1, [r3], #1
 800450a:	e7f9      	b.n	8004500 <memset+0x4>

0800450c <_init>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr

08004518 <_fini>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr
