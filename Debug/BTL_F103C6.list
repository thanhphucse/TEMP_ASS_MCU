
BTL_F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004810  08004810  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08004810  08004810  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004810  08004810  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004810  08004810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08004818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000ac  080048c4  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  080048c4  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e473  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f5  00000000  00000000  0002e548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00030940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00031848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a56  00000000  00000000  000325c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff75  00000000  00000000  0004a01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008534f  00000000  00000000  00059f93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df2e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e4  00000000  00000000  000df338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	080047d0 	.word	0x080047d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	080047d0 	.word	0x080047d0

0800014c <isButton_BUT1_Pressed>:
int button_BUT3_LongPressed_flag = 0;
int button_PEDES_LongPressed_flag = 0;


int isButton_BUT1_Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_BUT1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton_BUT1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton_BUT1_Pressed+0x16>
	{
		button_BUT1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton_BUT1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton_BUT1_Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000c8 	.word	0x200000c8

08000170 <isButton_BUT2_Pressed>:
int isButton_BUT2_Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_BUT2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton_BUT2_Pressed+0x16>
	{
		button_BUT2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton_BUT2_Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000cc 	.word	0x200000cc

08000194 <isButton_BUT3_Pressed>:
int isButton_BUT3_Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_BUT3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton_BUT3_Pressed+0x16>
	{
		button_BUT3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton_BUT3_Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000d0 	.word	0x200000d0

080001b8 <isButton_Pedes_Pressed>:
int isButton_Pedes_Pressed()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button_PEDES_flag == 1)
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton_Pedes_Pressed+0x16>
	{
		button_PEDES_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton_Pedes_Pressed+0x18>
	}
	else return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200000d4 	.word	0x200000d4

080001dc <getKeyInput>:
	else return 0;
}


void getKeyInput()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e187      	b.n	80004f8 <getKeyInput+0x31c>
		// button debouncing
		keyReg0[i] = keyReg1[i];
 80001e8:	4a7f      	ldr	r2, [pc, #508]	; (80003e8 <getKeyInput+0x20c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	497e      	ldr	r1, [pc, #504]	; (80003ec <getKeyInput+0x210>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001f8:	4a7d      	ldr	r2, [pc, #500]	; (80003f0 <getKeyInput+0x214>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4979      	ldr	r1, [pc, #484]	; (80003e8 <getKeyInput+0x20c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//handle button 1
		if(i == 0){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d154      	bne.n	80002b8 <getKeyInput+0xdc>
			keyReg2[i] = HAL_GPIO_ReadPin(A1_BUTTON1_GPIO_Port, A1_BUTTON1_Pin);
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	4878      	ldr	r0, [pc, #480]	; (80003f4 <getKeyInput+0x218>)
 8000214:	f002 fb10 	bl	8002838 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	4619      	mov	r1, r3
 800021c:	4a74      	ldr	r2, [pc, #464]	; (80003f0 <getKeyInput+0x214>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000224:	4a71      	ldr	r2, [pc, #452]	; (80003ec <getKeyInput+0x210>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	496e      	ldr	r1, [pc, #440]	; (80003e8 <getKeyInput+0x20c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d13f      	bne.n	80002b8 <getKeyInput+0xdc>
 8000238:	4a6b      	ldr	r2, [pc, #428]	; (80003e8 <getKeyInput+0x20c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	496b      	ldr	r1, [pc, #428]	; (80003f0 <getKeyInput+0x214>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d135      	bne.n	80002b8 <getKeyInput+0xdc>
			{
				 //case short pressed
				if(keyReg3[i] != keyReg2[i])
 800024c:	4a6a      	ldr	r2, [pc, #424]	; (80003f8 <getKeyInput+0x21c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4966      	ldr	r1, [pc, #408]	; (80003f0 <getKeyInput+0x214>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d015      	beq.n	800028c <getKeyInput+0xb0>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 8000260:	4a63      	ldr	r2, [pc, #396]	; (80003f0 <getKeyInput+0x214>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	4963      	ldr	r1, [pc, #396]	; (80003f8 <getKeyInput+0x21c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000270:	4a5f      	ldr	r2, [pc, #380]	; (80003f0 <getKeyInput+0x214>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d11d      	bne.n	80002b8 <getKeyInput+0xdc>
					{
						//TODO
						button_BUT1_flag = 1;
 800027c:	4b5f      	ldr	r3, [pc, #380]	; (80003fc <getKeyInput+0x220>)
 800027e:	2201      	movs	r2, #1
 8000280:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000282:	4b5f      	ldr	r3, [pc, #380]	; (8000400 <getKeyInput+0x224>)
 8000284:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	e015      	b.n	80002b8 <getKeyInput+0xdc>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800028c:	4a58      	ldr	r2, [pc, #352]	; (80003f0 <getKeyInput+0x214>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10f      	bne.n	80002b8 <getKeyInput+0xdc>
						timerForKeyPress--;
 8000298:	4b59      	ldr	r3, [pc, #356]	; (8000400 <getKeyInput+0x224>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a58      	ldr	r2, [pc, #352]	; (8000400 <getKeyInput+0x224>)
 80002a0:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80002a2:	4b57      	ldr	r3, [pc, #348]	; (8000400 <getKeyInput+0x224>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d106      	bne.n	80002b8 <getKeyInput+0xdc>
						{
							//TODO
							button_BUT1_LongPressed_flag = 1;
 80002aa:	4b56      	ldr	r3, [pc, #344]	; (8000404 <getKeyInput+0x228>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80002b0:	4b53      	ldr	r3, [pc, #332]	; (8000400 <getKeyInput+0x224>)
 80002b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002b6:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 2
		if(i == 1){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d153      	bne.n	8000366 <getKeyInput+0x18a>
			keyReg2[i] = HAL_GPIO_ReadPin(A2_BUTTON2_GPIO_Port, A2_BUTTON2_Pin);
 80002be:	2120      	movs	r1, #32
 80002c0:	4851      	ldr	r0, [pc, #324]	; (8000408 <getKeyInput+0x22c>)
 80002c2:	f002 fab9 	bl	8002838 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4619      	mov	r1, r3
 80002ca:	4a49      	ldr	r2, [pc, #292]	; (80003f0 <getKeyInput+0x214>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80002d2:	4a46      	ldr	r2, [pc, #280]	; (80003ec <getKeyInput+0x210>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002da:	4943      	ldr	r1, [pc, #268]	; (80003e8 <getKeyInput+0x20c>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d13f      	bne.n	8000366 <getKeyInput+0x18a>
 80002e6:	4a40      	ldr	r2, [pc, #256]	; (80003e8 <getKeyInput+0x20c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ee:	4940      	ldr	r1, [pc, #256]	; (80003f0 <getKeyInput+0x214>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d135      	bne.n	8000366 <getKeyInput+0x18a>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80002fa:	4a3f      	ldr	r2, [pc, #252]	; (80003f8 <getKeyInput+0x21c>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000302:	493b      	ldr	r1, [pc, #236]	; (80003f0 <getKeyInput+0x214>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800030a:	429a      	cmp	r2, r3
 800030c:	d015      	beq.n	800033a <getKeyInput+0x15e>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 800030e:	4a38      	ldr	r2, [pc, #224]	; (80003f0 <getKeyInput+0x214>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000316:	4938      	ldr	r1, [pc, #224]	; (80003f8 <getKeyInput+0x21c>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 800031e:	4a34      	ldr	r2, [pc, #208]	; (80003f0 <getKeyInput+0x214>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11d      	bne.n	8000366 <getKeyInput+0x18a>
					{
						//TODO
						button_BUT2_flag = 1;
 800032a:	4b38      	ldr	r3, [pc, #224]	; (800040c <getKeyInput+0x230>)
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000330:	4b33      	ldr	r3, [pc, #204]	; (8000400 <getKeyInput+0x224>)
 8000332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	e015      	b.n	8000366 <getKeyInput+0x18a>
					}
				}
				else// key long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800033a:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <getKeyInput+0x214>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10f      	bne.n	8000366 <getKeyInput+0x18a>
						timerForKeyPress--;
 8000346:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <getKeyInput+0x224>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a2c      	ldr	r2, [pc, #176]	; (8000400 <getKeyInput+0x224>)
 800034e:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <getKeyInput+0x224>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d106      	bne.n	8000366 <getKeyInput+0x18a>
						{
							//TODO
							button_BUT2_LongPressed_flag = 1;
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <getKeyInput+0x234>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <getKeyInput+0x224>)
 8000360:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000364:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 3
		if(i == 2){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d16b      	bne.n	8000444 <getKeyInput+0x268>
			keyReg2[i] = HAL_GPIO_ReadPin(A3_BUTTON3_GPIO_Port, A3_BUTTON3_Pin);
 800036c:	2101      	movs	r1, #1
 800036e:	4821      	ldr	r0, [pc, #132]	; (80003f4 <getKeyInput+0x218>)
 8000370:	f002 fa62 	bl	8002838 <HAL_GPIO_ReadPin>
 8000374:	4603      	mov	r3, r0
 8000376:	4619      	mov	r1, r3
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <getKeyInput+0x214>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000380:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <getKeyInput+0x210>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000388:	4917      	ldr	r1, [pc, #92]	; (80003e8 <getKeyInput+0x20c>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000390:	429a      	cmp	r2, r3
 8000392:	d157      	bne.n	8000444 <getKeyInput+0x268>
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <getKeyInput+0x20c>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <getKeyInput+0x214>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d14d      	bne.n	8000444 <getKeyInput+0x268>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <getKeyInput+0x21c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b0:	490f      	ldr	r1, [pc, #60]	; (80003f0 <getKeyInput+0x214>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d02d      	beq.n	8000418 <getKeyInput+0x23c>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <getKeyInput+0x214>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <getKeyInput+0x21c>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80003cc:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <getKeyInput+0x214>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d135      	bne.n	8000444 <getKeyInput+0x268>
					{
						//TODO
						button_BUT3_flag = 1;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <getKeyInput+0x238>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <getKeyInput+0x224>)
 80003e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e02d      	b.n	8000444 <getKeyInput+0x268>
 80003e8:	20000010 	.word	0x20000010
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000020 	.word	0x20000020
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	20000030 	.word	0x20000030
 80003fc:	200000c8 	.word	0x200000c8
 8000400:	20000040 	.word	0x20000040
 8000404:	200000d8 	.word	0x200000d8
 8000408:	40010800 	.word	0x40010800
 800040c:	200000cc 	.word	0x200000cc
 8000410:	200000dc 	.word	0x200000dc
 8000414:	200000d0 	.word	0x200000d0
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <getKeyInput+0x330>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10f      	bne.n	8000444 <getKeyInput+0x268>
						timerForKeyPress--;
 8000424:	4b3a      	ldr	r3, [pc, #232]	; (8000510 <getKeyInput+0x334>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	4a39      	ldr	r2, [pc, #228]	; (8000510 <getKeyInput+0x334>)
 800042c:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <getKeyInput+0x334>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d106      	bne.n	8000444 <getKeyInput+0x268>
						{
							//TODO
							button_BUT3_LongPressed_flag = 1;
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <getKeyInput+0x338>)
 8000438:	2201      	movs	r2, #1
 800043a:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <getKeyInput+0x334>)
 800043e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000442:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button pedestrian
		if(i == 3){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d153      	bne.n	80004f2 <getKeyInput+0x316>
			keyReg2[i] = HAL_GPIO_ReadPin(A0_PEDES_BUTTON_GPIO_Port, A0_PEDES_BUTTON_Pin);
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	4832      	ldr	r0, [pc, #200]	; (8000518 <getKeyInput+0x33c>)
 800044e:	f002 f9f3 	bl	8002838 <HAL_GPIO_ReadPin>
 8000452:	4603      	mov	r3, r0
 8000454:	4619      	mov	r1, r3
 8000456:	4a2d      	ldr	r2, [pc, #180]	; (800050c <getKeyInput+0x330>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 800045e:	4a2f      	ldr	r2, [pc, #188]	; (800051c <getKeyInput+0x340>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000466:	492e      	ldr	r1, [pc, #184]	; (8000520 <getKeyInput+0x344>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800046e:	429a      	cmp	r2, r3
 8000470:	d13f      	bne.n	80004f2 <getKeyInput+0x316>
 8000472:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <getKeyInput+0x344>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047a:	4924      	ldr	r1, [pc, #144]	; (800050c <getKeyInput+0x330>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000482:	429a      	cmp	r2, r3
 8000484:	d135      	bne.n	80004f2 <getKeyInput+0x316>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 8000486:	4a27      	ldr	r2, [pc, #156]	; (8000524 <getKeyInput+0x348>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	491f      	ldr	r1, [pc, #124]	; (800050c <getKeyInput+0x330>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000496:	429a      	cmp	r2, r3
 8000498:	d015      	beq.n	80004c6 <getKeyInput+0x2ea>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <getKeyInput+0x330>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a2:	4920      	ldr	r1, [pc, #128]	; (8000524 <getKeyInput+0x348>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80004aa:	4a18      	ldr	r2, [pc, #96]	; (800050c <getKeyInput+0x330>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d11d      	bne.n	80004f2 <getKeyInput+0x316>
					{
						//TODO
						button_PEDES_flag = 1;
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <getKeyInput+0x34c>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <getKeyInput+0x334>)
 80004be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	e015      	b.n	80004f2 <getKeyInput+0x316>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <getKeyInput+0x330>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d10f      	bne.n	80004f2 <getKeyInput+0x316>
						timerForKeyPress--;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <getKeyInput+0x334>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <getKeyInput+0x334>)
 80004da:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <getKeyInput+0x334>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d106      	bne.n	80004f2 <getKeyInput+0x316>
						{
							//TODO
							button_PEDES_LongPressed_flag = 1;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <getKeyInput+0x350>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <getKeyInput+0x334>)
 80004ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004f0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f77f ae74 	ble.w	80001e8 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000020 	.word	0x20000020
 8000510:	20000040 	.word	0x20000040
 8000514:	200000e0 	.word	0x200000e0
 8000518:	40010800 	.word	0x40010800
 800051c:	20000000 	.word	0x20000000
 8000520:	20000010 	.word	0x20000010
 8000524:	20000030 	.word	0x20000030
 8000528:	200000d4 	.word	0x200000d4
 800052c:	200000e4 	.word	0x200000e4

08000530 <FSM_Buzzer>:

//int FSM_Buzzer_State = OFF;

TIM_HandleTypeDef htim2;

void FSM_Buzzer(){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	switch(FSM_Buzzer_State){
 8000534:	4b4e      	ldr	r3, [pc, #312]	; (8000670 <FSM_Buzzer+0x140>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3b14      	subs	r3, #20
 800053a:	2b03      	cmp	r3, #3
 800053c:	f200 808e 	bhi.w	800065c <FSM_Buzzer+0x12c>
 8000540:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <FSM_Buzzer+0x18>)
 8000542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000546:	bf00      	nop
 8000548:	08000559 	.word	0x08000559
 800054c:	0800056d 	.word	0x0800056d
 8000550:	080005af 	.word	0x080005af
 8000554:	08000615 	.word	0x08000615
	case OFF:
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000558:	4b46      	ldr	r3, [pc, #280]	; (8000674 <FSM_Buzzer+0x144>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2110      	movs	r1, #16
 8000564:	4844      	ldr	r0, [pc, #272]	; (8000678 <FSM_Buzzer+0x148>)
 8000566:	f002 f97e 	bl	8002866 <HAL_GPIO_WritePin>
		break;
 800056a:	e07e      	b.n	800066a <FSM_Buzzer+0x13a>
	case ONE_BIP:
		//pedes button pressed, 1 beep
		if(timer31_flag==1){
 800056c:	4b43      	ldr	r3, [pc, #268]	; (800067c <FSM_Buzzer+0x14c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d110      	bne.n	8000596 <FSM_Buzzer+0x66>
			setTimer32(1000); //set 1 second
 8000574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000578:	f001 f9bc 	bl	80018f4 <setTimer32>
			setTimer31(1);
 800057c:	2001      	movs	r0, #1
 800057e:	f001 f99f 	bl	80018c0 <setTimer31>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 399);
 8000582:	4b3c      	ldr	r3, [pc, #240]	; (8000674 <FSM_Buzzer+0x144>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f240 128f 	movw	r2, #399	; 0x18f
 800058a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	4839      	ldr	r0, [pc, #228]	; (8000678 <FSM_Buzzer+0x148>)
 8000592:	f002 f968 	bl	8002866 <HAL_GPIO_WritePin>
		}
		if(timer32_flag==1){  //end 1s
 8000596:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <FSM_Buzzer+0x150>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d160      	bne.n	8000660 <FSM_Buzzer+0x130>
			FSM_Buzzer_State=OFF;
 800059e:	4b34      	ldr	r3, [pc, #208]	; (8000670 <FSM_Buzzer+0x140>)
 80005a0:	2214      	movs	r2, #20
 80005a2:	601a      	str	r2, [r3, #0]
			setTimer32(1000); //set 1 second
 80005a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a8:	f001 f9a4 	bl	80018f4 <setTimer32>
		}
		break;
 80005ac:	e058      	b.n	8000660 <FSM_Buzzer+0x130>
	case TWO_BIP:
		// 2 beep when traffic light is green
		if(timer31_flag==1 && status_pedestrian_light ==pedes_green ){
 80005ae:	4b33      	ldr	r3, [pc, #204]	; (800067c <FSM_Buzzer+0x14c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d156      	bne.n	8000664 <FSM_Buzzer+0x134>
 80005b6:	4b33      	ldr	r3, [pc, #204]	; (8000684 <FSM_Buzzer+0x154>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b84      	cmp	r3, #132	; 0x84
 80005bc:	d152      	bne.n	8000664 <FSM_Buzzer+0x134>
			setTimer33(2000); //set 2 seconds
 80005be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005c2:	f001 f9b1 	bl	8001928 <setTimer33>
			setTimer32(1000);
 80005c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ca:	f001 f993 	bl	80018f4 <setTimer32>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 399);
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <FSM_Buzzer+0x144>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f240 128f 	movw	r2, #399	; 0x18f
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2110      	movs	r1, #16
 80005dc:	4826      	ldr	r0, [pc, #152]	; (8000678 <FSM_Buzzer+0x148>)
 80005de:	f002 f942 	bl	8002866 <HAL_GPIO_WritePin>
			if(timer32_flag==1){
 80005e2:	4b27      	ldr	r3, [pc, #156]	; (8000680 <FSM_Buzzer+0x150>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d10c      	bne.n	8000604 <FSM_Buzzer+0xd4>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <FSM_Buzzer+0x144>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2200      	movs	r2, #0
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2110      	movs	r1, #16
 80005f6:	4820      	ldr	r0, [pc, #128]	; (8000678 <FSM_Buzzer+0x148>)
 80005f8:	f002 f935 	bl	8002866 <HAL_GPIO_WritePin>
				setTimer32(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f001 f978 	bl	80018f4 <setTimer32>
			}
			if(timer33_flag==1){
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <FSM_Buzzer+0x158>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d12b      	bne.n	8000664 <FSM_Buzzer+0x134>
				FSM_Buzzer_State=OFF;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <FSM_Buzzer+0x140>)
 800060e:	2214      	movs	r2, #20
 8000610:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000612:	e027      	b.n	8000664 <FSM_Buzzer+0x134>
	case LOUDER_BIP:
		//0 < red_traffic_light < 4s
		if(time_red_horizontal_temp<4){
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <FSM_Buzzer+0x15c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b03      	cmp	r3, #3
 800061a:	dc25      	bgt.n	8000668 <FSM_Buzzer+0x138>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,Increase_Duty_Cycle);
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <FSM_Buzzer+0x160>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <FSM_Buzzer+0x144>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 8000626:	2110      	movs	r1, #16
 8000628:	4813      	ldr	r0, [pc, #76]	; (8000678 <FSM_Buzzer+0x148>)
 800062a:	f002 f934 	bl	8002896 <HAL_GPIO_TogglePin>
			Increase_Duty_Cycle += 50;
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <FSM_Buzzer+0x160>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3332      	adds	r3, #50	; 0x32
 8000634:	4a16      	ldr	r2, [pc, #88]	; (8000690 <FSM_Buzzer+0x160>)
 8000636:	6013      	str	r3, [r2, #0]
			if(Increase_Duty_Cycle >= 999){
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <FSM_Buzzer+0x160>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000640:	4293      	cmp	r3, r2
 8000642:	dd03      	ble.n	800064c <FSM_Buzzer+0x11c>
				Increase_Duty_Cycle = 989;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <FSM_Buzzer+0x160>)
 8000646:	f240 32dd 	movw	r2, #989	; 0x3dd
 800064a:	601a      	str	r2, [r3, #0]
			}
			//red_traffic_light = 0
			if(time_red_horizontal_temp==0){
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <FSM_Buzzer+0x15c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d109      	bne.n	8000668 <FSM_Buzzer+0x138>
				FSM_Buzzer_State=OFF;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <FSM_Buzzer+0x140>)
 8000656:	2214      	movs	r2, #20
 8000658:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 800065a:	e005      	b.n	8000668 <FSM_Buzzer+0x138>
	default:
		break;
 800065c:	bf00      	nop
 800065e:	e004      	b.n	800066a <FSM_Buzzer+0x13a>
		break;
 8000660:	bf00      	nop
 8000662:	e002      	b.n	800066a <FSM_Buzzer+0x13a>
		break;
 8000664:	bf00      	nop
 8000666:	e000      	b.n	800066a <FSM_Buzzer+0x13a>
		break;
 8000668:	bf00      	nop
	}
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000094 	.word	0x20000094
 8000674:	2000018c 	.word	0x2000018c
 8000678:	40010800 	.word	0x40010800
 800067c:	2000014c 	.word	0x2000014c
 8000680:	20000154 	.word	0x20000154
 8000684:	20000050 	.word	0x20000050
 8000688:	2000015c 	.word	0x2000015c
 800068c:	20000070 	.word	0x20000070
 8000690:	20000098 	.word	0x20000098

08000694 <fsm_7SEG_horizontal_run>:
#include "control_7SEG.h"

int status_7SEG_horizontal = display_countDown_horizontal;


void fsm_7SEG_horizontal_run(){
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	switch(status_7SEG_horizontal){
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <fsm_7SEG_horizontal_run+0x88>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	2b0f      	cmp	r3, #15
 80006a0:	d837      	bhi.n	8000712 <fsm_7SEG_horizontal_run+0x7e>
 80006a2:	a201      	add	r2, pc, #4	; (adr r2, 80006a8 <fsm_7SEG_horizontal_run+0x14>)
 80006a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a8:	08000713 	.word	0x08000713
 80006ac:	08000713 	.word	0x08000713
 80006b0:	08000713 	.word	0x08000713
 80006b4:	08000713 	.word	0x08000713
 80006b8:	08000713 	.word	0x08000713
 80006bc:	08000713 	.word	0x08000713
 80006c0:	08000713 	.word	0x08000713
 80006c4:	08000713 	.word	0x08000713
 80006c8:	08000713 	.word	0x08000713
 80006cc:	08000713 	.word	0x08000713
 80006d0:	08000713 	.word	0x08000713
 80006d4:	08000713 	.word	0x08000713
 80006d8:	08000713 	.word	0x08000713
 80006dc:	080006e9 	.word	0x080006e9
 80006e0:	080006f7 	.word	0x080006f7
 80006e4:	08000705 	.word	0x08000705
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
		case display_mode02:
			_7SEG_buffer_horizontal[0] = 0;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <fsm_7SEG_horizontal_run+0x8c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <fsm_7SEG_horizontal_run+0x8c>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 80006f4:	e00e      	b.n	8000714 <fsm_7SEG_horizontal_run+0x80>
		case display_mode03:
			_7SEG_buffer_horizontal[0] = 0;
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <fsm_7SEG_horizontal_run+0x8c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 3;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <fsm_7SEG_horizontal_run+0x8c>)
 80006fe:	2203      	movs	r2, #3
 8000700:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 8000702:	e007      	b.n	8000714 <fsm_7SEG_horizontal_run+0x80>
		case display_mode04:
			_7SEG_buffer_horizontal[0] = 0;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <fsm_7SEG_horizontal_run+0x8c>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 4;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <fsm_7SEG_horizontal_run+0x8c>)
 800070c:	2204      	movs	r2, #4
 800070e:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 8000710:	e000      	b.n	8000714 <fsm_7SEG_horizontal_run+0x80>
		case off_horizontal:
//			off7SEG_horizontal();
			break;
		default:
			break;
 8000712:	bf00      	nop
	}
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000044 	.word	0x20000044
 8000720:	2000017c 	.word	0x2000017c

08000724 <fsm_7SEG_vertical_run>:

int status_7SEG_vertical = display_countDown_vertical;



void fsm_7SEG_vertical_run(){
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	switch(status_7SEG_vertical){
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <fsm_7SEG_vertical_run+0x2c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b10      	cmp	r3, #16
 800072e:	d006      	beq.n	800073e <fsm_7SEG_vertical_run+0x1a>
 8000730:	2b10      	cmp	r3, #16
 8000732:	dc06      	bgt.n	8000742 <fsm_7SEG_vertical_run+0x1e>
 8000734:	f113 0f02 	cmn.w	r3, #2
 8000738:	d005      	beq.n	8000746 <fsm_7SEG_vertical_run+0x22>
 800073a:	2b0f      	cmp	r3, #15
			break;
		case off_vertical:
//			off7SEG_vertical();
			break;
		default:
			break;
 800073c:	e001      	b.n	8000742 <fsm_7SEG_vertical_run+0x1e>
			break;
 800073e:	bf00      	nop
 8000740:	e002      	b.n	8000748 <fsm_7SEG_vertical_run+0x24>
			break;
 8000742:	bf00      	nop
 8000744:	e000      	b.n	8000748 <fsm_7SEG_vertical_run+0x24>
			break;
 8000746:	bf00      	nop
	}
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	20000048 	.word	0x20000048

08000754 <fsm_mannual_run>:
#include "button.h"
#include "fsm_traffic_blink.h"

status_mannual = mannual_init;

void fsm_mannual_run(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	switch(status_mannual){
 8000758:	4b54      	ldr	r3, [pc, #336]	; (80008ac <fsm_mannual_run+0x158>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	3b3c      	subs	r3, #60	; 0x3c
 800075e:	2b03      	cmp	r3, #3
 8000760:	f200 80a1 	bhi.w	80008a6 <fsm_mannual_run+0x152>
 8000764:	a201      	add	r2, pc, #4	; (adr r2, 800076c <fsm_mannual_run+0x18>)
 8000766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076a:	bf00      	nop
 800076c:	0800077d 	.word	0x0800077d
 8000770:	0800078d 	.word	0x0800078d
 8000774:	080007eb 	.word	0x080007eb
 8000778:	08000849 	.word	0x08000849
		case mannual_init:
			status_mannual = mannual_red;
 800077c:	4b4b      	ldr	r3, [pc, #300]	; (80008ac <fsm_mannual_run+0x158>)
 800077e:	223d      	movs	r2, #61	; 0x3d
 8000780:	601a      	str	r2, [r3, #0]
			setTimer9(5000);
 8000782:	f241 3088 	movw	r0, #5000	; 0x1388
 8000786:	f001 f84d 	bl	8001824 <setTimer9>
			break;
 800078a:	e08d      	b.n	80008a8 <fsm_mannual_run+0x154>
		case mannual_red:
			if(timer9_flag == 1){
 800078c:	4b48      	ldr	r3, [pc, #288]	; (80008b0 <fsm_mannual_run+0x15c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d10e      	bne.n	80007b2 <fsm_mannual_run+0x5e>
				status_system = INIT;
 8000794:	4b47      	ldr	r3, [pc, #284]	; (80008b4 <fsm_mannual_run+0x160>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 800079a:	4b44      	ldr	r3, [pc, #272]	; (80008ac <fsm_mannual_run+0x158>)
 800079c:	223c      	movs	r2, #60	; 0x3c
 800079e:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 80007a0:	4b45      	ldr	r3, [pc, #276]	; (80008b8 <fsm_mannual_run+0x164>)
 80007a2:	2213      	movs	r2, #19
 80007a4:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80007a6:	4b45      	ldr	r3, [pc, #276]	; (80008bc <fsm_mannual_run+0x168>)
 80007a8:	2217      	movs	r2, #23
 80007aa:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 80007ac:	f001 fc12 	bl	8001fd4 <resetTimeTraffic>
				break;
 80007b0:	e07a      	b.n	80008a8 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 80007b2:	f7ff fcdd 	bl	8000170 <isButton_BUT2_Pressed>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d106      	bne.n	80007ca <fsm_mannual_run+0x76>
				status_mannual = mannual_green;
 80007bc:	4b3b      	ldr	r3, [pc, #236]	; (80008ac <fsm_mannual_run+0x158>)
 80007be:	223e      	movs	r2, #62	; 0x3e
 80007c0:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80007c2:	f241 3088 	movw	r0, #5000	; 0x1388
 80007c6:	f001 f82d 	bl	8001824 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 80007ca:	f7ff fcbf 	bl	800014c <isButton_BUT1_Pressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d105      	bne.n	80007e0 <fsm_mannual_run+0x8c>
				status_mannual = mannual_init;
 80007d4:	4b35      	ldr	r3, [pc, #212]	; (80008ac <fsm_mannual_run+0x158>)
 80007d6:	223c      	movs	r2, #60	; 0x3c
 80007d8:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 80007da:	4b36      	ldr	r3, [pc, #216]	; (80008b4 <fsm_mannual_run+0x160>)
 80007dc:	2202      	movs	r2, #2
 80007de:	601a      	str	r2, [r3, #0]
			}
			setRed_horizontal();
 80007e0:	f001 fb08 	bl	8001df4 <setRed_horizontal>
			setGreen_vertical();
 80007e4:	f001 fb52 	bl	8001e8c <setGreen_vertical>
			break;
 80007e8:	e05e      	b.n	80008a8 <fsm_mannual_run+0x154>
		case mannual_green:
			if(timer9_flag == 1){
 80007ea:	4b31      	ldr	r3, [pc, #196]	; (80008b0 <fsm_mannual_run+0x15c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d10e      	bne.n	8000810 <fsm_mannual_run+0xbc>
				status_system = INIT;
 80007f2:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <fsm_mannual_run+0x160>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80007f8:	4b2c      	ldr	r3, [pc, #176]	; (80008ac <fsm_mannual_run+0x158>)
 80007fa:	223c      	movs	r2, #60	; 0x3c
 80007fc:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <fsm_mannual_run+0x164>)
 8000800:	2213      	movs	r2, #19
 8000802:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000804:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <fsm_mannual_run+0x168>)
 8000806:	2217      	movs	r2, #23
 8000808:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 800080a:	f001 fbe3 	bl	8001fd4 <resetTimeTraffic>
				break;
 800080e:	e04b      	b.n	80008a8 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 8000810:	f7ff fcae 	bl	8000170 <isButton_BUT2_Pressed>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d106      	bne.n	8000828 <fsm_mannual_run+0xd4>
				status_mannual = mannual_yellow;
 800081a:	4b24      	ldr	r3, [pc, #144]	; (80008ac <fsm_mannual_run+0x158>)
 800081c:	223f      	movs	r2, #63	; 0x3f
 800081e:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 8000820:	f241 3088 	movw	r0, #5000	; 0x1388
 8000824:	f000 fffe 	bl	8001824 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000828:	f7ff fc90 	bl	800014c <isButton_BUT1_Pressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d105      	bne.n	800083e <fsm_mannual_run+0xea>
				status_mannual = mannual_init;
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <fsm_mannual_run+0x158>)
 8000834:	223c      	movs	r2, #60	; 0x3c
 8000836:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <fsm_mannual_run+0x160>)
 800083a:	2202      	movs	r2, #2
 800083c:	601a      	str	r2, [r3, #0]
			}
			setGreen_horizontal();
 800083e:	f001 faed 	bl	8001e1c <setGreen_horizontal>
			setYellow_vertical();
 8000842:	f001 fb33 	bl	8001eac <setYellow_vertical>
			break;
 8000846:	e02f      	b.n	80008a8 <fsm_mannual_run+0x154>
		case mannual_yellow:
			if(timer9_flag == 1){
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <fsm_mannual_run+0x15c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d10e      	bne.n	800086e <fsm_mannual_run+0x11a>
				status_system = INIT;
 8000850:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <fsm_mannual_run+0x160>)
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <fsm_mannual_run+0x158>)
 8000858:	223c      	movs	r2, #60	; 0x3c
 800085a:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <fsm_mannual_run+0x164>)
 800085e:	2213      	movs	r2, #19
 8000860:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <fsm_mannual_run+0x168>)
 8000864:	2217      	movs	r2, #23
 8000866:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 8000868:	f001 fbb4 	bl	8001fd4 <resetTimeTraffic>
				break;
 800086c:	e01c      	b.n	80008a8 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 800086e:	f7ff fc7f 	bl	8000170 <isButton_BUT2_Pressed>
 8000872:	4603      	mov	r3, r0
 8000874:	2b01      	cmp	r3, #1
 8000876:	d106      	bne.n	8000886 <fsm_mannual_run+0x132>
				status_mannual = mannual_red;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <fsm_mannual_run+0x158>)
 800087a:	223d      	movs	r2, #61	; 0x3d
 800087c:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 800087e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000882:	f000 ffcf 	bl	8001824 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000886:	f7ff fc61 	bl	800014c <isButton_BUT1_Pressed>
 800088a:	4603      	mov	r3, r0
 800088c:	2b01      	cmp	r3, #1
 800088e:	d105      	bne.n	800089c <fsm_mannual_run+0x148>
				status_system = MODE2;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <fsm_mannual_run+0x160>)
 8000892:	2202      	movs	r2, #2
 8000894:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <fsm_mannual_run+0x158>)
 8000898:	223c      	movs	r2, #60	; 0x3c
 800089a:	601a      	str	r2, [r3, #0]
			}
			setYellow_horizontal();
 800089c:	f001 fad2 	bl	8001e44 <setYellow_horizontal>
			setRed_vertical();
 80008a0:	f001 fae4 	bl	8001e6c <setRed_vertical>
			break;
 80008a4:	e000      	b.n	80008a8 <fsm_mannual_run+0x154>
		default:
			break;
 80008a6:	bf00      	nop
	}
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	2000004c 	.word	0x2000004c
 80008b0:	2000012c 	.word	0x2000012c
 80008b4:	200000e8 	.word	0x200000e8
 80008b8:	20000054 	.word	0x20000054
 80008bc:	20000058 	.word	0x20000058

080008c0 <fsm_pedestrian_run>:
#include "button.h"


int status_pedestrian_light = pedes_off;

void fsm_pedestrian_run(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	switch(status_pedestrian_light){
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <fsm_pedestrian_run+0x98>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2b84      	cmp	r3, #132	; 0x84
 80008ca:	d01e      	beq.n	800090a <fsm_pedestrian_run+0x4a>
 80008cc:	2b84      	cmp	r3, #132	; 0x84
 80008ce:	dc3d      	bgt.n	800094c <fsm_pedestrian_run+0x8c>
 80008d0:	2b82      	cmp	r3, #130	; 0x82
 80008d2:	d002      	beq.n	80008da <fsm_pedestrian_run+0x1a>
 80008d4:	2b83      	cmp	r3, #131	; 0x83
 80008d6:	d003      	beq.n	80008e0 <fsm_pedestrian_run+0x20>

			}

			break;
		default:
			break;
 80008d8:	e038      	b.n	800094c <fsm_pedestrian_run+0x8c>
			set_off_pedes();
 80008da:	f001 fbb1 	bl	8002040 <set_off_pedes>
			break;
 80008de:	e038      	b.n	8000952 <fsm_pedestrian_run+0x92>
			set_red_pedes();
 80008e0:	f001 fbc2 	bl	8002068 <set_red_pedes>
			if (timer30_flag == 1){
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <fsm_pedestrian_run+0x9c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d102      	bne.n	80008f2 <fsm_pedestrian_run+0x32>
				status_pedestrian_light = pedes_off;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <fsm_pedestrian_run+0x98>)
 80008ee:	2282      	movs	r2, #130	; 0x82
 80008f0:	601a      	str	r2, [r3, #0]
			if (status_traffic_blink_horizontal == red_horizontal)
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <fsm_pedestrian_run+0xa0>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b14      	cmp	r3, #20
 80008f8:	d103      	bne.n	8000902 <fsm_pedestrian_run+0x42>
				status_pedestrian_light = pedes_green;
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <fsm_pedestrian_run+0x98>)
 80008fc:	2284      	movs	r2, #132	; 0x84
 80008fe:	601a      	str	r2, [r3, #0]
			break;
 8000900:	e027      	b.n	8000952 <fsm_pedestrian_run+0x92>
				status_pedestrian_light = pedes_red;
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <fsm_pedestrian_run+0x98>)
 8000904:	2283      	movs	r2, #131	; 0x83
 8000906:	601a      	str	r2, [r3, #0]
			break;
 8000908:	e023      	b.n	8000952 <fsm_pedestrian_run+0x92>
			set_green_pedes();
 800090a:	f001 fbc1 	bl	8002090 <set_green_pedes>
			if (status_traffic_blink_horizontal == red_horizontal){
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <fsm_pedestrian_run+0xa0>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b14      	cmp	r3, #20
 8000914:	d103      	bne.n	800091e <fsm_pedestrian_run+0x5e>
				status_pedestrian_light = pedes_green;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <fsm_pedestrian_run+0x98>)
 8000918:	2284      	movs	r2, #132	; 0x84
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	e002      	b.n	8000924 <fsm_pedestrian_run+0x64>
				status_pedestrian_light = pedes_red;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <fsm_pedestrian_run+0x98>)
 8000920:	2283      	movs	r2, #131	; 0x83
 8000922:	601a      	str	r2, [r3, #0]
			if (time_red_horizontal_temp < 4){ //buzzer bip louder + faster
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <fsm_pedestrian_run+0xa4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b03      	cmp	r3, #3
 800092a:	dc11      	bgt.n	8000950 <fsm_pedestrian_run+0x90>
				FSM_Buzzer_State = LOUDER_BIP;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <fsm_pedestrian_run+0xa8>)
 800092e:	2217      	movs	r2, #23
 8000930:	601a      	str	r2, [r3, #0]
				setTimer31(TICK);
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <fsm_pedestrian_run+0xac>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 ffc2 	bl	80018c0 <setTimer31>
				if (time_red_horizontal_temp == 0){
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <fsm_pedestrian_run+0xa4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d105      	bne.n	8000950 <fsm_pedestrian_run+0x90>
					FSM_Buzzer_State=OFF;
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <fsm_pedestrian_run+0xa8>)
 8000946:	2214      	movs	r2, #20
 8000948:	601a      	str	r2, [r3, #0]
			break;
 800094a:	e001      	b.n	8000950 <fsm_pedestrian_run+0x90>
			break;
 800094c:	bf00      	nop
 800094e:	e000      	b.n	8000952 <fsm_pedestrian_run+0x92>
			break;
 8000950:	bf00      	nop
	}
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000050 	.word	0x20000050
 800095c:	20000144 	.word	0x20000144
 8000960:	20000054 	.word	0x20000054
 8000964:	20000070 	.word	0x20000070
 8000968:	20000094 	.word	0x20000094
 800096c:	2000009c 	.word	0x2000009c

08000970 <fsm_system_run>:
#include "fsm_traffic_blink.h"
#include "fsm_mannual.h"
#include "software_timer.h"


fsm_system_run(){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	switch(status_system){
 8000974:	4b8e      	ldr	r3, [pc, #568]	; (8000bb0 <fsm_system_run+0x240>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b04      	cmp	r3, #4
 800097a:	dc13      	bgt.n	80009a4 <fsm_system_run+0x34>
 800097c:	2b00      	cmp	r3, #0
 800097e:	f2c0 8196 	blt.w	8000cae <fsm_system_run+0x33e>
 8000982:	2b04      	cmp	r3, #4
 8000984:	f200 8193 	bhi.w	8000cae <fsm_system_run+0x33e>
 8000988:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <fsm_system_run+0x20>)
 800098a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098e:	bf00      	nop
 8000990:	080009ab 	.word	0x080009ab
 8000994:	080009b3 	.word	0x080009b3
 8000998:	08000a85 	.word	0x08000a85
 800099c:	08000b1b 	.word	0x08000b1b
 80009a0:	08000c01 	.word	0x08000c01
 80009a4:	2b5f      	cmp	r3, #95	; 0x5f
 80009a6:	d05a      	beq.n	8000a5e <fsm_system_run+0xee>
				status_traffic_blink_vertical = init_vertical;
				status_system = INIT;
			}
			break;
	}
}
 80009a8:	e181      	b.n	8000cae <fsm_system_run+0x33e>
			status_system = MODE1;
 80009aa:	4b81      	ldr	r3, [pc, #516]	; (8000bb0 <fsm_system_run+0x240>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
			break;
 80009b0:	e17d      	b.n	8000cae <fsm_system_run+0x33e>
			status_traffic_horizontal = display_traffic_horizontal;
 80009b2:	4b80      	ldr	r3, [pc, #512]	; (8000bb4 <fsm_system_run+0x244>)
 80009b4:	2205      	movs	r2, #5
 80009b6:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = display_traffic_vertical;
 80009b8:	4b7f      	ldr	r3, [pc, #508]	; (8000bb8 <fsm_system_run+0x248>)
 80009ba:	2209      	movs	r2, #9
 80009bc:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_countDown_horizontal;
 80009be:	4b7f      	ldr	r3, [pc, #508]	; (8000bbc <fsm_system_run+0x24c>)
 80009c0:	220b      	movs	r2, #11
 80009c2:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_countDown_vertical;
 80009c4:	4b7e      	ldr	r3, [pc, #504]	; (8000bc0 <fsm_system_run+0x250>)
 80009c6:	220f      	movs	r2, #15
 80009c8:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 80009ca:	f7ff fbbf 	bl	800014c <isButton_BUT1_Pressed>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d105      	bne.n	80009e0 <fsm_system_run+0x70>
				status_system = MODE2;
 80009d4:	4b76      	ldr	r3, [pc, #472]	; (8000bb0 <fsm_system_run+0x240>)
 80009d6:	2202      	movs	r2, #2
 80009d8:	601a      	str	r2, [r3, #0]
				status_pedestrian_light = pedes_off;
 80009da:	4b7a      	ldr	r3, [pc, #488]	; (8000bc4 <fsm_system_run+0x254>)
 80009dc:	2282      	movs	r2, #130	; 0x82
 80009de:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 80009e0:	f7ff fbc6 	bl	8000170 <isButton_BUT2_Pressed>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d105      	bne.n	80009f6 <fsm_system_run+0x86>
				status_system = MAN_MODE;
 80009ea:	4b71      	ldr	r3, [pc, #452]	; (8000bb0 <fsm_system_run+0x240>)
 80009ec:	225f      	movs	r2, #95	; 0x5f
 80009ee:	601a      	str	r2, [r3, #0]
				status_pedestrian_light = pedes_off;
 80009f0:	4b74      	ldr	r3, [pc, #464]	; (8000bc4 <fsm_system_run+0x254>)
 80009f2:	2282      	movs	r2, #130	; 0x82
 80009f4:	601a      	str	r2, [r3, #0]
			if (isButton_Pedes_Pressed() == 1 ){
 80009f6:	f7ff fbdf 	bl	80001b8 <isButton_Pedes_Pressed>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d122      	bne.n	8000a46 <fsm_system_run+0xd6>
				FSM_Buzzer_State = ONE_BIP;
 8000a00:	4b71      	ldr	r3, [pc, #452]	; (8000bc8 <fsm_system_run+0x258>)
 8000a02:	2215      	movs	r2, #21
 8000a04:	601a      	str	r2, [r3, #0]
				setTimer31(1);
 8000a06:	2001      	movs	r0, #1
 8000a08:	f000 ff5a 	bl	80018c0 <setTimer31>
				setTimer30(2000*(time_red_horizontal+time_green_horizontal+time_yellow_horizontal));
 8000a0c:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <fsm_system_run+0x25c>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b6f      	ldr	r3, [pc, #444]	; (8000bd0 <fsm_system_run+0x260>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	441a      	add	r2, r3
 8000a16:	4b6f      	ldr	r3, [pc, #444]	; (8000bd4 <fsm_system_run+0x264>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a20:	fb02 f303 	mul.w	r3, r2, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 ff31 	bl	800188c <setTimer30>
				if (status_traffic_blink_horizontal == red_horizontal){
 8000a2a:	4b6b      	ldr	r3, [pc, #428]	; (8000bd8 <fsm_system_run+0x268>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b14      	cmp	r3, #20
 8000a30:	d106      	bne.n	8000a40 <fsm_system_run+0xd0>
					status_pedestrian_light = pedes_green;
 8000a32:	4b64      	ldr	r3, [pc, #400]	; (8000bc4 <fsm_system_run+0x254>)
 8000a34:	2284      	movs	r2, #132	; 0x84
 8000a36:	601a      	str	r2, [r3, #0]
					FSM_Buzzer_State = TWO_BIP;
 8000a38:	4b63      	ldr	r3, [pc, #396]	; (8000bc8 <fsm_system_run+0x258>)
 8000a3a:	2216      	movs	r2, #22
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	e002      	b.n	8000a46 <fsm_system_run+0xd6>
					status_pedestrian_light = pedes_red;
 8000a40:	4b60      	ldr	r3, [pc, #384]	; (8000bc4 <fsm_system_run+0x254>)
 8000a42:	2283      	movs	r2, #131	; 0x83
 8000a44:	601a      	str	r2, [r3, #0]
			if (timer30_flag == 1){
 8000a46:	4b65      	ldr	r3, [pc, #404]	; (8000bdc <fsm_system_run+0x26c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	f040 8128 	bne.w	8000ca0 <fsm_system_run+0x330>
				status_pedestrian_light = pedes_off;
 8000a50:	4b5c      	ldr	r3, [pc, #368]	; (8000bc4 <fsm_system_run+0x254>)
 8000a52:	2282      	movs	r2, #130	; 0x82
 8000a54:	601a      	str	r2, [r3, #0]
				FSM_Buzzer_State = OFF;
 8000a56:	4b5c      	ldr	r3, [pc, #368]	; (8000bc8 <fsm_system_run+0x258>)
 8000a58:	2214      	movs	r2, #20
 8000a5a:	601a      	str	r2, [r3, #0]
			break;
 8000a5c:	e120      	b.n	8000ca0 <fsm_system_run+0x330>
			fsm_mannual_run();
 8000a5e:	f7ff fe79 	bl	8000754 <fsm_mannual_run>
			status_7SEG_horizontal = off_horizontal;
 8000a62:	4b56      	ldr	r3, [pc, #344]	; (8000bbc <fsm_system_run+0x24c>)
 8000a64:	f04f 32ff 	mov.w	r2, #4294967295
 8000a68:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = off_vertical;
 8000a6a:	4b55      	ldr	r3, [pc, #340]	; (8000bc0 <fsm_system_run+0x250>)
 8000a6c:	f06f 0201 	mvn.w	r2, #1
 8000a70:	601a      	str	r2, [r3, #0]
			status_traffic_horizontal = mannual_horizontal;
 8000a72:	4b50      	ldr	r3, [pc, #320]	; (8000bb4 <fsm_system_run+0x244>)
 8000a74:	f06f 0202 	mvn.w	r2, #2
 8000a78:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = mannual_vertical;
 8000a7a:	4b4f      	ldr	r3, [pc, #316]	; (8000bb8 <fsm_system_run+0x248>)
 8000a7c:	f06f 0203 	mvn.w	r2, #3
 8000a80:	601a      	str	r2, [r3, #0]
			break;
 8000a82:	e114      	b.n	8000cae <fsm_system_run+0x33e>
			status_traffic_horizontal = modifying_led_red_horizontal;
 8000a84:	4b4b      	ldr	r3, [pc, #300]	; (8000bb4 <fsm_system_run+0x244>)
 8000a86:	2206      	movs	r2, #6
 8000a88:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_red_vertical;
 8000a8a:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <fsm_system_run+0x248>)
 8000a8c:	221e      	movs	r2, #30
 8000a8e:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode02;
 8000a90:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <fsm_system_run+0x24c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000a96:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <fsm_system_run+0x250>)
 8000a98:	2210      	movs	r2, #16
 8000a9a:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000a9c:	f7ff fb68 	bl	8000170 <isButton_BUT2_Pressed>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d109      	bne.n	8000aba <fsm_system_run+0x14a>
				time_red_horizontal++;
 8000aa6:	4b49      	ldr	r3, [pc, #292]	; (8000bcc <fsm_system_run+0x25c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4a47      	ldr	r2, [pc, #284]	; (8000bcc <fsm_system_run+0x25c>)
 8000aae:	6013      	str	r3, [r2, #0]
				time_red_vertical++;
 8000ab0:	4b4b      	ldr	r3, [pc, #300]	; (8000be0 <fsm_system_run+0x270>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a4a      	ldr	r2, [pc, #296]	; (8000be0 <fsm_system_run+0x270>)
 8000ab8:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_red_vertical/10;
 8000aba:	4b49      	ldr	r3, [pc, #292]	; (8000be0 <fsm_system_run+0x270>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a49      	ldr	r2, [pc, #292]	; (8000be4 <fsm_system_run+0x274>)
 8000ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac4:	1092      	asrs	r2, r2, #2
 8000ac6:	17db      	asrs	r3, r3, #31
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	4a47      	ldr	r2, [pc, #284]	; (8000be8 <fsm_system_run+0x278>)
 8000acc:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical%10;
 8000ace:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <fsm_system_run+0x270>)
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	4b44      	ldr	r3, [pc, #272]	; (8000be4 <fsm_system_run+0x274>)
 8000ad4:	fb83 2301 	smull	r2, r3, r3, r1
 8000ad8:	109a      	asrs	r2, r3, #2
 8000ada:	17cb      	asrs	r3, r1, #31
 8000adc:	1ad2      	subs	r2, r2, r3
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	1aca      	subs	r2, r1, r3
 8000ae8:	4b3f      	ldr	r3, [pc, #252]	; (8000be8 <fsm_system_run+0x278>)
 8000aea:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000aec:	f7ff fb52 	bl	8000194 <isButton_BUT3_Pressed>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d107      	bne.n	8000b06 <fsm_system_run+0x196>
				time_red_horizontal_temp= time_red_horizontal;
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <fsm_system_run+0x25c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a3c      	ldr	r2, [pc, #240]	; (8000bec <fsm_system_run+0x27c>)
 8000afc:	6013      	str	r3, [r2, #0]
				time_red_vertical_temp= time_red_vertical;
 8000afe:	4b38      	ldr	r3, [pc, #224]	; (8000be0 <fsm_system_run+0x270>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a3b      	ldr	r2, [pc, #236]	; (8000bf0 <fsm_system_run+0x280>)
 8000b04:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000b06:	f7ff fb21 	bl	800014c <isButton_BUT1_Pressed>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	f040 80c9 	bne.w	8000ca4 <fsm_system_run+0x334>
				status_system = MODE3;
 8000b12:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <fsm_system_run+0x240>)
 8000b14:	2203      	movs	r2, #3
 8000b16:	601a      	str	r2, [r3, #0]
			break;
 8000b18:	e0c4      	b.n	8000ca4 <fsm_system_run+0x334>
			status_traffic_horizontal = modifying_led_yellow_horizontal;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <fsm_system_run+0x244>)
 8000b1c:	2208      	movs	r2, #8
 8000b1e:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_yellow_vertical;
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <fsm_system_run+0x248>)
 8000b22:	2220      	movs	r2, #32
 8000b24:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode03;
 8000b26:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <fsm_system_run+0x24c>)
 8000b28:	220d      	movs	r2, #13
 8000b2a:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <fsm_system_run+0x250>)
 8000b2e:	2210      	movs	r2, #16
 8000b30:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000b32:	f7ff fb1d 	bl	8000170 <isButton_BUT2_Pressed>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d109      	bne.n	8000b50 <fsm_system_run+0x1e0>
				time_yellow_horizontal++;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <fsm_system_run+0x264>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	4a24      	ldr	r2, [pc, #144]	; (8000bd4 <fsm_system_run+0x264>)
 8000b44:	6013      	str	r3, [r2, #0]
				time_yellow_vertical++;
 8000b46:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <fsm_system_run+0x284>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	4a29      	ldr	r2, [pc, #164]	; (8000bf4 <fsm_system_run+0x284>)
 8000b4e:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_yellow_vertical/10;
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <fsm_system_run+0x284>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <fsm_system_run+0x274>)
 8000b56:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5a:	1092      	asrs	r2, r2, #2
 8000b5c:	17db      	asrs	r3, r3, #31
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <fsm_system_run+0x278>)
 8000b62:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical%10;
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <fsm_system_run+0x284>)
 8000b66:	6819      	ldr	r1, [r3, #0]
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <fsm_system_run+0x274>)
 8000b6a:	fb83 2301 	smull	r2, r3, r3, r1
 8000b6e:	109a      	asrs	r2, r3, #2
 8000b70:	17cb      	asrs	r3, r1, #31
 8000b72:	1ad2      	subs	r2, r2, r3
 8000b74:	4613      	mov	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	1aca      	subs	r2, r1, r3
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <fsm_system_run+0x278>)
 8000b80:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000b82:	f7ff fb07 	bl	8000194 <isButton_BUT3_Pressed>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d107      	bne.n	8000b9c <fsm_system_run+0x22c>
				time_yellow_horizontal_temp= time_yellow_horizontal;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <fsm_system_run+0x264>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a19      	ldr	r2, [pc, #100]	; (8000bf8 <fsm_system_run+0x288>)
 8000b92:	6013      	str	r3, [r2, #0]
				time_yellow_vertical_temp= time_yellow_vertical;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <fsm_system_run+0x284>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <fsm_system_run+0x28c>)
 8000b9a:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000b9c:	f7ff fad6 	bl	800014c <isButton_BUT1_Pressed>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 8080 	bne.w	8000ca8 <fsm_system_run+0x338>
				status_system = MODE4;
 8000ba8:	4b01      	ldr	r3, [pc, #4]	; (8000bb0 <fsm_system_run+0x240>)
 8000baa:	2204      	movs	r2, #4
 8000bac:	601a      	str	r2, [r3, #0]
			break;
 8000bae:	e07b      	b.n	8000ca8 <fsm_system_run+0x338>
 8000bb0:	200000e8 	.word	0x200000e8
 8000bb4:	2000005c 	.word	0x2000005c
 8000bb8:	20000060 	.word	0x20000060
 8000bbc:	20000044 	.word	0x20000044
 8000bc0:	20000048 	.word	0x20000048
 8000bc4:	20000050 	.word	0x20000050
 8000bc8:	20000094 	.word	0x20000094
 8000bcc:	20000064 	.word	0x20000064
 8000bd0:	20000068 	.word	0x20000068
 8000bd4:	2000006c 	.word	0x2000006c
 8000bd8:	20000054 	.word	0x20000054
 8000bdc:	20000144 	.word	0x20000144
 8000be0:	20000084 	.word	0x20000084
 8000be4:	66666667 	.word	0x66666667
 8000be8:	20000184 	.word	0x20000184
 8000bec:	20000070 	.word	0x20000070
 8000bf0:	20000090 	.word	0x20000090
 8000bf4:	20000080 	.word	0x20000080
 8000bf8:	20000078 	.word	0x20000078
 8000bfc:	2000008c 	.word	0x2000008c
			status_traffic_horizontal = modifying_led_green_horizontal;
 8000c00:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <fsm_system_run+0x344>)
 8000c02:	2207      	movs	r2, #7
 8000c04:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_green_vertical;
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <fsm_system_run+0x348>)
 8000c08:	221f      	movs	r2, #31
 8000c0a:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode04;
 8000c0c:	4b2b      	ldr	r3, [pc, #172]	; (8000cbc <fsm_system_run+0x34c>)
 8000c0e:	220e      	movs	r2, #14
 8000c10:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000c12:	4b2b      	ldr	r3, [pc, #172]	; (8000cc0 <fsm_system_run+0x350>)
 8000c14:	2210      	movs	r2, #16
 8000c16:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000c18:	f7ff faaa 	bl	8000170 <isButton_BUT2_Pressed>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d109      	bne.n	8000c36 <fsm_system_run+0x2c6>
				time_green_horizontal++;
 8000c22:	4b28      	ldr	r3, [pc, #160]	; (8000cc4 <fsm_system_run+0x354>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a26      	ldr	r2, [pc, #152]	; (8000cc4 <fsm_system_run+0x354>)
 8000c2a:	6013      	str	r3, [r2, #0]
				time_green_vertical++;
 8000c2c:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <fsm_system_run+0x358>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	4a25      	ldr	r2, [pc, #148]	; (8000cc8 <fsm_system_run+0x358>)
 8000c34:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_green_vertical/10;
 8000c36:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <fsm_system_run+0x358>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a24      	ldr	r2, [pc, #144]	; (8000ccc <fsm_system_run+0x35c>)
 8000c3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c40:	1092      	asrs	r2, r2, #2
 8000c42:	17db      	asrs	r3, r3, #31
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <fsm_system_run+0x360>)
 8000c48:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical%10;
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <fsm_system_run+0x358>)
 8000c4c:	6819      	ldr	r1, [r3, #0]
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <fsm_system_run+0x35c>)
 8000c50:	fb83 2301 	smull	r2, r3, r3, r1
 8000c54:	109a      	asrs	r2, r3, #2
 8000c56:	17cb      	asrs	r3, r1, #31
 8000c58:	1ad2      	subs	r2, r2, r3
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	1aca      	subs	r2, r1, r3
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <fsm_system_run+0x360>)
 8000c66:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000c68:	f7ff fa94 	bl	8000194 <isButton_BUT3_Pressed>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d107      	bne.n	8000c82 <fsm_system_run+0x312>
				time_green_horizontal_temp= time_green_horizontal;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <fsm_system_run+0x354>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <fsm_system_run+0x364>)
 8000c78:	6013      	str	r3, [r2, #0]
				time_green_vertical_temp= time_green_vertical;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <fsm_system_run+0x358>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <fsm_system_run+0x368>)
 8000c80:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000c82:	f7ff fa63 	bl	800014c <isButton_BUT1_Pressed>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d10f      	bne.n	8000cac <fsm_system_run+0x33c>
				status_traffic_blink_horizontal = init_horizontal;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <fsm_system_run+0x36c>)
 8000c8e:	2213      	movs	r2, #19
 8000c90:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <fsm_system_run+0x370>)
 8000c94:	2217      	movs	r2, #23
 8000c96:	601a      	str	r2, [r3, #0]
				status_system = INIT;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <fsm_system_run+0x374>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
			break;
 8000c9e:	e005      	b.n	8000cac <fsm_system_run+0x33c>
			break;
 8000ca0:	bf00      	nop
 8000ca2:	e004      	b.n	8000cae <fsm_system_run+0x33e>
			break;
 8000ca4:	bf00      	nop
 8000ca6:	e002      	b.n	8000cae <fsm_system_run+0x33e>
			break;
 8000ca8:	bf00      	nop
 8000caa:	e000      	b.n	8000cae <fsm_system_run+0x33e>
			break;
 8000cac:	bf00      	nop
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000005c 	.word	0x2000005c
 8000cb8:	20000060 	.word	0x20000060
 8000cbc:	20000044 	.word	0x20000044
 8000cc0:	20000048 	.word	0x20000048
 8000cc4:	20000068 	.word	0x20000068
 8000cc8:	2000007c 	.word	0x2000007c
 8000ccc:	66666667 	.word	0x66666667
 8000cd0:	20000184 	.word	0x20000184
 8000cd4:	20000074 	.word	0x20000074
 8000cd8:	20000088 	.word	0x20000088
 8000cdc:	20000054 	.word	0x20000054
 8000ce0:	20000058 	.word	0x20000058
 8000ce4:	200000e8 	.word	0x200000e8

08000ce8 <fsm_traffic_blink_horizontal_run>:
#include "control_7SEG.h"

int status_traffic_blink_horizontal = init_horizontal;
int status_traffic_blink_vertical = init_vertical;

void fsm_traffic_blink_horizontal_run(){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_horizontal){
 8000cec:	4b85      	ldr	r3, [pc, #532]	; (8000f04 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3b13      	subs	r3, #19
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	f200 80fd 	bhi.w	8000ef2 <fsm_traffic_blink_horizontal_run+0x20a>
 8000cf8:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <fsm_traffic_blink_horizontal_run+0x18>)
 8000cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfe:	bf00      	nop
 8000d00:	08000d11 	.word	0x08000d11
 8000d04:	08000d3b 	.word	0x08000d3b
 8000d08:	08000dcf 	.word	0x08000dcf
 8000d0c:	08000e61 	.word	0x08000e61
		case init_horizontal:
			status_traffic_blink_horizontal = red_horizontal;
 8000d10:	4b7c      	ldr	r3, [pc, #496]	; (8000f04 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000d12:	2214      	movs	r2, #20
 8000d14:	601a      	str	r2, [r3, #0]
			traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000d16:	4b7c      	ldr	r3, [pc, #496]	; (8000f08 <fsm_traffic_blink_horizontal_run+0x220>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	4a7a      	ldr	r2, [pc, #488]	; (8000f0c <fsm_traffic_blink_horizontal_run+0x224>)
 8000d24:	6013      	str	r3, [r2, #0]
			//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
			setTimer1(traffic_buffer_horizontal[0]);
 8000d26:	4b79      	ldr	r3, [pc, #484]	; (8000f0c <fsm_traffic_blink_horizontal_run+0x224>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fcaa 	bl	8001684 <setTimer1>
			setTimer3(1000);// count down as a clock
 8000d30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d34:	f000 fcda 	bl	80016ec <setTimer3>
			break;
 8000d38:	e0e2      	b.n	8000f00 <fsm_traffic_blink_horizontal_run+0x218>
		case red_horizontal:
			setRed_horizontal();
 8000d3a:	f001 f85b 	bl	8001df4 <setRed_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_red_horizontal_temp/10;
 8000d3e:	4b74      	ldr	r3, [pc, #464]	; (8000f10 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a74      	ldr	r2, [pc, #464]	; (8000f14 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000d44:	fb82 1203 	smull	r1, r2, r2, r3
 8000d48:	1092      	asrs	r2, r2, #2
 8000d4a:	17db      	asrs	r3, r3, #31
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	4a72      	ldr	r2, [pc, #456]	; (8000f18 <fsm_traffic_blink_horizontal_run+0x230>)
 8000d50:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_red_horizontal_temp%10;
 8000d52:	4b6f      	ldr	r3, [pc, #444]	; (8000f10 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d54:	6819      	ldr	r1, [r3, #0]
 8000d56:	4b6f      	ldr	r3, [pc, #444]	; (8000f14 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000d58:	fb83 2301 	smull	r2, r3, r3, r1
 8000d5c:	109a      	asrs	r2, r3, #2
 8000d5e:	17cb      	asrs	r3, r1, #31
 8000d60:	1ad2      	subs	r2, r2, r3
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	1aca      	subs	r2, r1, r3
 8000d6c:	4b6a      	ldr	r3, [pc, #424]	; (8000f18 <fsm_traffic_blink_horizontal_run+0x230>)
 8000d6e:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000d70:	4b6a      	ldr	r3, [pc, #424]	; (8000f1c <fsm_traffic_blink_horizontal_run+0x234>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d110      	bne.n	8000d9a <fsm_traffic_blink_horizontal_run+0xb2>
				time_red_horizontal_temp--;
 8000d78:	4b65      	ldr	r3, [pc, #404]	; (8000f10 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	4a64      	ldr	r2, [pc, #400]	; (8000f10 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d80:	6013      	str	r3, [r2, #0]
				if(time_red_horizontal_temp == 0){
 8000d82:	4b63      	ldr	r3, [pc, #396]	; (8000f10 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d103      	bne.n	8000d92 <fsm_traffic_blink_horizontal_run+0xaa>
					time_red_horizontal_temp = time_red_horizontal;
 8000d8a:	4b5f      	ldr	r3, [pc, #380]	; (8000f08 <fsm_traffic_blink_horizontal_run+0x220>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a60      	ldr	r2, [pc, #384]	; (8000f10 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d90:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000d92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d96:	f000 fca9 	bl	80016ec <setTimer3>
			}

			if(timer1_flag == 1){
 8000d9a:	4b61      	ldr	r3, [pc, #388]	; (8000f20 <fsm_traffic_blink_horizontal_run+0x238>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	f040 80a9 	bne.w	8000ef6 <fsm_traffic_blink_horizontal_run+0x20e>
				status_traffic_blink_horizontal = green_horizontal;
 8000da4:	4b57      	ldr	r3, [pc, #348]	; (8000f04 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000da6:	2215      	movs	r2, #21
 8000da8:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[1] = time_green_horizontal*1000;
 8000daa:	4b5e      	ldr	r3, [pc, #376]	; (8000f24 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	4a55      	ldr	r2, [pc, #340]	; (8000f0c <fsm_traffic_blink_horizontal_run+0x224>)
 8000db8:	6053      	str	r3, [r2, #4]
				//led green will turn on in traffic_buffer_horizontal[1]/1000 seconds
				setTimer1(traffic_buffer_horizontal[1]);
 8000dba:	4b54      	ldr	r3, [pc, #336]	; (8000f0c <fsm_traffic_blink_horizontal_run+0x224>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fc60 	bl	8001684 <setTimer1>
				setTimer3(1000);
 8000dc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc8:	f000 fc90 	bl	80016ec <setTimer3>
			}
			break;
 8000dcc:	e093      	b.n	8000ef6 <fsm_traffic_blink_horizontal_run+0x20e>
		case green_horizontal:
			setGreen_horizontal();
 8000dce:	f001 f825 	bl	8001e1c <setGreen_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_green_horizontal_temp/10;
 8000dd2:	4b55      	ldr	r3, [pc, #340]	; (8000f28 <fsm_traffic_blink_horizontal_run+0x240>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a4f      	ldr	r2, [pc, #316]	; (8000f14 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000dd8:	fb82 1203 	smull	r1, r2, r2, r3
 8000ddc:	1092      	asrs	r2, r2, #2
 8000dde:	17db      	asrs	r3, r3, #31
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	4a4d      	ldr	r2, [pc, #308]	; (8000f18 <fsm_traffic_blink_horizontal_run+0x230>)
 8000de4:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_green_horizontal_temp%10;
 8000de6:	4b50      	ldr	r3, [pc, #320]	; (8000f28 <fsm_traffic_blink_horizontal_run+0x240>)
 8000de8:	6819      	ldr	r1, [r3, #0]
 8000dea:	4b4a      	ldr	r3, [pc, #296]	; (8000f14 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000dec:	fb83 2301 	smull	r2, r3, r3, r1
 8000df0:	109a      	asrs	r2, r3, #2
 8000df2:	17cb      	asrs	r3, r1, #31
 8000df4:	1ad2      	subs	r2, r2, r3
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	1aca      	subs	r2, r1, r3
 8000e00:	4b45      	ldr	r3, [pc, #276]	; (8000f18 <fsm_traffic_blink_horizontal_run+0x230>)
 8000e02:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000e04:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <fsm_traffic_blink_horizontal_run+0x234>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d110      	bne.n	8000e2e <fsm_traffic_blink_horizontal_run+0x146>
				time_green_horizontal_temp--;
 8000e0c:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <fsm_traffic_blink_horizontal_run+0x240>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	4a45      	ldr	r2, [pc, #276]	; (8000f28 <fsm_traffic_blink_horizontal_run+0x240>)
 8000e14:	6013      	str	r3, [r2, #0]
				if(time_green_horizontal_temp == 0){
 8000e16:	4b44      	ldr	r3, [pc, #272]	; (8000f28 <fsm_traffic_blink_horizontal_run+0x240>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d103      	bne.n	8000e26 <fsm_traffic_blink_horizontal_run+0x13e>
					time_green_horizontal_temp = time_green_horizontal;
 8000e1e:	4b41      	ldr	r3, [pc, #260]	; (8000f24 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a41      	ldr	r2, [pc, #260]	; (8000f28 <fsm_traffic_blink_horizontal_run+0x240>)
 8000e24:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e2a:	f000 fc5f 	bl	80016ec <setTimer3>
			}

			if(timer1_flag == 1){
 8000e2e:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <fsm_traffic_blink_horizontal_run+0x238>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d161      	bne.n	8000efa <fsm_traffic_blink_horizontal_run+0x212>
				status_traffic_blink_horizontal = yellow_horizontal;
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000e38:	2216      	movs	r2, #22
 8000e3a:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[2] = time_yellow_horizontal*1000;
 8000e3c:	4b3b      	ldr	r3, [pc, #236]	; (8000f2c <fsm_traffic_blink_horizontal_run+0x244>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e44:	fb02 f303 	mul.w	r3, r2, r3
 8000e48:	4a30      	ldr	r2, [pc, #192]	; (8000f0c <fsm_traffic_blink_horizontal_run+0x224>)
 8000e4a:	6093      	str	r3, [r2, #8]
				//led yellow will turn on in traffic_buffer_horizontal[2]/1000 seconds
				setTimer1(traffic_buffer_horizontal[2]);
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <fsm_traffic_blink_horizontal_run+0x224>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fc17 	bl	8001684 <setTimer1>
				setTimer3(1000);
 8000e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e5a:	f000 fc47 	bl	80016ec <setTimer3>
			}
			break;
 8000e5e:	e04c      	b.n	8000efa <fsm_traffic_blink_horizontal_run+0x212>
		case yellow_horizontal:
			setYellow_horizontal();
 8000e60:	f000 fff0 	bl	8001e44 <setYellow_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_yellow_horizontal_temp/10;
 8000e64:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <fsm_traffic_blink_horizontal_run+0x248>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a2a      	ldr	r2, [pc, #168]	; (8000f14 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1092      	asrs	r2, r2, #2
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	4a28      	ldr	r2, [pc, #160]	; (8000f18 <fsm_traffic_blink_horizontal_run+0x230>)
 8000e76:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_yellow_horizontal_temp%10;
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <fsm_traffic_blink_horizontal_run+0x248>)
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000e7e:	fb83 2301 	smull	r2, r3, r3, r1
 8000e82:	109a      	asrs	r2, r3, #2
 8000e84:	17cb      	asrs	r3, r1, #31
 8000e86:	1ad2      	subs	r2, r2, r3
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	1aca      	subs	r2, r1, r3
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <fsm_traffic_blink_horizontal_run+0x230>)
 8000e94:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <fsm_traffic_blink_horizontal_run+0x234>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d110      	bne.n	8000ec0 <fsm_traffic_blink_horizontal_run+0x1d8>
				time_yellow_horizontal_temp--;
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <fsm_traffic_blink_horizontal_run+0x248>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <fsm_traffic_blink_horizontal_run+0x248>)
 8000ea6:	6013      	str	r3, [r2, #0]
				if(time_yellow_horizontal_temp == 0){
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <fsm_traffic_blink_horizontal_run+0x248>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d103      	bne.n	8000eb8 <fsm_traffic_blink_horizontal_run+0x1d0>
					time_yellow_horizontal_temp = time_yellow_horizontal;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <fsm_traffic_blink_horizontal_run+0x244>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <fsm_traffic_blink_horizontal_run+0x248>)
 8000eb6:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000eb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ebc:	f000 fc16 	bl	80016ec <setTimer3>
			}

			if(timer1_flag == 1){
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <fsm_traffic_blink_horizontal_run+0x238>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d11a      	bne.n	8000efe <fsm_traffic_blink_horizontal_run+0x216>
				status_traffic_blink_horizontal = red_horizontal;
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000eca:	2214      	movs	r2, #20
 8000ecc:	601a      	str	r2, [r3, #0]
				//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
				traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <fsm_traffic_blink_horizontal_run+0x220>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ed6:	fb02 f303 	mul.w	r3, r2, r3
 8000eda:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <fsm_traffic_blink_horizontal_run+0x224>)
 8000edc:	6013      	str	r3, [r2, #0]
				setTimer1(traffic_buffer_horizontal[0]);
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <fsm_traffic_blink_horizontal_run+0x224>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fbce 	bl	8001684 <setTimer1>
				setTimer3(1000);
 8000ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eec:	f000 fbfe 	bl	80016ec <setTimer3>
			}
			break;
 8000ef0:	e005      	b.n	8000efe <fsm_traffic_blink_horizontal_run+0x216>
		default:
			break;
 8000ef2:	bf00      	nop
 8000ef4:	e004      	b.n	8000f00 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000ef6:	bf00      	nop
 8000ef8:	e002      	b.n	8000f00 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000efa:	bf00      	nop
 8000efc:	e000      	b.n	8000f00 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000efe:	bf00      	nop
	}
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000054 	.word	0x20000054
 8000f08:	20000064 	.word	0x20000064
 8000f0c:	20000164 	.word	0x20000164
 8000f10:	20000070 	.word	0x20000070
 8000f14:	66666667 	.word	0x66666667
 8000f18:	2000017c 	.word	0x2000017c
 8000f1c:	200000fc 	.word	0x200000fc
 8000f20:	200000ec 	.word	0x200000ec
 8000f24:	20000068 	.word	0x20000068
 8000f28:	20000074 	.word	0x20000074
 8000f2c:	2000006c 	.word	0x2000006c
 8000f30:	20000078 	.word	0x20000078

08000f34 <fsm_traffic_blink_vertical_run>:

void fsm_traffic_blink_vertical_run(){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_vertical){
 8000f38:	4b89      	ldr	r3, [pc, #548]	; (8001160 <fsm_traffic_blink_vertical_run+0x22c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3b17      	subs	r3, #23
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	f200 8105 	bhi.w	800114e <fsm_traffic_blink_vertical_run+0x21a>
 8000f44:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <fsm_traffic_blink_vertical_run+0x18>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000f5d 	.word	0x08000f5d
 8000f50:	080010bd 	.word	0x080010bd
 8000f54:	08000f87 	.word	0x08000f87
 8000f58:	0800102b 	.word	0x0800102b
		case init_vertical:
			status_traffic_blink_vertical = green_vertical;
 8000f5c:	4b80      	ldr	r3, [pc, #512]	; (8001160 <fsm_traffic_blink_vertical_run+0x22c>)
 8000f5e:	2219      	movs	r2, #25
 8000f60:	601a      	str	r2, [r3, #0]
			traffic_buffer_vertical[0] = time_green_vertical*1000;
 8000f62:	4b80      	ldr	r3, [pc, #512]	; (8001164 <fsm_traffic_blink_vertical_run+0x230>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	4a7e      	ldr	r2, [pc, #504]	; (8001168 <fsm_traffic_blink_vertical_run+0x234>)
 8000f70:	6013      	str	r3, [r2, #0]
			setTimer2(traffic_buffer_vertical[0]);
 8000f72:	4b7d      	ldr	r3, [pc, #500]	; (8001168 <fsm_traffic_blink_vertical_run+0x234>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fb9e 	bl	80016b8 <setTimer2>
			setTimer5(1000);// count down as a clock
 8000f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f80:	f000 fbe8 	bl	8001754 <setTimer5>
			break;
 8000f84:	e0ea      	b.n	800115c <fsm_traffic_blink_vertical_run+0x228>
		case green_vertical:
			setGreen_vertical();
 8000f86:	f000 ff81 	bl	8001e8c <setGreen_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_green_vertical_temp/10;
 8000f8a:	4b78      	ldr	r3, [pc, #480]	; (800116c <fsm_traffic_blink_vertical_run+0x238>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a78      	ldr	r2, [pc, #480]	; (8001170 <fsm_traffic_blink_vertical_run+0x23c>)
 8000f90:	fb82 1203 	smull	r1, r2, r2, r3
 8000f94:	1092      	asrs	r2, r2, #2
 8000f96:	17db      	asrs	r3, r3, #31
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	4a76      	ldr	r2, [pc, #472]	; (8001174 <fsm_traffic_blink_vertical_run+0x240>)
 8000f9c:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical_temp%10;
 8000f9e:	4b73      	ldr	r3, [pc, #460]	; (800116c <fsm_traffic_blink_vertical_run+0x238>)
 8000fa0:	6819      	ldr	r1, [r3, #0]
 8000fa2:	4b73      	ldr	r3, [pc, #460]	; (8001170 <fsm_traffic_blink_vertical_run+0x23c>)
 8000fa4:	fb83 2301 	smull	r2, r3, r3, r1
 8000fa8:	109a      	asrs	r2, r3, #2
 8000faa:	17cb      	asrs	r3, r1, #31
 8000fac:	1ad2      	subs	r2, r2, r3
 8000fae:	4613      	mov	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	1aca      	subs	r2, r1, r3
 8000fb8:	4b6e      	ldr	r3, [pc, #440]	; (8001174 <fsm_traffic_blink_vertical_run+0x240>)
 8000fba:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000fbc:	4b6e      	ldr	r3, [pc, #440]	; (8001178 <fsm_traffic_blink_vertical_run+0x244>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d118      	bne.n	8000ff6 <fsm_traffic_blink_vertical_run+0xc2>
				time_green_vertical_temp--;
 8000fc4:	4b69      	ldr	r3, [pc, #420]	; (800116c <fsm_traffic_blink_vertical_run+0x238>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	4a68      	ldr	r2, [pc, #416]	; (800116c <fsm_traffic_blink_vertical_run+0x238>)
 8000fcc:	6013      	str	r3, [r2, #0]
				if(time_green_vertical_temp != 0) setTimer5(1000);
 8000fce:	4b67      	ldr	r3, [pc, #412]	; (800116c <fsm_traffic_blink_vertical_run+0x238>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <fsm_traffic_blink_vertical_run+0xaa>
 8000fd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fda:	f000 fbbb 	bl	8001754 <setTimer5>
				if(time_green_vertical_temp == 0){
 8000fde:	4b63      	ldr	r3, [pc, #396]	; (800116c <fsm_traffic_blink_vertical_run+0x238>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d103      	bne.n	8000fee <fsm_traffic_blink_vertical_run+0xba>
					time_green_vertical_temp = time_green_vertical;
 8000fe6:	4b5f      	ldr	r3, [pc, #380]	; (8001164 <fsm_traffic_blink_vertical_run+0x230>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a60      	ldr	r2, [pc, #384]	; (800116c <fsm_traffic_blink_vertical_run+0x238>)
 8000fec:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000fee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff2:	f000 fbaf 	bl	8001754 <setTimer5>
			}

			if(timer2_flag == 1){
 8000ff6:	4b61      	ldr	r3, [pc, #388]	; (800117c <fsm_traffic_blink_vertical_run+0x248>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	f040 80a9 	bne.w	8001152 <fsm_traffic_blink_vertical_run+0x21e>
				status_traffic_blink_vertical = yellow_vertical;
 8001000:	4b57      	ldr	r3, [pc, #348]	; (8001160 <fsm_traffic_blink_vertical_run+0x22c>)
 8001002:	221a      	movs	r2, #26
 8001004:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[1] = time_yellow_vertical*1000;
 8001006:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <fsm_traffic_blink_vertical_run+0x24c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800100e:	fb02 f303 	mul.w	r3, r2, r3
 8001012:	4a55      	ldr	r2, [pc, #340]	; (8001168 <fsm_traffic_blink_vertical_run+0x234>)
 8001014:	6053      	str	r3, [r2, #4]
				setTimer2(traffic_buffer_vertical[1]);
 8001016:	4b54      	ldr	r3, [pc, #336]	; (8001168 <fsm_traffic_blink_vertical_run+0x234>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fb4c 	bl	80016b8 <setTimer2>
				setTimer5(1000);
 8001020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001024:	f000 fb96 	bl	8001754 <setTimer5>
			}
			break;
 8001028:	e093      	b.n	8001152 <fsm_traffic_blink_vertical_run+0x21e>
		case yellow_vertical:
			setYellow_vertical();
 800102a:	f000 ff3f 	bl	8001eac <setYellow_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_yellow_vertical_temp/10;
 800102e:	4b55      	ldr	r3, [pc, #340]	; (8001184 <fsm_traffic_blink_vertical_run+0x250>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a4f      	ldr	r2, [pc, #316]	; (8001170 <fsm_traffic_blink_vertical_run+0x23c>)
 8001034:	fb82 1203 	smull	r1, r2, r2, r3
 8001038:	1092      	asrs	r2, r2, #2
 800103a:	17db      	asrs	r3, r3, #31
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	4a4d      	ldr	r2, [pc, #308]	; (8001174 <fsm_traffic_blink_vertical_run+0x240>)
 8001040:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical_temp%10;
 8001042:	4b50      	ldr	r3, [pc, #320]	; (8001184 <fsm_traffic_blink_vertical_run+0x250>)
 8001044:	6819      	ldr	r1, [r3, #0]
 8001046:	4b4a      	ldr	r3, [pc, #296]	; (8001170 <fsm_traffic_blink_vertical_run+0x23c>)
 8001048:	fb83 2301 	smull	r2, r3, r3, r1
 800104c:	109a      	asrs	r2, r3, #2
 800104e:	17cb      	asrs	r3, r1, #31
 8001050:	1ad2      	subs	r2, r2, r3
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	1aca      	subs	r2, r1, r3
 800105c:	4b45      	ldr	r3, [pc, #276]	; (8001174 <fsm_traffic_blink_vertical_run+0x240>)
 800105e:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8001060:	4b45      	ldr	r3, [pc, #276]	; (8001178 <fsm_traffic_blink_vertical_run+0x244>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d110      	bne.n	800108a <fsm_traffic_blink_vertical_run+0x156>
				time_yellow_vertical_temp--;
 8001068:	4b46      	ldr	r3, [pc, #280]	; (8001184 <fsm_traffic_blink_vertical_run+0x250>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3b01      	subs	r3, #1
 800106e:	4a45      	ldr	r2, [pc, #276]	; (8001184 <fsm_traffic_blink_vertical_run+0x250>)
 8001070:	6013      	str	r3, [r2, #0]
				if(time_yellow_vertical_temp == 0){
 8001072:	4b44      	ldr	r3, [pc, #272]	; (8001184 <fsm_traffic_blink_vertical_run+0x250>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d103      	bne.n	8001082 <fsm_traffic_blink_vertical_run+0x14e>
					time_yellow_vertical_temp = time_yellow_vertical;
 800107a:	4b41      	ldr	r3, [pc, #260]	; (8001180 <fsm_traffic_blink_vertical_run+0x24c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a41      	ldr	r2, [pc, #260]	; (8001184 <fsm_traffic_blink_vertical_run+0x250>)
 8001080:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8001082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001086:	f000 fb65 	bl	8001754 <setTimer5>
			}

			if(timer2_flag == 1){
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <fsm_traffic_blink_vertical_run+0x248>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d161      	bne.n	8001156 <fsm_traffic_blink_vertical_run+0x222>
				status_traffic_blink_vertical = red_vertical;
 8001092:	4b33      	ldr	r3, [pc, #204]	; (8001160 <fsm_traffic_blink_vertical_run+0x22c>)
 8001094:	2218      	movs	r2, #24
 8001096:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[2] = time_red_vertical*1000;
 8001098:	4b3b      	ldr	r3, [pc, #236]	; (8001188 <fsm_traffic_blink_vertical_run+0x254>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a0:	fb02 f303 	mul.w	r3, r2, r3
 80010a4:	4a30      	ldr	r2, [pc, #192]	; (8001168 <fsm_traffic_blink_vertical_run+0x234>)
 80010a6:	6093      	str	r3, [r2, #8]
				setTimer2(traffic_buffer_vertical[2]);
 80010a8:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <fsm_traffic_blink_vertical_run+0x234>)
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fb03 	bl	80016b8 <setTimer2>
				setTimer5(1000);
 80010b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b6:	f000 fb4d 	bl	8001754 <setTimer5>
			}
			break;
 80010ba:	e04c      	b.n	8001156 <fsm_traffic_blink_vertical_run+0x222>
		case red_vertical:
			setRed_vertical();
 80010bc:	f000 fed6 	bl	8001e6c <setRed_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_red_vertical_temp/10;
 80010c0:	4b32      	ldr	r3, [pc, #200]	; (800118c <fsm_traffic_blink_vertical_run+0x258>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a2a      	ldr	r2, [pc, #168]	; (8001170 <fsm_traffic_blink_vertical_run+0x23c>)
 80010c6:	fb82 1203 	smull	r1, r2, r2, r3
 80010ca:	1092      	asrs	r2, r2, #2
 80010cc:	17db      	asrs	r3, r3, #31
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	4a28      	ldr	r2, [pc, #160]	; (8001174 <fsm_traffic_blink_vertical_run+0x240>)
 80010d2:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical_temp%10;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <fsm_traffic_blink_vertical_run+0x258>)
 80010d6:	6819      	ldr	r1, [r3, #0]
 80010d8:	4b25      	ldr	r3, [pc, #148]	; (8001170 <fsm_traffic_blink_vertical_run+0x23c>)
 80010da:	fb83 2301 	smull	r2, r3, r3, r1
 80010de:	109a      	asrs	r2, r3, #2
 80010e0:	17cb      	asrs	r3, r1, #31
 80010e2:	1ad2      	subs	r2, r2, r3
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	1aca      	subs	r2, r1, r3
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <fsm_traffic_blink_vertical_run+0x240>)
 80010f0:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <fsm_traffic_blink_vertical_run+0x244>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d110      	bne.n	800111c <fsm_traffic_blink_vertical_run+0x1e8>
				time_red_vertical_temp--;
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <fsm_traffic_blink_vertical_run+0x258>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3b01      	subs	r3, #1
 8001100:	4a22      	ldr	r2, [pc, #136]	; (800118c <fsm_traffic_blink_vertical_run+0x258>)
 8001102:	6013      	str	r3, [r2, #0]
				if(time_red_vertical_temp == 0){
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <fsm_traffic_blink_vertical_run+0x258>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <fsm_traffic_blink_vertical_run+0x1e0>
					time_red_vertical_temp = time_red_vertical;
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <fsm_traffic_blink_vertical_run+0x254>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1e      	ldr	r2, [pc, #120]	; (800118c <fsm_traffic_blink_vertical_run+0x258>)
 8001112:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8001114:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001118:	f000 fb1c 	bl	8001754 <setTimer5>
			}

			if(timer2_flag == 1){
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <fsm_traffic_blink_vertical_run+0x248>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d11a      	bne.n	800115a <fsm_traffic_blink_vertical_run+0x226>
				status_traffic_blink_vertical = green_vertical;
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <fsm_traffic_blink_vertical_run+0x22c>)
 8001126:	2219      	movs	r2, #25
 8001128:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[0] = time_green_vertical*1000;
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <fsm_traffic_blink_vertical_run+0x230>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <fsm_traffic_blink_vertical_run+0x234>)
 8001138:	6013      	str	r3, [r2, #0]
				setTimer2(traffic_buffer_vertical[0]);
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <fsm_traffic_blink_vertical_run+0x234>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f000 faba 	bl	80016b8 <setTimer2>
				setTimer5(1000);
 8001144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001148:	f000 fb04 	bl	8001754 <setTimer5>
			}
			break;
 800114c:	e005      	b.n	800115a <fsm_traffic_blink_vertical_run+0x226>
		default:
			break;
 800114e:	bf00      	nop
 8001150:	e004      	b.n	800115c <fsm_traffic_blink_vertical_run+0x228>
			break;
 8001152:	bf00      	nop
 8001154:	e002      	b.n	800115c <fsm_traffic_blink_vertical_run+0x228>
			break;
 8001156:	bf00      	nop
 8001158:	e000      	b.n	800115c <fsm_traffic_blink_vertical_run+0x228>
			break;
 800115a:	bf00      	nop
	}
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000058 	.word	0x20000058
 8001164:	2000007c 	.word	0x2000007c
 8001168:	20000170 	.word	0x20000170
 800116c:	20000088 	.word	0x20000088
 8001170:	66666667 	.word	0x66666667
 8001174:	20000184 	.word	0x20000184
 8001178:	2000010c 	.word	0x2000010c
 800117c:	200000f4 	.word	0x200000f4
 8001180:	20000080 	.word	0x20000080
 8001184:	2000008c 	.word	0x2000008c
 8001188:	20000084 	.word	0x20000084
 800118c:	20000090 	.word	0x20000090

08001190 <fsm_traffic_horizontal_run>:
#include "traffic.h"

int status_traffic_horizontal = display_traffic_horizontal;


void fsm_traffic_horizontal_run(){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	switch(status_traffic_horizontal){
 8001194:	4b26      	ldr	r3, [pc, #152]	; (8001230 <fsm_traffic_horizontal_run+0xa0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3303      	adds	r3, #3
 800119a:	2b0b      	cmp	r3, #11
 800119c:	d83e      	bhi.n	800121c <fsm_traffic_horizontal_run+0x8c>
 800119e:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <fsm_traffic_horizontal_run+0x14>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	0800121d 	.word	0x0800121d
 80011a8:	0800121d 	.word	0x0800121d
 80011ac:	0800121d 	.word	0x0800121d
 80011b0:	0800121d 	.word	0x0800121d
 80011b4:	0800121d 	.word	0x0800121d
 80011b8:	0800121d 	.word	0x0800121d
 80011bc:	0800121d 	.word	0x0800121d
 80011c0:	0800121d 	.word	0x0800121d
 80011c4:	080011d5 	.word	0x080011d5
 80011c8:	080011db 	.word	0x080011db
 80011cc:	08001207 	.word	0x08001207
 80011d0:	080011f1 	.word	0x080011f1
		case display_traffic_horizontal:
			fsm_traffic_blink_horizontal_run();
 80011d4:	f7ff fd88 	bl	8000ce8 <fsm_traffic_blink_horizontal_run>
			break;
 80011d8:	e027      	b.n	800122a <fsm_traffic_horizontal_run+0x9a>
		case modifying_led_red_horizontal:
			// turn off led green and yellow
//			offGreenYellow_horizontal();
			if(timer8_flag == 1){
 80011da:	4b16      	ldr	r3, [pc, #88]	; (8001234 <fsm_traffic_horizontal_run+0xa4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d11e      	bne.n	8001220 <fsm_traffic_horizontal_run+0x90>
				//toggle led red with frequency 2Hz
				toggleRed_horizontal();
 80011e2:	f000 fe7f 	bl	8001ee4 <toggleRed_horizontal>
				setTimer8(500);
 80011e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ea:	f000 fb01 	bl	80017f0 <setTimer8>
			}
			break;
 80011ee:	e017      	b.n	8001220 <fsm_traffic_horizontal_run+0x90>
		case modifying_led_yellow_horizontal:
//			offGreenRed_horizontal();
//			offAllLed_horizontal();
			if(timer8_flag == 1){
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <fsm_traffic_horizontal_run+0xa4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d115      	bne.n	8001224 <fsm_traffic_horizontal_run+0x94>
				//toggle led yellow with frequency 2Hz
				toggleYellow_horizontal();
 80011f8:	f000 fe98 	bl	8001f2c <toggleYellow_horizontal>
				setTimer8(500);
 80011fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001200:	f000 faf6 	bl	80017f0 <setTimer8>
			}
			break;
 8001204:	e00e      	b.n	8001224 <fsm_traffic_horizontal_run+0x94>
		case modifying_led_green_horizontal:
//			offRedYellow_horizontal();
			if(timer8_flag == 1){
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <fsm_traffic_horizontal_run+0xa4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d10c      	bne.n	8001228 <fsm_traffic_horizontal_run+0x98>
				//toggle led green with frequency 2Hz
				toggleGreen_horizontal();
 800120e:	f000 fe7b 	bl	8001f08 <toggleGreen_horizontal>
				setTimer8(500);
 8001212:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001216:	f000 faeb 	bl	80017f0 <setTimer8>
			}
			break;
 800121a:	e005      	b.n	8001228 <fsm_traffic_horizontal_run+0x98>
		case mannual_horizontal:
			break;
		default:
			break;
 800121c:	bf00      	nop
 800121e:	e004      	b.n	800122a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001220:	bf00      	nop
 8001222:	e002      	b.n	800122a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001224:	bf00      	nop
 8001226:	e000      	b.n	800122a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001228:	bf00      	nop
	}
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000005c 	.word	0x2000005c
 8001234:	20000124 	.word	0x20000124

08001238 <fsm_traffic_vertical_run>:
#include "traffic.h"
#include "fsm_traffic_blink.h"

int status_traffic_vertical = display_traffic_vertical;

void fsm_traffic_vertical_run(){
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	switch(status_traffic_vertical){
 800123c:	4b3f      	ldr	r3, [pc, #252]	; (800133c <fsm_traffic_vertical_run+0x104>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3304      	adds	r3, #4
 8001242:	2b24      	cmp	r3, #36	; 0x24
 8001244:	d870      	bhi.n	8001328 <fsm_traffic_vertical_run+0xf0>
 8001246:	a201      	add	r2, pc, #4	; (adr r2, 800124c <fsm_traffic_vertical_run+0x14>)
 8001248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800124c:	08001329 	.word	0x08001329
 8001250:	08001329 	.word	0x08001329
 8001254:	08001329 	.word	0x08001329
 8001258:	08001329 	.word	0x08001329
 800125c:	08001329 	.word	0x08001329
 8001260:	08001329 	.word	0x08001329
 8001264:	08001329 	.word	0x08001329
 8001268:	08001329 	.word	0x08001329
 800126c:	08001329 	.word	0x08001329
 8001270:	08001329 	.word	0x08001329
 8001274:	08001329 	.word	0x08001329
 8001278:	08001329 	.word	0x08001329
 800127c:	08001329 	.word	0x08001329
 8001280:	080012e1 	.word	0x080012e1
 8001284:	08001329 	.word	0x08001329
 8001288:	08001329 	.word	0x08001329
 800128c:	08001329 	.word	0x08001329
 8001290:	08001329 	.word	0x08001329
 8001294:	08001329 	.word	0x08001329
 8001298:	08001329 	.word	0x08001329
 800129c:	08001329 	.word	0x08001329
 80012a0:	08001329 	.word	0x08001329
 80012a4:	08001329 	.word	0x08001329
 80012a8:	08001329 	.word	0x08001329
 80012ac:	08001329 	.word	0x08001329
 80012b0:	08001329 	.word	0x08001329
 80012b4:	08001329 	.word	0x08001329
 80012b8:	08001329 	.word	0x08001329
 80012bc:	08001329 	.word	0x08001329
 80012c0:	08001329 	.word	0x08001329
 80012c4:	08001329 	.word	0x08001329
 80012c8:	08001329 	.word	0x08001329
 80012cc:	08001329 	.word	0x08001329
 80012d0:	08001329 	.word	0x08001329
 80012d4:	080012e7 	.word	0x080012e7
 80012d8:	08001313 	.word	0x08001313
 80012dc:	080012fd 	.word	0x080012fd
		case display_traffic_vertical:
//			status_traffic_blink_vertical = init_vertical;
			fsm_traffic_blink_vertical_run();
 80012e0:	f7ff fe28 	bl	8000f34 <fsm_traffic_blink_vertical_run>
			break;
 80012e4:	e027      	b.n	8001336 <fsm_traffic_vertical_run+0xfe>
		case modifying_led_red_vertical:
//			offGreenYellow_vertical();
			if(timer7_flag == 1){
 80012e6:	4b16      	ldr	r3, [pc, #88]	; (8001340 <fsm_traffic_vertical_run+0x108>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d11e      	bne.n	800132c <fsm_traffic_vertical_run+0xf4>
				toggleRed_vertical();
 80012ee:	f000 fe39 	bl	8001f64 <toggleRed_vertical>
				setTimer7(500);
 80012f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f6:	f000 fa61 	bl	80017bc <setTimer7>
			}
			break;
 80012fa:	e017      	b.n	800132c <fsm_traffic_vertical_run+0xf4>
		case modifying_led_yellow_vertical:
//			offGreenRed_vertical();
//			offAllLed_vertical();
			if(timer7_flag == 1){
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <fsm_traffic_vertical_run+0x108>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d115      	bne.n	8001330 <fsm_traffic_vertical_run+0xf8>
				toggleYellow_vertical();
 8001304:	f000 fe4e 	bl	8001fa4 <toggleYellow_vertical>
				setTimer7(500);
 8001308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130c:	f000 fa56 	bl	80017bc <setTimer7>
			}
			break;
 8001310:	e00e      	b.n	8001330 <fsm_traffic_vertical_run+0xf8>
		case modifying_led_green_vertical:
			// turn off red and yellow led
//			offRedYellow_vertical();
			if(timer7_flag == 1){
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <fsm_traffic_vertical_run+0x108>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d10c      	bne.n	8001334 <fsm_traffic_vertical_run+0xfc>
				//toggle green led with frequency 2Hz
				toggleGreen_vertical();
 800131a:	f000 fe33 	bl	8001f84 <toggleGreen_vertical>
				setTimer7(500);
 800131e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001322:	f000 fa4b 	bl	80017bc <setTimer7>
			}
			break;
 8001326:	e005      	b.n	8001334 <fsm_traffic_vertical_run+0xfc>
		case mannual_vertical:
			break;
		default:
			break;
 8001328:	bf00      	nop
 800132a:	e004      	b.n	8001336 <fsm_traffic_vertical_run+0xfe>
			break;
 800132c:	bf00      	nop
 800132e:	e002      	b.n	8001336 <fsm_traffic_vertical_run+0xfe>
			break;
 8001330:	bf00      	nop
 8001332:	e000      	b.n	8001336 <fsm_traffic_vertical_run+0xfe>
			break;
 8001334:	bf00      	nop
	}
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000060 	.word	0x20000060
 8001340:	2000011c 	.word	0x2000011c

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001348:	f000 fedc 	bl	8002104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134c:	f000 f83c 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001350:	f000 f916 	bl	8001580 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001354:	f000 f874 	bl	8001440 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001358:	f000 f8e8 	bl	800152c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800135c:	4818      	ldr	r0, [pc, #96]	; (80013c0 <main+0x7c>)
 800135e:	f001 ff1d 	bl	800319c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001362:	2100      	movs	r1, #0
 8001364:	4816      	ldr	r0, [pc, #88]	; (80013c0 <main+0x7c>)
 8001366:	f001 ffbd 	bl	80032e4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	setTimer4(10);
 800136a:	200a      	movs	r0, #10
 800136c:	f000 f9d8 	bl	8001720 <setTimer4>
    setTimer6(10);
 8001370:	200a      	movs	r0, #10
 8001372:	f000 fa09 	bl	8001788 <setTimer6>
    setTimer7(500);// toggle led-red/green/yellow vertical road 2Hz while modifying time of it
 8001376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800137a:	f000 fa1f 	bl	80017bc <setTimer7>
    setTimer8(500);// toggle led-red/green/yellow horizontal road 2Hz while modifying time of it
 800137e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001382:	f000 fa35 	bl	80017f0 <setTimer8>
    setTimer10(500);// timer blink led-red for debugging
 8001386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800138a:	f000 fa65 	bl	8001858 <setTimer10>

    /* USER CODE BEGIN 3 */
  //	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,i);

  	  //blink led-red for debugging
  	  if(timer10_flag == 1){
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <main+0x80>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d105      	bne.n	80013a2 <main+0x5e>
  		  toggleLedRed();
 8001396:	f000 fd99 	bl	8001ecc <toggleLedRed>
  		  setTimer10(1000);
 800139a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139e:	f000 fa5b 	bl	8001858 <setTimer10>
  	  }

  	  fsm_system_run();
 80013a2:	f7ff fae5 	bl	8000970 <fsm_system_run>
  	  fsm_7SEG_horizontal_run();
 80013a6:	f7ff f975 	bl	8000694 <fsm_7SEG_horizontal_run>
  	  fsm_7SEG_vertical_run();
 80013aa:	f7ff f9bb 	bl	8000724 <fsm_7SEG_vertical_run>
  	  fsm_traffic_vertical_run();
 80013ae:	f7ff ff43 	bl	8001238 <fsm_traffic_vertical_run>
  	  fsm_traffic_horizontal_run();
 80013b2:	f7ff feed 	bl	8001190 <fsm_traffic_horizontal_run>
  	  ///add function
  	  fsm_pedestrian_run();
 80013b6:	f7ff fa83 	bl	80008c0 <fsm_pedestrian_run>
  	  FSM_Buzzer();
 80013ba:	f7ff f8b9 	bl	8000530 <FSM_Buzzer>
  	  if(timer10_flag == 1){
 80013be:	e7e6      	b.n	800138e <main+0x4a>
 80013c0:	2000018c 	.word	0x2000018c
 80013c4:	20000134 	.word	0x20000134

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b090      	sub	sp, #64	; 0x40
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0318 	add.w	r3, r7, #24
 80013d2:	2228      	movs	r2, #40	; 0x28
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 f9f2 	bl	80047c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ee:	2301      	movs	r3, #1
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f2:	2310      	movs	r3, #16
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fa:	f107 0318 	add.w	r3, r7, #24
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fa62 	bl	80028c8 <HAL_RCC_OscConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800140a:	f000 f935 	bl	8001678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800140e:	230f      	movs	r3, #15
 8001410:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fcce 	bl	8002dc8 <HAL_RCC_ClockConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001432:	f000 f921 	bl	8001678 <Error_Handler>
  }
}
 8001436:	bf00      	nop
 8001438:	3740      	adds	r7, #64	; 0x40
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001470:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <MX_TIM2_Init+0xe8>)
 8001472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001476:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_TIM2_Init+0xe8>)
 800147a:	2207      	movs	r2, #7
 800147c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b2a      	ldr	r3, [pc, #168]	; (8001528 <MX_TIM2_Init+0xe8>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_TIM2_Init+0xe8>)
 8001486:	f242 720f 	movw	r2, #9999	; 0x270f
 800148a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_TIM2_Init+0xe8>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_TIM2_Init+0xe8>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001498:	4823      	ldr	r0, [pc, #140]	; (8001528 <MX_TIM2_Init+0xe8>)
 800149a:	f001 fe2f 	bl	80030fc <HAL_TIM_Base_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014a4:	f000 f8e8 	bl	8001678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b2:	4619      	mov	r1, r3
 80014b4:	481c      	ldr	r0, [pc, #112]	; (8001528 <MX_TIM2_Init+0xe8>)
 80014b6:	f002 f977 	bl	80037a8 <HAL_TIM_ConfigClockSource>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014c0:	f000 f8da 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014c4:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_TIM2_Init+0xe8>)
 80014c6:	f001 feb5 	bl	8003234 <HAL_TIM_PWM_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014d0:	f000 f8d2 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	4619      	mov	r1, r3
 80014e2:	4811      	ldr	r0, [pc, #68]	; (8001528 <MX_TIM2_Init+0xe8>)
 80014e4:	f002 fce2 	bl	8003eac <HAL_TIMEx_MasterConfigSynchronization>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014ee:	f000 f8c3 	bl	8001678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f2:	2360      	movs	r3, #96	; 0x60
 80014f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	4619      	mov	r1, r3
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_TIM2_Init+0xe8>)
 800150a:	f002 f88f 	bl	800362c <HAL_TIM_PWM_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001514:	f000 f8b0 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <MX_TIM2_Init+0xe8>)
 800151a:	f000 fba7 	bl	8001c6c <HAL_TIM_MspPostInit>

}
 800151e:	bf00      	nop
 8001520:	3738      	adds	r7, #56	; 0x38
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000018c 	.word	0x2000018c

0800152c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_USART2_UART_Init+0x50>)
 8001534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART2_UART_Init+0x4c>)
 8001564:	f002 fd0c 	bl	8003f80 <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800156e:	f000 f883 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200001d4 	.word	0x200001d4
 800157c:	40004400 	.word	0x40004400

08001580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <MX_GPIO_Init+0xd4>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	4a2e      	ldr	r2, [pc, #184]	; (8001654 <MX_GPIO_Init+0xd4>)
 800159a:	f043 0304 	orr.w	r3, r3, #4
 800159e:	6193      	str	r3, [r2, #24]
 80015a0:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <MX_GPIO_Init+0xd4>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <MX_GPIO_Init+0xd4>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a28      	ldr	r2, [pc, #160]	; (8001654 <MX_GPIO_Init+0xd4>)
 80015b2:	f043 0308 	orr.w	r3, r3, #8
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_GPIO_Init+0xd4>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 80015ca:	4823      	ldr	r0, [pc, #140]	; (8001658 <MX_GPIO_Init+0xd8>)
 80015cc:	f001 f94b 	bl	8002866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 80015d0:	2200      	movs	r2, #0
 80015d2:	f242 013c 	movw	r1, #8252	; 0x203c
 80015d6:	4821      	ldr	r0, [pc, #132]	; (800165c <MX_GPIO_Init+0xdc>)
 80015d8:	f001 f945 	bl	8002866 <HAL_GPIO_WritePin>
                          |D4_TRAFFIC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_BLUE_Pin D7_PEDES_LIGHT_Pin D2_TRAFFIC1_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin;
 80015dc:	f44f 63a2 	mov.w	r3, #1296	; 0x510
 80015e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2302      	movs	r3, #2
 80015ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	4619      	mov	r1, r3
 80015f4:	4818      	ldr	r0, [pc, #96]	; (8001658 <MX_GPIO_Init+0xd8>)
 80015f6:	f000 ffa5 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : A2_BUTTON2_Pin A0_PEDES_BUTTON_Pin */
  GPIO_InitStruct.Pin = A2_BUTTON2_Pin|A0_PEDES_BUTTON_Pin;
 80015fa:	2360      	movs	r3, #96	; 0x60
 80015fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001602:	2301      	movs	r3, #1
 8001604:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	4619      	mov	r1, r3
 800160c:	4812      	ldr	r0, [pc, #72]	; (8001658 <MX_GPIO_Init+0xd8>)
 800160e:	f000 ff99 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_BUTTON3_Pin A1_BUTTON1_Pin */
  GPIO_InitStruct.Pin = A3_BUTTON3_Pin|A1_BUTTON1_Pin;
 8001612:	f244 0301 	movw	r3, #16385	; 0x4001
 8001616:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161c:	2301      	movs	r3, #1
 800161e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	; (800165c <MX_GPIO_Init+0xdc>)
 8001628:	f000 ff8c 	bl	8002544 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDES_LIGHT_Pin LED_RED_Pin D3_TRAFFIC1_Pin D5_TRAFFIC2_Pin
                           D4_TRAFFIC2_Pin */
  GPIO_InitStruct.Pin = D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 800162c:	f242 033c 	movw	r3, #8252	; 0x203c
 8001630:	60bb      	str	r3, [r7, #8]
                          |D4_TRAFFIC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2302      	movs	r3, #2
 800163c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_GPIO_Init+0xdc>)
 8001646:	f000 ff7d 	bl	8002544 <HAL_GPIO_Init>

}
 800164a:	bf00      	nop
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000
 8001658:	40010800 	.word	0x40010800
 800165c:	40010c00 	.word	0x40010c00

08001660 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	timerRun();
 8001668:	f000 f978 	bl	800195c <timerRun>
	getKeyInput();
 800166c:	f7fe fdb6 	bl	80001dc <getKeyInput>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	e7fe      	b.n	8001680 <Error_Handler+0x8>
	...

08001684 <setTimer1>:

//timer for 2 beep
int timer33_flag = 0;
int timer33_counter = 0;

void setTimer1(int duration){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <setTimer1+0x28>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	fb92 f3f3 	sdiv	r3, r2, r3
 8001696:	4a06      	ldr	r2, [pc, #24]	; (80016b0 <setTimer1+0x2c>)
 8001698:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <setTimer1+0x30>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	2000009c 	.word	0x2000009c
 80016b0:	200000f0 	.word	0x200000f0
 80016b4:	200000ec 	.word	0x200000ec

080016b8 <setTimer2>:

void setTimer2(int duration){
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <setTimer2+0x28>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ca:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <setTimer2+0x2c>)
 80016cc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <setTimer2+0x30>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	2000009c 	.word	0x2000009c
 80016e4:	200000f8 	.word	0x200000f8
 80016e8:	200000f4 	.word	0x200000f4

080016ec <setTimer3>:

void setTimer3(int duration){
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <setTimer3+0x28>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fe:	4a06      	ldr	r2, [pc, #24]	; (8001718 <setTimer3+0x2c>)
 8001700:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <setTimer3+0x30>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000009c 	.word	0x2000009c
 8001718:	20000100 	.word	0x20000100
 800171c:	200000fc 	.word	0x200000fc

08001720 <setTimer4>:

void setTimer4(int duration){
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <setTimer4+0x28>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001732:	4a06      	ldr	r2, [pc, #24]	; (800174c <setTimer4+0x2c>)
 8001734:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <setTimer4+0x30>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000009c 	.word	0x2000009c
 800174c:	20000108 	.word	0x20000108
 8001750:	20000104 	.word	0x20000104

08001754 <setTimer5>:

void setTimer5(int duration){
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <setTimer5+0x28>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	fb92 f3f3 	sdiv	r3, r2, r3
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <setTimer5+0x2c>)
 8001768:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <setTimer5+0x30>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	2000009c 	.word	0x2000009c
 8001780:	20000110 	.word	0x20000110
 8001784:	2000010c 	.word	0x2000010c

08001788 <setTimer6>:

void setTimer6(int duration){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <setTimer6+0x28>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	fb92 f3f3 	sdiv	r3, r2, r3
 800179a:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <setTimer6+0x2c>)
 800179c:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <setTimer6+0x30>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	2000009c 	.word	0x2000009c
 80017b4:	20000118 	.word	0x20000118
 80017b8:	20000114 	.word	0x20000114

080017bc <setTimer7>:

void setTimer7(int duration){
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 80017c4:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <setTimer7+0x28>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ce:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <setTimer7+0x2c>)
 80017d0:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <setTimer7+0x30>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2000009c 	.word	0x2000009c
 80017e8:	20000120 	.word	0x20000120
 80017ec:	2000011c 	.word	0x2000011c

080017f0 <setTimer8>:

void setTimer8(int duration){
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <setTimer8+0x28>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001802:	4a06      	ldr	r2, [pc, #24]	; (800181c <setTimer8+0x2c>)
 8001804:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <setTimer8+0x30>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2000009c 	.word	0x2000009c
 800181c:	20000128 	.word	0x20000128
 8001820:	20000124 	.word	0x20000124

08001824 <setTimer9>:

void setTimer9(int duration){
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	timer9_counter = duration/TICK;
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <setTimer9+0x28>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	fb92 f3f3 	sdiv	r3, r2, r3
 8001836:	4a06      	ldr	r2, [pc, #24]	; (8001850 <setTimer9+0x2c>)
 8001838:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <setTimer9+0x30>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2000009c 	.word	0x2000009c
 8001850:	20000130 	.word	0x20000130
 8001854:	2000012c 	.word	0x2000012c

08001858 <setTimer10>:

void setTimer10(int duration){
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	timer10_counter = duration/TICK;
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <setTimer10+0x28>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	fb92 f3f3 	sdiv	r3, r2, r3
 800186a:	4a06      	ldr	r2, [pc, #24]	; (8001884 <setTimer10+0x2c>)
 800186c:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 800186e:	4b06      	ldr	r3, [pc, #24]	; (8001888 <setTimer10+0x30>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	2000009c 	.word	0x2000009c
 8001884:	20000138 	.word	0x20000138
 8001888:	20000134 	.word	0x20000134

0800188c <setTimer30>:
void setTimer11(int duration){
	timer11_counter = duration/TICK;
	timer11_flag = 0;
}

void setTimer30(int duration){
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	timer30_counter = duration/TICK;
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <setTimer30+0x28>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	fb92 f3f3 	sdiv	r3, r2, r3
 800189e:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <setTimer30+0x2c>)
 80018a0:	6013      	str	r3, [r2, #0]
	timer30_flag = 0;
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <setTimer30+0x30>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000009c 	.word	0x2000009c
 80018b8:	20000148 	.word	0x20000148
 80018bc:	20000144 	.word	0x20000144

080018c0 <setTimer31>:

void setTimer31(int duration){
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	timer31_counter = duration/TICK;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <setTimer31+0x28>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80018d2:	4a06      	ldr	r2, [pc, #24]	; (80018ec <setTimer31+0x2c>)
 80018d4:	6013      	str	r3, [r2, #0]
	timer31_flag = 0;
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <setTimer31+0x30>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	2000009c 	.word	0x2000009c
 80018ec:	20000150 	.word	0x20000150
 80018f0:	2000014c 	.word	0x2000014c

080018f4 <setTimer32>:

void setTimer32(int duration){
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	timer32_counter = duration/TICK;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <setTimer32+0x28>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	fb92 f3f3 	sdiv	r3, r2, r3
 8001906:	4a06      	ldr	r2, [pc, #24]	; (8001920 <setTimer32+0x2c>)
 8001908:	6013      	str	r3, [r2, #0]
	timer32_flag = 0;
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <setTimer32+0x30>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000009c 	.word	0x2000009c
 8001920:	20000158 	.word	0x20000158
 8001924:	20000154 	.word	0x20000154

08001928 <setTimer33>:

void setTimer33(int duration){
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	timer32_counter = duration/TICK;
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <setTimer33+0x28>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	fb92 f3f3 	sdiv	r3, r2, r3
 800193a:	4a06      	ldr	r2, [pc, #24]	; (8001954 <setTimer33+0x2c>)
 800193c:	6013      	str	r3, [r2, #0]
	timer32_flag = 0;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <setTimer33+0x30>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	2000009c 	.word	0x2000009c
 8001954:	20000158 	.word	0x20000158
 8001958:	20000154 	.word	0x20000154

0800195c <timerRun>:

void timerRun(){
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 8001960:	4b79      	ldr	r3, [pc, #484]	; (8001b48 <timerRun+0x1ec>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	dd04      	ble.n	8001972 <timerRun+0x16>
 8001968:	4b77      	ldr	r3, [pc, #476]	; (8001b48 <timerRun+0x1ec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3b01      	subs	r3, #1
 800196e:	4a76      	ldr	r2, [pc, #472]	; (8001b48 <timerRun+0x1ec>)
 8001970:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 8001972:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <timerRun+0x1ec>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d102      	bne.n	8001980 <timerRun+0x24>
		timer1_flag = 1;
 800197a:	4b74      	ldr	r3, [pc, #464]	; (8001b4c <timerRun+0x1f0>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 8001980:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <timerRun+0x1f4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	dd04      	ble.n	8001992 <timerRun+0x36>
 8001988:	4b71      	ldr	r3, [pc, #452]	; (8001b50 <timerRun+0x1f4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3b01      	subs	r3, #1
 800198e:	4a70      	ldr	r2, [pc, #448]	; (8001b50 <timerRun+0x1f4>)
 8001990:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 8001992:	4b6f      	ldr	r3, [pc, #444]	; (8001b50 <timerRun+0x1f4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <timerRun+0x44>
		timer2_flag = 1;
 800199a:	4b6e      	ldr	r3, [pc, #440]	; (8001b54 <timerRun+0x1f8>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 80019a0:	4b6d      	ldr	r3, [pc, #436]	; (8001b58 <timerRun+0x1fc>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dd04      	ble.n	80019b2 <timerRun+0x56>
 80019a8:	4b6b      	ldr	r3, [pc, #428]	; (8001b58 <timerRun+0x1fc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	4a6a      	ldr	r2, [pc, #424]	; (8001b58 <timerRun+0x1fc>)
 80019b0:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 80019b2:	4b69      	ldr	r3, [pc, #420]	; (8001b58 <timerRun+0x1fc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d102      	bne.n	80019c0 <timerRun+0x64>
		timer3_flag = 1;
 80019ba:	4b68      	ldr	r3, [pc, #416]	; (8001b5c <timerRun+0x200>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 80019c0:	4b67      	ldr	r3, [pc, #412]	; (8001b60 <timerRun+0x204>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	dd04      	ble.n	80019d2 <timerRun+0x76>
 80019c8:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <timerRun+0x204>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3b01      	subs	r3, #1
 80019ce:	4a64      	ldr	r2, [pc, #400]	; (8001b60 <timerRun+0x204>)
 80019d0:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <timerRun+0x204>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <timerRun+0x84>
		timer4_flag = 1;
 80019da:	4b62      	ldr	r3, [pc, #392]	; (8001b64 <timerRun+0x208>)
 80019dc:	2201      	movs	r2, #1
 80019de:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0) timer5_counter--;
 80019e0:	4b61      	ldr	r3, [pc, #388]	; (8001b68 <timerRun+0x20c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	dd04      	ble.n	80019f2 <timerRun+0x96>
 80019e8:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <timerRun+0x20c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	4a5e      	ldr	r2, [pc, #376]	; (8001b68 <timerRun+0x20c>)
 80019f0:	6013      	str	r3, [r2, #0]
	if(timer5_counter == 0){
 80019f2:	4b5d      	ldr	r3, [pc, #372]	; (8001b68 <timerRun+0x20c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <timerRun+0xa4>
		timer5_flag = 1;
 80019fa:	4b5c      	ldr	r3, [pc, #368]	; (8001b6c <timerRun+0x210>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0) timer6_counter--;
 8001a00:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <timerRun+0x214>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	dd04      	ble.n	8001a12 <timerRun+0xb6>
 8001a08:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <timerRun+0x214>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	4a58      	ldr	r2, [pc, #352]	; (8001b70 <timerRun+0x214>)
 8001a10:	6013      	str	r3, [r2, #0]
	if(timer6_counter == 0){
 8001a12:	4b57      	ldr	r3, [pc, #348]	; (8001b70 <timerRun+0x214>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <timerRun+0xc4>
		timer6_flag = 1;
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <timerRun+0x218>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0) timer7_counter--;
 8001a20:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <timerRun+0x21c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	dd04      	ble.n	8001a32 <timerRun+0xd6>
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <timerRun+0x21c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <timerRun+0x21c>)
 8001a30:	6013      	str	r3, [r2, #0]
	if(timer7_counter == 0){
 8001a32:	4b51      	ldr	r3, [pc, #324]	; (8001b78 <timerRun+0x21c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <timerRun+0xe4>
		timer7_flag = 1;
 8001a3a:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <timerRun+0x220>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0) timer8_counter--;
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <timerRun+0x224>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	dd04      	ble.n	8001a52 <timerRun+0xf6>
 8001a48:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <timerRun+0x224>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	4a4c      	ldr	r2, [pc, #304]	; (8001b80 <timerRun+0x224>)
 8001a50:	6013      	str	r3, [r2, #0]
	if(timer8_counter == 0){
 8001a52:	4b4b      	ldr	r3, [pc, #300]	; (8001b80 <timerRun+0x224>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <timerRun+0x104>
		timer8_flag = 1;
 8001a5a:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <timerRun+0x228>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0) timer9_counter--;
 8001a60:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <timerRun+0x22c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	dd04      	ble.n	8001a72 <timerRun+0x116>
 8001a68:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <timerRun+0x22c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	4a46      	ldr	r2, [pc, #280]	; (8001b88 <timerRun+0x22c>)
 8001a70:	6013      	str	r3, [r2, #0]
	if(timer9_counter == 0){
 8001a72:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <timerRun+0x22c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <timerRun+0x124>
		timer9_flag = 1;
 8001a7a:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <timerRun+0x230>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
	}

	if(timer10_counter > 0) timer10_counter--;
 8001a80:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <timerRun+0x234>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	dd04      	ble.n	8001a92 <timerRun+0x136>
 8001a88:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <timerRun+0x234>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	4a40      	ldr	r2, [pc, #256]	; (8001b90 <timerRun+0x234>)
 8001a90:	6013      	str	r3, [r2, #0]
	if(timer10_counter == 0){
 8001a92:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <timerRun+0x234>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <timerRun+0x144>
		timer10_flag = 1;
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <timerRun+0x238>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
	}

	if(timer11_counter > 0) timer11_counter--;
 8001aa0:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <timerRun+0x23c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	dd04      	ble.n	8001ab2 <timerRun+0x156>
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <timerRun+0x23c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	4a3a      	ldr	r2, [pc, #232]	; (8001b98 <timerRun+0x23c>)
 8001ab0:	6013      	str	r3, [r2, #0]
	if(timer11_counter == 0){
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <timerRun+0x23c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <timerRun+0x164>
		timer11_flag = 1;
 8001aba:	4b38      	ldr	r3, [pc, #224]	; (8001b9c <timerRun+0x240>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
	}

	if(timer30_counter > 0) timer30_counter--;
 8001ac0:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <timerRun+0x244>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	dd04      	ble.n	8001ad2 <timerRun+0x176>
 8001ac8:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <timerRun+0x244>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	4a34      	ldr	r2, [pc, #208]	; (8001ba0 <timerRun+0x244>)
 8001ad0:	6013      	str	r3, [r2, #0]
	if(timer30_counter == 0){
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <timerRun+0x244>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d102      	bne.n	8001ae0 <timerRun+0x184>
		timer30_flag = 1;
 8001ada:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <timerRun+0x248>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
	}

	if(timer31_counter > 0) timer31_counter--;
 8001ae0:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <timerRun+0x24c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	dd04      	ble.n	8001af2 <timerRun+0x196>
 8001ae8:	4b2f      	ldr	r3, [pc, #188]	; (8001ba8 <timerRun+0x24c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	4a2e      	ldr	r2, [pc, #184]	; (8001ba8 <timerRun+0x24c>)
 8001af0:	6013      	str	r3, [r2, #0]
	if(timer31_counter == 0){
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <timerRun+0x24c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <timerRun+0x1a4>
		timer31_flag = 1;
 8001afa:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <timerRun+0x250>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
	}

	if(timer32_counter > 0) timer32_counter--;
 8001b00:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <timerRun+0x254>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	dd04      	ble.n	8001b12 <timerRun+0x1b6>
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <timerRun+0x254>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	4a28      	ldr	r2, [pc, #160]	; (8001bb0 <timerRun+0x254>)
 8001b10:	6013      	str	r3, [r2, #0]
	if(timer32_counter == 0){
 8001b12:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <timerRun+0x254>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <timerRun+0x1c4>
		timer32_flag = 1;
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <timerRun+0x258>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
	}

	if(timer33_counter > 0) timer33_counter--;
 8001b20:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <timerRun+0x25c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	dd04      	ble.n	8001b32 <timerRun+0x1d6>
 8001b28:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <timerRun+0x25c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <timerRun+0x25c>)
 8001b30:	6013      	str	r3, [r2, #0]
	if(timer33_counter == 0){
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <timerRun+0x25c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <timerRun+0x1e4>
		timer33_flag = 1;
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <timerRun+0x260>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
	}
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	200000f0 	.word	0x200000f0
 8001b4c:	200000ec 	.word	0x200000ec
 8001b50:	200000f8 	.word	0x200000f8
 8001b54:	200000f4 	.word	0x200000f4
 8001b58:	20000100 	.word	0x20000100
 8001b5c:	200000fc 	.word	0x200000fc
 8001b60:	20000108 	.word	0x20000108
 8001b64:	20000104 	.word	0x20000104
 8001b68:	20000110 	.word	0x20000110
 8001b6c:	2000010c 	.word	0x2000010c
 8001b70:	20000118 	.word	0x20000118
 8001b74:	20000114 	.word	0x20000114
 8001b78:	20000120 	.word	0x20000120
 8001b7c:	2000011c 	.word	0x2000011c
 8001b80:	20000128 	.word	0x20000128
 8001b84:	20000124 	.word	0x20000124
 8001b88:	20000130 	.word	0x20000130
 8001b8c:	2000012c 	.word	0x2000012c
 8001b90:	20000138 	.word	0x20000138
 8001b94:	20000134 	.word	0x20000134
 8001b98:	20000140 	.word	0x20000140
 8001b9c:	2000013c 	.word	0x2000013c
 8001ba0:	20000148 	.word	0x20000148
 8001ba4:	20000144 	.word	0x20000144
 8001ba8:	20000150 	.word	0x20000150
 8001bac:	2000014c 	.word	0x2000014c
 8001bb0:	20000158 	.word	0x20000158
 8001bb4:	20000154 	.word	0x20000154
 8001bb8:	20000160 	.word	0x20000160
 8001bbc:	2000015c 	.word	0x2000015c

08001bc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_MspInit+0x5c>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <HAL_MspInit+0x5c>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6193      	str	r3, [r2, #24]
 8001bd2:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <HAL_MspInit+0x5c>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_MspInit+0x5c>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_MspInit+0x5c>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	61d3      	str	r3, [r2, #28]
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_MspInit+0x5c>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_MspInit+0x60>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_MspInit+0x60>)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000

08001c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d113      	bne.n	8001c5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_TIM_Base_MspInit+0x44>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_TIM_Base_MspInit+0x44>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	61d3      	str	r3, [r2, #28]
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_TIM_Base_MspInit+0x44>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	201c      	movs	r0, #28
 8001c54:	f000 fb8f 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c58:	201c      	movs	r0, #28
 8001c5a:	f000 fba8 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8a:	d117      	bne.n	8001cbc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b0d      	ldr	r3, [pc, #52]	; (8001cc4 <HAL_TIM_MspPostInit+0x58>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_TIM_MspPostInit+0x58>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_TIM_MspPostInit+0x58>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2302      	movs	r3, #2
 8001cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <HAL_TIM_MspPostInit+0x5c>)
 8001cb8:	f000 fc44 	bl	8002544 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40010800 	.word	0x40010800

08001ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <HAL_UART_MspInit+0x98>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d137      	bne.n	8001d5c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_UART_MspInit+0x9c>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <HAL_UART_MspInit+0x9c>)
 8001cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf6:	61d3      	str	r3, [r2, #28]
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_UART_MspInit+0x9c>)
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_UART_MspInit+0x9c>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a17      	ldr	r2, [pc, #92]	; (8001d68 <HAL_UART_MspInit+0x9c>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_UART_MspInit+0x9c>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480f      	ldr	r0, [pc, #60]	; (8001d6c <HAL_UART_MspInit+0xa0>)
 8001d30:	f000 fc08 	bl	8002544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d34:	2308      	movs	r3, #8
 8001d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	4619      	mov	r1, r3
 8001d46:	4809      	ldr	r0, [pc, #36]	; (8001d6c <HAL_UART_MspInit+0xa0>)
 8001d48:	f000 fbfc 	bl	8002544 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2026      	movs	r0, #38	; 0x26
 8001d52:	f000 fb10 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d56:	2026      	movs	r0, #38	; 0x26
 8001d58:	f000 fb29 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40004400 	.word	0x40004400
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40010800 	.word	0x40010800

08001d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <NMI_Handler+0x4>

08001d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <MemManage_Handler+0x4>

08001d82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr

08001da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr

08001db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db6:	f000 f9eb 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <TIM2_IRQHandler+0x10>)
 8001dc6:	f001 fb29 	bl	800341c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000018c 	.word	0x2000018c

08001dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <USART2_IRQHandler+0x10>)
 8001dda:	f002 f91f 	bl	800401c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200001d4 	.word	0x200001d4

08001de8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <setRed_horizontal>:
 */
#include "traffic.h"
#include "global.h"
#include "main.h"

void setRed_horizontal(){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dfe:	4805      	ldr	r0, [pc, #20]	; (8001e14 <setRed_horizontal+0x20>)
 8001e00:	f000 fd31 	bl	8002866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2108      	movs	r1, #8
 8001e08:	4803      	ldr	r0, [pc, #12]	; (8001e18 <setRed_horizontal+0x24>)
 8001e0a:	f000 fd2c 	bl	8002866 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40010800 	.word	0x40010800
 8001e18:	40010c00 	.word	0x40010c00

08001e1c <setGreen_horizontal>:

void setGreen_horizontal(){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e26:	4805      	ldr	r0, [pc, #20]	; (8001e3c <setGreen_horizontal+0x20>)
 8001e28:	f000 fd1d 	bl	8002866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2108      	movs	r1, #8
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <setGreen_horizontal+0x24>)
 8001e32:	f000 fd18 	bl	8002866 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_SET);
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40010800 	.word	0x40010800
 8001e40:	40010c00 	.word	0x40010c00

08001e44 <setYellow_horizontal>:

void setYellow_horizontal(){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4e:	4805      	ldr	r0, [pc, #20]	; (8001e64 <setYellow_horizontal+0x20>)
 8001e50:	f000 fd09 	bl	8002866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001e54:	2201      	movs	r2, #1
 8001e56:	2108      	movs	r1, #8
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <setYellow_horizontal+0x24>)
 8001e5a:	f000 fd04 	bl	8002866 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40010800 	.word	0x40010800
 8001e68:	40010c00 	.word	0x40010c00

08001e6c <setRed_vertical>:

void setRed_vertical(){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2120      	movs	r1, #32
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <setRed_vertical+0x1c>)
 8001e76:	f000 fcf6 	bl	8002866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2110      	movs	r1, #16
 8001e7e:	4802      	ldr	r0, [pc, #8]	; (8001e88 <setRed_vertical+0x1c>)
 8001e80:	f000 fcf1 	bl	8002866 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40010c00 	.word	0x40010c00

08001e8c <setGreen_vertical>:

void setGreen_vertical(){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2120      	movs	r1, #32
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <setGreen_vertical+0x1c>)
 8001e96:	f000 fce6 	bl	8002866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <setGreen_vertical+0x1c>)
 8001ea0:	f000 fce1 	bl	8002866 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_SET);
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40010c00 	.word	0x40010c00

08001eac <setYellow_vertical>:

void setYellow_vertical(){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2120      	movs	r1, #32
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <setYellow_vertical+0x1c>)
 8001eb6:	f000 fcd6 	bl	8002866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <setYellow_vertical+0x1c>)
 8001ec0:	f000 fcd1 	bl	8002866 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40010c00 	.word	0x40010c00

08001ecc <toggleLedRed>:


void toggleLedRed(){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <toggleLedRed+0x14>)
 8001ed6:	f000 fcde 	bl	8002896 <HAL_GPIO_TogglePin>
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40010c00 	.word	0x40010c00

08001ee4 <toggleRed_horizontal>:

void toggleRed_horizontal(){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDA_GPIO_Port, REDA_Pin);
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8001ee8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eec:	4804      	ldr	r0, [pc, #16]	; (8001f00 <toggleRed_horizontal+0x1c>)
 8001eee:	f000 fcd2 	bl	8002896 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	4803      	ldr	r0, [pc, #12]	; (8001f04 <toggleRed_horizontal+0x20>)
 8001ef8:	f000 fcb5 	bl	8002866 <HAL_GPIO_WritePin>
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40010800 	.word	0x40010800
 8001f04:	40010c00 	.word	0x40010c00

08001f08 <toggleGreen_horizontal>:

void toggleGreen_horizontal(){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENA_GPIO_Port, GREENA_Pin);
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8001f0c:	2108      	movs	r1, #8
 8001f0e:	4805      	ldr	r0, [pc, #20]	; (8001f24 <toggleGreen_horizontal+0x1c>)
 8001f10:	f000 fcc1 	bl	8002896 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1a:	4803      	ldr	r0, [pc, #12]	; (8001f28 <toggleGreen_horizontal+0x20>)
 8001f1c:	f000 fca3 	bl	8002866 <HAL_GPIO_WritePin>
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40010c00 	.word	0x40010c00
 8001f28:	40010800 	.word	0x40010800

08001f2c <toggleYellow_horizontal>:

void toggleYellow_horizontal(){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWA_GPIO_Port, YELLOWA_Pin);
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, HAL_GPIO_ReadPin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin));
 8001f30:	2108      	movs	r1, #8
 8001f32:	480a      	ldr	r0, [pc, #40]	; (8001f5c <toggleYellow_horizontal+0x30>)
 8001f34:	f000 fc80 	bl	8002838 <HAL_GPIO_ReadPin>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f40:	4807      	ldr	r0, [pc, #28]	; (8001f60 <toggleYellow_horizontal+0x34>)
 8001f42:	f000 fc90 	bl	8002866 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8001f46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f4a:	4805      	ldr	r0, [pc, #20]	; (8001f60 <toggleYellow_horizontal+0x34>)
 8001f4c:	f000 fca3 	bl	8002896 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8001f50:	2108      	movs	r1, #8
 8001f52:	4802      	ldr	r0, [pc, #8]	; (8001f5c <toggleYellow_horizontal+0x30>)
 8001f54:	f000 fc9f 	bl	8002896 <HAL_GPIO_TogglePin>
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010c00 	.word	0x40010c00
 8001f60:	40010800 	.word	0x40010800

08001f64 <toggleRed_vertical>:

void toggleRed_vertical(){
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDB_GPIO_Port, REDB_Pin);
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8001f68:	2120      	movs	r1, #32
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <toggleRed_vertical+0x1c>)
 8001f6c:	f000 fc93 	bl	8002896 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2110      	movs	r1, #16
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <toggleRed_vertical+0x1c>)
 8001f76:	f000 fc76 	bl	8002866 <HAL_GPIO_WritePin>
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40010c00 	.word	0x40010c00

08001f84 <toggleGreen_vertical>:

void toggleGreen_vertical(){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENB_GPIO_Port, GREENB_Pin);
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8001f88:	2110      	movs	r1, #16
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <toggleGreen_vertical+0x1c>)
 8001f8c:	f000 fc83 	bl	8002896 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001f90:	2200      	movs	r2, #0
 8001f92:	2120      	movs	r1, #32
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <toggleGreen_vertical+0x1c>)
 8001f96:	f000 fc66 	bl	8002866 <HAL_GPIO_WritePin>
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40010c00 	.word	0x40010c00

08001fa4 <toggleYellow_vertical>:

void toggleYellow_vertical(){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWB_GPIO_Port, YELLOWB_Pin);
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, HAL_GPIO_ReadPin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin));
 8001fa8:	2110      	movs	r1, #16
 8001faa:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <toggleYellow_vertical+0x2c>)
 8001fac:	f000 fc44 	bl	8002838 <HAL_GPIO_ReadPin>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2120      	movs	r1, #32
 8001fb6:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <toggleYellow_vertical+0x2c>)
 8001fb8:	f000 fc55 	bl	8002866 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8001fbc:	2120      	movs	r1, #32
 8001fbe:	4804      	ldr	r0, [pc, #16]	; (8001fd0 <toggleYellow_vertical+0x2c>)
 8001fc0:	f000 fc69 	bl	8002896 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8001fc4:	2110      	movs	r1, #16
 8001fc6:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <toggleYellow_vertical+0x2c>)
 8001fc8:	f000 fc65 	bl	8002896 <HAL_GPIO_TogglePin>
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40010c00 	.word	0x40010c00

08001fd4 <resetTimeTraffic>:
void offRedYellow_vertical(){
//	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
}

void resetTimeTraffic(){
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
	time_red_horizontal_temp = time_red_horizontal;
 8001fd8:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <resetTimeTraffic+0x3c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <resetTimeTraffic+0x40>)
 8001fde:	6013      	str	r3, [r2, #0]
	time_green_horizontal_temp = time_green_horizontal;
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <resetTimeTraffic+0x44>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	; (800201c <resetTimeTraffic+0x48>)
 8001fe6:	6013      	str	r3, [r2, #0]
	time_yellow_horizontal_temp = time_yellow_horizontal;
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <resetTimeTraffic+0x4c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <resetTimeTraffic+0x50>)
 8001fee:	6013      	str	r3, [r2, #0]

	time_red_vertical_temp = time_red_vertical;
 8001ff0:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <resetTimeTraffic+0x54>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <resetTimeTraffic+0x58>)
 8001ff6:	6013      	str	r3, [r2, #0]
	time_green_vertical_temp = time_green_vertical;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <resetTimeTraffic+0x5c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <resetTimeTraffic+0x60>)
 8001ffe:	6013      	str	r3, [r2, #0]
	time_yellow_vertical_temp = time_yellow_vertical;
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <resetTimeTraffic+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <resetTimeTraffic+0x68>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	20000064 	.word	0x20000064
 8002014:	20000070 	.word	0x20000070
 8002018:	20000068 	.word	0x20000068
 800201c:	20000074 	.word	0x20000074
 8002020:	2000006c 	.word	0x2000006c
 8002024:	20000078 	.word	0x20000078
 8002028:	20000084 	.word	0x20000084
 800202c:	20000090 	.word	0x20000090
 8002030:	2000007c 	.word	0x2000007c
 8002034:	20000088 	.word	0x20000088
 8002038:	20000080 	.word	0x20000080
 800203c:	2000008c 	.word	0x2000008c

08002040 <set_off_pedes>:

void set_off_pedes(){
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8002044:	2200      	movs	r2, #0
 8002046:	2104      	movs	r1, #4
 8002048:	4805      	ldr	r0, [pc, #20]	; (8002060 <set_off_pedes+0x20>)
 800204a:	f000 fc0c 	bl	8002866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002054:	4803      	ldr	r0, [pc, #12]	; (8002064 <set_off_pedes+0x24>)
 8002056:	f000 fc06 	bl	8002866 <HAL_GPIO_WritePin>
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40010c00 	.word	0x40010c00
 8002064:	40010800 	.word	0x40010800

08002068 <set_red_pedes>:
void set_red_pedes(){
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	2104      	movs	r1, #4
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <set_red_pedes+0x20>)
 8002072:	f000 fbf8 	bl	8002866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207c:	4803      	ldr	r0, [pc, #12]	; (800208c <set_red_pedes+0x24>)
 800207e:	f000 fbf2 	bl	8002866 <HAL_GPIO_WritePin>
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40010c00 	.word	0x40010c00
 800208c:	40010800 	.word	0x40010800

08002090 <set_green_pedes>:
void set_green_pedes(){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	2104      	movs	r1, #4
 8002098:	4805      	ldr	r0, [pc, #20]	; (80020b0 <set_green_pedes+0x20>)
 800209a:	f000 fbe4 	bl	8002866 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <set_green_pedes+0x24>)
 80020a6:	f000 fbde 	bl	8002866 <HAL_GPIO_WritePin>
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40010800 	.word	0x40010800

080020b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b8:	480c      	ldr	r0, [pc, #48]	; (80020ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ba:	490d      	ldr	r1, [pc, #52]	; (80020f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020d0:	4c0a      	ldr	r4, [pc, #40]	; (80020fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020de:	f7ff fe83 	bl	8001de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f002 fb49 	bl	8004778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020e6:	f7ff f92d 	bl	8001344 <main>
  bx lr
 80020ea:	4770      	bx	lr
  ldr r0, =_sdata
 80020ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80020f4:	08004818 	.word	0x08004818
  ldr r2, =_sbss
 80020f8:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80020fc:	2000021c 	.word	0x2000021c

08002100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002100:	e7fe      	b.n	8002100 <ADC1_2_IRQHandler>
	...

08002104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_Init+0x28>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a07      	ldr	r2, [pc, #28]	; (800212c <HAL_Init+0x28>)
 800210e:	f043 0310 	orr.w	r3, r3, #16
 8002112:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002114:	2003      	movs	r0, #3
 8002116:	f000 f923 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211a:	200f      	movs	r0, #15
 800211c:	f000 f808 	bl	8002130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002120:	f7ff fd4e 	bl	8001bc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_InitTick+0x54>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_InitTick+0x58>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002146:	fbb3 f3f1 	udiv	r3, r3, r1
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f000 f93b 	bl	80023ca <HAL_SYSTICK_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00e      	b.n	800217c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b0f      	cmp	r3, #15
 8002162:	d80a      	bhi.n	800217a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002164:	2200      	movs	r2, #0
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f000 f903 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002170:	4a06      	ldr	r2, [pc, #24]	; (800218c <HAL_InitTick+0x5c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200000a0 	.word	0x200000a0
 8002188:	200000a8 	.word	0x200000a8
 800218c:	200000a4 	.word	0x200000a4

08002190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_IncTick+0x1c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_IncTick+0x20>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a03      	ldr	r2, [pc, #12]	; (80021b0 <HAL_IncTick+0x20>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	200000a8 	.word	0x200000a8
 80021b0:	20000218 	.word	0x20000218

080021b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return uwTick;
 80021b8:	4b02      	ldr	r3, [pc, #8]	; (80021c4 <HAL_GetTick+0x10>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	20000218 	.word	0x20000218

080021c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fa:	4a04      	ldr	r2, [pc, #16]	; (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	60d3      	str	r3, [r2, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <__NVIC_GetPriorityGrouping+0x18>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0b      	blt.n	8002256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4906      	ldr	r1, [pc, #24]	; (8002260 <__NVIC_EnableIRQ+0x34>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	e000e100 	.word	0xe000e100

08002264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	db0a      	blt.n	800228e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	490c      	ldr	r1, [pc, #48]	; (80022b0 <__NVIC_SetPriority+0x4c>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	440b      	add	r3, r1
 8002288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800228c:	e00a      	b.n	80022a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4908      	ldr	r1, [pc, #32]	; (80022b4 <__NVIC_SetPriority+0x50>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	3b04      	subs	r3, #4
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	440b      	add	r3, r1
 80022a2:	761a      	strb	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000e100 	.word	0xe000e100
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f1c3 0307 	rsb	r3, r3, #7
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	bf28      	it	cs
 80022d6:	2304      	movcs	r3, #4
 80022d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3304      	adds	r3, #4
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d902      	bls.n	80022e8 <NVIC_EncodePriority+0x30>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3b03      	subs	r3, #3
 80022e6:	e000      	b.n	80022ea <NVIC_EncodePriority+0x32>
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	f04f 32ff 	mov.w	r2, #4294967295
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	401a      	ands	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43d9      	mvns	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	4313      	orrs	r3, r2
         );
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f7ff ff90 	bl	8002264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff2d 	bl	80021c8 <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff ff42 	bl	8002210 <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff90 	bl	80022b8 <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff5f 	bl	8002264 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff35 	bl	800222c <__NVIC_EnableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffa2 	bl	800231c <SysTick_Config>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d008      	beq.n	800240a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2204      	movs	r2, #4
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e020      	b.n	800244c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 020e 	bic.w	r2, r2, #14
 8002418:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0201 	bic.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f202 	lsl.w	r2, r1, r2
 8002438:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800244a:	7bfb      	ldrb	r3, [r7, #15]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
	...

08002458 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800246a:	2b02      	cmp	r3, #2
 800246c:	d005      	beq.n	800247a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2204      	movs	r2, #4
 8002472:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e051      	b.n	800251e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 020e 	bic.w	r2, r2, #14
 8002488:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a22      	ldr	r2, [pc, #136]	; (8002528 <HAL_DMA_Abort_IT+0xd0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d029      	beq.n	80024f8 <HAL_DMA_Abort_IT+0xa0>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a20      	ldr	r2, [pc, #128]	; (800252c <HAL_DMA_Abort_IT+0xd4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d022      	beq.n	80024f4 <HAL_DMA_Abort_IT+0x9c>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1f      	ldr	r2, [pc, #124]	; (8002530 <HAL_DMA_Abort_IT+0xd8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d01a      	beq.n	80024ee <HAL_DMA_Abort_IT+0x96>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_DMA_Abort_IT+0xdc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d012      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x90>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <HAL_DMA_Abort_IT+0xe0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00a      	beq.n	80024e2 <HAL_DMA_Abort_IT+0x8a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1a      	ldr	r2, [pc, #104]	; (800253c <HAL_DMA_Abort_IT+0xe4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d102      	bne.n	80024dc <HAL_DMA_Abort_IT+0x84>
 80024d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024da:	e00e      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024e0:	e00b      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024e6:	e008      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ec:	e005      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f2:	e002      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024f4:	2310      	movs	r3, #16
 80024f6:	e000      	b.n	80024fa <HAL_DMA_Abort_IT+0xa2>
 80024f8:	2301      	movs	r3, #1
 80024fa:	4a11      	ldr	r2, [pc, #68]	; (8002540 <HAL_DMA_Abort_IT+0xe8>)
 80024fc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4798      	blx	r3
    } 
  }
  return status;
 800251e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40020008 	.word	0x40020008
 800252c:	4002001c 	.word	0x4002001c
 8002530:	40020030 	.word	0x40020030
 8002534:	40020044 	.word	0x40020044
 8002538:	40020058 	.word	0x40020058
 800253c:	4002006c 	.word	0x4002006c
 8002540:	40020000 	.word	0x40020000

08002544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002544:	b480      	push	{r7}
 8002546:	b08b      	sub	sp, #44	; 0x2c
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002556:	e148      	b.n	80027ea <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002558:	2201      	movs	r2, #1
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	429a      	cmp	r2, r3
 8002572:	f040 8137 	bne.w	80027e4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4aa3      	ldr	r2, [pc, #652]	; (8002808 <HAL_GPIO_Init+0x2c4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d05e      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 8002580:	4aa1      	ldr	r2, [pc, #644]	; (8002808 <HAL_GPIO_Init+0x2c4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d875      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 8002586:	4aa1      	ldr	r2, [pc, #644]	; (800280c <HAL_GPIO_Init+0x2c8>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d058      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 800258c:	4a9f      	ldr	r2, [pc, #636]	; (800280c <HAL_GPIO_Init+0x2c8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d86f      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 8002592:	4a9f      	ldr	r2, [pc, #636]	; (8002810 <HAL_GPIO_Init+0x2cc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d052      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 8002598:	4a9d      	ldr	r2, [pc, #628]	; (8002810 <HAL_GPIO_Init+0x2cc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d869      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 800259e:	4a9d      	ldr	r2, [pc, #628]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d04c      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 80025a4:	4a9b      	ldr	r2, [pc, #620]	; (8002814 <HAL_GPIO_Init+0x2d0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d863      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 80025aa:	4a9b      	ldr	r2, [pc, #620]	; (8002818 <HAL_GPIO_Init+0x2d4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d046      	beq.n	800263e <HAL_GPIO_Init+0xfa>
 80025b0:	4a99      	ldr	r2, [pc, #612]	; (8002818 <HAL_GPIO_Init+0x2d4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d85d      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 80025b6:	2b12      	cmp	r3, #18
 80025b8:	d82a      	bhi.n	8002610 <HAL_GPIO_Init+0xcc>
 80025ba:	2b12      	cmp	r3, #18
 80025bc:	d859      	bhi.n	8002672 <HAL_GPIO_Init+0x12e>
 80025be:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <HAL_GPIO_Init+0x80>)
 80025c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c4:	0800263f 	.word	0x0800263f
 80025c8:	08002619 	.word	0x08002619
 80025cc:	0800262b 	.word	0x0800262b
 80025d0:	0800266d 	.word	0x0800266d
 80025d4:	08002673 	.word	0x08002673
 80025d8:	08002673 	.word	0x08002673
 80025dc:	08002673 	.word	0x08002673
 80025e0:	08002673 	.word	0x08002673
 80025e4:	08002673 	.word	0x08002673
 80025e8:	08002673 	.word	0x08002673
 80025ec:	08002673 	.word	0x08002673
 80025f0:	08002673 	.word	0x08002673
 80025f4:	08002673 	.word	0x08002673
 80025f8:	08002673 	.word	0x08002673
 80025fc:	08002673 	.word	0x08002673
 8002600:	08002673 	.word	0x08002673
 8002604:	08002673 	.word	0x08002673
 8002608:	08002621 	.word	0x08002621
 800260c:	08002635 	.word	0x08002635
 8002610:	4a82      	ldr	r2, [pc, #520]	; (800281c <HAL_GPIO_Init+0x2d8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d013      	beq.n	800263e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002616:	e02c      	b.n	8002672 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	623b      	str	r3, [r7, #32]
          break;
 800261e:	e029      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	3304      	adds	r3, #4
 8002626:	623b      	str	r3, [r7, #32]
          break;
 8002628:	e024      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	3308      	adds	r3, #8
 8002630:	623b      	str	r3, [r7, #32]
          break;
 8002632:	e01f      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	330c      	adds	r3, #12
 800263a:	623b      	str	r3, [r7, #32]
          break;
 800263c:	e01a      	b.n	8002674 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d102      	bne.n	800264c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002646:	2304      	movs	r3, #4
 8002648:	623b      	str	r3, [r7, #32]
          break;
 800264a:	e013      	b.n	8002674 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002654:	2308      	movs	r3, #8
 8002656:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	611a      	str	r2, [r3, #16]
          break;
 800265e:	e009      	b.n	8002674 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002660:	2308      	movs	r3, #8
 8002662:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	615a      	str	r2, [r3, #20]
          break;
 800266a:	e003      	b.n	8002674 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
          break;
 8002670:	e000      	b.n	8002674 <HAL_GPIO_Init+0x130>
          break;
 8002672:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2bff      	cmp	r3, #255	; 0xff
 8002678:	d801      	bhi.n	800267e <HAL_GPIO_Init+0x13a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	e001      	b.n	8002682 <HAL_GPIO_Init+0x13e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3304      	adds	r3, #4
 8002682:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2bff      	cmp	r3, #255	; 0xff
 8002688:	d802      	bhi.n	8002690 <HAL_GPIO_Init+0x14c>
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	e002      	b.n	8002696 <HAL_GPIO_Init+0x152>
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	3b08      	subs	r3, #8
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	210f      	movs	r1, #15
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	401a      	ands	r2, r3
 80026a8:	6a39      	ldr	r1, [r7, #32]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	431a      	orrs	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8090 	beq.w	80027e4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026c4:	4b56      	ldr	r3, [pc, #344]	; (8002820 <HAL_GPIO_Init+0x2dc>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a55      	ldr	r2, [pc, #340]	; (8002820 <HAL_GPIO_Init+0x2dc>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <HAL_GPIO_Init+0x2dc>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026dc:	4a51      	ldr	r2, [pc, #324]	; (8002824 <HAL_GPIO_Init+0x2e0>)
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4013      	ands	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a49      	ldr	r2, [pc, #292]	; (8002828 <HAL_GPIO_Init+0x2e4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00d      	beq.n	8002724 <HAL_GPIO_Init+0x1e0>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a48      	ldr	r2, [pc, #288]	; (800282c <HAL_GPIO_Init+0x2e8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d007      	beq.n	8002720 <HAL_GPIO_Init+0x1dc>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a47      	ldr	r2, [pc, #284]	; (8002830 <HAL_GPIO_Init+0x2ec>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_GPIO_Init+0x1d8>
 8002718:	2302      	movs	r3, #2
 800271a:	e004      	b.n	8002726 <HAL_GPIO_Init+0x1e2>
 800271c:	2303      	movs	r3, #3
 800271e:	e002      	b.n	8002726 <HAL_GPIO_Init+0x1e2>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <HAL_GPIO_Init+0x1e2>
 8002724:	2300      	movs	r3, #0
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	f002 0203 	and.w	r2, r2, #3
 800272c:	0092      	lsls	r2, r2, #2
 800272e:	4093      	lsls	r3, r2
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002736:	493b      	ldr	r1, [pc, #236]	; (8002824 <HAL_GPIO_Init+0x2e0>)
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	089b      	lsrs	r3, r3, #2
 800273c:	3302      	adds	r3, #2
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d006      	beq.n	800275e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002750:	4b38      	ldr	r3, [pc, #224]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4937      	ldr	r1, [pc, #220]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]
 800275c:	e006      	b.n	800276c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800275e:	4b35      	ldr	r3, [pc, #212]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	43db      	mvns	r3, r3
 8002766:	4933      	ldr	r1, [pc, #204]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 8002768:	4013      	ands	r3, r2
 800276a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d006      	beq.n	8002786 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002778:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	492d      	ldr	r1, [pc, #180]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002786:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	43db      	mvns	r3, r3
 800278e:	4929      	ldr	r1, [pc, #164]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 8002790:	4013      	ands	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d006      	beq.n	80027ae <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	4923      	ldr	r1, [pc, #140]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	608b      	str	r3, [r1, #8]
 80027ac:	e006      	b.n	80027bc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	491f      	ldr	r1, [pc, #124]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	4919      	ldr	r1, [pc, #100]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60cb      	str	r3, [r1, #12]
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	43db      	mvns	r3, r3
 80027de:	4915      	ldr	r1, [pc, #84]	; (8002834 <HAL_GPIO_Init+0x2f0>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	3301      	adds	r3, #1
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f47f aeaf 	bne.w	8002558 <HAL_GPIO_Init+0x14>
  }
}
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	372c      	adds	r7, #44	; 0x2c
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	10320000 	.word	0x10320000
 800280c:	10310000 	.word	0x10310000
 8002810:	10220000 	.word	0x10220000
 8002814:	10210000 	.word	0x10210000
 8002818:	10120000 	.word	0x10120000
 800281c:	10110000 	.word	0x10110000
 8002820:	40021000 	.word	0x40021000
 8002824:	40010000 	.word	0x40010000
 8002828:	40010800 	.word	0x40010800
 800282c:	40010c00 	.word	0x40010c00
 8002830:	40011000 	.word	0x40011000
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	887b      	ldrh	r3, [r7, #2]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002850:	2301      	movs	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	e001      	b.n	800285a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	807b      	strh	r3, [r7, #2]
 8002872:	4613      	mov	r3, r2
 8002874:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002876:	787b      	ldrb	r3, [r7, #1]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287c:	887a      	ldrh	r2, [r7, #2]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002882:	e003      	b.n	800288c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002884:	887b      	ldrh	r3, [r7, #2]
 8002886:	041a      	lsls	r2, r3, #16
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	611a      	str	r2, [r3, #16]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028a8:	887a      	ldrh	r2, [r7, #2]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4013      	ands	r3, r2
 80028ae:	041a      	lsls	r2, r3, #16
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43d9      	mvns	r1, r3
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	400b      	ands	r3, r1
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	611a      	str	r2, [r3, #16]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e26c      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8087 	beq.w	80029f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e8:	4b92      	ldr	r3, [pc, #584]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d00c      	beq.n	800290e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028f4:	4b8f      	ldr	r3, [pc, #572]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d112      	bne.n	8002926 <HAL_RCC_OscConfig+0x5e>
 8002900:	4b8c      	ldr	r3, [pc, #560]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290c:	d10b      	bne.n	8002926 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290e:	4b89      	ldr	r3, [pc, #548]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d06c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x12c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d168      	bne.n	80029f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e246      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x76>
 8002930:	4b80      	ldr	r3, [pc, #512]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a7f      	ldr	r2, [pc, #508]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	e02e      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x98>
 8002946:	4b7b      	ldr	r3, [pc, #492]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a7a      	ldr	r2, [pc, #488]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800294c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b78      	ldr	r3, [pc, #480]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a77      	ldr	r2, [pc, #476]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002958:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e01d      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0xbc>
 800296a:	4b72      	ldr	r3, [pc, #456]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a71      	ldr	r2, [pc, #452]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a6e      	ldr	r2, [pc, #440]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0xd4>
 8002984:	4b6b      	ldr	r3, [pc, #428]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a6a      	ldr	r2, [pc, #424]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 800298a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	4b68      	ldr	r3, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a67      	ldr	r2, [pc, #412]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800299a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d013      	beq.n	80029cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a4:	f7ff fc06 	bl	80021b4 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ac:	f7ff fc02 	bl	80021b4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	; 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1fa      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	4b5d      	ldr	r3, [pc, #372]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0xe4>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029cc:	f7ff fbf2 	bl	80021b4 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7ff fbee 	bl	80021b4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	; 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e1e6      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e6:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x10c>
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d063      	beq.n	8002aca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a02:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 030c 	and.w	r3, r3, #12
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a0e:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d11c      	bne.n	8002a54 <HAL_RCC_OscConfig+0x18c>
 8002a1a:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d116      	bne.n	8002a54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a26:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d005      	beq.n	8002a3e <HAL_RCC_OscConfig+0x176>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e1ba      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4939      	ldr	r1, [pc, #228]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a52:	e03a      	b.n	8002aca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d020      	beq.n	8002a9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a5c:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a62:	f7ff fba7 	bl	80021b4 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a6a:	f7ff fba3 	bl	80021b4 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e19b      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4927      	ldr	r1, [pc, #156]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	600b      	str	r3, [r1, #0]
 8002a9c:	e015      	b.n	8002aca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7ff fb86 	bl	80021b4 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aac:	f7ff fb82 	bl	80021b4 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e17a      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d03a      	beq.n	8002b4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d019      	beq.n	8002b12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <HAL_RCC_OscConfig+0x274>)
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae4:	f7ff fb66 	bl	80021b4 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aec:	f7ff fb62 	bl	80021b4 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e15a      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f000 fad8 	bl	80030c0 <RCC_Delay>
 8002b10:	e01c      	b.n	8002b4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCC_OscConfig+0x274>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b18:	f7ff fb4c 	bl	80021b4 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b1e:	e00f      	b.n	8002b40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b20:	f7ff fb48 	bl	80021b4 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d908      	bls.n	8002b40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e140      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	42420000 	.word	0x42420000
 8002b3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b40:	4b9e      	ldr	r3, [pc, #632]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e9      	bne.n	8002b20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80a6 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b5e:	4b97      	ldr	r3, [pc, #604]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10d      	bne.n	8002b86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b6a:	4b94      	ldr	r3, [pc, #592]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4a93      	ldr	r2, [pc, #588]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b74:	61d3      	str	r3, [r2, #28]
 8002b76:	4b91      	ldr	r3, [pc, #580]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	60bb      	str	r3, [r7, #8]
 8002b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b86:	4b8e      	ldr	r3, [pc, #568]	; (8002dc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d118      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b92:	4b8b      	ldr	r3, [pc, #556]	; (8002dc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a8a      	ldr	r2, [pc, #552]	; (8002dc0 <HAL_RCC_OscConfig+0x4f8>)
 8002b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b9e:	f7ff fb09 	bl	80021b4 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba6:	f7ff fb05 	bl	80021b4 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0fd      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	4b81      	ldr	r3, [pc, #516]	; (8002dc0 <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x312>
 8002bcc:	4b7b      	ldr	r3, [pc, #492]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4a7a      	ldr	r2, [pc, #488]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	e02d      	b.n	8002c36 <HAL_RCC_OscConfig+0x36e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x334>
 8002be2:	4b76      	ldr	r3, [pc, #472]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4a75      	ldr	r2, [pc, #468]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	f023 0301 	bic.w	r3, r3, #1
 8002bec:	6213      	str	r3, [r2, #32]
 8002bee:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a72      	ldr	r2, [pc, #456]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	6213      	str	r3, [r2, #32]
 8002bfa:	e01c      	b.n	8002c36 <HAL_RCC_OscConfig+0x36e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d10c      	bne.n	8002c1e <HAL_RCC_OscConfig+0x356>
 8002c04:	4b6d      	ldr	r3, [pc, #436]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	4a6c      	ldr	r2, [pc, #432]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	f043 0304 	orr.w	r3, r3, #4
 8002c0e:	6213      	str	r3, [r2, #32]
 8002c10:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4a69      	ldr	r2, [pc, #420]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6213      	str	r3, [r2, #32]
 8002c1c:	e00b      	b.n	8002c36 <HAL_RCC_OscConfig+0x36e>
 8002c1e:	4b67      	ldr	r3, [pc, #412]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	4a66      	ldr	r2, [pc, #408]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	6213      	str	r3, [r2, #32]
 8002c2a:	4b64      	ldr	r3, [pc, #400]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4a63      	ldr	r2, [pc, #396]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d015      	beq.n	8002c6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7ff fab9 	bl	80021b4 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7ff fab5 	bl	80021b4 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0ab      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	4b57      	ldr	r3, [pc, #348]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ee      	beq.n	8002c46 <HAL_RCC_OscConfig+0x37e>
 8002c68:	e014      	b.n	8002c94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6a:	f7ff faa3 	bl	80021b4 <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c72:	f7ff fa9f 	bl	80021b4 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e095      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c88:	4b4c      	ldr	r3, [pc, #304]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1ee      	bne.n	8002c72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c94:	7dfb      	ldrb	r3, [r7, #23]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d105      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c9a:	4b48      	ldr	r3, [pc, #288]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4a47      	ldr	r2, [pc, #284]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8081 	beq.w	8002db2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb0:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 030c 	and.w	r3, r3, #12
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d061      	beq.n	8002d80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d146      	bne.n	8002d52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc4:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_RCC_OscConfig+0x4fc>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cca:	f7ff fa73 	bl	80021b4 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7ff fa6f 	bl	80021b4 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e067      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f0      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf8:	d108      	bne.n	8002d0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cfa:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	492d      	ldr	r1, [pc, #180]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a19      	ldr	r1, [r3, #32]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	4927      	ldr	r1, [pc, #156]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d24:	4b27      	ldr	r3, [pc, #156]	; (8002dc4 <HAL_RCC_OscConfig+0x4fc>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7ff fa43 	bl	80021b4 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d32:	f7ff fa3f 	bl	80021b4 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e037      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d44:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCC_OscConfig+0x46a>
 8002d50:	e02f      	b.n	8002db2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d52:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <HAL_RCC_OscConfig+0x4fc>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7ff fa2c 	bl	80021b4 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d60:	f7ff fa28 	bl	80021b4 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e020      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x498>
 8002d7e:	e018      	b.n	8002db2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e013      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40007000 	.word	0x40007000
 8002dc4:	42420060 	.word	0x42420060

08002dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0d0      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b67      	ldr	r3, [pc, #412]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 0207 	bic.w	r2, r3, #7
 8002df2:	4965      	ldr	r1, [pc, #404]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0b8      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e24:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a58      	ldr	r2, [pc, #352]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e3c:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a52      	ldr	r2, [pc, #328]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	494d      	ldr	r1, [pc, #308]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d040      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b47      	ldr	r3, [pc, #284]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d115      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e07f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e86:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e073      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e06b      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea6:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4936      	ldr	r1, [pc, #216]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eb8:	f7ff f97c 	bl	80021b4 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7ff f978 	bl	80021b4 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e053      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d210      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 0207 	bic.w	r2, r3, #7
 8002efe:	4922      	ldr	r1, [pc, #136]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4916      	ldr	r1, [pc, #88]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	490e      	ldr	r1, [pc, #56]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f56:	f000 f821 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	490a      	ldr	r1, [pc, #40]	; (8002f90 <HAL_RCC_ClockConfig+0x1c8>)
 8002f68:	5ccb      	ldrb	r3, [r1, r3]
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1cc>)
 8002f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1d0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f8da 	bl	8002130 <HAL_InitTick>

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40022000 	.word	0x40022000
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	080047f8 	.word	0x080047f8
 8002f94:	200000a0 	.word	0x200000a0
 8002f98:	200000a4 	.word	0x200000a4

08002f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	b490      	push	{r4, r7}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002fa2:	4b2a      	ldr	r3, [pc, #168]	; (800304c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fa4:	1d3c      	adds	r4, r7, #4
 8002fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002fac:	f240 2301 	movw	r3, #513	; 0x201
 8002fb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d002      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x40>
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x46>
 8002fda:	e02d      	b.n	8003038 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fde:	623b      	str	r3, [r7, #32]
      break;
 8002fe0:	e02d      	b.n	800303e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	0c9b      	lsrs	r3, r3, #18
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fee:	4413      	add	r3, r2
 8002ff0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ff4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	0c5b      	lsrs	r3, r3, #17
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800300e:	4413      	add	r3, r2
 8003010:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003014:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <HAL_RCC_GetSysClockFreq+0xb8>)
 800301a:	fb02 f203 	mul.w	r2, r2, r3
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	fbb2 f3f3 	udiv	r3, r2, r3
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
 8003026:	e004      	b.n	8003032 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <HAL_RCC_GetSysClockFreq+0xbc>)
 800302c:	fb02 f303 	mul.w	r3, r2, r3
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	623b      	str	r3, [r7, #32]
      break;
 8003036:	e002      	b.n	800303e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <HAL_RCC_GetSysClockFreq+0xb8>)
 800303a:	623b      	str	r3, [r7, #32]
      break;
 800303c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303e:	6a3b      	ldr	r3, [r7, #32]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3728      	adds	r7, #40	; 0x28
 8003044:	46bd      	mov	sp, r7
 8003046:	bc90      	pop	{r4, r7}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	080047e8 	.word	0x080047e8
 8003050:	40021000 	.word	0x40021000
 8003054:	007a1200 	.word	0x007a1200
 8003058:	003d0900 	.word	0x003d0900

0800305c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b02      	ldr	r3, [pc, #8]	; (800306c <HAL_RCC_GetHCLKFreq+0x10>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	200000a0 	.word	0x200000a0

08003070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003074:	f7ff fff2 	bl	800305c <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4903      	ldr	r1, [pc, #12]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	08004808 	.word	0x08004808

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800309c:	f7ff ffde 	bl	800305c <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	0adb      	lsrs	r3, r3, #11
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4903      	ldr	r1, [pc, #12]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	08004808 	.word	0x08004808

080030c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030c8:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <RCC_Delay+0x34>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <RCC_Delay+0x38>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0a5b      	lsrs	r3, r3, #9
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030dc:	bf00      	nop
  }
  while (Delay --);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1e5a      	subs	r2, r3, #1
 80030e2:	60fa      	str	r2, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f9      	bne.n	80030dc <RCC_Delay+0x1c>
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	200000a0 	.word	0x200000a0
 80030f8:	10624dd3 	.word	0x10624dd3

080030fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e041      	b.n	8003192 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe fd7e 	bl	8001c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3304      	adds	r3, #4
 8003138:	4619      	mov	r1, r3
 800313a:	4610      	mov	r0, r2
 800313c:	f000 fc1c 	bl	8003978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d001      	beq.n	80031b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e035      	b.n	8003220 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a16      	ldr	r2, [pc, #88]	; (800322c <HAL_TIM_Base_Start_IT+0x90>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_TIM_Base_Start_IT+0x4e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031de:	d004      	beq.n	80031ea <HAL_TIM_Base_Start_IT+0x4e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a12      	ldr	r2, [pc, #72]	; (8003230 <HAL_TIM_Base_Start_IT+0x94>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d111      	bne.n	800320e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b06      	cmp	r3, #6
 80031fa:	d010      	beq.n	800321e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320c:	e007      	b.n	800321e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40000400 	.word	0x40000400

08003234 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e041      	b.n	80032ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f839 	bl	80032d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3304      	adds	r3, #4
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f000 fb80 	bl	8003978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d109      	bne.n	8003308 <HAL_TIM_PWM_Start+0x24>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	e022      	b.n	800334e <HAL_TIM_PWM_Start+0x6a>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b04      	cmp	r3, #4
 800330c:	d109      	bne.n	8003322 <HAL_TIM_PWM_Start+0x3e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	e015      	b.n	800334e <HAL_TIM_PWM_Start+0x6a>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d109      	bne.n	800333c <HAL_TIM_PWM_Start+0x58>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e008      	b.n	800334e <HAL_TIM_PWM_Start+0x6a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e059      	b.n	800340a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d104      	bne.n	8003366 <HAL_TIM_PWM_Start+0x82>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003364:	e013      	b.n	800338e <HAL_TIM_PWM_Start+0xaa>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b04      	cmp	r3, #4
 800336a:	d104      	bne.n	8003376 <HAL_TIM_PWM_Start+0x92>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003374:	e00b      	b.n	800338e <HAL_TIM_PWM_Start+0xaa>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d104      	bne.n	8003386 <HAL_TIM_PWM_Start+0xa2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003384:	e003      	b.n	800338e <HAL_TIM_PWM_Start+0xaa>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2201      	movs	r2, #1
 8003394:	6839      	ldr	r1, [r7, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fd64 	bl	8003e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1c      	ldr	r2, [pc, #112]	; (8003414 <HAL_TIM_PWM_Start+0x130>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d107      	bne.n	80033b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a16      	ldr	r2, [pc, #88]	; (8003414 <HAL_TIM_PWM_Start+0x130>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_TIM_PWM_Start+0xf0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d004      	beq.n	80033d4 <HAL_TIM_PWM_Start+0xf0>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a12      	ldr	r2, [pc, #72]	; (8003418 <HAL_TIM_PWM_Start+0x134>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d111      	bne.n	80033f8 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b06      	cmp	r3, #6
 80033e4:	d010      	beq.n	8003408 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f6:	e007      	b.n	8003408 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0201 	orr.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40012c00 	.word	0x40012c00
 8003418:	40000400 	.word	0x40000400

0800341c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d122      	bne.n	8003478 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b02      	cmp	r3, #2
 800343e:	d11b      	bne.n	8003478 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f06f 0202 	mvn.w	r2, #2
 8003448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa6f 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 8003464:	e005      	b.n	8003472 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa62 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fa71 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d122      	bne.n	80034cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b04      	cmp	r3, #4
 8003492:	d11b      	bne.n	80034cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0204 	mvn.w	r2, #4
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fa45 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 fa38 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fa47 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d122      	bne.n	8003520 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d11b      	bne.n	8003520 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0208 	mvn.w	r2, #8
 80034f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2204      	movs	r2, #4
 80034f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa1b 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fa0e 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fa1d 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b10      	cmp	r3, #16
 800352c:	d122      	bne.n	8003574 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b10      	cmp	r3, #16
 800353a:	d11b      	bne.n	8003574 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0210 	mvn.w	r2, #16
 8003544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2208      	movs	r2, #8
 800354a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9f1 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
 8003560:	e005      	b.n	800356e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f9e4 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f9f3 	bl	8003954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0201 	mvn.w	r2, #1
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fe f860 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035aa:	2b80      	cmp	r3, #128	; 0x80
 80035ac:	d10e      	bne.n	80035cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b80      	cmp	r3, #128	; 0x80
 80035ba:	d107      	bne.n	80035cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fcd1 	bl	8003f6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d10e      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d107      	bne.n	80035f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f9b7 	bl	8003966 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b20      	cmp	r3, #32
 8003604:	d10e      	bne.n	8003624 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0320 	and.w	r3, r3, #32
 8003610:	2b20      	cmp	r3, #32
 8003612:	d107      	bne.n	8003624 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0220 	mvn.w	r2, #32
 800361c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fc9c 	bl	8003f5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003642:	2302      	movs	r3, #2
 8003644:	e0ac      	b.n	80037a0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b0c      	cmp	r3, #12
 8003652:	f200 809f 	bhi.w	8003794 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003656:	a201      	add	r2, pc, #4	; (adr r2, 800365c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	08003691 	.word	0x08003691
 8003660:	08003795 	.word	0x08003795
 8003664:	08003795 	.word	0x08003795
 8003668:	08003795 	.word	0x08003795
 800366c:	080036d1 	.word	0x080036d1
 8003670:	08003795 	.word	0x08003795
 8003674:	08003795 	.word	0x08003795
 8003678:	08003795 	.word	0x08003795
 800367c:	08003713 	.word	0x08003713
 8003680:	08003795 	.word	0x08003795
 8003684:	08003795 	.word	0x08003795
 8003688:	08003795 	.word	0x08003795
 800368c:	08003753 	.word	0x08003753
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f9c6 	bl	8003a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0208 	orr.w	r2, r2, #8
 80036aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6999      	ldr	r1, [r3, #24]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	619a      	str	r2, [r3, #24]
      break;
 80036ce:	e062      	b.n	8003796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fa0c 	bl	8003af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6999      	ldr	r1, [r3, #24]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	619a      	str	r2, [r3, #24]
      break;
 8003710:	e041      	b.n	8003796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fa55 	bl	8003bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0208 	orr.w	r2, r2, #8
 800372c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0204 	bic.w	r2, r2, #4
 800373c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69d9      	ldr	r1, [r3, #28]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	61da      	str	r2, [r3, #28]
      break;
 8003750:	e021      	b.n	8003796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fa9f 	bl	8003c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69d9      	ldr	r1, [r3, #28]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	021a      	lsls	r2, r3, #8
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	61da      	str	r2, [r3, #28]
      break;
 8003792:	e000      	b.n	8003796 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIM_ConfigClockSource+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e0b3      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x180>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f8:	d03e      	beq.n	8003878 <HAL_TIM_ConfigClockSource+0xd0>
 80037fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fe:	f200 8087 	bhi.w	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	f000 8085 	beq.w	8003914 <HAL_TIM_ConfigClockSource+0x16c>
 800380a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800380e:	d87f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003810:	2b70      	cmp	r3, #112	; 0x70
 8003812:	d01a      	beq.n	800384a <HAL_TIM_ConfigClockSource+0xa2>
 8003814:	2b70      	cmp	r3, #112	; 0x70
 8003816:	d87b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003818:	2b60      	cmp	r3, #96	; 0x60
 800381a:	d050      	beq.n	80038be <HAL_TIM_ConfigClockSource+0x116>
 800381c:	2b60      	cmp	r3, #96	; 0x60
 800381e:	d877      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003820:	2b50      	cmp	r3, #80	; 0x50
 8003822:	d03c      	beq.n	800389e <HAL_TIM_ConfigClockSource+0xf6>
 8003824:	2b50      	cmp	r3, #80	; 0x50
 8003826:	d873      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d058      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x136>
 800382c:	2b40      	cmp	r3, #64	; 0x40
 800382e:	d86f      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003830:	2b30      	cmp	r3, #48	; 0x30
 8003832:	d064      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x156>
 8003834:	2b30      	cmp	r3, #48	; 0x30
 8003836:	d86b      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003838:	2b20      	cmp	r3, #32
 800383a:	d060      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x156>
 800383c:	2b20      	cmp	r3, #32
 800383e:	d867      	bhi.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d05c      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x156>
 8003844:	2b10      	cmp	r3, #16
 8003846:	d05a      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003848:	e062      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6899      	ldr	r1, [r3, #8]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f000 fae4 	bl	8003e26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800386c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	609a      	str	r2, [r3, #8]
      break;
 8003876:	e04e      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f000 facd 	bl	8003e26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800389a:	609a      	str	r2, [r3, #8]
      break;
 800389c:	e03b      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	461a      	mov	r2, r3
 80038ac:	f000 fa44 	bl	8003d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2150      	movs	r1, #80	; 0x50
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fa9b 	bl	8003df2 <TIM_ITRx_SetConfig>
      break;
 80038bc:	e02b      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 fa62 	bl	8003d94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2160      	movs	r1, #96	; 0x60
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fa8b 	bl	8003df2 <TIM_ITRx_SetConfig>
      break;
 80038dc:	e01b      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f000 fa24 	bl	8003d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2140      	movs	r1, #64	; 0x40
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fa7b 	bl	8003df2 <TIM_ITRx_SetConfig>
      break;
 80038fc:	e00b      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f000 fa72 	bl	8003df2 <TIM_ITRx_SetConfig>
        break;
 800390e:	e002      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003914:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr

08003966 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a25      	ldr	r2, [pc, #148]	; (8003a20 <TIM_Base_SetConfig+0xa8>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d007      	beq.n	80039a0 <TIM_Base_SetConfig+0x28>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003996:	d003      	beq.n	80039a0 <TIM_Base_SetConfig+0x28>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a22      	ldr	r2, [pc, #136]	; (8003a24 <TIM_Base_SetConfig+0xac>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d108      	bne.n	80039b2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1a      	ldr	r2, [pc, #104]	; (8003a20 <TIM_Base_SetConfig+0xa8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <TIM_Base_SetConfig+0x52>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d003      	beq.n	80039ca <TIM_Base_SetConfig+0x52>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a17      	ldr	r2, [pc, #92]	; (8003a24 <TIM_Base_SetConfig+0xac>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d108      	bne.n	80039dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a07      	ldr	r2, [pc, #28]	; (8003a20 <TIM_Base_SetConfig+0xa8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d103      	bne.n	8003a10 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	615a      	str	r2, [r3, #20]
}
 8003a16:	bf00      	nop
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40000400 	.word	0x40000400

08003a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f023 0201 	bic.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f023 0302 	bic.w	r3, r3, #2
 8003a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a1c      	ldr	r2, [pc, #112]	; (8003af0 <TIM_OC1_SetConfig+0xc8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d10c      	bne.n	8003a9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f023 0308 	bic.w	r3, r3, #8
 8003a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 0304 	bic.w	r3, r3, #4
 8003a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <TIM_OC1_SetConfig+0xc8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d111      	bne.n	8003aca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40012c00 	.word	0x40012c00

08003af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f023 0210 	bic.w	r2, r3, #16
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f023 0320 	bic.w	r3, r3, #32
 8003b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	011b      	lsls	r3, r3, #4
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <TIM_OC2_SetConfig+0xd0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d10d      	bne.n	8003b70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a14      	ldr	r2, [pc, #80]	; (8003bc4 <TIM_OC2_SetConfig+0xd0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d113      	bne.n	8003ba0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	621a      	str	r2, [r3, #32]
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr
 8003bc4:	40012c00 	.word	0x40012c00

08003bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0303 	bic.w	r3, r3, #3
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <TIM_OC3_SetConfig+0xd0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10d      	bne.n	8003c42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <TIM_OC3_SetConfig+0xd0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d113      	bne.n	8003c72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	621a      	str	r2, [r3, #32]
}
 8003c8c:	bf00      	nop
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40012c00 	.word	0x40012c00

08003c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	031b      	lsls	r3, r3, #12
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a0f      	ldr	r2, [pc, #60]	; (8003d34 <TIM_OC4_SetConfig+0x98>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d109      	bne.n	8003d10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
 8003d08:	019b      	lsls	r3, r3, #6
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	40012c00 	.word	0x40012c00

08003d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f023 0201 	bic.w	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f023 030a 	bic.w	r3, r3, #10
 8003d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	f023 0210 	bic.w	r2, r3, #16
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	031b      	lsls	r3, r3, #12
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	621a      	str	r2, [r3, #32]
}
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f043 0307 	orr.w	r3, r3, #7
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr

08003e26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b087      	sub	sp, #28
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	607a      	str	r2, [r7, #4]
 8003e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	021a      	lsls	r2, r3, #8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	609a      	str	r2, [r3, #8]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2201      	movs	r2, #1
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1a      	ldr	r2, [r3, #32]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	401a      	ands	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a1a      	ldr	r2, [r3, #32]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	fa01 f303 	lsl.w	r3, r1, r3
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e041      	b.n	8003f48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f10:	d004      	beq.n	8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a10      	ldr	r2, [pc, #64]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d10c      	bne.n	8003f36 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40012c00 	.word	0x40012c00
 8003f58:	40000400 	.word	0x40000400

08003f5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e03f      	b.n	8004012 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d106      	bne.n	8003fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7fd fe90 	bl	8001ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2224      	movs	r2, #36	; 0x24
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fb49 	bl	800465c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695a      	ldr	r2, [r3, #20]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800403c:	2300      	movs	r3, #0
 800403e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10d      	bne.n	800406e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	f003 0320 	and.w	r3, r3, #32
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_UART_IRQHandler+0x52>
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fa4f 	bl	800450a <UART_Receive_IT>
      return;
 800406c:	e17b      	b.n	8004366 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80b1 	beq.w	80041d8 <HAL_UART_IRQHandler+0x1bc>
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_UART_IRQHandler+0x70>
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80a6 	beq.w	80041d8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_UART_IRQHandler+0x90>
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f043 0201 	orr.w	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_UART_IRQHandler+0xb0>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f043 0202 	orr.w	r2, r3, #2
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_UART_IRQHandler+0xd0>
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	f043 0204 	orr.w	r2, r3, #4
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00f      	beq.n	8004116 <HAL_UART_IRQHandler+0xfa>
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d104      	bne.n	800410a <HAL_UART_IRQHandler+0xee>
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f043 0208 	orr.w	r2, r3, #8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 811e 	beq.w	800435c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d007      	beq.n	800413a <HAL_UART_IRQHandler+0x11e>
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f9e8 	bl	800450a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <HAL_UART_IRQHandler+0x146>
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d031      	beq.n	80041c6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f92a 	bl	80043bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d023      	beq.n	80041be <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004184:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	2b00      	cmp	r3, #0
 800418c:	d013      	beq.n	80041b6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	4a76      	ldr	r2, [pc, #472]	; (800436c <HAL_UART_IRQHandler+0x350>)
 8004194:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe f95c 	bl	8002458 <HAL_DMA_Abort_IT>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041b0:	4610      	mov	r0, r2
 80041b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	e00e      	b.n	80041d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8ec 	bl	8004394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041bc:	e00a      	b.n	80041d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8e8 	bl	8004394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c4:	e006      	b.n	80041d4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f8e4 	bl	8004394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041d2:	e0c3      	b.n	800435c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	bf00      	nop
    return;
 80041d6:	e0c1      	b.n	800435c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	2b01      	cmp	r3, #1
 80041de:	f040 80a1 	bne.w	8004324 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 809b 	beq.w	8004324 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8095 	beq.w	8004324 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421a:	2b00      	cmp	r3, #0
 800421c:	d04e      	beq.n	80042bc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004228:	8a3b      	ldrh	r3, [r7, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 8098 	beq.w	8004360 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004234:	8a3a      	ldrh	r2, [r7, #16]
 8004236:	429a      	cmp	r2, r3
 8004238:	f080 8092 	bcs.w	8004360 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8a3a      	ldrh	r2, [r7, #16]
 8004240:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b20      	cmp	r3, #32
 800424a:	d02b      	beq.n	80042a4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800425a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695a      	ldr	r2, [r3, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800427a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0210 	bic.w	r2, r2, #16
 8004298:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe f89f 	bl	80023e2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	4619      	mov	r1, r3
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f876 	bl	80043a6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042ba:	e051      	b.n	8004360 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d047      	beq.n	8004364 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80042d4:	8a7b      	ldrh	r3, [r7, #18]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d044      	beq.n	8004364 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042e8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68da      	ldr	r2, [r3, #12]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0210 	bic.w	r2, r2, #16
 8004316:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004318:	8a7b      	ldrh	r3, [r7, #18]
 800431a:	4619      	mov	r1, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f842 	bl	80043a6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004322:	e01f      	b.n	8004364 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <HAL_UART_IRQHandler+0x324>
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f87f 	bl	800443c <UART_Transmit_IT>
    return;
 800433e:	e012      	b.n	8004366 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <HAL_UART_IRQHandler+0x34a>
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f8c0 	bl	80044da <UART_EndTransmit_IT>
    return;
 800435a:	e004      	b.n	8004366 <HAL_UART_IRQHandler+0x34a>
    return;
 800435c:	bf00      	nop
 800435e:	e002      	b.n	8004366 <HAL_UART_IRQHandler+0x34a>
      return;
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <HAL_UART_IRQHandler+0x34a>
      return;
 8004364:	bf00      	nop
  }
}
 8004366:	3728      	adds	r7, #40	; 0x28
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	08004415 	.word	0x08004415

08004370 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr

08004382 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
 80043ae:	460b      	mov	r3, r1
 80043b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043d2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0201 	bic.w	r2, r2, #1
 80043e2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d107      	bne.n	80043fc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0210 	bic.w	r2, r2, #16
 80043fa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7ff ffb0 	bl	8004394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b21      	cmp	r3, #33	; 0x21
 800444e:	d13e      	bne.n	80044ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004458:	d114      	bne.n	8004484 <UART_Transmit_IT+0x48>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d110      	bne.n	8004484 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004476:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	1c9a      	adds	r2, r3, #2
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	621a      	str	r2, [r3, #32]
 8004482:	e008      	b.n	8004496 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	1c59      	adds	r1, r3, #1
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6211      	str	r1, [r2, #32]
 800448e:	781a      	ldrb	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29b      	uxth	r3, r3
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	4619      	mov	r1, r3
 80044a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10f      	bne.n	80044ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e000      	b.n	80044d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr

080044da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68da      	ldr	r2, [r3, #12]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff ff38 	bl	8004370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b22      	cmp	r3, #34	; 0x22
 800451c:	f040 8099 	bne.w	8004652 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004528:	d117      	bne.n	800455a <UART_Receive_IT+0x50>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d113      	bne.n	800455a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	b29b      	uxth	r3, r3
 8004544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004548:	b29a      	uxth	r2, r3
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	1c9a      	adds	r2, r3, #2
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
 8004558:	e026      	b.n	80045a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456c:	d007      	beq.n	800457e <UART_Receive_IT+0x74>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <UART_Receive_IT+0x82>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e008      	b.n	800459e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004598:	b2da      	uxtb	r2, r3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4619      	mov	r1, r3
 80045b6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d148      	bne.n	800464e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0220 	bic.w	r2, r2, #32
 80045ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0201 	bic.w	r2, r2, #1
 80045ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d123      	bne.n	8004644 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0210 	bic.w	r2, r2, #16
 8004610:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b10      	cmp	r3, #16
 800461e:	d10a      	bne.n	8004636 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800463a:	4619      	mov	r1, r3
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff feb2 	bl	80043a6 <HAL_UARTEx_RxEventCallback>
 8004642:	e002      	b.n	800464a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff fe9c 	bl	8004382 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e002      	b.n	8004654 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	e000      	b.n	8004654 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004696:	f023 030c 	bic.w	r3, r3, #12
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	68b9      	ldr	r1, [r7, #8]
 80046a0:	430b      	orrs	r3, r1
 80046a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2c      	ldr	r2, [pc, #176]	; (8004770 <UART_SetConfig+0x114>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d103      	bne.n	80046cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046c4:	f7fe fce8 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	e002      	b.n	80046d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046cc:	f7fe fcd0 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 80046d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009a      	lsls	r2, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	4a22      	ldr	r2, [pc, #136]	; (8004774 <UART_SetConfig+0x118>)
 80046ea:	fba2 2303 	umull	r2, r3, r2, r3
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	0119      	lsls	r1, r3, #4
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009a      	lsls	r2, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	fbb2 f2f3 	udiv	r2, r2, r3
 8004708:	4b1a      	ldr	r3, [pc, #104]	; (8004774 <UART_SetConfig+0x118>)
 800470a:	fba3 0302 	umull	r0, r3, r3, r2
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	2064      	movs	r0, #100	; 0x64
 8004712:	fb00 f303 	mul.w	r3, r0, r3
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	3332      	adds	r3, #50	; 0x32
 800471c:	4a15      	ldr	r2, [pc, #84]	; (8004774 <UART_SetConfig+0x118>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004728:	4419      	add	r1, r3
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009a      	lsls	r2, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004740:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <UART_SetConfig+0x118>)
 8004742:	fba3 0302 	umull	r0, r3, r3, r2
 8004746:	095b      	lsrs	r3, r3, #5
 8004748:	2064      	movs	r0, #100	; 0x64
 800474a:	fb00 f303 	mul.w	r3, r0, r3
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	3332      	adds	r3, #50	; 0x32
 8004754:	4a07      	ldr	r2, [pc, #28]	; (8004774 <UART_SetConfig+0x118>)
 8004756:	fba2 2303 	umull	r2, r3, r2, r3
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	f003 020f 	and.w	r2, r3, #15
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	440a      	add	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40013800 	.word	0x40013800
 8004774:	51eb851f 	.word	0x51eb851f

08004778 <__libc_init_array>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	2600      	movs	r6, #0
 800477c:	4d0c      	ldr	r5, [pc, #48]	; (80047b0 <__libc_init_array+0x38>)
 800477e:	4c0d      	ldr	r4, [pc, #52]	; (80047b4 <__libc_init_array+0x3c>)
 8004780:	1b64      	subs	r4, r4, r5
 8004782:	10a4      	asrs	r4, r4, #2
 8004784:	42a6      	cmp	r6, r4
 8004786:	d109      	bne.n	800479c <__libc_init_array+0x24>
 8004788:	f000 f822 	bl	80047d0 <_init>
 800478c:	2600      	movs	r6, #0
 800478e:	4d0a      	ldr	r5, [pc, #40]	; (80047b8 <__libc_init_array+0x40>)
 8004790:	4c0a      	ldr	r4, [pc, #40]	; (80047bc <__libc_init_array+0x44>)
 8004792:	1b64      	subs	r4, r4, r5
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	42a6      	cmp	r6, r4
 8004798:	d105      	bne.n	80047a6 <__libc_init_array+0x2e>
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a0:	4798      	blx	r3
 80047a2:	3601      	adds	r6, #1
 80047a4:	e7ee      	b.n	8004784 <__libc_init_array+0xc>
 80047a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80047aa:	4798      	blx	r3
 80047ac:	3601      	adds	r6, #1
 80047ae:	e7f2      	b.n	8004796 <__libc_init_array+0x1e>
 80047b0:	08004810 	.word	0x08004810
 80047b4:	08004810 	.word	0x08004810
 80047b8:	08004810 	.word	0x08004810
 80047bc:	08004814 	.word	0x08004814

080047c0 <memset>:
 80047c0:	4603      	mov	r3, r0
 80047c2:	4402      	add	r2, r0
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d100      	bne.n	80047ca <memset+0xa>
 80047c8:	4770      	bx	lr
 80047ca:	f803 1b01 	strb.w	r1, [r3], #1
 80047ce:	e7f9      	b.n	80047c4 <memset+0x4>

080047d0 <_init>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr

080047dc <_fini>:
 80047dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047de:	bf00      	nop
 80047e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047e2:	bc08      	pop	{r3}
 80047e4:	469e      	mov	lr, r3
 80047e6:	4770      	bx	lr
