
BTL_F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000462c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004760  08004760  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08004760  08004760  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004760  08004760  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08004768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000ac  08004814  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08004814  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6a1  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f5  00000000  00000000  0002e776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00031a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a64  00000000  00000000  00032838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffc7  00000000  00000000  0004a29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000853da  00000000  00000000  0005a263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df63d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000df690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08004720 	.word	0x08004720

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	08004720 	.word	0x08004720

0800014c <isButton_BUT1_Pressed>:
int button_BUT3_LongPressed_flag = 0;
int button_PEDES_LongPressed_flag = 0;


int isButton_BUT1_Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_BUT1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton_BUT1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton_BUT1_Pressed+0x16>
	{
		button_BUT1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton_BUT1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton_BUT1_Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000c8 	.word	0x200000c8

08000170 <isButton_BUT2_Pressed>:
int isButton_BUT2_Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_BUT2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton_BUT2_Pressed+0x16>
	{
		button_BUT2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton_BUT2_Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000cc 	.word	0x200000cc

08000194 <isButton_BUT3_Pressed>:
int isButton_BUT3_Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_BUT3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton_BUT3_Pressed+0x16>
	{
		button_BUT3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton_BUT3_Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000d0 	.word	0x200000d0

080001b8 <isButton_Pedes_Pressed>:
int isButton_Pedes_Pressed()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button_PEDES_flag == 1)
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton_Pedes_Pressed+0x16>
	{
		button_PEDES_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton_Pedes_Pressed+0x18>
	}
	else return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200000d4 	.word	0x200000d4

080001dc <getKeyInput>:
	else return 0;
}


void getKeyInput()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e187      	b.n	80004f8 <getKeyInput+0x31c>
		// button debouncing
		keyReg0[i] = keyReg1[i];
 80001e8:	4a7f      	ldr	r2, [pc, #508]	; (80003e8 <getKeyInput+0x20c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	497e      	ldr	r1, [pc, #504]	; (80003ec <getKeyInput+0x210>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001f8:	4a7d      	ldr	r2, [pc, #500]	; (80003f0 <getKeyInput+0x214>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4979      	ldr	r1, [pc, #484]	; (80003e8 <getKeyInput+0x20c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//handle button 1
		if(i == 0){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d154      	bne.n	80002b8 <getKeyInput+0xdc>
			keyReg2[i] = HAL_GPIO_ReadPin(A1_BUTTON1_GPIO_Port, A1_BUTTON1_Pin);
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	4878      	ldr	r0, [pc, #480]	; (80003f4 <getKeyInput+0x218>)
 8000214:	f002 fab8 	bl	8002788 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	4619      	mov	r1, r3
 800021c:	4a74      	ldr	r2, [pc, #464]	; (80003f0 <getKeyInput+0x214>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000224:	4a71      	ldr	r2, [pc, #452]	; (80003ec <getKeyInput+0x210>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	496e      	ldr	r1, [pc, #440]	; (80003e8 <getKeyInput+0x20c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d13f      	bne.n	80002b8 <getKeyInput+0xdc>
 8000238:	4a6b      	ldr	r2, [pc, #428]	; (80003e8 <getKeyInput+0x20c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	496b      	ldr	r1, [pc, #428]	; (80003f0 <getKeyInput+0x214>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d135      	bne.n	80002b8 <getKeyInput+0xdc>
			{
				 //case short pressed
				if(keyReg3[i] != keyReg2[i])
 800024c:	4a6a      	ldr	r2, [pc, #424]	; (80003f8 <getKeyInput+0x21c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4966      	ldr	r1, [pc, #408]	; (80003f0 <getKeyInput+0x214>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d015      	beq.n	800028c <getKeyInput+0xb0>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 8000260:	4a63      	ldr	r2, [pc, #396]	; (80003f0 <getKeyInput+0x214>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	4963      	ldr	r1, [pc, #396]	; (80003f8 <getKeyInput+0x21c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000270:	4a5f      	ldr	r2, [pc, #380]	; (80003f0 <getKeyInput+0x214>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d11d      	bne.n	80002b8 <getKeyInput+0xdc>
					{
						//TODO
						button_BUT1_flag = 1;
 800027c:	4b5f      	ldr	r3, [pc, #380]	; (80003fc <getKeyInput+0x220>)
 800027e:	2201      	movs	r2, #1
 8000280:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000282:	4b5f      	ldr	r3, [pc, #380]	; (8000400 <getKeyInput+0x224>)
 8000284:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	e015      	b.n	80002b8 <getKeyInput+0xdc>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800028c:	4a58      	ldr	r2, [pc, #352]	; (80003f0 <getKeyInput+0x214>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10f      	bne.n	80002b8 <getKeyInput+0xdc>
						timerForKeyPress--;
 8000298:	4b59      	ldr	r3, [pc, #356]	; (8000400 <getKeyInput+0x224>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a58      	ldr	r2, [pc, #352]	; (8000400 <getKeyInput+0x224>)
 80002a0:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80002a2:	4b57      	ldr	r3, [pc, #348]	; (8000400 <getKeyInput+0x224>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d106      	bne.n	80002b8 <getKeyInput+0xdc>
						{
							//TODO
							button_BUT1_LongPressed_flag = 1;
 80002aa:	4b56      	ldr	r3, [pc, #344]	; (8000404 <getKeyInput+0x228>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80002b0:	4b53      	ldr	r3, [pc, #332]	; (8000400 <getKeyInput+0x224>)
 80002b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002b6:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 2
		if(i == 1){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d153      	bne.n	8000366 <getKeyInput+0x18a>
			keyReg2[i] = HAL_GPIO_ReadPin(A2_BUTTON2_GPIO_Port, A2_BUTTON2_Pin);
 80002be:	2120      	movs	r1, #32
 80002c0:	4851      	ldr	r0, [pc, #324]	; (8000408 <getKeyInput+0x22c>)
 80002c2:	f002 fa61 	bl	8002788 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4619      	mov	r1, r3
 80002ca:	4a49      	ldr	r2, [pc, #292]	; (80003f0 <getKeyInput+0x214>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80002d2:	4a46      	ldr	r2, [pc, #280]	; (80003ec <getKeyInput+0x210>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002da:	4943      	ldr	r1, [pc, #268]	; (80003e8 <getKeyInput+0x20c>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d13f      	bne.n	8000366 <getKeyInput+0x18a>
 80002e6:	4a40      	ldr	r2, [pc, #256]	; (80003e8 <getKeyInput+0x20c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ee:	4940      	ldr	r1, [pc, #256]	; (80003f0 <getKeyInput+0x214>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d135      	bne.n	8000366 <getKeyInput+0x18a>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80002fa:	4a3f      	ldr	r2, [pc, #252]	; (80003f8 <getKeyInput+0x21c>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000302:	493b      	ldr	r1, [pc, #236]	; (80003f0 <getKeyInput+0x214>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800030a:	429a      	cmp	r2, r3
 800030c:	d015      	beq.n	800033a <getKeyInput+0x15e>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 800030e:	4a38      	ldr	r2, [pc, #224]	; (80003f0 <getKeyInput+0x214>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000316:	4938      	ldr	r1, [pc, #224]	; (80003f8 <getKeyInput+0x21c>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 800031e:	4a34      	ldr	r2, [pc, #208]	; (80003f0 <getKeyInput+0x214>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11d      	bne.n	8000366 <getKeyInput+0x18a>
					{
						//TODO
						button_BUT2_flag = 1;
 800032a:	4b38      	ldr	r3, [pc, #224]	; (800040c <getKeyInput+0x230>)
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000330:	4b33      	ldr	r3, [pc, #204]	; (8000400 <getKeyInput+0x224>)
 8000332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	e015      	b.n	8000366 <getKeyInput+0x18a>
					}
				}
				else// key long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800033a:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <getKeyInput+0x214>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10f      	bne.n	8000366 <getKeyInput+0x18a>
						timerForKeyPress--;
 8000346:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <getKeyInput+0x224>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a2c      	ldr	r2, [pc, #176]	; (8000400 <getKeyInput+0x224>)
 800034e:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <getKeyInput+0x224>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d106      	bne.n	8000366 <getKeyInput+0x18a>
						{
							//TODO
							button_BUT2_LongPressed_flag = 1;
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <getKeyInput+0x234>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <getKeyInput+0x224>)
 8000360:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000364:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 3
		if(i == 2){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d16b      	bne.n	8000444 <getKeyInput+0x268>
			keyReg2[i] = HAL_GPIO_ReadPin(A3_BUTTON3_GPIO_Port, A3_BUTTON3_Pin);
 800036c:	2101      	movs	r1, #1
 800036e:	4821      	ldr	r0, [pc, #132]	; (80003f4 <getKeyInput+0x218>)
 8000370:	f002 fa0a 	bl	8002788 <HAL_GPIO_ReadPin>
 8000374:	4603      	mov	r3, r0
 8000376:	4619      	mov	r1, r3
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <getKeyInput+0x214>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000380:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <getKeyInput+0x210>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000388:	4917      	ldr	r1, [pc, #92]	; (80003e8 <getKeyInput+0x20c>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000390:	429a      	cmp	r2, r3
 8000392:	d157      	bne.n	8000444 <getKeyInput+0x268>
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <getKeyInput+0x20c>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <getKeyInput+0x214>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d14d      	bne.n	8000444 <getKeyInput+0x268>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <getKeyInput+0x21c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b0:	490f      	ldr	r1, [pc, #60]	; (80003f0 <getKeyInput+0x214>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d02d      	beq.n	8000418 <getKeyInput+0x23c>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <getKeyInput+0x214>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <getKeyInput+0x21c>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80003cc:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <getKeyInput+0x214>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d135      	bne.n	8000444 <getKeyInput+0x268>
					{
						//TODO
						button_BUT3_flag = 1;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <getKeyInput+0x238>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <getKeyInput+0x224>)
 80003e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e02d      	b.n	8000444 <getKeyInput+0x268>
 80003e8:	20000010 	.word	0x20000010
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000020 	.word	0x20000020
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	20000030 	.word	0x20000030
 80003fc:	200000c8 	.word	0x200000c8
 8000400:	20000040 	.word	0x20000040
 8000404:	200000d8 	.word	0x200000d8
 8000408:	40010800 	.word	0x40010800
 800040c:	200000cc 	.word	0x200000cc
 8000410:	200000dc 	.word	0x200000dc
 8000414:	200000d0 	.word	0x200000d0
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <getKeyInput+0x330>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10f      	bne.n	8000444 <getKeyInput+0x268>
						timerForKeyPress--;
 8000424:	4b3a      	ldr	r3, [pc, #232]	; (8000510 <getKeyInput+0x334>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	4a39      	ldr	r2, [pc, #228]	; (8000510 <getKeyInput+0x334>)
 800042c:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <getKeyInput+0x334>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d106      	bne.n	8000444 <getKeyInput+0x268>
						{
							//TODO
							button_BUT3_LongPressed_flag = 1;
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <getKeyInput+0x338>)
 8000438:	2201      	movs	r2, #1
 800043a:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <getKeyInput+0x334>)
 800043e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000442:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button pedestrian
		if(i == 3){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d153      	bne.n	80004f2 <getKeyInput+0x316>
			keyReg2[i] = HAL_GPIO_ReadPin(A0_PEDES_BUTTON_GPIO_Port, A0_PEDES_BUTTON_Pin);
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	4832      	ldr	r0, [pc, #200]	; (8000518 <getKeyInput+0x33c>)
 800044e:	f002 f99b 	bl	8002788 <HAL_GPIO_ReadPin>
 8000452:	4603      	mov	r3, r0
 8000454:	4619      	mov	r1, r3
 8000456:	4a2d      	ldr	r2, [pc, #180]	; (800050c <getKeyInput+0x330>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 800045e:	4a2f      	ldr	r2, [pc, #188]	; (800051c <getKeyInput+0x340>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000466:	492e      	ldr	r1, [pc, #184]	; (8000520 <getKeyInput+0x344>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800046e:	429a      	cmp	r2, r3
 8000470:	d13f      	bne.n	80004f2 <getKeyInput+0x316>
 8000472:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <getKeyInput+0x344>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047a:	4924      	ldr	r1, [pc, #144]	; (800050c <getKeyInput+0x330>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000482:	429a      	cmp	r2, r3
 8000484:	d135      	bne.n	80004f2 <getKeyInput+0x316>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 8000486:	4a27      	ldr	r2, [pc, #156]	; (8000524 <getKeyInput+0x348>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	491f      	ldr	r1, [pc, #124]	; (800050c <getKeyInput+0x330>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000496:	429a      	cmp	r2, r3
 8000498:	d015      	beq.n	80004c6 <getKeyInput+0x2ea>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <getKeyInput+0x330>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a2:	4920      	ldr	r1, [pc, #128]	; (8000524 <getKeyInput+0x348>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80004aa:	4a18      	ldr	r2, [pc, #96]	; (800050c <getKeyInput+0x330>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d11d      	bne.n	80004f2 <getKeyInput+0x316>
					{
						//TODO
						button_PEDES_flag = 1;
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <getKeyInput+0x34c>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <getKeyInput+0x334>)
 80004be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	e015      	b.n	80004f2 <getKeyInput+0x316>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <getKeyInput+0x330>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d10f      	bne.n	80004f2 <getKeyInput+0x316>
						timerForKeyPress--;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <getKeyInput+0x334>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <getKeyInput+0x334>)
 80004da:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <getKeyInput+0x334>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d106      	bne.n	80004f2 <getKeyInput+0x316>
						{
							//TODO
							button_PEDES_LongPressed_flag = 1;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <getKeyInput+0x350>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <getKeyInput+0x334>)
 80004ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004f0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f77f ae74 	ble.w	80001e8 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000020 	.word	0x20000020
 8000510:	20000040 	.word	0x20000040
 8000514:	200000e0 	.word	0x200000e0
 8000518:	40010800 	.word	0x40010800
 800051c:	20000000 	.word	0x20000000
 8000520:	20000010 	.word	0x20000010
 8000524:	20000030 	.word	0x20000030
 8000528:	200000d4 	.word	0x200000d4
 800052c:	200000e4 	.word	0x200000e4

08000530 <FSM_Buzzer>:

//int FSM_Buzzer_State = OFF;

TIM_HandleTypeDef htim2;

void FSM_Buzzer(){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	switch(FSM_Buzzer_State){
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <FSM_Buzzer+0x88>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b35      	cmp	r3, #53	; 0x35
 800053a:	d019      	beq.n	8000570 <FSM_Buzzer+0x40>
 800053c:	2b35      	cmp	r3, #53	; 0x35
 800053e:	dc35      	bgt.n	80005ac <FSM_Buzzer+0x7c>
 8000540:	2b32      	cmp	r3, #50	; 0x32
 8000542:	d002      	beq.n	800054a <FSM_Buzzer+0x1a>
 8000544:	2b33      	cmp	r3, #51	; 0x33
 8000546:	d005      	beq.n	8000554 <FSM_Buzzer+0x24>
			FSM_Buzzer_State = OFF;
//			set_off_buzzer();
		}
		break;
	default:
		break;
 8000548:	e030      	b.n	80005ac <FSM_Buzzer+0x7c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800054a:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <FSM_Buzzer+0x8c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000552:	e02e      	b.n	80005b2 <FSM_Buzzer+0x82>
		if(timer32_flag==1){  //end 1s
 8000554:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <FSM_Buzzer+0x90>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d103      	bne.n	8000564 <FSM_Buzzer+0x34>
			FSM_Buzzer_State = OFF;
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <FSM_Buzzer+0x88>)
 800055e:	2232      	movs	r2, #50	; 0x32
 8000560:	601a      	str	r2, [r3, #0]
		break;
 8000562:	e026      	b.n	80005b2 <FSM_Buzzer+0x82>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 399);
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <FSM_Buzzer+0x8c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f240 128f 	movw	r2, #399	; 0x18f
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800056e:	e020      	b.n	80005b2 <FSM_Buzzer+0x82>
		if(time_red_horizontal_temp < 4 ){
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <FSM_Buzzer+0x94>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b03      	cmp	r3, #3
 8000576:	dc15      	bgt.n	80005a4 <FSM_Buzzer+0x74>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,Increase_Duty_Cycle);
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <FSM_Buzzer+0x98>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <FSM_Buzzer+0x8c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	635a      	str	r2, [r3, #52]	; 0x34
			set_on_buzzer();
 8000582:	f001 fd35 	bl	8001ff0 <set_on_buzzer>
			Increase_Duty_Cycle += 50;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <FSM_Buzzer+0x98>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3332      	adds	r3, #50	; 0x32
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <FSM_Buzzer+0x98>)
 800058e:	6013      	str	r3, [r2, #0]
			if(Increase_Duty_Cycle >= 999){
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <FSM_Buzzer+0x98>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000598:	4293      	cmp	r3, r2
 800059a:	dd09      	ble.n	80005b0 <FSM_Buzzer+0x80>
				Increase_Duty_Cycle = 99;
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <FSM_Buzzer+0x98>)
 800059e:	2263      	movs	r2, #99	; 0x63
 80005a0:	601a      	str	r2, [r3, #0]
		break;
 80005a2:	e005      	b.n	80005b0 <FSM_Buzzer+0x80>
			FSM_Buzzer_State = OFF;
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <FSM_Buzzer+0x88>)
 80005a6:	2232      	movs	r2, #50	; 0x32
 80005a8:	601a      	str	r2, [r3, #0]
		break;
 80005aa:	e001      	b.n	80005b0 <FSM_Buzzer+0x80>
		break;
 80005ac:	bf00      	nop
 80005ae:	e000      	b.n	80005b2 <FSM_Buzzer+0x82>
		break;
 80005b0:	bf00      	nop
	}
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000094 	.word	0x20000094
 80005bc:	2000019c 	.word	0x2000019c
 80005c0:	20000154 	.word	0x20000154
 80005c4:	20000070 	.word	0x20000070
 80005c8:	20000098 	.word	0x20000098

080005cc <fsm_7SEG_horizontal_run>:
#include "control_7SEG.h"

int status_7SEG_horizontal = display_countDown_horizontal;


void fsm_7SEG_horizontal_run(){
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	switch(status_7SEG_horizontal){
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <fsm_7SEG_horizontal_run+0x88>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	2b0f      	cmp	r3, #15
 80005d8:	d837      	bhi.n	800064a <fsm_7SEG_horizontal_run+0x7e>
 80005da:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <fsm_7SEG_horizontal_run+0x14>)
 80005dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e0:	0800064b 	.word	0x0800064b
 80005e4:	0800064b 	.word	0x0800064b
 80005e8:	0800064b 	.word	0x0800064b
 80005ec:	0800064b 	.word	0x0800064b
 80005f0:	0800064b 	.word	0x0800064b
 80005f4:	0800064b 	.word	0x0800064b
 80005f8:	0800064b 	.word	0x0800064b
 80005fc:	0800064b 	.word	0x0800064b
 8000600:	0800064b 	.word	0x0800064b
 8000604:	0800064b 	.word	0x0800064b
 8000608:	0800064b 	.word	0x0800064b
 800060c:	0800064b 	.word	0x0800064b
 8000610:	0800064b 	.word	0x0800064b
 8000614:	08000621 	.word	0x08000621
 8000618:	0800062f 	.word	0x0800062f
 800061c:	0800063d 	.word	0x0800063d
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
		case display_mode02:
			_7SEG_buffer_horizontal[0] = 0;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 2;
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 8000628:	2202      	movs	r2, #2
 800062a:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 800062c:	e00e      	b.n	800064c <fsm_7SEG_horizontal_run+0x80>
		case display_mode03:
			_7SEG_buffer_horizontal[0] = 0;
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 3;
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 8000636:	2203      	movs	r2, #3
 8000638:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 800063a:	e007      	b.n	800064c <fsm_7SEG_horizontal_run+0x80>
		case display_mode04:
			_7SEG_buffer_horizontal[0] = 0;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 4;
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 8000644:	2204      	movs	r2, #4
 8000646:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 8000648:	e000      	b.n	800064c <fsm_7SEG_horizontal_run+0x80>
		case off_horizontal:
//			off7SEG_horizontal();
			break;
		default:
			break;
 800064a:	bf00      	nop
	}
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	20000044 	.word	0x20000044
 8000658:	2000018c 	.word	0x2000018c

0800065c <fsm_7SEG_vertical_run>:

int status_7SEG_vertical = display_countDown_vertical;



void fsm_7SEG_vertical_run(){
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	switch(status_7SEG_vertical){
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <fsm_7SEG_vertical_run+0x2c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b10      	cmp	r3, #16
 8000666:	d006      	beq.n	8000676 <fsm_7SEG_vertical_run+0x1a>
 8000668:	2b10      	cmp	r3, #16
 800066a:	dc06      	bgt.n	800067a <fsm_7SEG_vertical_run+0x1e>
 800066c:	f113 0f02 	cmn.w	r3, #2
 8000670:	d005      	beq.n	800067e <fsm_7SEG_vertical_run+0x22>
 8000672:	2b0f      	cmp	r3, #15
			break;
		case off_vertical:
//			off7SEG_vertical();
			break;
		default:
			break;
 8000674:	e001      	b.n	800067a <fsm_7SEG_vertical_run+0x1e>
			break;
 8000676:	bf00      	nop
 8000678:	e002      	b.n	8000680 <fsm_7SEG_vertical_run+0x24>
			break;
 800067a:	bf00      	nop
 800067c:	e000      	b.n	8000680 <fsm_7SEG_vertical_run+0x24>
			break;
 800067e:	bf00      	nop
	}
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	20000048 	.word	0x20000048

0800068c <fsm_mannual_run>:
#include "button.h"
#include "fsm_traffic_blink.h"

status_mannual = mannual_init;

void fsm_mannual_run(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	switch(status_mannual){
 8000690:	4b54      	ldr	r3, [pc, #336]	; (80007e4 <fsm_mannual_run+0x158>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3b3c      	subs	r3, #60	; 0x3c
 8000696:	2b03      	cmp	r3, #3
 8000698:	f200 80a1 	bhi.w	80007de <fsm_mannual_run+0x152>
 800069c:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <fsm_mannual_run+0x18>)
 800069e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a2:	bf00      	nop
 80006a4:	080006b5 	.word	0x080006b5
 80006a8:	080006c5 	.word	0x080006c5
 80006ac:	08000723 	.word	0x08000723
 80006b0:	08000781 	.word	0x08000781
		case mannual_init:
			status_mannual = mannual_red;
 80006b4:	4b4b      	ldr	r3, [pc, #300]	; (80007e4 <fsm_mannual_run+0x158>)
 80006b6:	223d      	movs	r2, #61	; 0x3d
 80006b8:	601a      	str	r2, [r3, #0]
			setTimer9(5000);
 80006ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80006be:	f001 f83f 	bl	8001740 <setTimer9>
			break;
 80006c2:	e08d      	b.n	80007e0 <fsm_mannual_run+0x154>
		case mannual_red:
			if(timer9_flag == 1){
 80006c4:	4b48      	ldr	r3, [pc, #288]	; (80007e8 <fsm_mannual_run+0x15c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10e      	bne.n	80006ea <fsm_mannual_run+0x5e>
				status_system = INIT;
 80006cc:	4b47      	ldr	r3, [pc, #284]	; (80007ec <fsm_mannual_run+0x160>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80006d2:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <fsm_mannual_run+0x158>)
 80006d4:	223c      	movs	r2, #60	; 0x3c
 80006d6:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 80006d8:	4b45      	ldr	r3, [pc, #276]	; (80007f0 <fsm_mannual_run+0x164>)
 80006da:	2213      	movs	r2, #19
 80006dc:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80006de:	4b45      	ldr	r3, [pc, #276]	; (80007f4 <fsm_mannual_run+0x168>)
 80006e0:	2217      	movs	r2, #23
 80006e2:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 80006e4:	f001 fc12 	bl	8001f0c <resetTimeTraffic>
				break;
 80006e8:	e07a      	b.n	80007e0 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 80006ea:	f7ff fd41 	bl	8000170 <isButton_BUT2_Pressed>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d106      	bne.n	8000702 <fsm_mannual_run+0x76>
				status_mannual = mannual_green;
 80006f4:	4b3b      	ldr	r3, [pc, #236]	; (80007e4 <fsm_mannual_run+0x158>)
 80006f6:	223e      	movs	r2, #62	; 0x3e
 80006f8:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80006fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80006fe:	f001 f81f 	bl	8001740 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000702:	f7ff fd23 	bl	800014c <isButton_BUT1_Pressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d105      	bne.n	8000718 <fsm_mannual_run+0x8c>
				status_mannual = mannual_init;
 800070c:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <fsm_mannual_run+0x158>)
 800070e:	223c      	movs	r2, #60	; 0x3c
 8000710:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 8000712:	4b36      	ldr	r3, [pc, #216]	; (80007ec <fsm_mannual_run+0x160>)
 8000714:	2202      	movs	r2, #2
 8000716:	601a      	str	r2, [r3, #0]
			}
			setRed_horizontal();
 8000718:	f001 fb08 	bl	8001d2c <setRed_horizontal>
			setGreen_vertical();
 800071c:	f001 fb52 	bl	8001dc4 <setGreen_vertical>
			break;
 8000720:	e05e      	b.n	80007e0 <fsm_mannual_run+0x154>
		case mannual_green:
			if(timer9_flag == 1){
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <fsm_mannual_run+0x15c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d10e      	bne.n	8000748 <fsm_mannual_run+0xbc>
				status_system = INIT;
 800072a:	4b30      	ldr	r3, [pc, #192]	; (80007ec <fsm_mannual_run+0x160>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <fsm_mannual_run+0x158>)
 8000732:	223c      	movs	r2, #60	; 0x3c
 8000734:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <fsm_mannual_run+0x164>)
 8000738:	2213      	movs	r2, #19
 800073a:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <fsm_mannual_run+0x168>)
 800073e:	2217      	movs	r2, #23
 8000740:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 8000742:	f001 fbe3 	bl	8001f0c <resetTimeTraffic>
				break;
 8000746:	e04b      	b.n	80007e0 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 8000748:	f7ff fd12 	bl	8000170 <isButton_BUT2_Pressed>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d106      	bne.n	8000760 <fsm_mannual_run+0xd4>
				status_mannual = mannual_yellow;
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <fsm_mannual_run+0x158>)
 8000754:	223f      	movs	r2, #63	; 0x3f
 8000756:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 8000758:	f241 3088 	movw	r0, #5000	; 0x1388
 800075c:	f000 fff0 	bl	8001740 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000760:	f7ff fcf4 	bl	800014c <isButton_BUT1_Pressed>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d105      	bne.n	8000776 <fsm_mannual_run+0xea>
				status_mannual = mannual_init;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <fsm_mannual_run+0x158>)
 800076c:	223c      	movs	r2, #60	; 0x3c
 800076e:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <fsm_mannual_run+0x160>)
 8000772:	2202      	movs	r2, #2
 8000774:	601a      	str	r2, [r3, #0]
			}
			setGreen_horizontal();
 8000776:	f001 faed 	bl	8001d54 <setGreen_horizontal>
			setYellow_vertical();
 800077a:	f001 fb33 	bl	8001de4 <setYellow_vertical>
			break;
 800077e:	e02f      	b.n	80007e0 <fsm_mannual_run+0x154>
		case mannual_yellow:
			if(timer9_flag == 1){
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <fsm_mannual_run+0x15c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d10e      	bne.n	80007a6 <fsm_mannual_run+0x11a>
				status_system = INIT;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <fsm_mannual_run+0x160>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <fsm_mannual_run+0x158>)
 8000790:	223c      	movs	r2, #60	; 0x3c
 8000792:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <fsm_mannual_run+0x164>)
 8000796:	2213      	movs	r2, #19
 8000798:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <fsm_mannual_run+0x168>)
 800079c:	2217      	movs	r2, #23
 800079e:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 80007a0:	f001 fbb4 	bl	8001f0c <resetTimeTraffic>
				break;
 80007a4:	e01c      	b.n	80007e0 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 80007a6:	f7ff fce3 	bl	8000170 <isButton_BUT2_Pressed>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d106      	bne.n	80007be <fsm_mannual_run+0x132>
				status_mannual = mannual_red;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <fsm_mannual_run+0x158>)
 80007b2:	223d      	movs	r2, #61	; 0x3d
 80007b4:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80007b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80007ba:	f000 ffc1 	bl	8001740 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 80007be:	f7ff fcc5 	bl	800014c <isButton_BUT1_Pressed>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d105      	bne.n	80007d4 <fsm_mannual_run+0x148>
				status_system = MODE2;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <fsm_mannual_run+0x160>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <fsm_mannual_run+0x158>)
 80007d0:	223c      	movs	r2, #60	; 0x3c
 80007d2:	601a      	str	r2, [r3, #0]
			}
			setYellow_horizontal();
 80007d4:	f001 fad2 	bl	8001d7c <setYellow_horizontal>
			setRed_vertical();
 80007d8:	f001 fae4 	bl	8001da4 <setRed_vertical>
			break;
 80007dc:	e000      	b.n	80007e0 <fsm_mannual_run+0x154>
		default:
			break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000004c 	.word	0x2000004c
 80007e8:	2000012c 	.word	0x2000012c
 80007ec:	200000e8 	.word	0x200000e8
 80007f0:	20000054 	.word	0x20000054
 80007f4:	20000058 	.word	0x20000058

080007f8 <fsm_pedestrian_run>:
#include "button.h"


int status_pedestrian_light = pedes_off;

void fsm_pedestrian_run(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	switch(status_pedestrian_light){
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <fsm_pedestrian_run+0x80>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b84      	cmp	r3, #132	; 0x84
 8000802:	d01e      	beq.n	8000842 <fsm_pedestrian_run+0x4a>
 8000804:	2b84      	cmp	r3, #132	; 0x84
 8000806:	dc31      	bgt.n	800086c <fsm_pedestrian_run+0x74>
 8000808:	2b82      	cmp	r3, #130	; 0x82
 800080a:	d002      	beq.n	8000812 <fsm_pedestrian_run+0x1a>
 800080c:	2b83      	cmp	r3, #131	; 0x83
 800080e:	d003      	beq.n	8000818 <fsm_pedestrian_run+0x20>
				FSM_Buzzer_State = LOUDER_BIP;
			}

			break;
		default:
			break;
 8000810:	e02c      	b.n	800086c <fsm_pedestrian_run+0x74>
			set_off_pedes();
 8000812:	f001 fbb1 	bl	8001f78 <set_off_pedes>
			break;
 8000816:	e02c      	b.n	8000872 <fsm_pedestrian_run+0x7a>
			set_red_pedes();
 8000818:	f001 fbc2 	bl	8001fa0 <set_red_pedes>
			if (timer30_flag == 1){
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <fsm_pedestrian_run+0x84>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d102      	bne.n	800082a <fsm_pedestrian_run+0x32>
				status_pedestrian_light = pedes_off;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <fsm_pedestrian_run+0x80>)
 8000826:	2282      	movs	r2, #130	; 0x82
 8000828:	601a      	str	r2, [r3, #0]
			if (status_traffic_blink_horizontal == red_horizontal)
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <fsm_pedestrian_run+0x88>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b14      	cmp	r3, #20
 8000830:	d103      	bne.n	800083a <fsm_pedestrian_run+0x42>
				status_pedestrian_light = pedes_green;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <fsm_pedestrian_run+0x80>)
 8000834:	2284      	movs	r2, #132	; 0x84
 8000836:	601a      	str	r2, [r3, #0]
			break;
 8000838:	e01b      	b.n	8000872 <fsm_pedestrian_run+0x7a>
				status_pedestrian_light = pedes_red;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <fsm_pedestrian_run+0x80>)
 800083c:	2283      	movs	r2, #131	; 0x83
 800083e:	601a      	str	r2, [r3, #0]
			break;
 8000840:	e017      	b.n	8000872 <fsm_pedestrian_run+0x7a>
			set_green_pedes();
 8000842:	f001 fbc1 	bl	8001fc8 <set_green_pedes>
			if (status_traffic_blink_horizontal == red_horizontal){
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <fsm_pedestrian_run+0x88>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b14      	cmp	r3, #20
 800084c:	d103      	bne.n	8000856 <fsm_pedestrian_run+0x5e>
				status_pedestrian_light = pedes_green;
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <fsm_pedestrian_run+0x80>)
 8000850:	2284      	movs	r2, #132	; 0x84
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	e002      	b.n	800085c <fsm_pedestrian_run+0x64>
				status_pedestrian_light = pedes_red;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <fsm_pedestrian_run+0x80>)
 8000858:	2283      	movs	r2, #131	; 0x83
 800085a:	601a      	str	r2, [r3, #0]
			if (time_red_horizontal_temp < 4){ //buzzer bip louder + faster
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <fsm_pedestrian_run+0x8c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b03      	cmp	r3, #3
 8000862:	dc05      	bgt.n	8000870 <fsm_pedestrian_run+0x78>
				FSM_Buzzer_State = LOUDER_BIP;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <fsm_pedestrian_run+0x90>)
 8000866:	2235      	movs	r2, #53	; 0x35
 8000868:	601a      	str	r2, [r3, #0]
			break;
 800086a:	e001      	b.n	8000870 <fsm_pedestrian_run+0x78>
			break;
 800086c:	bf00      	nop
 800086e:	e000      	b.n	8000872 <fsm_pedestrian_run+0x7a>
			break;
 8000870:	bf00      	nop
	}
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000050 	.word	0x20000050
 800087c:	20000144 	.word	0x20000144
 8000880:	20000054 	.word	0x20000054
 8000884:	20000070 	.word	0x20000070
 8000888:	20000094 	.word	0x20000094

0800088c <fsm_system_run>:
#include "fsm_traffic_blink.h"
#include "fsm_mannual.h"
#include "software_timer.h"
#include "buzzer.h"

fsm_system_run(){
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	switch(status_system){
 8000890:	4b8b      	ldr	r3, [pc, #556]	; (8000ac0 <fsm_system_run+0x234>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b04      	cmp	r3, #4
 8000896:	dc13      	bgt.n	80008c0 <fsm_system_run+0x34>
 8000898:	2b00      	cmp	r3, #0
 800089a:	f2c0 8190 	blt.w	8000bbe <fsm_system_run+0x332>
 800089e:	2b04      	cmp	r3, #4
 80008a0:	f200 818d 	bhi.w	8000bbe <fsm_system_run+0x332>
 80008a4:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <fsm_system_run+0x20>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080008c7 	.word	0x080008c7
 80008b0:	080008cf 	.word	0x080008cf
 80008b4:	08000997 	.word	0x08000997
 80008b8:	08000a2d 	.word	0x08000a2d
 80008bc:	08000b11 	.word	0x08000b11
 80008c0:	2b5f      	cmp	r3, #95	; 0x5f
 80008c2:	d055      	beq.n	8000970 <fsm_system_run+0xe4>
				status_traffic_blink_vertical = init_vertical;
				status_system = INIT;
			}
			break;
	}
}
 80008c4:	e17b      	b.n	8000bbe <fsm_system_run+0x332>
			status_system = MODE1;
 80008c6:	4b7e      	ldr	r3, [pc, #504]	; (8000ac0 <fsm_system_run+0x234>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
			break;
 80008cc:	e177      	b.n	8000bbe <fsm_system_run+0x332>
			status_traffic_horizontal = display_traffic_horizontal;
 80008ce:	4b7d      	ldr	r3, [pc, #500]	; (8000ac4 <fsm_system_run+0x238>)
 80008d0:	2205      	movs	r2, #5
 80008d2:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = display_traffic_vertical;
 80008d4:	4b7c      	ldr	r3, [pc, #496]	; (8000ac8 <fsm_system_run+0x23c>)
 80008d6:	2209      	movs	r2, #9
 80008d8:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_countDown_horizontal;
 80008da:	4b7c      	ldr	r3, [pc, #496]	; (8000acc <fsm_system_run+0x240>)
 80008dc:	220b      	movs	r2, #11
 80008de:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_countDown_vertical;
 80008e0:	4b7b      	ldr	r3, [pc, #492]	; (8000ad0 <fsm_system_run+0x244>)
 80008e2:	220f      	movs	r2, #15
 80008e4:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 80008e6:	f7ff fc31 	bl	800014c <isButton_BUT1_Pressed>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d105      	bne.n	80008fc <fsm_system_run+0x70>
				status_system = MODE2;
 80008f0:	4b73      	ldr	r3, [pc, #460]	; (8000ac0 <fsm_system_run+0x234>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	601a      	str	r2, [r3, #0]
				status_pedestrian_light = pedes_off;
 80008f6:	4b77      	ldr	r3, [pc, #476]	; (8000ad4 <fsm_system_run+0x248>)
 80008f8:	2282      	movs	r2, #130	; 0x82
 80008fa:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 80008fc:	f7ff fc38 	bl	8000170 <isButton_BUT2_Pressed>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d105      	bne.n	8000912 <fsm_system_run+0x86>
				status_system = MAN_MODE;
 8000906:	4b6e      	ldr	r3, [pc, #440]	; (8000ac0 <fsm_system_run+0x234>)
 8000908:	225f      	movs	r2, #95	; 0x5f
 800090a:	601a      	str	r2, [r3, #0]
				status_pedestrian_light = pedes_off;
 800090c:	4b71      	ldr	r3, [pc, #452]	; (8000ad4 <fsm_system_run+0x248>)
 800090e:	2282      	movs	r2, #130	; 0x82
 8000910:	601a      	str	r2, [r3, #0]
			if (isButton_Pedes_Pressed() == 1 ){
 8000912:	f7ff fc51 	bl	80001b8 <isButton_Pedes_Pressed>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d120      	bne.n	800095e <fsm_system_run+0xd2>
				FSM_Buzzer_State = ONE_BIP;
 800091c:	4b6e      	ldr	r3, [pc, #440]	; (8000ad8 <fsm_system_run+0x24c>)
 800091e:	2233      	movs	r2, #51	; 0x33
 8000920:	601a      	str	r2, [r3, #0]
				setTimer32(1000);
 8000922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000926:	f000 ff59 	bl	80017dc <setTimer32>
				setTimer30(2000*(time_red_horizontal+time_green_horizontal+time_yellow_horizontal));
 800092a:	4b6c      	ldr	r3, [pc, #432]	; (8000adc <fsm_system_run+0x250>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b6c      	ldr	r3, [pc, #432]	; (8000ae0 <fsm_system_run+0x254>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	441a      	add	r2, r3
 8000934:	4b6b      	ldr	r3, [pc, #428]	; (8000ae4 <fsm_system_run+0x258>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4413      	add	r3, r2
 800093a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800093e:	fb02 f303 	mul.w	r3, r2, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 ff30 	bl	80017a8 <setTimer30>
				if (status_traffic_blink_horizontal == red_horizontal){
 8000948:	4b67      	ldr	r3, [pc, #412]	; (8000ae8 <fsm_system_run+0x25c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b14      	cmp	r3, #20
 800094e:	d103      	bne.n	8000958 <fsm_system_run+0xcc>
					status_pedestrian_light = pedes_green;
 8000950:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <fsm_system_run+0x248>)
 8000952:	2284      	movs	r2, #132	; 0x84
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e002      	b.n	800095e <fsm_system_run+0xd2>
					status_pedestrian_light = pedes_red;
 8000958:	4b5e      	ldr	r3, [pc, #376]	; (8000ad4 <fsm_system_run+0x248>)
 800095a:	2283      	movs	r2, #131	; 0x83
 800095c:	601a      	str	r2, [r3, #0]
			if (timer30_flag == 1){
 800095e:	4b63      	ldr	r3, [pc, #396]	; (8000aec <fsm_system_run+0x260>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	f040 8124 	bne.w	8000bb0 <fsm_system_run+0x324>
				status_pedestrian_light = pedes_off;
 8000968:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <fsm_system_run+0x248>)
 800096a:	2282      	movs	r2, #130	; 0x82
 800096c:	601a      	str	r2, [r3, #0]
			break;
 800096e:	e11f      	b.n	8000bb0 <fsm_system_run+0x324>
			fsm_mannual_run();
 8000970:	f7ff fe8c 	bl	800068c <fsm_mannual_run>
			status_7SEG_horizontal = off_horizontal;
 8000974:	4b55      	ldr	r3, [pc, #340]	; (8000acc <fsm_system_run+0x240>)
 8000976:	f04f 32ff 	mov.w	r2, #4294967295
 800097a:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = off_vertical;
 800097c:	4b54      	ldr	r3, [pc, #336]	; (8000ad0 <fsm_system_run+0x244>)
 800097e:	f06f 0201 	mvn.w	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
			status_traffic_horizontal = mannual_horizontal;
 8000984:	4b4f      	ldr	r3, [pc, #316]	; (8000ac4 <fsm_system_run+0x238>)
 8000986:	f06f 0202 	mvn.w	r2, #2
 800098a:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = mannual_vertical;
 800098c:	4b4e      	ldr	r3, [pc, #312]	; (8000ac8 <fsm_system_run+0x23c>)
 800098e:	f06f 0203 	mvn.w	r2, #3
 8000992:	601a      	str	r2, [r3, #0]
			break;
 8000994:	e113      	b.n	8000bbe <fsm_system_run+0x332>
			status_traffic_horizontal = modifying_led_red_horizontal;
 8000996:	4b4b      	ldr	r3, [pc, #300]	; (8000ac4 <fsm_system_run+0x238>)
 8000998:	2206      	movs	r2, #6
 800099a:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_red_vertical;
 800099c:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <fsm_system_run+0x23c>)
 800099e:	221e      	movs	r2, #30
 80009a0:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode02;
 80009a2:	4b4a      	ldr	r3, [pc, #296]	; (8000acc <fsm_system_run+0x240>)
 80009a4:	220c      	movs	r2, #12
 80009a6:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 80009a8:	4b49      	ldr	r3, [pc, #292]	; (8000ad0 <fsm_system_run+0x244>)
 80009aa:	2210      	movs	r2, #16
 80009ac:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 80009ae:	f7ff fbdf 	bl	8000170 <isButton_BUT2_Pressed>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d109      	bne.n	80009cc <fsm_system_run+0x140>
				time_red_horizontal++;
 80009b8:	4b48      	ldr	r3, [pc, #288]	; (8000adc <fsm_system_run+0x250>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a47      	ldr	r2, [pc, #284]	; (8000adc <fsm_system_run+0x250>)
 80009c0:	6013      	str	r3, [r2, #0]
				time_red_vertical++;
 80009c2:	4b4b      	ldr	r3, [pc, #300]	; (8000af0 <fsm_system_run+0x264>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a49      	ldr	r2, [pc, #292]	; (8000af0 <fsm_system_run+0x264>)
 80009ca:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_red_vertical/10;
 80009cc:	4b48      	ldr	r3, [pc, #288]	; (8000af0 <fsm_system_run+0x264>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a48      	ldr	r2, [pc, #288]	; (8000af4 <fsm_system_run+0x268>)
 80009d2:	fb82 1203 	smull	r1, r2, r2, r3
 80009d6:	1092      	asrs	r2, r2, #2
 80009d8:	17db      	asrs	r3, r3, #31
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	4a46      	ldr	r2, [pc, #280]	; (8000af8 <fsm_system_run+0x26c>)
 80009de:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical%10;
 80009e0:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <fsm_system_run+0x264>)
 80009e2:	6819      	ldr	r1, [r3, #0]
 80009e4:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <fsm_system_run+0x268>)
 80009e6:	fb83 2301 	smull	r2, r3, r3, r1
 80009ea:	109a      	asrs	r2, r3, #2
 80009ec:	17cb      	asrs	r3, r1, #31
 80009ee:	1ad2      	subs	r2, r2, r3
 80009f0:	4613      	mov	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	1aca      	subs	r2, r1, r3
 80009fa:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <fsm_system_run+0x26c>)
 80009fc:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 80009fe:	f7ff fbc9 	bl	8000194 <isButton_BUT3_Pressed>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d107      	bne.n	8000a18 <fsm_system_run+0x18c>
				time_red_horizontal_temp= time_red_horizontal;
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <fsm_system_run+0x250>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a3b      	ldr	r2, [pc, #236]	; (8000afc <fsm_system_run+0x270>)
 8000a0e:	6013      	str	r3, [r2, #0]
				time_red_vertical_temp= time_red_vertical;
 8000a10:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <fsm_system_run+0x264>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a3a      	ldr	r2, [pc, #232]	; (8000b00 <fsm_system_run+0x274>)
 8000a16:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000a18:	f7ff fb98 	bl	800014c <isButton_BUT1_Pressed>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	f040 80c8 	bne.w	8000bb4 <fsm_system_run+0x328>
				status_system = MODE3;
 8000a24:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <fsm_system_run+0x234>)
 8000a26:	2203      	movs	r2, #3
 8000a28:	601a      	str	r2, [r3, #0]
			break;
 8000a2a:	e0c3      	b.n	8000bb4 <fsm_system_run+0x328>
			status_traffic_horizontal = modifying_led_yellow_horizontal;
 8000a2c:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <fsm_system_run+0x238>)
 8000a2e:	2208      	movs	r2, #8
 8000a30:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_yellow_vertical;
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <fsm_system_run+0x23c>)
 8000a34:	2220      	movs	r2, #32
 8000a36:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode03;
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <fsm_system_run+0x240>)
 8000a3a:	220d      	movs	r2, #13
 8000a3c:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <fsm_system_run+0x244>)
 8000a40:	2210      	movs	r2, #16
 8000a42:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000a44:	f7ff fb94 	bl	8000170 <isButton_BUT2_Pressed>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d109      	bne.n	8000a62 <fsm_system_run+0x1d6>
				time_yellow_horizontal++;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <fsm_system_run+0x258>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <fsm_system_run+0x258>)
 8000a56:	6013      	str	r3, [r2, #0]
				time_yellow_vertical++;
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <fsm_system_run+0x278>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4a29      	ldr	r2, [pc, #164]	; (8000b04 <fsm_system_run+0x278>)
 8000a60:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_yellow_vertical/10;
 8000a62:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <fsm_system_run+0x278>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <fsm_system_run+0x268>)
 8000a68:	fb82 1203 	smull	r1, r2, r2, r3
 8000a6c:	1092      	asrs	r2, r2, #2
 8000a6e:	17db      	asrs	r3, r3, #31
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <fsm_system_run+0x26c>)
 8000a74:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical%10;
 8000a76:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <fsm_system_run+0x278>)
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <fsm_system_run+0x268>)
 8000a7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000a80:	109a      	asrs	r2, r3, #2
 8000a82:	17cb      	asrs	r3, r1, #31
 8000a84:	1ad2      	subs	r2, r2, r3
 8000a86:	4613      	mov	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4413      	add	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	1aca      	subs	r2, r1, r3
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <fsm_system_run+0x26c>)
 8000a92:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000a94:	f7ff fb7e 	bl	8000194 <isButton_BUT3_Pressed>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d107      	bne.n	8000aae <fsm_system_run+0x222>
				time_yellow_horizontal_temp= time_yellow_horizontal;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <fsm_system_run+0x258>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <fsm_system_run+0x27c>)
 8000aa4:	6013      	str	r3, [r2, #0]
				time_yellow_vertical_temp= time_yellow_vertical;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <fsm_system_run+0x278>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <fsm_system_run+0x280>)
 8000aac:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000aae:	f7ff fb4d 	bl	800014c <isButton_BUT1_Pressed>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d17f      	bne.n	8000bb8 <fsm_system_run+0x32c>
				status_system = MODE4;
 8000ab8:	4b01      	ldr	r3, [pc, #4]	; (8000ac0 <fsm_system_run+0x234>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	601a      	str	r2, [r3, #0]
			break;
 8000abe:	e07b      	b.n	8000bb8 <fsm_system_run+0x32c>
 8000ac0:	200000e8 	.word	0x200000e8
 8000ac4:	2000005c 	.word	0x2000005c
 8000ac8:	20000060 	.word	0x20000060
 8000acc:	20000044 	.word	0x20000044
 8000ad0:	20000048 	.word	0x20000048
 8000ad4:	20000050 	.word	0x20000050
 8000ad8:	20000094 	.word	0x20000094
 8000adc:	20000064 	.word	0x20000064
 8000ae0:	20000068 	.word	0x20000068
 8000ae4:	2000006c 	.word	0x2000006c
 8000ae8:	20000054 	.word	0x20000054
 8000aec:	20000144 	.word	0x20000144
 8000af0:	20000084 	.word	0x20000084
 8000af4:	66666667 	.word	0x66666667
 8000af8:	20000194 	.word	0x20000194
 8000afc:	20000070 	.word	0x20000070
 8000b00:	20000090 	.word	0x20000090
 8000b04:	20000080 	.word	0x20000080
 8000b08:	20000078 	.word	0x20000078
 8000b0c:	2000008c 	.word	0x2000008c
			status_traffic_horizontal = modifying_led_green_horizontal;
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <fsm_system_run+0x338>)
 8000b12:	2207      	movs	r2, #7
 8000b14:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_green_vertical;
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <fsm_system_run+0x33c>)
 8000b18:	221f      	movs	r2, #31
 8000b1a:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode04;
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <fsm_system_run+0x340>)
 8000b1e:	220e      	movs	r2, #14
 8000b20:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <fsm_system_run+0x344>)
 8000b24:	2210      	movs	r2, #16
 8000b26:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000b28:	f7ff fb22 	bl	8000170 <isButton_BUT2_Pressed>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d109      	bne.n	8000b46 <fsm_system_run+0x2ba>
				time_green_horizontal++;
 8000b32:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <fsm_system_run+0x348>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <fsm_system_run+0x348>)
 8000b3a:	6013      	str	r3, [r2, #0]
				time_green_vertical++;
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <fsm_system_run+0x34c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <fsm_system_run+0x34c>)
 8000b44:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_green_vertical/10;
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <fsm_system_run+0x34c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <fsm_system_run+0x350>)
 8000b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b50:	1092      	asrs	r2, r2, #2
 8000b52:	17db      	asrs	r3, r3, #31
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <fsm_system_run+0x354>)
 8000b58:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical%10;
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <fsm_system_run+0x34c>)
 8000b5c:	6819      	ldr	r1, [r3, #0]
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <fsm_system_run+0x350>)
 8000b60:	fb83 2301 	smull	r2, r3, r3, r1
 8000b64:	109a      	asrs	r2, r3, #2
 8000b66:	17cb      	asrs	r3, r1, #31
 8000b68:	1ad2      	subs	r2, r2, r3
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	1aca      	subs	r2, r1, r3
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <fsm_system_run+0x354>)
 8000b76:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000b78:	f7ff fb0c 	bl	8000194 <isButton_BUT3_Pressed>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d107      	bne.n	8000b92 <fsm_system_run+0x306>
				time_green_horizontal_temp= time_green_horizontal;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <fsm_system_run+0x348>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <fsm_system_run+0x358>)
 8000b88:	6013      	str	r3, [r2, #0]
				time_green_vertical_temp= time_green_vertical;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <fsm_system_run+0x34c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <fsm_system_run+0x35c>)
 8000b90:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000b92:	f7ff fadb 	bl	800014c <isButton_BUT1_Pressed>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d10f      	bne.n	8000bbc <fsm_system_run+0x330>
				status_traffic_blink_horizontal = init_horizontal;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <fsm_system_run+0x360>)
 8000b9e:	2213      	movs	r2, #19
 8000ba0:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <fsm_system_run+0x364>)
 8000ba4:	2217      	movs	r2, #23
 8000ba6:	601a      	str	r2, [r3, #0]
				status_system = INIT;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <fsm_system_run+0x368>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
			break;
 8000bae:	e005      	b.n	8000bbc <fsm_system_run+0x330>
			break;
 8000bb0:	bf00      	nop
 8000bb2:	e004      	b.n	8000bbe <fsm_system_run+0x332>
			break;
 8000bb4:	bf00      	nop
 8000bb6:	e002      	b.n	8000bbe <fsm_system_run+0x332>
			break;
 8000bb8:	bf00      	nop
 8000bba:	e000      	b.n	8000bbe <fsm_system_run+0x332>
			break;
 8000bbc:	bf00      	nop
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000005c 	.word	0x2000005c
 8000bc8:	20000060 	.word	0x20000060
 8000bcc:	20000044 	.word	0x20000044
 8000bd0:	20000048 	.word	0x20000048
 8000bd4:	20000068 	.word	0x20000068
 8000bd8:	2000007c 	.word	0x2000007c
 8000bdc:	66666667 	.word	0x66666667
 8000be0:	20000194 	.word	0x20000194
 8000be4:	20000074 	.word	0x20000074
 8000be8:	20000088 	.word	0x20000088
 8000bec:	20000054 	.word	0x20000054
 8000bf0:	20000058 	.word	0x20000058
 8000bf4:	200000e8 	.word	0x200000e8

08000bf8 <fsm_traffic_blink_horizontal_run>:
#include "control_7SEG.h"

int status_traffic_blink_horizontal = init_horizontal;
int status_traffic_blink_vertical = init_vertical;

void fsm_traffic_blink_horizontal_run(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_horizontal){
 8000bfc:	4b85      	ldr	r3, [pc, #532]	; (8000e14 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3b13      	subs	r3, #19
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	f200 80fd 	bhi.w	8000e02 <fsm_traffic_blink_horizontal_run+0x20a>
 8000c08:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <fsm_traffic_blink_horizontal_run+0x18>)
 8000c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0e:	bf00      	nop
 8000c10:	08000c21 	.word	0x08000c21
 8000c14:	08000c4b 	.word	0x08000c4b
 8000c18:	08000cdf 	.word	0x08000cdf
 8000c1c:	08000d71 	.word	0x08000d71
		case init_horizontal:
			status_traffic_blink_horizontal = red_horizontal;
 8000c20:	4b7c      	ldr	r3, [pc, #496]	; (8000e14 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000c22:	2214      	movs	r2, #20
 8000c24:	601a      	str	r2, [r3, #0]
			traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000c26:	4b7c      	ldr	r3, [pc, #496]	; (8000e18 <fsm_traffic_blink_horizontal_run+0x220>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c2e:	fb02 f303 	mul.w	r3, r2, r3
 8000c32:	4a7a      	ldr	r2, [pc, #488]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000c34:	6013      	str	r3, [r2, #0]
			//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
			setTimer1(traffic_buffer_horizontal[0]);
 8000c36:	4b79      	ldr	r3, [pc, #484]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fcb0 	bl	80015a0 <setTimer1>
			setTimer3(1000);// count down as a clock
 8000c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c44:	f000 fce0 	bl	8001608 <setTimer3>
			break;
 8000c48:	e0e2      	b.n	8000e10 <fsm_traffic_blink_horizontal_run+0x218>
		case red_horizontal:
			setRed_horizontal();
 8000c4a:	f001 f86f 	bl	8001d2c <setRed_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_red_horizontal_temp/10;
 8000c4e:	4b74      	ldr	r3, [pc, #464]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a74      	ldr	r2, [pc, #464]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000c54:	fb82 1203 	smull	r1, r2, r2, r3
 8000c58:	1092      	asrs	r2, r2, #2
 8000c5a:	17db      	asrs	r3, r3, #31
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	4a72      	ldr	r2, [pc, #456]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000c60:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_red_horizontal_temp%10;
 8000c62:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000c68:	fb83 2301 	smull	r2, r3, r3, r1
 8000c6c:	109a      	asrs	r2, r3, #2
 8000c6e:	17cb      	asrs	r3, r1, #31
 8000c70:	1ad2      	subs	r2, r2, r3
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	1aca      	subs	r2, r1, r3
 8000c7c:	4b6a      	ldr	r3, [pc, #424]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000c7e:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000c80:	4b6a      	ldr	r3, [pc, #424]	; (8000e2c <fsm_traffic_blink_horizontal_run+0x234>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d110      	bne.n	8000caa <fsm_traffic_blink_horizontal_run+0xb2>
				time_red_horizontal_temp--;
 8000c88:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	4a64      	ldr	r2, [pc, #400]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000c90:	6013      	str	r3, [r2, #0]
				if(time_red_horizontal_temp == 0){
 8000c92:	4b63      	ldr	r3, [pc, #396]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <fsm_traffic_blink_horizontal_run+0xaa>
					time_red_horizontal_temp = time_red_horizontal;
 8000c9a:	4b5f      	ldr	r3, [pc, #380]	; (8000e18 <fsm_traffic_blink_horizontal_run+0x220>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a60      	ldr	r2, [pc, #384]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000ca0:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca6:	f000 fcaf 	bl	8001608 <setTimer3>
			}

			if(timer1_flag == 1){
 8000caa:	4b61      	ldr	r3, [pc, #388]	; (8000e30 <fsm_traffic_blink_horizontal_run+0x238>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	f040 80a9 	bne.w	8000e06 <fsm_traffic_blink_horizontal_run+0x20e>
				status_traffic_blink_horizontal = green_horizontal;
 8000cb4:	4b57      	ldr	r3, [pc, #348]	; (8000e14 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000cb6:	2215      	movs	r2, #21
 8000cb8:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[1] = time_green_horizontal*1000;
 8000cba:	4b5e      	ldr	r3, [pc, #376]	; (8000e34 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cc2:	fb02 f303 	mul.w	r3, r2, r3
 8000cc6:	4a55      	ldr	r2, [pc, #340]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000cc8:	6053      	str	r3, [r2, #4]
				//led green will turn on in traffic_buffer_horizontal[1]/1000 seconds
				setTimer1(traffic_buffer_horizontal[1]);
 8000cca:	4b54      	ldr	r3, [pc, #336]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fc66 	bl	80015a0 <setTimer1>
				setTimer3(1000);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd8:	f000 fc96 	bl	8001608 <setTimer3>
			}
			break;
 8000cdc:	e093      	b.n	8000e06 <fsm_traffic_blink_horizontal_run+0x20e>
		case green_horizontal:
			setGreen_horizontal();
 8000cde:	f001 f839 	bl	8001d54 <setGreen_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_green_horizontal_temp/10;
 8000ce2:	4b55      	ldr	r3, [pc, #340]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cec:	1092      	asrs	r2, r2, #2
 8000cee:	17db      	asrs	r3, r3, #31
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	4a4d      	ldr	r2, [pc, #308]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000cf4:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_green_horizontal_temp%10;
 8000cf6:	4b50      	ldr	r3, [pc, #320]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000cf8:	6819      	ldr	r1, [r3, #0]
 8000cfa:	4b4a      	ldr	r3, [pc, #296]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000cfc:	fb83 2301 	smull	r2, r3, r3, r1
 8000d00:	109a      	asrs	r2, r3, #2
 8000d02:	17cb      	asrs	r3, r1, #31
 8000d04:	1ad2      	subs	r2, r2, r3
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1aca      	subs	r2, r1, r3
 8000d10:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000d12:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000d14:	4b45      	ldr	r3, [pc, #276]	; (8000e2c <fsm_traffic_blink_horizontal_run+0x234>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d110      	bne.n	8000d3e <fsm_traffic_blink_horizontal_run+0x146>
				time_green_horizontal_temp--;
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a45      	ldr	r2, [pc, #276]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000d24:	6013      	str	r3, [r2, #0]
				if(time_green_horizontal_temp == 0){
 8000d26:	4b44      	ldr	r3, [pc, #272]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d103      	bne.n	8000d36 <fsm_traffic_blink_horizontal_run+0x13e>
					time_green_horizontal_temp = time_green_horizontal;
 8000d2e:	4b41      	ldr	r3, [pc, #260]	; (8000e34 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a41      	ldr	r2, [pc, #260]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000d34:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000d36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3a:	f000 fc65 	bl	8001608 <setTimer3>
			}

			if(timer1_flag == 1){
 8000d3e:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <fsm_traffic_blink_horizontal_run+0x238>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d161      	bne.n	8000e0a <fsm_traffic_blink_horizontal_run+0x212>
				status_traffic_blink_horizontal = yellow_horizontal;
 8000d46:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000d48:	2216      	movs	r2, #22
 8000d4a:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[2] = time_yellow_horizontal*1000;
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <fsm_traffic_blink_horizontal_run+0x244>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	4a30      	ldr	r2, [pc, #192]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000d5a:	6093      	str	r3, [r2, #8]
				//led yellow will turn on in traffic_buffer_horizontal[2]/1000 seconds
				setTimer1(traffic_buffer_horizontal[2]);
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fc1d 	bl	80015a0 <setTimer1>
				setTimer3(1000);
 8000d66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6a:	f000 fc4d 	bl	8001608 <setTimer3>
			}
			break;
 8000d6e:	e04c      	b.n	8000e0a <fsm_traffic_blink_horizontal_run+0x212>
		case yellow_horizontal:
			setYellow_horizontal();
 8000d70:	f001 f804 	bl	8001d7c <setYellow_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_yellow_horizontal_temp/10;
 8000d74:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000d7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7e:	1092      	asrs	r2, r2, #2
 8000d80:	17db      	asrs	r3, r3, #31
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000d86:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_yellow_horizontal_temp%10;
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000d8a:	6819      	ldr	r1, [r3, #0]
 8000d8c:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000d8e:	fb83 2301 	smull	r2, r3, r3, r1
 8000d92:	109a      	asrs	r2, r3, #2
 8000d94:	17cb      	asrs	r3, r1, #31
 8000d96:	1ad2      	subs	r2, r2, r3
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	1aca      	subs	r2, r1, r3
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000da4:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <fsm_traffic_blink_horizontal_run+0x234>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d110      	bne.n	8000dd0 <fsm_traffic_blink_horizontal_run+0x1d8>
				time_yellow_horizontal_temp--;
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000db6:	6013      	str	r3, [r2, #0]
				if(time_yellow_horizontal_temp == 0){
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d103      	bne.n	8000dc8 <fsm_traffic_blink_horizontal_run+0x1d0>
					time_yellow_horizontal_temp = time_yellow_horizontal;
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <fsm_traffic_blink_horizontal_run+0x244>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000dc6:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f000 fc1c 	bl	8001608 <setTimer3>
			}

			if(timer1_flag == 1){
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <fsm_traffic_blink_horizontal_run+0x238>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d11a      	bne.n	8000e0e <fsm_traffic_blink_horizontal_run+0x216>
				status_traffic_blink_horizontal = red_horizontal;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000dda:	2214      	movs	r2, #20
 8000ddc:	601a      	str	r2, [r3, #0]
				//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
				traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <fsm_traffic_blink_horizontal_run+0x220>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000dec:	6013      	str	r3, [r2, #0]
				setTimer1(traffic_buffer_horizontal[0]);
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fbd4 	bl	80015a0 <setTimer1>
				setTimer3(1000);
 8000df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dfc:	f000 fc04 	bl	8001608 <setTimer3>
			}
			break;
 8000e00:	e005      	b.n	8000e0e <fsm_traffic_blink_horizontal_run+0x216>
		default:
			break;
 8000e02:	bf00      	nop
 8000e04:	e004      	b.n	8000e10 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000e06:	bf00      	nop
 8000e08:	e002      	b.n	8000e10 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000e0a:	bf00      	nop
 8000e0c:	e000      	b.n	8000e10 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000e0e:	bf00      	nop
	}
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000054 	.word	0x20000054
 8000e18:	20000064 	.word	0x20000064
 8000e1c:	20000174 	.word	0x20000174
 8000e20:	20000070 	.word	0x20000070
 8000e24:	66666667 	.word	0x66666667
 8000e28:	2000018c 	.word	0x2000018c
 8000e2c:	200000fc 	.word	0x200000fc
 8000e30:	200000ec 	.word	0x200000ec
 8000e34:	20000068 	.word	0x20000068
 8000e38:	20000074 	.word	0x20000074
 8000e3c:	2000006c 	.word	0x2000006c
 8000e40:	20000078 	.word	0x20000078

08000e44 <fsm_traffic_blink_vertical_run>:

void fsm_traffic_blink_vertical_run(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_vertical){
 8000e48:	4b89      	ldr	r3, [pc, #548]	; (8001070 <fsm_traffic_blink_vertical_run+0x22c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3b17      	subs	r3, #23
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	f200 8105 	bhi.w	800105e <fsm_traffic_blink_vertical_run+0x21a>
 8000e54:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <fsm_traffic_blink_vertical_run+0x18>)
 8000e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5a:	bf00      	nop
 8000e5c:	08000e6d 	.word	0x08000e6d
 8000e60:	08000fcd 	.word	0x08000fcd
 8000e64:	08000e97 	.word	0x08000e97
 8000e68:	08000f3b 	.word	0x08000f3b
		case init_vertical:
			status_traffic_blink_vertical = green_vertical;
 8000e6c:	4b80      	ldr	r3, [pc, #512]	; (8001070 <fsm_traffic_blink_vertical_run+0x22c>)
 8000e6e:	2219      	movs	r2, #25
 8000e70:	601a      	str	r2, [r3, #0]
			traffic_buffer_vertical[0] = time_green_vertical*1000;
 8000e72:	4b80      	ldr	r3, [pc, #512]	; (8001074 <fsm_traffic_blink_vertical_run+0x230>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e7a:	fb02 f303 	mul.w	r3, r2, r3
 8000e7e:	4a7e      	ldr	r2, [pc, #504]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000e80:	6013      	str	r3, [r2, #0]
			setTimer2(traffic_buffer_vertical[0]);
 8000e82:	4b7d      	ldr	r3, [pc, #500]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fba4 	bl	80015d4 <setTimer2>
			setTimer5(1000);// count down as a clock
 8000e8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e90:	f000 fbee 	bl	8001670 <setTimer5>
			break;
 8000e94:	e0ea      	b.n	800106c <fsm_traffic_blink_vertical_run+0x228>
		case green_vertical:
			setGreen_vertical();
 8000e96:	f000 ff95 	bl	8001dc4 <setGreen_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_green_vertical_temp/10;
 8000e9a:	4b78      	ldr	r3, [pc, #480]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a78      	ldr	r2, [pc, #480]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea4:	1092      	asrs	r2, r2, #2
 8000ea6:	17db      	asrs	r3, r3, #31
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	4a76      	ldr	r2, [pc, #472]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8000eac:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical_temp%10;
 8000eae:	4b73      	ldr	r3, [pc, #460]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000eb0:	6819      	ldr	r1, [r3, #0]
 8000eb2:	4b73      	ldr	r3, [pc, #460]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000eb4:	fb83 2301 	smull	r2, r3, r3, r1
 8000eb8:	109a      	asrs	r2, r3, #2
 8000eba:	17cb      	asrs	r3, r1, #31
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	1aca      	subs	r2, r1, r3
 8000ec8:	4b6e      	ldr	r3, [pc, #440]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8000eca:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000ecc:	4b6e      	ldr	r3, [pc, #440]	; (8001088 <fsm_traffic_blink_vertical_run+0x244>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d118      	bne.n	8000f06 <fsm_traffic_blink_vertical_run+0xc2>
				time_green_vertical_temp--;
 8000ed4:	4b69      	ldr	r3, [pc, #420]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	4a68      	ldr	r2, [pc, #416]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000edc:	6013      	str	r3, [r2, #0]
				if(time_green_vertical_temp != 0) setTimer5(1000);
 8000ede:	4b67      	ldr	r3, [pc, #412]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <fsm_traffic_blink_vertical_run+0xaa>
 8000ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eea:	f000 fbc1 	bl	8001670 <setTimer5>
				if(time_green_vertical_temp == 0){
 8000eee:	4b63      	ldr	r3, [pc, #396]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d103      	bne.n	8000efe <fsm_traffic_blink_vertical_run+0xba>
					time_green_vertical_temp = time_green_vertical;
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	; (8001074 <fsm_traffic_blink_vertical_run+0x230>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a60      	ldr	r2, [pc, #384]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000efc:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000efe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f02:	f000 fbb5 	bl	8001670 <setTimer5>
			}

			if(timer2_flag == 1){
 8000f06:	4b61      	ldr	r3, [pc, #388]	; (800108c <fsm_traffic_blink_vertical_run+0x248>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	f040 80a9 	bne.w	8001062 <fsm_traffic_blink_vertical_run+0x21e>
				status_traffic_blink_vertical = yellow_vertical;
 8000f10:	4b57      	ldr	r3, [pc, #348]	; (8001070 <fsm_traffic_blink_vertical_run+0x22c>)
 8000f12:	221a      	movs	r2, #26
 8000f14:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[1] = time_yellow_vertical*1000;
 8000f16:	4b5e      	ldr	r3, [pc, #376]	; (8001090 <fsm_traffic_blink_vertical_run+0x24c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1e:	fb02 f303 	mul.w	r3, r2, r3
 8000f22:	4a55      	ldr	r2, [pc, #340]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000f24:	6053      	str	r3, [r2, #4]
				setTimer2(traffic_buffer_vertical[1]);
 8000f26:	4b54      	ldr	r3, [pc, #336]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fb52 	bl	80015d4 <setTimer2>
				setTimer5(1000);
 8000f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f34:	f000 fb9c 	bl	8001670 <setTimer5>
			}
			break;
 8000f38:	e093      	b.n	8001062 <fsm_traffic_blink_vertical_run+0x21e>
		case yellow_vertical:
			setYellow_vertical();
 8000f3a:	f000 ff53 	bl	8001de4 <setYellow_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_yellow_vertical_temp/10;
 8000f3e:	4b55      	ldr	r3, [pc, #340]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a4f      	ldr	r2, [pc, #316]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000f44:	fb82 1203 	smull	r1, r2, r2, r3
 8000f48:	1092      	asrs	r2, r2, #2
 8000f4a:	17db      	asrs	r3, r3, #31
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8000f50:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical_temp%10;
 8000f52:	4b50      	ldr	r3, [pc, #320]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f54:	6819      	ldr	r1, [r3, #0]
 8000f56:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000f58:	fb83 2301 	smull	r2, r3, r3, r1
 8000f5c:	109a      	asrs	r2, r3, #2
 8000f5e:	17cb      	asrs	r3, r1, #31
 8000f60:	1ad2      	subs	r2, r2, r3
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	1aca      	subs	r2, r1, r3
 8000f6c:	4b45      	ldr	r3, [pc, #276]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8000f6e:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000f70:	4b45      	ldr	r3, [pc, #276]	; (8001088 <fsm_traffic_blink_vertical_run+0x244>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d110      	bne.n	8000f9a <fsm_traffic_blink_vertical_run+0x156>
				time_yellow_vertical_temp--;
 8000f78:	4b46      	ldr	r3, [pc, #280]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4a45      	ldr	r2, [pc, #276]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f80:	6013      	str	r3, [r2, #0]
				if(time_yellow_vertical_temp == 0){
 8000f82:	4b44      	ldr	r3, [pc, #272]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d103      	bne.n	8000f92 <fsm_traffic_blink_vertical_run+0x14e>
					time_yellow_vertical_temp = time_yellow_vertical;
 8000f8a:	4b41      	ldr	r3, [pc, #260]	; (8001090 <fsm_traffic_blink_vertical_run+0x24c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a41      	ldr	r2, [pc, #260]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f90:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f96:	f000 fb6b 	bl	8001670 <setTimer5>
			}

			if(timer2_flag == 1){
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	; (800108c <fsm_traffic_blink_vertical_run+0x248>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d161      	bne.n	8001066 <fsm_traffic_blink_vertical_run+0x222>
				status_traffic_blink_vertical = red_vertical;
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <fsm_traffic_blink_vertical_run+0x22c>)
 8000fa4:	2218      	movs	r2, #24
 8000fa6:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[2] = time_red_vertical*1000;
 8000fa8:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <fsm_traffic_blink_vertical_run+0x254>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	4a30      	ldr	r2, [pc, #192]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000fb6:	6093      	str	r3, [r2, #8]
				setTimer2(traffic_buffer_vertical[2]);
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fb09 	bl	80015d4 <setTimer2>
				setTimer5(1000);
 8000fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc6:	f000 fb53 	bl	8001670 <setTimer5>
			}
			break;
 8000fca:	e04c      	b.n	8001066 <fsm_traffic_blink_vertical_run+0x222>
		case red_vertical:
			setRed_vertical();
 8000fcc:	f000 feea 	bl	8001da4 <setRed_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_red_vertical_temp/10;
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2a      	ldr	r2, [pc, #168]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fda:	1092      	asrs	r2, r2, #2
 8000fdc:	17db      	asrs	r3, r3, #31
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	4a28      	ldr	r2, [pc, #160]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8000fe2:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical_temp%10;
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 8000fe6:	6819      	ldr	r1, [r3, #0]
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000fea:	fb83 2301 	smull	r2, r3, r3, r1
 8000fee:	109a      	asrs	r2, r3, #2
 8000ff0:	17cb      	asrs	r3, r1, #31
 8000ff2:	1ad2      	subs	r2, r2, r3
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	1aca      	subs	r2, r1, r3
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8001000:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <fsm_traffic_blink_vertical_run+0x244>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d110      	bne.n	800102c <fsm_traffic_blink_vertical_run+0x1e8>
				time_red_vertical_temp--;
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3b01      	subs	r3, #1
 8001010:	4a22      	ldr	r2, [pc, #136]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 8001012:	6013      	str	r3, [r2, #0]
				if(time_red_vertical_temp == 0){
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d103      	bne.n	8001024 <fsm_traffic_blink_vertical_run+0x1e0>
					time_red_vertical_temp = time_red_vertical;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <fsm_traffic_blink_vertical_run+0x254>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1e      	ldr	r2, [pc, #120]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 8001022:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8001024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001028:	f000 fb22 	bl	8001670 <setTimer5>
			}

			if(timer2_flag == 1){
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <fsm_traffic_blink_vertical_run+0x248>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d11a      	bne.n	800106a <fsm_traffic_blink_vertical_run+0x226>
				status_traffic_blink_vertical = green_vertical;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <fsm_traffic_blink_vertical_run+0x22c>)
 8001036:	2219      	movs	r2, #25
 8001038:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[0] = time_green_vertical*1000;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <fsm_traffic_blink_vertical_run+0x230>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8001048:	6013      	str	r3, [r2, #0]
				setTimer2(traffic_buffer_vertical[0]);
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fac0 	bl	80015d4 <setTimer2>
				setTimer5(1000);
 8001054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001058:	f000 fb0a 	bl	8001670 <setTimer5>
			}
			break;
 800105c:	e005      	b.n	800106a <fsm_traffic_blink_vertical_run+0x226>
		default:
			break;
 800105e:	bf00      	nop
 8001060:	e004      	b.n	800106c <fsm_traffic_blink_vertical_run+0x228>
			break;
 8001062:	bf00      	nop
 8001064:	e002      	b.n	800106c <fsm_traffic_blink_vertical_run+0x228>
			break;
 8001066:	bf00      	nop
 8001068:	e000      	b.n	800106c <fsm_traffic_blink_vertical_run+0x228>
			break;
 800106a:	bf00      	nop
	}
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000058 	.word	0x20000058
 8001074:	2000007c 	.word	0x2000007c
 8001078:	20000180 	.word	0x20000180
 800107c:	20000088 	.word	0x20000088
 8001080:	66666667 	.word	0x66666667
 8001084:	20000194 	.word	0x20000194
 8001088:	2000010c 	.word	0x2000010c
 800108c:	200000f4 	.word	0x200000f4
 8001090:	20000080 	.word	0x20000080
 8001094:	2000008c 	.word	0x2000008c
 8001098:	20000084 	.word	0x20000084
 800109c:	20000090 	.word	0x20000090

080010a0 <fsm_traffic_horizontal_run>:
#include "traffic.h"

int status_traffic_horizontal = display_traffic_horizontal;


void fsm_traffic_horizontal_run(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	switch(status_traffic_horizontal){
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <fsm_traffic_horizontal_run+0xa0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3303      	adds	r3, #3
 80010aa:	2b0b      	cmp	r3, #11
 80010ac:	d83e      	bhi.n	800112c <fsm_traffic_horizontal_run+0x8c>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <fsm_traffic_horizontal_run+0x14>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	0800112d 	.word	0x0800112d
 80010b8:	0800112d 	.word	0x0800112d
 80010bc:	0800112d 	.word	0x0800112d
 80010c0:	0800112d 	.word	0x0800112d
 80010c4:	0800112d 	.word	0x0800112d
 80010c8:	0800112d 	.word	0x0800112d
 80010cc:	0800112d 	.word	0x0800112d
 80010d0:	0800112d 	.word	0x0800112d
 80010d4:	080010e5 	.word	0x080010e5
 80010d8:	080010eb 	.word	0x080010eb
 80010dc:	08001117 	.word	0x08001117
 80010e0:	08001101 	.word	0x08001101
		case display_traffic_horizontal:
			fsm_traffic_blink_horizontal_run();
 80010e4:	f7ff fd88 	bl	8000bf8 <fsm_traffic_blink_horizontal_run>
			break;
 80010e8:	e027      	b.n	800113a <fsm_traffic_horizontal_run+0x9a>
		case modifying_led_red_horizontal:
			// turn off led green and yellow
//			offGreenYellow_horizontal();
			if(timer8_flag == 1){
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <fsm_traffic_horizontal_run+0xa4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d11e      	bne.n	8001130 <fsm_traffic_horizontal_run+0x90>
				//toggle led red with frequency 2Hz
				toggleRed_horizontal();
 80010f2:	f000 fe93 	bl	8001e1c <toggleRed_horizontal>
				setTimer8(500);
 80010f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fa:	f000 fb07 	bl	800170c <setTimer8>
			}
			break;
 80010fe:	e017      	b.n	8001130 <fsm_traffic_horizontal_run+0x90>
		case modifying_led_yellow_horizontal:
//			offGreenRed_horizontal();
//			offAllLed_horizontal();
			if(timer8_flag == 1){
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <fsm_traffic_horizontal_run+0xa4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d115      	bne.n	8001134 <fsm_traffic_horizontal_run+0x94>
				//toggle led yellow with frequency 2Hz
				toggleYellow_horizontal();
 8001108:	f000 feac 	bl	8001e64 <toggleYellow_horizontal>
				setTimer8(500);
 800110c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001110:	f000 fafc 	bl	800170c <setTimer8>
			}
			break;
 8001114:	e00e      	b.n	8001134 <fsm_traffic_horizontal_run+0x94>
		case modifying_led_green_horizontal:
//			offRedYellow_horizontal();
			if(timer8_flag == 1){
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <fsm_traffic_horizontal_run+0xa4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d10c      	bne.n	8001138 <fsm_traffic_horizontal_run+0x98>
				//toggle led green with frequency 2Hz
				toggleGreen_horizontal();
 800111e:	f000 fe8f 	bl	8001e40 <toggleGreen_horizontal>
				setTimer8(500);
 8001122:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001126:	f000 faf1 	bl	800170c <setTimer8>
			}
			break;
 800112a:	e005      	b.n	8001138 <fsm_traffic_horizontal_run+0x98>
		case mannual_horizontal:
			break;
		default:
			break;
 800112c:	bf00      	nop
 800112e:	e004      	b.n	800113a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001130:	bf00      	nop
 8001132:	e002      	b.n	800113a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001134:	bf00      	nop
 8001136:	e000      	b.n	800113a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001138:	bf00      	nop
	}
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000005c 	.word	0x2000005c
 8001144:	20000124 	.word	0x20000124

08001148 <fsm_traffic_vertical_run>:
#include "traffic.h"
#include "fsm_traffic_blink.h"

int status_traffic_vertical = display_traffic_vertical;

void fsm_traffic_vertical_run(){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	switch(status_traffic_vertical){
 800114c:	4b3f      	ldr	r3, [pc, #252]	; (800124c <fsm_traffic_vertical_run+0x104>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3304      	adds	r3, #4
 8001152:	2b24      	cmp	r3, #36	; 0x24
 8001154:	d870      	bhi.n	8001238 <fsm_traffic_vertical_run+0xf0>
 8001156:	a201      	add	r2, pc, #4	; (adr r2, 800115c <fsm_traffic_vertical_run+0x14>)
 8001158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115c:	08001239 	.word	0x08001239
 8001160:	08001239 	.word	0x08001239
 8001164:	08001239 	.word	0x08001239
 8001168:	08001239 	.word	0x08001239
 800116c:	08001239 	.word	0x08001239
 8001170:	08001239 	.word	0x08001239
 8001174:	08001239 	.word	0x08001239
 8001178:	08001239 	.word	0x08001239
 800117c:	08001239 	.word	0x08001239
 8001180:	08001239 	.word	0x08001239
 8001184:	08001239 	.word	0x08001239
 8001188:	08001239 	.word	0x08001239
 800118c:	08001239 	.word	0x08001239
 8001190:	080011f1 	.word	0x080011f1
 8001194:	08001239 	.word	0x08001239
 8001198:	08001239 	.word	0x08001239
 800119c:	08001239 	.word	0x08001239
 80011a0:	08001239 	.word	0x08001239
 80011a4:	08001239 	.word	0x08001239
 80011a8:	08001239 	.word	0x08001239
 80011ac:	08001239 	.word	0x08001239
 80011b0:	08001239 	.word	0x08001239
 80011b4:	08001239 	.word	0x08001239
 80011b8:	08001239 	.word	0x08001239
 80011bc:	08001239 	.word	0x08001239
 80011c0:	08001239 	.word	0x08001239
 80011c4:	08001239 	.word	0x08001239
 80011c8:	08001239 	.word	0x08001239
 80011cc:	08001239 	.word	0x08001239
 80011d0:	08001239 	.word	0x08001239
 80011d4:	08001239 	.word	0x08001239
 80011d8:	08001239 	.word	0x08001239
 80011dc:	08001239 	.word	0x08001239
 80011e0:	08001239 	.word	0x08001239
 80011e4:	080011f7 	.word	0x080011f7
 80011e8:	08001223 	.word	0x08001223
 80011ec:	0800120d 	.word	0x0800120d
		case display_traffic_vertical:
//			status_traffic_blink_vertical = init_vertical;
			fsm_traffic_blink_vertical_run();
 80011f0:	f7ff fe28 	bl	8000e44 <fsm_traffic_blink_vertical_run>
			break;
 80011f4:	e027      	b.n	8001246 <fsm_traffic_vertical_run+0xfe>
		case modifying_led_red_vertical:
//			offGreenYellow_vertical();
			if(timer7_flag == 1){
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <fsm_traffic_vertical_run+0x108>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d11e      	bne.n	800123c <fsm_traffic_vertical_run+0xf4>
				toggleRed_vertical();
 80011fe:	f000 fe4d 	bl	8001e9c <toggleRed_vertical>
				setTimer7(500);
 8001202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001206:	f000 fa67 	bl	80016d8 <setTimer7>
			}
			break;
 800120a:	e017      	b.n	800123c <fsm_traffic_vertical_run+0xf4>
		case modifying_led_yellow_vertical:
//			offGreenRed_vertical();
//			offAllLed_vertical();
			if(timer7_flag == 1){
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <fsm_traffic_vertical_run+0x108>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d115      	bne.n	8001240 <fsm_traffic_vertical_run+0xf8>
				toggleYellow_vertical();
 8001214:	f000 fe62 	bl	8001edc <toggleYellow_vertical>
				setTimer7(500);
 8001218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121c:	f000 fa5c 	bl	80016d8 <setTimer7>
			}
			break;
 8001220:	e00e      	b.n	8001240 <fsm_traffic_vertical_run+0xf8>
		case modifying_led_green_vertical:
			// turn off red and yellow led
//			offRedYellow_vertical();
			if(timer7_flag == 1){
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <fsm_traffic_vertical_run+0x108>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d10c      	bne.n	8001244 <fsm_traffic_vertical_run+0xfc>
				//toggle green led with frequency 2Hz
				toggleGreen_vertical();
 800122a:	f000 fe47 	bl	8001ebc <toggleGreen_vertical>
				setTimer7(500);
 800122e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001232:	f000 fa51 	bl	80016d8 <setTimer7>
			}
			break;
 8001236:	e005      	b.n	8001244 <fsm_traffic_vertical_run+0xfc>
		case mannual_vertical:
			break;
		default:
			break;
 8001238:	bf00      	nop
 800123a:	e004      	b.n	8001246 <fsm_traffic_vertical_run+0xfe>
			break;
 800123c:	bf00      	nop
 800123e:	e002      	b.n	8001246 <fsm_traffic_vertical_run+0xfe>
			break;
 8001240:	bf00      	nop
 8001242:	e000      	b.n	8001246 <fsm_traffic_vertical_run+0xfe>
			break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000060 	.word	0x20000060
 8001250:	2000011c 	.word	0x2000011c

08001254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001258:	f000 fefc 	bl	8002054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125c:	f000 f842 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001260:	f000 f91c 	bl	800149c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001264:	f000 f87a 	bl	800135c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001268:	f000 f8ee 	bl	8001448 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800126c:	481b      	ldr	r0, [pc, #108]	; (80012dc <main+0x88>)
 800126e:	f001 ff3d 	bl	80030ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001272:	2100      	movs	r1, #0
 8001274:	4819      	ldr	r0, [pc, #100]	; (80012dc <main+0x88>)
 8001276:	f001 ffdd 	bl	8003234 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	setTimer4(10);
 800127a:	200a      	movs	r0, #10
 800127c:	f000 f9de 	bl	800163c <setTimer4>
    setTimer6(10);
 8001280:	200a      	movs	r0, #10
 8001282:	f000 fa0f 	bl	80016a4 <setTimer6>
    setTimer7(500);// toggle led-red/green/yellow vertical road 2Hz while modifying time of it
 8001286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128a:	f000 fa25 	bl	80016d8 <setTimer7>
    setTimer8(500);// toggle led-red/green/yellow horizontal road 2Hz while modifying time of it
 800128e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001292:	f000 fa3b 	bl	800170c <setTimer8>
    setTimer10(500);// timer blink led-red for debugging
 8001296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129a:	f000 fa6b 	bl	8001774 <setTimer10>
    setTimer32(10);
 800129e:	200a      	movs	r0, #10
 80012a0:	f000 fa9c 	bl	80017dc <setTimer32>
    setTimer34(10);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f000 fab3 	bl	8001810 <setTimer34>

    /* USER CODE BEGIN 3 */
  //	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,i);

  	  //blink led-red for debugging
  	  if(timer10_flag == 1){
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <main+0x8c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <main+0x6a>
  		  toggleLedRed();
 80012b2:	f000 fda7 	bl	8001e04 <toggleLedRed>
  		  setTimer10(1000);
 80012b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ba:	f000 fa5b 	bl	8001774 <setTimer10>
  	  }

  	  fsm_system_run();
 80012be:	f7ff fae5 	bl	800088c <fsm_system_run>
  	  fsm_7SEG_horizontal_run();
 80012c2:	f7ff f983 	bl	80005cc <fsm_7SEG_horizontal_run>
  	  fsm_7SEG_vertical_run();
 80012c6:	f7ff f9c9 	bl	800065c <fsm_7SEG_vertical_run>
  	  fsm_traffic_vertical_run();
 80012ca:	f7ff ff3d 	bl	8001148 <fsm_traffic_vertical_run>
  	  fsm_traffic_horizontal_run();
 80012ce:	f7ff fee7 	bl	80010a0 <fsm_traffic_horizontal_run>
  	  ///add function
  	  fsm_pedestrian_run();
 80012d2:	f7ff fa91 	bl	80007f8 <fsm_pedestrian_run>
  	  FSM_Buzzer();
 80012d6:	f7ff f92b 	bl	8000530 <FSM_Buzzer>
  	  if(timer10_flag == 1){
 80012da:	e7e6      	b.n	80012aa <main+0x56>
 80012dc:	2000019c 	.word	0x2000019c
 80012e0:	20000134 	.word	0x20000134

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b090      	sub	sp, #64	; 0x40
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	2228      	movs	r2, #40	; 0x28
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fa0c 	bl	8004710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130a:	2301      	movs	r3, #1
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130e:	2310      	movs	r3, #16
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fa7c 	bl	8002818 <HAL_RCC_OscConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001326:	f000 f935 	bl	8001594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132a:	230f      	movs	r3, #15
 800132c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fce8 	bl	8002d18 <HAL_RCC_ClockConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800134e:	f000 f921 	bl	8001594 <Error_Handler>
  }
}
 8001352:	bf00      	nop
 8001354:	3740      	adds	r7, #64	; 0x40
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08e      	sub	sp, #56	; 0x38
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <MX_TIM2_Init+0xe8>)
 800138e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001392:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001394:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <MX_TIM2_Init+0xe8>)
 8001396:	2207      	movs	r2, #7
 8001398:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <MX_TIM2_Init+0xe8>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80013a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b26      	ldr	r3, [pc, #152]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b4:	4823      	ldr	r0, [pc, #140]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013b6:	f001 fe49 	bl	800304c <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013c0:	f000 f8e8 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ce:	4619      	mov	r1, r3
 80013d0:	481c      	ldr	r0, [pc, #112]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013d2:	f002 f991 	bl	80036f8 <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013dc:	f000 f8da 	bl	8001594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013e0:	4818      	ldr	r0, [pc, #96]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013e2:	f001 fecf 	bl	8003184 <HAL_TIM_PWM_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013ec:	f000 f8d2 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	4619      	mov	r1, r3
 80013fe:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_TIM2_Init+0xe8>)
 8001400:	f002 fcfc 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800140a:	f000 f8c3 	bl	8001594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140e:	2360      	movs	r3, #96	; 0x60
 8001410:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM2_Init+0xe8>)
 8001426:	f002 f8a9 	bl	800357c <HAL_TIM_PWM_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001430:	f000 f8b0 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM2_Init+0xe8>)
 8001436:	f000 fbb5 	bl	8001ba4 <HAL_TIM_MspPostInit>

}
 800143a:	bf00      	nop
 800143c:	3738      	adds	r7, #56	; 0x38
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000019c 	.word	0x2000019c

08001448 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <MX_USART2_UART_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001480:	f002 fd26 	bl	8003ed0 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148a:	f000 f883 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001e4 	.word	0x200001e4
 8001498:	40004400 	.word	0x40004400

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a28      	ldr	r2, [pc, #160]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014ce:	f043 0308 	orr.w	r3, r3, #8
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 80014e6:	4823      	ldr	r0, [pc, #140]	; (8001574 <MX_GPIO_Init+0xd8>)
 80014e8:	f001 f965 	bl	80027b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 80014ec:	2200      	movs	r2, #0
 80014ee:	f242 013c 	movw	r1, #8252	; 0x203c
 80014f2:	4821      	ldr	r0, [pc, #132]	; (8001578 <MX_GPIO_Init+0xdc>)
 80014f4:	f001 f95f 	bl	80027b6 <HAL_GPIO_WritePin>
                          |D4_TRAFFIC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_BLUE_Pin D7_PEDES_LIGHT_Pin D2_TRAFFIC1_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin;
 80014f8:	f44f 63a2 	mov.w	r3, #1296	; 0x510
 80014fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2302      	movs	r3, #2
 8001508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	4818      	ldr	r0, [pc, #96]	; (8001574 <MX_GPIO_Init+0xd8>)
 8001512:	f000 ffbf 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : A2_BUTTON2_Pin A0_PEDES_BUTTON_Pin */
  GPIO_InitStruct.Pin = A2_BUTTON2_Pin|A0_PEDES_BUTTON_Pin;
 8001516:	2360      	movs	r3, #96	; 0x60
 8001518:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151e:	2301      	movs	r3, #1
 8001520:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	4619      	mov	r1, r3
 8001528:	4812      	ldr	r0, [pc, #72]	; (8001574 <MX_GPIO_Init+0xd8>)
 800152a:	f000 ffb3 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_BUTTON3_Pin A1_BUTTON1_Pin */
  GPIO_InitStruct.Pin = A3_BUTTON3_Pin|A1_BUTTON1_Pin;
 800152e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001538:	2301      	movs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4619      	mov	r1, r3
 8001542:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_GPIO_Init+0xdc>)
 8001544:	f000 ffa6 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDES_LIGHT_Pin LED_RED_Pin D3_TRAFFIC1_Pin D5_TRAFFIC2_Pin
                           D4_TRAFFIC2_Pin */
  GPIO_InitStruct.Pin = D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 8001548:	f242 033c 	movw	r3, #8252	; 0x203c
 800154c:	60bb      	str	r3, [r7, #8]
                          |D4_TRAFFIC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2302      	movs	r3, #2
 8001558:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_GPIO_Init+0xdc>)
 8001562:	f000 ff97 	bl	8002494 <HAL_GPIO_Init>

}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40010800 	.word	0x40010800
 8001578:	40010c00 	.word	0x40010c00

0800157c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	timerRun();
 8001584:	f000 f95e 	bl	8001844 <timerRun>
	getKeyInput();
 8001588:	f7fe fe28 	bl	80001dc <getKeyInput>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <Error_Handler+0x8>
	...

080015a0 <setTimer1>:
int timer34_counter = 0;

int timer35_flag = 0;
int timer35_counter = 0;

void setTimer1(int duration){
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <setTimer1+0x28>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80015b2:	4a06      	ldr	r2, [pc, #24]	; (80015cc <setTimer1+0x2c>)
 80015b4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <setTimer1+0x30>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	2000009c 	.word	0x2000009c
 80015cc:	200000f0 	.word	0x200000f0
 80015d0:	200000ec 	.word	0x200000ec

080015d4 <setTimer2>:

void setTimer2(int duration){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <setTimer2+0x28>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015e6:	4a06      	ldr	r2, [pc, #24]	; (8001600 <setTimer2+0x2c>)
 80015e8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <setTimer2+0x30>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	2000009c 	.word	0x2000009c
 8001600:	200000f8 	.word	0x200000f8
 8001604:	200000f4 	.word	0x200000f4

08001608 <setTimer3>:

void setTimer3(int duration){
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <setTimer3+0x28>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	fb92 f3f3 	sdiv	r3, r2, r3
 800161a:	4a06      	ldr	r2, [pc, #24]	; (8001634 <setTimer3+0x2c>)
 800161c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <setTimer3+0x30>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000009c 	.word	0x2000009c
 8001634:	20000100 	.word	0x20000100
 8001638:	200000fc 	.word	0x200000fc

0800163c <setTimer4>:

void setTimer4(int duration){
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <setTimer4+0x28>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	fb92 f3f3 	sdiv	r3, r2, r3
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <setTimer4+0x2c>)
 8001650:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <setTimer4+0x30>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	2000009c 	.word	0x2000009c
 8001668:	20000108 	.word	0x20000108
 800166c:	20000104 	.word	0x20000104

08001670 <setTimer5>:

void setTimer5(int duration){
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <setTimer5+0x28>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001682:	4a06      	ldr	r2, [pc, #24]	; (800169c <setTimer5+0x2c>)
 8001684:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <setTimer5+0x30>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	2000009c 	.word	0x2000009c
 800169c:	20000110 	.word	0x20000110
 80016a0:	2000010c 	.word	0x2000010c

080016a4 <setTimer6>:

void setTimer6(int duration){
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <setTimer6+0x28>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <setTimer6+0x2c>)
 80016b8:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <setTimer6+0x30>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	2000009c 	.word	0x2000009c
 80016d0:	20000118 	.word	0x20000118
 80016d4:	20000114 	.word	0x20000114

080016d8 <setTimer7>:

void setTimer7(int duration){
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <setTimer7+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ea:	4a06      	ldr	r2, [pc, #24]	; (8001704 <setTimer7+0x2c>)
 80016ec:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <setTimer7+0x30>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2000009c 	.word	0x2000009c
 8001704:	20000120 	.word	0x20000120
 8001708:	2000011c 	.word	0x2000011c

0800170c <setTimer8>:

void setTimer8(int duration){
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <setTimer8+0x28>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	fb92 f3f3 	sdiv	r3, r2, r3
 800171e:	4a06      	ldr	r2, [pc, #24]	; (8001738 <setTimer8+0x2c>)
 8001720:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <setTimer8+0x30>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000009c 	.word	0x2000009c
 8001738:	20000128 	.word	0x20000128
 800173c:	20000124 	.word	0x20000124

08001740 <setTimer9>:

void setTimer9(int duration){
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	timer9_counter = duration/TICK;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <setTimer9+0x28>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001752:	4a06      	ldr	r2, [pc, #24]	; (800176c <setTimer9+0x2c>)
 8001754:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <setTimer9+0x30>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	2000009c 	.word	0x2000009c
 800176c:	20000130 	.word	0x20000130
 8001770:	2000012c 	.word	0x2000012c

08001774 <setTimer10>:

void setTimer10(int duration){
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	timer10_counter = duration/TICK;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <setTimer10+0x28>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	fb92 f3f3 	sdiv	r3, r2, r3
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <setTimer10+0x2c>)
 8001788:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <setTimer10+0x30>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000009c 	.word	0x2000009c
 80017a0:	20000138 	.word	0x20000138
 80017a4:	20000134 	.word	0x20000134

080017a8 <setTimer30>:
void setTimer11(int duration){
	timer11_counter = duration/TICK;
	timer11_flag = 0;
}

void setTimer30(int duration){
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	timer30_counter = duration/TICK;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <setTimer30+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ba:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <setTimer30+0x2c>)
 80017bc:	6013      	str	r3, [r2, #0]
	timer30_flag = 0;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <setTimer30+0x30>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000009c 	.word	0x2000009c
 80017d4:	20000148 	.word	0x20000148
 80017d8:	20000144 	.word	0x20000144

080017dc <setTimer32>:
void setTimer31(int duration){
	timer31_counter = duration/TICK;
	timer31_flag = 0;
}

void setTimer32(int duration){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	timer32_counter = duration/TICK;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <setTimer32+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <setTimer32+0x2c>)
 80017f0:	6013      	str	r3, [r2, #0]
	timer32_flag = 0;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <setTimer32+0x30>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2000009c 	.word	0x2000009c
 8001808:	20000158 	.word	0x20000158
 800180c:	20000154 	.word	0x20000154

08001810 <setTimer34>:
void setTimer33(int duration){
	timer33_counter = duration/TICK;
	timer33_flag = 0;
}

void setTimer34(int duration){
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	timer34_counter = duration/TICK;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <setTimer34+0x28>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001822:	4a06      	ldr	r2, [pc, #24]	; (800183c <setTimer34+0x2c>)
 8001824:	6013      	str	r3, [r2, #0]
	timer34_flag = 0;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <setTimer34+0x30>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	2000009c 	.word	0x2000009c
 800183c:	20000168 	.word	0x20000168
 8001840:	20000164 	.word	0x20000164

08001844 <timerRun>:
void setTimer35(int duration){
	timer35_counter = duration/TICK;
	timer35_flag = 0;
}

void timerRun(){
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 8001848:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <timerRun+0x22c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	dd04      	ble.n	800185a <timerRun+0x16>
 8001850:	4b87      	ldr	r3, [pc, #540]	; (8001a70 <timerRun+0x22c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3b01      	subs	r3, #1
 8001856:	4a86      	ldr	r2, [pc, #536]	; (8001a70 <timerRun+0x22c>)
 8001858:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 800185a:	4b85      	ldr	r3, [pc, #532]	; (8001a70 <timerRun+0x22c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <timerRun+0x24>
		timer1_flag = 1;
 8001862:	4b84      	ldr	r3, [pc, #528]	; (8001a74 <timerRun+0x230>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 8001868:	4b83      	ldr	r3, [pc, #524]	; (8001a78 <timerRun+0x234>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	dd04      	ble.n	800187a <timerRun+0x36>
 8001870:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <timerRun+0x234>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3b01      	subs	r3, #1
 8001876:	4a80      	ldr	r2, [pc, #512]	; (8001a78 <timerRun+0x234>)
 8001878:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 800187a:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <timerRun+0x234>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <timerRun+0x44>
		timer2_flag = 1;
 8001882:	4b7e      	ldr	r3, [pc, #504]	; (8001a7c <timerRun+0x238>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 8001888:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <timerRun+0x23c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd04      	ble.n	800189a <timerRun+0x56>
 8001890:	4b7b      	ldr	r3, [pc, #492]	; (8001a80 <timerRun+0x23c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	4a7a      	ldr	r2, [pc, #488]	; (8001a80 <timerRun+0x23c>)
 8001898:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 800189a:	4b79      	ldr	r3, [pc, #484]	; (8001a80 <timerRun+0x23c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <timerRun+0x64>
		timer3_flag = 1;
 80018a2:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <timerRun+0x240>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 80018a8:	4b77      	ldr	r3, [pc, #476]	; (8001a88 <timerRun+0x244>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dd04      	ble.n	80018ba <timerRun+0x76>
 80018b0:	4b75      	ldr	r3, [pc, #468]	; (8001a88 <timerRun+0x244>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	4a74      	ldr	r2, [pc, #464]	; (8001a88 <timerRun+0x244>)
 80018b8:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 80018ba:	4b73      	ldr	r3, [pc, #460]	; (8001a88 <timerRun+0x244>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <timerRun+0x84>
		timer4_flag = 1;
 80018c2:	4b72      	ldr	r3, [pc, #456]	; (8001a8c <timerRun+0x248>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0) timer5_counter--;
 80018c8:	4b71      	ldr	r3, [pc, #452]	; (8001a90 <timerRun+0x24c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	dd04      	ble.n	80018da <timerRun+0x96>
 80018d0:	4b6f      	ldr	r3, [pc, #444]	; (8001a90 <timerRun+0x24c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	4a6e      	ldr	r2, [pc, #440]	; (8001a90 <timerRun+0x24c>)
 80018d8:	6013      	str	r3, [r2, #0]
	if(timer5_counter == 0){
 80018da:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <timerRun+0x24c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <timerRun+0xa4>
		timer5_flag = 1;
 80018e2:	4b6c      	ldr	r3, [pc, #432]	; (8001a94 <timerRun+0x250>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0) timer6_counter--;
 80018e8:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <timerRun+0x254>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd04      	ble.n	80018fa <timerRun+0xb6>
 80018f0:	4b69      	ldr	r3, [pc, #420]	; (8001a98 <timerRun+0x254>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	4a68      	ldr	r2, [pc, #416]	; (8001a98 <timerRun+0x254>)
 80018f8:	6013      	str	r3, [r2, #0]
	if(timer6_counter == 0){
 80018fa:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <timerRun+0x254>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <timerRun+0xc4>
		timer6_flag = 1;
 8001902:	4b66      	ldr	r3, [pc, #408]	; (8001a9c <timerRun+0x258>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0) timer7_counter--;
 8001908:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <timerRun+0x25c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	dd04      	ble.n	800191a <timerRun+0xd6>
 8001910:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <timerRun+0x25c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3b01      	subs	r3, #1
 8001916:	4a62      	ldr	r2, [pc, #392]	; (8001aa0 <timerRun+0x25c>)
 8001918:	6013      	str	r3, [r2, #0]
	if(timer7_counter == 0){
 800191a:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <timerRun+0x25c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <timerRun+0xe4>
		timer7_flag = 1;
 8001922:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <timerRun+0x260>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0) timer8_counter--;
 8001928:	4b5f      	ldr	r3, [pc, #380]	; (8001aa8 <timerRun+0x264>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	dd04      	ble.n	800193a <timerRun+0xf6>
 8001930:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <timerRun+0x264>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	4a5c      	ldr	r2, [pc, #368]	; (8001aa8 <timerRun+0x264>)
 8001938:	6013      	str	r3, [r2, #0]
	if(timer8_counter == 0){
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <timerRun+0x264>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <timerRun+0x104>
		timer8_flag = 1;
 8001942:	4b5a      	ldr	r3, [pc, #360]	; (8001aac <timerRun+0x268>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0) timer9_counter--;
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <timerRun+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	dd04      	ble.n	800195a <timerRun+0x116>
 8001950:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <timerRun+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3b01      	subs	r3, #1
 8001956:	4a56      	ldr	r2, [pc, #344]	; (8001ab0 <timerRun+0x26c>)
 8001958:	6013      	str	r3, [r2, #0]
	if(timer9_counter == 0){
 800195a:	4b55      	ldr	r3, [pc, #340]	; (8001ab0 <timerRun+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <timerRun+0x124>
		timer9_flag = 1;
 8001962:	4b54      	ldr	r3, [pc, #336]	; (8001ab4 <timerRun+0x270>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
	}

	if(timer10_counter > 0) timer10_counter--;
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <timerRun+0x274>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	dd04      	ble.n	800197a <timerRun+0x136>
 8001970:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <timerRun+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3b01      	subs	r3, #1
 8001976:	4a50      	ldr	r2, [pc, #320]	; (8001ab8 <timerRun+0x274>)
 8001978:	6013      	str	r3, [r2, #0]
	if(timer10_counter == 0){
 800197a:	4b4f      	ldr	r3, [pc, #316]	; (8001ab8 <timerRun+0x274>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <timerRun+0x144>
		timer10_flag = 1;
 8001982:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <timerRun+0x278>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
	}

	if(timer11_counter > 0) timer11_counter--;
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <timerRun+0x27c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	dd04      	ble.n	800199a <timerRun+0x156>
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <timerRun+0x27c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3b01      	subs	r3, #1
 8001996:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <timerRun+0x27c>)
 8001998:	6013      	str	r3, [r2, #0]
	if(timer11_counter == 0){
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <timerRun+0x27c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <timerRun+0x164>
		timer11_flag = 1;
 80019a2:	4b48      	ldr	r3, [pc, #288]	; (8001ac4 <timerRun+0x280>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
	}

	if(timer30_counter > 0) timer30_counter--;
 80019a8:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <timerRun+0x284>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	dd04      	ble.n	80019ba <timerRun+0x176>
 80019b0:	4b45      	ldr	r3, [pc, #276]	; (8001ac8 <timerRun+0x284>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	4a44      	ldr	r2, [pc, #272]	; (8001ac8 <timerRun+0x284>)
 80019b8:	6013      	str	r3, [r2, #0]
	if(timer30_counter == 0){
 80019ba:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <timerRun+0x284>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <timerRun+0x184>
		timer30_flag = 1;
 80019c2:	4b42      	ldr	r3, [pc, #264]	; (8001acc <timerRun+0x288>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
	}

	if(timer31_counter > 0) timer31_counter--;
 80019c8:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <timerRun+0x28c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	dd04      	ble.n	80019da <timerRun+0x196>
 80019d0:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <timerRun+0x28c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	4a3e      	ldr	r2, [pc, #248]	; (8001ad0 <timerRun+0x28c>)
 80019d8:	6013      	str	r3, [r2, #0]
	if(timer31_counter == 0){
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <timerRun+0x28c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <timerRun+0x1a4>
		timer31_flag = 1;
 80019e2:	4b3c      	ldr	r3, [pc, #240]	; (8001ad4 <timerRun+0x290>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
	}

	if(timer32_counter > 0) timer32_counter--;
 80019e8:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <timerRun+0x294>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	dd04      	ble.n	80019fa <timerRun+0x1b6>
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <timerRun+0x294>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	4a38      	ldr	r2, [pc, #224]	; (8001ad8 <timerRun+0x294>)
 80019f8:	6013      	str	r3, [r2, #0]
	if(timer32_counter == 0){
 80019fa:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <timerRun+0x294>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <timerRun+0x1c4>
		timer32_flag = 1;
 8001a02:	4b36      	ldr	r3, [pc, #216]	; (8001adc <timerRun+0x298>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
	}

	if(timer33_counter > 0) timer33_counter--;
 8001a08:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <timerRun+0x29c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dd04      	ble.n	8001a1a <timerRun+0x1d6>
 8001a10:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <timerRun+0x29c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <timerRun+0x29c>)
 8001a18:	6013      	str	r3, [r2, #0]
	if(timer33_counter == 0){
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <timerRun+0x29c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <timerRun+0x1e4>
		timer33_flag = 1;
 8001a22:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <timerRun+0x2a0>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
	}

	if(timer34_counter > 0) timer34_counter--;
 8001a28:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <timerRun+0x2a4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	dd04      	ble.n	8001a3a <timerRun+0x1f6>
 8001a30:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <timerRun+0x2a4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	4a2c      	ldr	r2, [pc, #176]	; (8001ae8 <timerRun+0x2a4>)
 8001a38:	6013      	str	r3, [r2, #0]
	if(timer34_counter == 0){
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <timerRun+0x2a4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <timerRun+0x204>
		timer34_flag = 1;
 8001a42:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <timerRun+0x2a8>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
	}
	if(timer35_counter > 0) timer35_counter--;
 8001a48:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <timerRun+0x2ac>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	dd04      	ble.n	8001a5a <timerRun+0x216>
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <timerRun+0x2ac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <timerRun+0x2ac>)
 8001a58:	6013      	str	r3, [r2, #0]
	if(timer35_counter == 0){
 8001a5a:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <timerRun+0x2ac>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <timerRun+0x224>
		timer35_flag = 1;
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <timerRun+0x2b0>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
	}
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	200000f0 	.word	0x200000f0
 8001a74:	200000ec 	.word	0x200000ec
 8001a78:	200000f8 	.word	0x200000f8
 8001a7c:	200000f4 	.word	0x200000f4
 8001a80:	20000100 	.word	0x20000100
 8001a84:	200000fc 	.word	0x200000fc
 8001a88:	20000108 	.word	0x20000108
 8001a8c:	20000104 	.word	0x20000104
 8001a90:	20000110 	.word	0x20000110
 8001a94:	2000010c 	.word	0x2000010c
 8001a98:	20000118 	.word	0x20000118
 8001a9c:	20000114 	.word	0x20000114
 8001aa0:	20000120 	.word	0x20000120
 8001aa4:	2000011c 	.word	0x2000011c
 8001aa8:	20000128 	.word	0x20000128
 8001aac:	20000124 	.word	0x20000124
 8001ab0:	20000130 	.word	0x20000130
 8001ab4:	2000012c 	.word	0x2000012c
 8001ab8:	20000138 	.word	0x20000138
 8001abc:	20000134 	.word	0x20000134
 8001ac0:	20000140 	.word	0x20000140
 8001ac4:	2000013c 	.word	0x2000013c
 8001ac8:	20000148 	.word	0x20000148
 8001acc:	20000144 	.word	0x20000144
 8001ad0:	20000150 	.word	0x20000150
 8001ad4:	2000014c 	.word	0x2000014c
 8001ad8:	20000158 	.word	0x20000158
 8001adc:	20000154 	.word	0x20000154
 8001ae0:	20000160 	.word	0x20000160
 8001ae4:	2000015c 	.word	0x2000015c
 8001ae8:	20000168 	.word	0x20000168
 8001aec:	20000164 	.word	0x20000164
 8001af0:	20000170 	.word	0x20000170
 8001af4:	2000016c 	.word	0x2000016c

08001af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_MspInit+0x60>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_MspInit+0x60>)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000

08001b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6c:	d113      	bne.n	8001b96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_TIM_Base_MspInit+0x44>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_TIM_Base_MspInit+0x44>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_TIM_Base_MspInit+0x44>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	201c      	movs	r0, #28
 8001b8c:	f000 fb9b 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b90:	201c      	movs	r0, #28
 8001b92:	f000 fbb4 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc2:	d117      	bne.n	8001bf4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_TIM_MspPostInit+0x58>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <HAL_TIM_MspPostInit+0x58>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_TIM_MspPostInit+0x58>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	4804      	ldr	r0, [pc, #16]	; (8001c00 <HAL_TIM_MspPostInit+0x5c>)
 8001bf0:	f000 fc50 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bf4:	bf00      	nop
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010800 	.word	0x40010800

08001c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_UART_MspInit+0x98>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d137      	bne.n	8001c94 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2e:	61d3      	str	r3, [r2, #28]
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c54:	2304      	movs	r3, #4
 8001c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4619      	mov	r1, r3
 8001c66:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <HAL_UART_MspInit+0xa0>)
 8001c68:	f000 fc14 	bl	8002494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <HAL_UART_MspInit+0xa0>)
 8001c80:	f000 fc08 	bl	8002494 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	2026      	movs	r0, #38	; 0x26
 8001c8a:	f000 fb1c 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c8e:	2026      	movs	r0, #38	; 0x26
 8001c90:	f000 fb35 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010800 	.word	0x40010800

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <NMI_Handler+0x4>

08001cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cee:	f000 f9f7 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <TIM2_IRQHandler+0x10>)
 8001cfe:	f001 fb35 	bl	800336c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000019c 	.word	0x2000019c

08001d0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <USART2_IRQHandler+0x10>)
 8001d12:	f002 f92b 	bl	8003f6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200001e4 	.word	0x200001e4

08001d20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <setRed_horizontal>:
 */
#include "traffic.h"
#include "global.h"
#include "main.h"

void setRed_horizontal(){
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <setRed_horizontal+0x20>)
 8001d38:	f000 fd3d 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2108      	movs	r1, #8
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <setRed_horizontal+0x24>)
 8001d42:	f000 fd38 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	40010c00 	.word	0x40010c00

08001d54 <setGreen_horizontal>:

void setGreen_horizontal(){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <setGreen_horizontal+0x20>)
 8001d60:	f000 fd29 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	2108      	movs	r1, #8
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <setGreen_horizontal+0x24>)
 8001d6a:	f000 fd24 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_SET);
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40010800 	.word	0x40010800
 8001d78:	40010c00 	.word	0x40010c00

08001d7c <setYellow_horizontal>:

void setYellow_horizontal(){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <setYellow_horizontal+0x20>)
 8001d88:	f000 fd15 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2108      	movs	r1, #8
 8001d90:	4803      	ldr	r0, [pc, #12]	; (8001da0 <setYellow_horizontal+0x24>)
 8001d92:	f000 fd10 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40010800 	.word	0x40010800
 8001da0:	40010c00 	.word	0x40010c00

08001da4 <setRed_vertical>:

void setRed_vertical(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2120      	movs	r1, #32
 8001dac:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <setRed_vertical+0x1c>)
 8001dae:	f000 fd02 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2110      	movs	r1, #16
 8001db6:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <setRed_vertical+0x1c>)
 8001db8:	f000 fcfd 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40010c00 	.word	0x40010c00

08001dc4 <setGreen_vertical>:

void setGreen_vertical(){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2120      	movs	r1, #32
 8001dcc:	4804      	ldr	r0, [pc, #16]	; (8001de0 <setGreen_vertical+0x1c>)
 8001dce:	f000 fcf2 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2110      	movs	r1, #16
 8001dd6:	4802      	ldr	r0, [pc, #8]	; (8001de0 <setGreen_vertical+0x1c>)
 8001dd8:	f000 fced 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_SET);
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40010c00 	.word	0x40010c00

08001de4 <setYellow_vertical>:

void setYellow_vertical(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	2120      	movs	r1, #32
 8001dec:	4804      	ldr	r0, [pc, #16]	; (8001e00 <setYellow_vertical+0x1c>)
 8001dee:	f000 fce2 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	2110      	movs	r1, #16
 8001df6:	4802      	ldr	r0, [pc, #8]	; (8001e00 <setYellow_vertical+0x1c>)
 8001df8:	f000 fcdd 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40010c00 	.word	0x40010c00

08001e04 <toggleLedRed>:


void toggleLedRed(){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <toggleLedRed+0x14>)
 8001e0e:	f000 fcea 	bl	80027e6 <HAL_GPIO_TogglePin>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40010c00 	.word	0x40010c00

08001e1c <toggleRed_horizontal>:

void toggleRed_horizontal(){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDA_GPIO_Port, REDA_Pin);
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8001e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <toggleRed_horizontal+0x1c>)
 8001e26:	f000 fcde 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2108      	movs	r1, #8
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <toggleRed_horizontal+0x20>)
 8001e30:	f000 fcc1 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40010800 	.word	0x40010800
 8001e3c:	40010c00 	.word	0x40010c00

08001e40 <toggleGreen_horizontal>:

void toggleGreen_horizontal(){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENA_GPIO_Port, GREENA_Pin);
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8001e44:	2108      	movs	r1, #8
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <toggleGreen_horizontal+0x1c>)
 8001e48:	f000 fccd 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e52:	4803      	ldr	r0, [pc, #12]	; (8001e60 <toggleGreen_horizontal+0x20>)
 8001e54:	f000 fcaf 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40010c00 	.word	0x40010c00
 8001e60:	40010800 	.word	0x40010800

08001e64 <toggleYellow_horizontal>:

void toggleYellow_horizontal(){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWA_GPIO_Port, YELLOWA_Pin);
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, HAL_GPIO_ReadPin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin));
 8001e68:	2108      	movs	r1, #8
 8001e6a:	480a      	ldr	r0, [pc, #40]	; (8001e94 <toggleYellow_horizontal+0x30>)
 8001e6c:	f000 fc8c 	bl	8002788 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e78:	4807      	ldr	r0, [pc, #28]	; (8001e98 <toggleYellow_horizontal+0x34>)
 8001e7a:	f000 fc9c 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8001e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <toggleYellow_horizontal+0x34>)
 8001e84:	f000 fcaf 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8001e88:	2108      	movs	r1, #8
 8001e8a:	4802      	ldr	r0, [pc, #8]	; (8001e94 <toggleYellow_horizontal+0x30>)
 8001e8c:	f000 fcab 	bl	80027e6 <HAL_GPIO_TogglePin>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40010c00 	.word	0x40010c00
 8001e98:	40010800 	.word	0x40010800

08001e9c <toggleRed_vertical>:

void toggleRed_vertical(){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDB_GPIO_Port, REDB_Pin);
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8001ea0:	2120      	movs	r1, #32
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <toggleRed_vertical+0x1c>)
 8001ea4:	f000 fc9f 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2110      	movs	r1, #16
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <toggleRed_vertical+0x1c>)
 8001eae:	f000 fc82 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40010c00 	.word	0x40010c00

08001ebc <toggleGreen_vertical>:

void toggleGreen_vertical(){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENB_GPIO_Port, GREENB_Pin);
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8001ec0:	2110      	movs	r1, #16
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <toggleGreen_vertical+0x1c>)
 8001ec4:	f000 fc8f 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2120      	movs	r1, #32
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <toggleGreen_vertical+0x1c>)
 8001ece:	f000 fc72 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40010c00 	.word	0x40010c00

08001edc <toggleYellow_vertical>:

void toggleYellow_vertical(){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWB_GPIO_Port, YELLOWB_Pin);
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, HAL_GPIO_ReadPin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin));
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	4809      	ldr	r0, [pc, #36]	; (8001f08 <toggleYellow_vertical+0x2c>)
 8001ee4:	f000 fc50 	bl	8002788 <HAL_GPIO_ReadPin>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	2120      	movs	r1, #32
 8001eee:	4806      	ldr	r0, [pc, #24]	; (8001f08 <toggleYellow_vertical+0x2c>)
 8001ef0:	f000 fc61 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	4804      	ldr	r0, [pc, #16]	; (8001f08 <toggleYellow_vertical+0x2c>)
 8001ef8:	f000 fc75 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8001efc:	2110      	movs	r1, #16
 8001efe:	4802      	ldr	r0, [pc, #8]	; (8001f08 <toggleYellow_vertical+0x2c>)
 8001f00:	f000 fc71 	bl	80027e6 <HAL_GPIO_TogglePin>
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40010c00 	.word	0x40010c00

08001f0c <resetTimeTraffic>:
void offRedYellow_vertical(){
//	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
}

void resetTimeTraffic(){
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
	time_red_horizontal_temp = time_red_horizontal;
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <resetTimeTraffic+0x3c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <resetTimeTraffic+0x40>)
 8001f16:	6013      	str	r3, [r2, #0]
	time_green_horizontal_temp = time_green_horizontal;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <resetTimeTraffic+0x44>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <resetTimeTraffic+0x48>)
 8001f1e:	6013      	str	r3, [r2, #0]
	time_yellow_horizontal_temp = time_yellow_horizontal;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <resetTimeTraffic+0x4c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <resetTimeTraffic+0x50>)
 8001f26:	6013      	str	r3, [r2, #0]

	time_red_vertical_temp = time_red_vertical;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <resetTimeTraffic+0x54>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <resetTimeTraffic+0x58>)
 8001f2e:	6013      	str	r3, [r2, #0]
	time_green_vertical_temp = time_green_vertical;
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <resetTimeTraffic+0x5c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <resetTimeTraffic+0x60>)
 8001f36:	6013      	str	r3, [r2, #0]
	time_yellow_vertical_temp = time_yellow_vertical;
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <resetTimeTraffic+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <resetTimeTraffic+0x68>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	20000064 	.word	0x20000064
 8001f4c:	20000070 	.word	0x20000070
 8001f50:	20000068 	.word	0x20000068
 8001f54:	20000074 	.word	0x20000074
 8001f58:	2000006c 	.word	0x2000006c
 8001f5c:	20000078 	.word	0x20000078
 8001f60:	20000084 	.word	0x20000084
 8001f64:	20000090 	.word	0x20000090
 8001f68:	2000007c 	.word	0x2000007c
 8001f6c:	20000088 	.word	0x20000088
 8001f70:	20000080 	.word	0x20000080
 8001f74:	2000008c 	.word	0x2000008c

08001f78 <set_off_pedes>:

void set_off_pedes(){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2104      	movs	r1, #4
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <set_off_pedes+0x20>)
 8001f82:	f000 fc18 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <set_off_pedes+0x24>)
 8001f8e:	f000 fc12 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40010c00 	.word	0x40010c00
 8001f9c:	40010800 	.word	0x40010800

08001fa0 <set_red_pedes>:
void set_red_pedes(){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <set_red_pedes+0x20>)
 8001faa:	f000 fc04 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <set_red_pedes+0x24>)
 8001fb6:	f000 fbfe 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40010800 	.word	0x40010800

08001fc8 <set_green_pedes>:
void set_green_pedes(){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2104      	movs	r1, #4
 8001fd0:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <set_green_pedes+0x20>)
 8001fd2:	f000 fbf0 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fdc:	4803      	ldr	r0, [pc, #12]	; (8001fec <set_green_pedes+0x24>)
 8001fde:	f000 fbea 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40010c00 	.word	0x40010c00
 8001fec:	40010800 	.word	0x40010800

08001ff0 <set_on_buzzer>:

void set_on_buzzer(){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <set_on_buzzer+0x14>)
 8001ffa:	f000 fbdc 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40010800 	.word	0x40010800

08002008 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002008:	480c      	ldr	r0, [pc, #48]	; (800203c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800200a:	490d      	ldr	r1, [pc, #52]	; (8002040 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002010:	e002      	b.n	8002018 <LoopCopyDataInit>

08002012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002016:	3304      	adds	r3, #4

08002018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800201c:	d3f9      	bcc.n	8002012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002020:	4c0a      	ldr	r4, [pc, #40]	; (800204c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002024:	e001      	b.n	800202a <LoopFillZerobss>

08002026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002028:	3204      	adds	r2, #4

0800202a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800202c:	d3fb      	bcc.n	8002026 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800202e:	f7ff fe77 	bl	8001d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002032:	f002 fb49 	bl	80046c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002036:	f7ff f90d 	bl	8001254 <main>
  bx lr
 800203a:	4770      	bx	lr
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002044:	08004768 	.word	0x08004768
  ldr r2, =_sbss
 8002048:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800204c:	2000022c 	.word	0x2000022c

08002050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <ADC1_2_IRQHandler>
	...

08002054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_Init+0x28>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_Init+0x28>)
 800205e:	f043 0310 	orr.w	r3, r3, #16
 8002062:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002064:	2003      	movs	r0, #3
 8002066:	f000 f923 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206a:	200f      	movs	r0, #15
 800206c:	f000 f808 	bl	8002080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002070:	f7ff fd42 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40022000 	.word	0x40022000

08002080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_InitTick+0x54>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_InitTick+0x58>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002096:	fbb3 f3f1 	udiv	r3, r3, r1
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f93b 	bl	800231a <HAL_SYSTICK_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00e      	b.n	80020cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b0f      	cmp	r3, #15
 80020b2:	d80a      	bhi.n	80020ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f000 f903 	bl	80022c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <HAL_InitTick+0x5c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200000a0 	.word	0x200000a0
 80020d8:	200000a8 	.word	0x200000a8
 80020dc:	200000a4 	.word	0x200000a4

080020e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_IncTick+0x1c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_IncTick+0x20>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a03      	ldr	r2, [pc, #12]	; (8002100 <HAL_IncTick+0x20>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	200000a8 	.word	0x200000a8
 8002100:	20000228 	.word	0x20000228

08002104 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return uwTick;
 8002108:	4b02      	ldr	r3, [pc, #8]	; (8002114 <HAL_GetTick+0x10>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	20000228 	.word	0x20000228

08002118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4906      	ldr	r1, [pc, #24]	; (80021b0 <__NVIC_EnableIRQ+0x34>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227c:	d301      	bcc.n	8002282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <SysTick_Config+0x40>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228a:	210f      	movs	r1, #15
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f7ff ff90 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <SysTick_Config+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SysTick_Config+0x40>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff2d 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff42 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff90 	bl	8002208 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5f 	bl	80021b4 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff35 	bl	800217c <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffa2 	bl	800226c <SysTick_Config>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002344:	2b02      	cmp	r3, #2
 8002346:	d008      	beq.n	800235a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2204      	movs	r2, #4
 800234c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e020      	b.n	800239c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 020e 	bic.w	r2, r2, #14
 8002368:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f202 	lsl.w	r2, r1, r2
 8002388:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d005      	beq.n	80023ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2204      	movs	r2, #4
 80023c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	e051      	b.n	800246e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 020e 	bic.w	r2, r2, #14
 80023d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0201 	bic.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_DMA_Abort_IT+0xd0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d029      	beq.n	8002448 <HAL_DMA_Abort_IT+0xa0>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a20      	ldr	r2, [pc, #128]	; (800247c <HAL_DMA_Abort_IT+0xd4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d022      	beq.n	8002444 <HAL_DMA_Abort_IT+0x9c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <HAL_DMA_Abort_IT+0xd8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d01a      	beq.n	800243e <HAL_DMA_Abort_IT+0x96>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <HAL_DMA_Abort_IT+0xdc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d012      	beq.n	8002438 <HAL_DMA_Abort_IT+0x90>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_DMA_Abort_IT+0xe0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00a      	beq.n	8002432 <HAL_DMA_Abort_IT+0x8a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1a      	ldr	r2, [pc, #104]	; (800248c <HAL_DMA_Abort_IT+0xe4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d102      	bne.n	800242c <HAL_DMA_Abort_IT+0x84>
 8002426:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800242a:	e00e      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 800242c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002430:	e00b      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 8002432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002436:	e008      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 8002438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243c:	e005      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 800243e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002442:	e002      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 8002444:	2310      	movs	r3, #16
 8002446:	e000      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 8002448:	2301      	movs	r3, #1
 800244a:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_DMA_Abort_IT+0xe8>)
 800244c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
    } 
  }
  return status;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40020008 	.word	0x40020008
 800247c:	4002001c 	.word	0x4002001c
 8002480:	40020030 	.word	0x40020030
 8002484:	40020044 	.word	0x40020044
 8002488:	40020058 	.word	0x40020058
 800248c:	4002006c 	.word	0x4002006c
 8002490:	40020000 	.word	0x40020000

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b08b      	sub	sp, #44	; 0x2c
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a6:	e148      	b.n	800273a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024a8:	2201      	movs	r2, #1
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8137 	bne.w	8002734 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4aa3      	ldr	r2, [pc, #652]	; (8002758 <HAL_GPIO_Init+0x2c4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d05e      	beq.n	800258e <HAL_GPIO_Init+0xfa>
 80024d0:	4aa1      	ldr	r2, [pc, #644]	; (8002758 <HAL_GPIO_Init+0x2c4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d875      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 80024d6:	4aa1      	ldr	r2, [pc, #644]	; (800275c <HAL_GPIO_Init+0x2c8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d058      	beq.n	800258e <HAL_GPIO_Init+0xfa>
 80024dc:	4a9f      	ldr	r2, [pc, #636]	; (800275c <HAL_GPIO_Init+0x2c8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d86f      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 80024e2:	4a9f      	ldr	r2, [pc, #636]	; (8002760 <HAL_GPIO_Init+0x2cc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d052      	beq.n	800258e <HAL_GPIO_Init+0xfa>
 80024e8:	4a9d      	ldr	r2, [pc, #628]	; (8002760 <HAL_GPIO_Init+0x2cc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d869      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 80024ee:	4a9d      	ldr	r2, [pc, #628]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d04c      	beq.n	800258e <HAL_GPIO_Init+0xfa>
 80024f4:	4a9b      	ldr	r2, [pc, #620]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d863      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 80024fa:	4a9b      	ldr	r2, [pc, #620]	; (8002768 <HAL_GPIO_Init+0x2d4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d046      	beq.n	800258e <HAL_GPIO_Init+0xfa>
 8002500:	4a99      	ldr	r2, [pc, #612]	; (8002768 <HAL_GPIO_Init+0x2d4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d85d      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 8002506:	2b12      	cmp	r3, #18
 8002508:	d82a      	bhi.n	8002560 <HAL_GPIO_Init+0xcc>
 800250a:	2b12      	cmp	r3, #18
 800250c:	d859      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <HAL_GPIO_Init+0x80>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	0800258f 	.word	0x0800258f
 8002518:	08002569 	.word	0x08002569
 800251c:	0800257b 	.word	0x0800257b
 8002520:	080025bd 	.word	0x080025bd
 8002524:	080025c3 	.word	0x080025c3
 8002528:	080025c3 	.word	0x080025c3
 800252c:	080025c3 	.word	0x080025c3
 8002530:	080025c3 	.word	0x080025c3
 8002534:	080025c3 	.word	0x080025c3
 8002538:	080025c3 	.word	0x080025c3
 800253c:	080025c3 	.word	0x080025c3
 8002540:	080025c3 	.word	0x080025c3
 8002544:	080025c3 	.word	0x080025c3
 8002548:	080025c3 	.word	0x080025c3
 800254c:	080025c3 	.word	0x080025c3
 8002550:	080025c3 	.word	0x080025c3
 8002554:	080025c3 	.word	0x080025c3
 8002558:	08002571 	.word	0x08002571
 800255c:	08002585 	.word	0x08002585
 8002560:	4a82      	ldr	r2, [pc, #520]	; (800276c <HAL_GPIO_Init+0x2d8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002566:	e02c      	b.n	80025c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	623b      	str	r3, [r7, #32]
          break;
 800256e:	e029      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	3304      	adds	r3, #4
 8002576:	623b      	str	r3, [r7, #32]
          break;
 8002578:	e024      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	3308      	adds	r3, #8
 8002580:	623b      	str	r3, [r7, #32]
          break;
 8002582:	e01f      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	330c      	adds	r3, #12
 800258a:	623b      	str	r3, [r7, #32]
          break;
 800258c:	e01a      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002596:	2304      	movs	r3, #4
 8002598:	623b      	str	r3, [r7, #32]
          break;
 800259a:	e013      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a4:	2308      	movs	r3, #8
 80025a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	611a      	str	r2, [r3, #16]
          break;
 80025ae:	e009      	b.n	80025c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b0:	2308      	movs	r3, #8
 80025b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	615a      	str	r2, [r3, #20]
          break;
 80025ba:	e003      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
          break;
 80025c0:	e000      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          break;
 80025c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2bff      	cmp	r3, #255	; 0xff
 80025c8:	d801      	bhi.n	80025ce <HAL_GPIO_Init+0x13a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	e001      	b.n	80025d2 <HAL_GPIO_Init+0x13e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3304      	adds	r3, #4
 80025d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2bff      	cmp	r3, #255	; 0xff
 80025d8:	d802      	bhi.n	80025e0 <HAL_GPIO_Init+0x14c>
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	e002      	b.n	80025e6 <HAL_GPIO_Init+0x152>
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	3b08      	subs	r3, #8
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	210f      	movs	r1, #15
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	401a      	ands	r2, r3
 80025f8:	6a39      	ldr	r1, [r7, #32]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	431a      	orrs	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8090 	beq.w	8002734 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002614:	4b56      	ldr	r3, [pc, #344]	; (8002770 <HAL_GPIO_Init+0x2dc>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4a55      	ldr	r2, [pc, #340]	; (8002770 <HAL_GPIO_Init+0x2dc>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_GPIO_Init+0x2dc>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800262c:	4a51      	ldr	r2, [pc, #324]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002638:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	220f      	movs	r2, #15
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a49      	ldr	r2, [pc, #292]	; (8002778 <HAL_GPIO_Init+0x2e4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00d      	beq.n	8002674 <HAL_GPIO_Init+0x1e0>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a48      	ldr	r2, [pc, #288]	; (800277c <HAL_GPIO_Init+0x2e8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <HAL_GPIO_Init+0x1dc>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a47      	ldr	r2, [pc, #284]	; (8002780 <HAL_GPIO_Init+0x2ec>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d101      	bne.n	800266c <HAL_GPIO_Init+0x1d8>
 8002668:	2302      	movs	r3, #2
 800266a:	e004      	b.n	8002676 <HAL_GPIO_Init+0x1e2>
 800266c:	2303      	movs	r3, #3
 800266e:	e002      	b.n	8002676 <HAL_GPIO_Init+0x1e2>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_GPIO_Init+0x1e2>
 8002674:	2300      	movs	r3, #0
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	f002 0203 	and.w	r2, r2, #3
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	4093      	lsls	r3, r2
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002686:	493b      	ldr	r1, [pc, #236]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026a0:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4937      	ldr	r1, [pc, #220]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026ae:	4b35      	ldr	r3, [pc, #212]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	4933      	ldr	r1, [pc, #204]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026c8:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	492d      	ldr	r1, [pc, #180]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026d6:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	43db      	mvns	r3, r3
 80026de:	4929      	ldr	r1, [pc, #164]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	4923      	ldr	r1, [pc, #140]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026fe:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	43db      	mvns	r3, r3
 8002706:	491f      	ldr	r1, [pc, #124]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 8002708:	4013      	ands	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4919      	ldr	r1, [pc, #100]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	43db      	mvns	r3, r3
 800272e:	4915      	ldr	r1, [pc, #84]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 8002730:	4013      	ands	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	3301      	adds	r3, #1
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	f47f aeaf 	bne.w	80024a8 <HAL_GPIO_Init+0x14>
  }
}
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	372c      	adds	r7, #44	; 0x2c
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	10320000 	.word	0x10320000
 800275c:	10310000 	.word	0x10310000
 8002760:	10220000 	.word	0x10220000
 8002764:	10210000 	.word	0x10210000
 8002768:	10120000 	.word	0x10120000
 800276c:	10110000 	.word	0x10110000
 8002770:	40021000 	.word	0x40021000
 8002774:	40010000 	.word	0x40010000
 8002778:	40010800 	.word	0x40010800
 800277c:	40010c00 	.word	0x40010c00
 8002780:	40011000 	.word	0x40011000
 8002784:	40010400 	.word	0x40010400

08002788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	e001      	b.n	80027aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	807b      	strh	r3, [r7, #2]
 80027c2:	4613      	mov	r3, r2
 80027c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c6:	787b      	ldrb	r3, [r7, #1]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027cc:	887a      	ldrh	r2, [r7, #2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027d2:	e003      	b.n	80027dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	041a      	lsls	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	611a      	str	r2, [r3, #16]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027f8:	887a      	ldrh	r2, [r7, #2]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4013      	ands	r3, r2
 80027fe:	041a      	lsls	r2, r3, #16
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43d9      	mvns	r1, r3
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	400b      	ands	r3, r1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e26c      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8087 	beq.w	8002946 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002838:	4b92      	ldr	r3, [pc, #584]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b04      	cmp	r3, #4
 8002842:	d00c      	beq.n	800285e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002844:	4b8f      	ldr	r3, [pc, #572]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d112      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
 8002850:	4b8c      	ldr	r3, [pc, #560]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d10b      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285e:	4b89      	ldr	r3, [pc, #548]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d06c      	beq.n	8002944 <HAL_RCC_OscConfig+0x12c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d168      	bne.n	8002944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e246      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x76>
 8002880:	4b80      	ldr	r3, [pc, #512]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a7f      	ldr	r2, [pc, #508]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	e02e      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x98>
 8002896:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7a      	ldr	r2, [pc, #488]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b78      	ldr	r3, [pc, #480]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a77      	ldr	r2, [pc, #476]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0xbc>
 80028ba:	4b72      	ldr	r3, [pc, #456]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a71      	ldr	r2, [pc, #452]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6e      	ldr	r2, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028d4:	4b6b      	ldr	r3, [pc, #428]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6a      	ldr	r2, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a67      	ldr	r2, [pc, #412]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff fc06 	bl	8002104 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff fc02 	bl	8002104 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1fa      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xe4>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7ff fbf2 	bl	8002104 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff fbee 	bl	8002104 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1e6      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x10c>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002952:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800295e:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
 800296a:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1ba      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4939      	ldr	r1, [pc, #228]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7ff fba7 	bl	8002104 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ba:	f7ff fba3 	bl	8002104 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e19b      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d8:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4927      	ldr	r1, [pc, #156]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7ff fb86 	bl	8002104 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fc:	f7ff fb82 	bl	8002104 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e17a      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d03a      	beq.n	8002a9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d019      	beq.n	8002a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7ff fb66 	bl	8002104 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7ff fb62 	bl	8002104 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e15a      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f000 fad8 	bl	8003010 <RCC_Delay>
 8002a60:	e01c      	b.n	8002a9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7ff fb4c 	bl	8002104 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6e:	e00f      	b.n	8002a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a70:	f7ff fb48 	bl	8002104 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d908      	bls.n	8002a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e140      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	42420000 	.word	0x42420000
 8002a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b9e      	ldr	r3, [pc, #632]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e9      	bne.n	8002a70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80a6 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aae:	4b97      	ldr	r3, [pc, #604]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b94      	ldr	r3, [pc, #592]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a93      	ldr	r2, [pc, #588]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	61d3      	str	r3, [r2, #28]
 8002ac6:	4b91      	ldr	r3, [pc, #580]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <HAL_RCC_OscConfig+0x4f8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d118      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b8b      	ldr	r3, [pc, #556]	; (8002d10 <HAL_RCC_OscConfig+0x4f8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a8a      	ldr	r2, [pc, #552]	; (8002d10 <HAL_RCC_OscConfig+0x4f8>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7ff fb09 	bl	8002104 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7ff fb05 	bl	8002104 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	; 0x64
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0fd      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b81      	ldr	r3, [pc, #516]	; (8002d10 <HAL_RCC_OscConfig+0x4f8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x312>
 8002b1c:	4b7b      	ldr	r3, [pc, #492]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a7a      	ldr	r2, [pc, #488]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	e02d      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x334>
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a75      	ldr	r2, [pc, #468]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	4b73      	ldr	r3, [pc, #460]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4a72      	ldr	r2, [pc, #456]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6213      	str	r3, [r2, #32]
 8002b4a:	e01c      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d10c      	bne.n	8002b6e <HAL_RCC_OscConfig+0x356>
 8002b54:	4b6d      	ldr	r3, [pc, #436]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a6c      	ldr	r2, [pc, #432]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a69      	ldr	r2, [pc, #420]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	e00b      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b6e:	4b67      	ldr	r3, [pc, #412]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a66      	ldr	r2, [pc, #408]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6213      	str	r3, [r2, #32]
 8002b7a:	4b64      	ldr	r3, [pc, #400]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a63      	ldr	r2, [pc, #396]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7ff fab9 	bl	8002104 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7ff fab5 	bl	8002104 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0ab      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ee      	beq.n	8002b96 <HAL_RCC_OscConfig+0x37e>
 8002bb8:	e014      	b.n	8002be4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bba:	f7ff faa3 	bl	8002104 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7ff fa9f 	bl	8002104 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e095      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	4b4c      	ldr	r3, [pc, #304]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ee      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bea:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a47      	ldr	r2, [pc, #284]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8081 	beq.w	8002d02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c00:	4b42      	ldr	r3, [pc, #264]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d061      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d146      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	4b3f      	ldr	r3, [pc, #252]	; (8002d14 <HAL_RCC_OscConfig+0x4fc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7ff fa73 	bl	8002104 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7ff fa6f 	bl	8002104 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e067      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c34:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c48:	d108      	bne.n	8002c5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	492d      	ldr	r1, [pc, #180]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a19      	ldr	r1, [r3, #32]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	4927      	ldr	r1, [pc, #156]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <HAL_RCC_OscConfig+0x4fc>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7ff fa43 	bl	8002104 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7ff fa3f 	bl	8002104 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e037      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x46a>
 8002ca0:	e02f      	b.n	8002d02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <HAL_RCC_OscConfig+0x4fc>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff fa2c 	bl	8002104 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7ff fa28 	bl	8002104 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e020      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x498>
 8002cce:	e018      	b.n	8002d02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e013      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40007000 	.word	0x40007000
 8002d14:	42420060 	.word	0x42420060

08002d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0d0      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d910      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b67      	ldr	r3, [pc, #412]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 0207 	bic.w	r2, r3, #7
 8002d42:	4965      	ldr	r1, [pc, #404]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b63      	ldr	r3, [pc, #396]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0b8      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d74:	4b59      	ldr	r3, [pc, #356]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a58      	ldr	r2, [pc, #352]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d8c:	4b53      	ldr	r3, [pc, #332]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a52      	ldr	r2, [pc, #328]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d98:	4b50      	ldr	r3, [pc, #320]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	494d      	ldr	r1, [pc, #308]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d040      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d115      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e07f      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e073      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e06b      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df6:	4b39      	ldr	r3, [pc, #228]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4936      	ldr	r1, [pc, #216]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e08:	f7ff f97c 	bl	8002104 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7ff f978 	bl	8002104 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e053      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e38:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d210      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 0207 	bic.w	r2, r3, #7
 8002e4e:	4922      	ldr	r1, [pc, #136]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e032      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4916      	ldr	r1, [pc, #88]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	490e      	ldr	r1, [pc, #56]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ea6:	f000 f821 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	490a      	ldr	r1, [pc, #40]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb8:	5ccb      	ldrb	r3, [r1, r3]
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f8da 	bl	8002080 <HAL_InitTick>

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	08004748 	.word	0x08004748
 8002ee4:	200000a0 	.word	0x200000a0
 8002ee8:	200000a4 	.word	0x200000a4

08002eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eec:	b490      	push	{r4, r7}
 8002eee:	b08a      	sub	sp, #40	; 0x28
 8002ef0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ef4:	1d3c      	adds	r4, r7, #4
 8002ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002efc:	f240 2301 	movw	r3, #513	; 0x201
 8002f00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f16:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x40>
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x46>
 8002f2a:	e02d      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f2e:	623b      	str	r3, [r7, #32]
      break;
 8002f30:	e02d      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	0c9b      	lsrs	r3, r3, #18
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f3e:	4413      	add	r3, r2
 8002f40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	0c5b      	lsrs	r3, r3, #17
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f5e:	4413      	add	r3, r2
 8002f60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6a:	fb02 f203 	mul.w	r2, r2, r3
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	e004      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	623b      	str	r3, [r7, #32]
      break;
 8002f86:	e002      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8a:	623b      	str	r3, [r7, #32]
      break;
 8002f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3728      	adds	r7, #40	; 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc90      	pop	{r4, r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	08004738 	.word	0x08004738
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	007a1200 	.word	0x007a1200
 8002fa8:	003d0900 	.word	0x003d0900

08002fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb0:	4b02      	ldr	r3, [pc, #8]	; (8002fbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	200000a0 	.word	0x200000a0

08002fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fc4:	f7ff fff2 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4903      	ldr	r1, [pc, #12]	; (8002fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	08004758 	.word	0x08004758

08002fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fec:	f7ff ffde 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	0adb      	lsrs	r3, r3, #11
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4903      	ldr	r1, [pc, #12]	; (800300c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	08004758 	.word	0x08004758

08003010 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <RCC_Delay+0x34>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <RCC_Delay+0x38>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0a5b      	lsrs	r3, r3, #9
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800302c:	bf00      	nop
  }
  while (Delay --);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1e5a      	subs	r2, r3, #1
 8003032:	60fa      	str	r2, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f9      	bne.n	800302c <RCC_Delay+0x1c>
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	200000a0 	.word	0x200000a0
 8003048:	10624dd3 	.word	0x10624dd3

0800304c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e041      	b.n	80030e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fe fd72 	bl	8001b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f000 fc1c 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d001      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e035      	b.n	8003170 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a16      	ldr	r2, [pc, #88]	; (800317c <HAL_TIM_Base_Start_IT+0x90>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d009      	beq.n	800313a <HAL_TIM_Base_Start_IT+0x4e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312e:	d004      	beq.n	800313a <HAL_TIM_Base_Start_IT+0x4e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a12      	ldr	r2, [pc, #72]	; (8003180 <HAL_TIM_Base_Start_IT+0x94>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d111      	bne.n	800315e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b06      	cmp	r3, #6
 800314a:	d010      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315c:	e007      	b.n	800316e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400

08003184 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e041      	b.n	800321a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f839 	bl	8003222 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f000 fb80 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d109      	bne.n	8003258 <HAL_TIM_PWM_Start+0x24>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e022      	b.n	800329e <HAL_TIM_PWM_Start+0x6a>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b04      	cmp	r3, #4
 800325c:	d109      	bne.n	8003272 <HAL_TIM_PWM_Start+0x3e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e015      	b.n	800329e <HAL_TIM_PWM_Start+0x6a>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d109      	bne.n	800328c <HAL_TIM_PWM_Start+0x58>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e008      	b.n	800329e <HAL_TIM_PWM_Start+0x6a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e059      	b.n	800335a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_PWM_Start+0x82>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b4:	e013      	b.n	80032de <HAL_TIM_PWM_Start+0xaa>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_PWM_Start+0x92>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c4:	e00b      	b.n	80032de <HAL_TIM_PWM_Start+0xaa>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_PWM_Start+0xa2>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d4:	e003      	b.n	80032de <HAL_TIM_PWM_Start+0xaa>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2201      	movs	r2, #1
 80032e4:	6839      	ldr	r1, [r7, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fd64 	bl	8003db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <HAL_TIM_PWM_Start+0x130>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d107      	bne.n	8003306 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003304:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a16      	ldr	r2, [pc, #88]	; (8003364 <HAL_TIM_PWM_Start+0x130>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_TIM_PWM_Start+0xf0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003318:	d004      	beq.n	8003324 <HAL_TIM_PWM_Start+0xf0>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <HAL_TIM_PWM_Start+0x134>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d111      	bne.n	8003348 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b06      	cmp	r3, #6
 8003334:	d010      	beq.n	8003358 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003346:	e007      	b.n	8003358 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400

0800336c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d122      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d11b      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0202 	mvn.w	r2, #2
 8003398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa6f 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa62 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fa71 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0204 	mvn.w	r2, #4
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa45 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa38 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fa47 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b08      	cmp	r3, #8
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0208 	mvn.w	r2, #8
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2204      	movs	r2, #4
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa1b 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa0e 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fa1d 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b10      	cmp	r3, #16
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b10      	cmp	r3, #16
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0210 	mvn.w	r2, #16
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2208      	movs	r2, #8
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9f1 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9e4 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f9f3 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10e      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d107      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0201 	mvn.w	r2, #1
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe f846 	bl	800157c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d10e      	bne.n	800351c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b80      	cmp	r3, #128	; 0x80
 800350a:	d107      	bne.n	800351c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fcd1 	bl	8003ebe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9b7 	bl	80038b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b20      	cmp	r3, #32
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b20      	cmp	r3, #32
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0220 	mvn.w	r2, #32
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fc9c 	bl	8003eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003592:	2302      	movs	r3, #2
 8003594:	e0ac      	b.n	80036f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b0c      	cmp	r3, #12
 80035a2:	f200 809f 	bhi.w	80036e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035e1 	.word	0x080035e1
 80035b0:	080036e5 	.word	0x080036e5
 80035b4:	080036e5 	.word	0x080036e5
 80035b8:	080036e5 	.word	0x080036e5
 80035bc:	08003621 	.word	0x08003621
 80035c0:	080036e5 	.word	0x080036e5
 80035c4:	080036e5 	.word	0x080036e5
 80035c8:	080036e5 	.word	0x080036e5
 80035cc:	08003663 	.word	0x08003663
 80035d0:	080036e5 	.word	0x080036e5
 80035d4:	080036e5 	.word	0x080036e5
 80035d8:	080036e5 	.word	0x080036e5
 80035dc:	080036a3 	.word	0x080036a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 f9c6 	bl	8003978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0208 	orr.w	r2, r2, #8
 80035fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0204 	bic.w	r2, r2, #4
 800360a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6999      	ldr	r1, [r3, #24]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	619a      	str	r2, [r3, #24]
      break;
 800361e:	e062      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fa0c 	bl	8003a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6999      	ldr	r1, [r3, #24]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	021a      	lsls	r2, r3, #8
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	619a      	str	r2, [r3, #24]
      break;
 8003660:	e041      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fa55 	bl	8003b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0208 	orr.w	r2, r2, #8
 800367c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0204 	bic.w	r2, r2, #4
 800368c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69d9      	ldr	r1, [r3, #28]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	61da      	str	r2, [r3, #28]
      break;
 80036a0:	e021      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fa9f 	bl	8003bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69d9      	ldr	r1, [r3, #28]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	021a      	lsls	r2, r3, #8
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	61da      	str	r2, [r3, #28]
      break;
 80036e2:	e000      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80036e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_TIM_ConfigClockSource+0x18>
 800370c:	2302      	movs	r3, #2
 800370e:	e0b3      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x180>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800372e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003736:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003748:	d03e      	beq.n	80037c8 <HAL_TIM_ConfigClockSource+0xd0>
 800374a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374e:	f200 8087 	bhi.w	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003756:	f000 8085 	beq.w	8003864 <HAL_TIM_ConfigClockSource+0x16c>
 800375a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375e:	d87f      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003760:	2b70      	cmp	r3, #112	; 0x70
 8003762:	d01a      	beq.n	800379a <HAL_TIM_ConfigClockSource+0xa2>
 8003764:	2b70      	cmp	r3, #112	; 0x70
 8003766:	d87b      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003768:	2b60      	cmp	r3, #96	; 0x60
 800376a:	d050      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x116>
 800376c:	2b60      	cmp	r3, #96	; 0x60
 800376e:	d877      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003770:	2b50      	cmp	r3, #80	; 0x50
 8003772:	d03c      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0xf6>
 8003774:	2b50      	cmp	r3, #80	; 0x50
 8003776:	d873      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d058      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x136>
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d86f      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003780:	2b30      	cmp	r3, #48	; 0x30
 8003782:	d064      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x156>
 8003784:	2b30      	cmp	r3, #48	; 0x30
 8003786:	d86b      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003788:	2b20      	cmp	r3, #32
 800378a:	d060      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x156>
 800378c:	2b20      	cmp	r3, #32
 800378e:	d867      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d05c      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x156>
 8003794:	2b10      	cmp	r3, #16
 8003796:	d05a      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003798:	e062      	b.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6899      	ldr	r1, [r3, #8]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f000 fae4 	bl	8003d76 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	609a      	str	r2, [r3, #8]
      break;
 80037c6:	e04e      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f000 facd 	bl	8003d76 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ea:	609a      	str	r2, [r3, #8]
      break;
 80037ec:	e03b      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6859      	ldr	r1, [r3, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	461a      	mov	r2, r3
 80037fc:	f000 fa44 	bl	8003c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2150      	movs	r1, #80	; 0x50
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fa9b 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 800380c:	e02b      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	461a      	mov	r2, r3
 800381c:	f000 fa62 	bl	8003ce4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2160      	movs	r1, #96	; 0x60
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fa8b 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 800382c:	e01b      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	461a      	mov	r2, r3
 800383c:	f000 fa24 	bl	8003c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2140      	movs	r1, #64	; 0x40
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fa7b 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 800384c:	e00b      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f000 fa72 	bl	8003d42 <TIM_ITRx_SetConfig>
        break;
 800385e:	e002      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003860:	bf00      	nop
 8003862:	e000      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003864:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

080038b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a25      	ldr	r2, [pc, #148]	; (8003970 <TIM_Base_SetConfig+0xa8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d007      	beq.n	80038f0 <TIM_Base_SetConfig+0x28>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e6:	d003      	beq.n	80038f0 <TIM_Base_SetConfig+0x28>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a22      	ldr	r2, [pc, #136]	; (8003974 <TIM_Base_SetConfig+0xac>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d108      	bne.n	8003902 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <TIM_Base_SetConfig+0xa8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <TIM_Base_SetConfig+0x52>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0x52>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a17      	ldr	r2, [pc, #92]	; (8003974 <TIM_Base_SetConfig+0xac>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a07      	ldr	r2, [pc, #28]	; (8003970 <TIM_Base_SetConfig+0xa8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400

08003978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f023 0201 	bic.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f023 0302 	bic.w	r3, r3, #2
 80039c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <TIM_OC1_SetConfig+0xc8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10c      	bne.n	80039ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 0308 	bic.w	r3, r3, #8
 80039da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <TIM_OC1_SetConfig+0xc8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d111      	bne.n	8003a1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	621a      	str	r2, [r3, #32]
}
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40012c00 	.word	0x40012c00

08003a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f023 0210 	bic.w	r2, r3, #16
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f023 0320 	bic.w	r3, r3, #32
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <TIM_OC2_SetConfig+0xd0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10d      	bne.n	8003ac0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a14      	ldr	r2, [pc, #80]	; (8003b14 <TIM_OC2_SetConfig+0xd0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d113      	bne.n	8003af0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	40012c00 	.word	0x40012c00

08003b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <TIM_OC3_SetConfig+0xd0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10d      	bne.n	8003b92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <TIM_OC3_SetConfig+0xd0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d113      	bne.n	8003bc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	621a      	str	r2, [r3, #32]
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40012c00 	.word	0x40012c00

08003bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	031b      	lsls	r3, r3, #12
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0f      	ldr	r2, [pc, #60]	; (8003c84 <TIM_OC4_SetConfig+0x98>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d109      	bne.n	8003c60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	019b      	lsls	r3, r3, #6
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	621a      	str	r2, [r3, #32]
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	40012c00 	.word	0x40012c00

08003c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f023 0201 	bic.w	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 030a 	bic.w	r3, r3, #10
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	621a      	str	r2, [r3, #32]
}
 8003cda:	bf00      	nop
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f023 0210 	bic.w	r2, r3, #16
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	031b      	lsls	r3, r3, #12
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f043 0307 	orr.w	r3, r3, #7
 8003d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	609a      	str	r2, [r3, #8]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b087      	sub	sp, #28
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	021a      	lsls	r2, r3, #8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	609a      	str	r2, [r3, #8]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1a      	ldr	r2, [r3, #32]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e041      	b.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d009      	beq.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d004      	beq.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10c      	bne.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40000400 	.word	0x40000400

08003eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e03f      	b.n	8003f62 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd fe84 	bl	8001c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fb49 	bl	80045ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10d      	bne.n	8003fbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_UART_IRQHandler+0x52>
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fa4f 	bl	800445a <UART_Receive_IT>
      return;
 8003fbc:	e17b      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80b1 	beq.w	8004128 <HAL_UART_IRQHandler+0x1bc>
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <HAL_UART_IRQHandler+0x70>
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80a6 	beq.w	8004128 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_UART_IRQHandler+0x90>
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f043 0201 	orr.w	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_UART_IRQHandler+0xb0>
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f043 0202 	orr.w	r2, r3, #2
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_UART_IRQHandler+0xd0>
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f043 0204 	orr.w	r2, r3, #4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00f      	beq.n	8004066 <HAL_UART_IRQHandler+0xfa>
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <HAL_UART_IRQHandler+0xee>
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f043 0208 	orr.w	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 811e 	beq.w	80042ac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_UART_IRQHandler+0x11e>
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f9e8 	bl	800445a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <HAL_UART_IRQHandler+0x146>
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d031      	beq.n	8004116 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f92a 	bl	800430c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d023      	beq.n	800410e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d013      	beq.n	8004106 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	4a76      	ldr	r2, [pc, #472]	; (80042bc <HAL_UART_IRQHandler+0x350>)
 80040e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe f95c 	bl	80023a8 <HAL_DMA_Abort_IT>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004100:	4610      	mov	r0, r2
 8004102:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	e00e      	b.n	8004124 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f8ec 	bl	80042e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	e00a      	b.n	8004124 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8e8 	bl	80042e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004114:	e006      	b.n	8004124 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8e4 	bl	80042e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004122:	e0c3      	b.n	80042ac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	bf00      	nop
    return;
 8004126:	e0c1      	b.n	80042ac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	2b01      	cmp	r3, #1
 800412e:	f040 80a1 	bne.w	8004274 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 809b 	beq.w	8004274 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8095 	beq.w	8004274 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d04e      	beq.n	800420c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004178:	8a3b      	ldrh	r3, [r7, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8098 	beq.w	80042b0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004184:	8a3a      	ldrh	r2, [r7, #16]
 8004186:	429a      	cmp	r2, r3
 8004188:	f080 8092 	bcs.w	80042b0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8a3a      	ldrh	r2, [r7, #16]
 8004190:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b20      	cmp	r3, #32
 800419a:	d02b      	beq.n	80041f4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041aa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0210 	bic.w	r2, r2, #16
 80041e8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe f89f 	bl	8002332 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	b29b      	uxth	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f876 	bl	80042f6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800420a:	e051      	b.n	80042b0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004214:	b29b      	uxth	r3, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d047      	beq.n	80042b4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004224:	8a7b      	ldrh	r3, [r7, #18]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d044      	beq.n	80042b4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004238:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0210 	bic.w	r2, r2, #16
 8004266:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004268:	8a7b      	ldrh	r3, [r7, #18]
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f842 	bl	80042f6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004272:	e01f      	b.n	80042b4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_UART_IRQHandler+0x324>
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f87f 	bl	800438c <UART_Transmit_IT>
    return;
 800428e:	e012      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00d      	beq.n	80042b6 <HAL_UART_IRQHandler+0x34a>
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f8c0 	bl	800442a <UART_EndTransmit_IT>
    return;
 80042aa:	e004      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
    return;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80042b4:	bf00      	nop
  }
}
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	08004365 	.word	0x08004365

080042c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	460b      	mov	r3, r1
 8004300:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004322:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	2b01      	cmp	r3, #1
 800433a:	d107      	bne.n	800434c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0210 	bic.w	r2, r2, #16
 800434a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f7ff ffb0 	bl	80042e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b21      	cmp	r3, #33	; 0x21
 800439e:	d13e      	bne.n	800441e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a8:	d114      	bne.n	80043d4 <UART_Transmit_IT+0x48>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d110      	bne.n	80043d4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	1c9a      	adds	r2, r3, #2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	621a      	str	r2, [r3, #32]
 80043d2:	e008      	b.n	80043e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	1c59      	adds	r1, r3, #1
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6211      	str	r1, [r2, #32]
 80043de:	781a      	ldrb	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4619      	mov	r1, r3
 80043f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004408:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004418:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e000      	b.n	8004420 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800441e:	2302      	movs	r3, #2
  }
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004440:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ff38 	bl	80042c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b22      	cmp	r3, #34	; 0x22
 800446c:	f040 8099 	bne.w	80045a2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004478:	d117      	bne.n	80044aa <UART_Receive_IT+0x50>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d113      	bne.n	80044aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	b29b      	uxth	r3, r3
 8004494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004498:	b29a      	uxth	r2, r3
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	1c9a      	adds	r2, r3, #2
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28
 80044a8:	e026      	b.n	80044f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044bc:	d007      	beq.n	80044ce <UART_Receive_IT+0x74>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <UART_Receive_IT+0x82>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e008      	b.n	80044ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29b      	uxth	r3, r3
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4619      	mov	r1, r3
 8004506:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004508:	2b00      	cmp	r3, #0
 800450a:	d148      	bne.n	800459e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0220 	bic.w	r2, r2, #32
 800451a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800452a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2b01      	cmp	r3, #1
 800454a:	d123      	bne.n	8004594 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0210 	bic.w	r2, r2, #16
 8004560:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b10      	cmp	r3, #16
 800456e:	d10a      	bne.n	8004586 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800458a:	4619      	mov	r1, r3
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff feb2 	bl	80042f6 <HAL_UARTEx_RxEventCallback>
 8004592:	e002      	b.n	800459a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fe9c 	bl	80042d2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	e002      	b.n	80045a4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e000      	b.n	80045a4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80045a2:	2302      	movs	r3, #2
  }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045e6:	f023 030c 	bic.w	r3, r3, #12
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2c      	ldr	r2, [pc, #176]	; (80046c0 <UART_SetConfig+0x114>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d103      	bne.n	800461c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7fe fce8 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	e002      	b.n	8004622 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800461c:	f7fe fcd0 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 8004620:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009a      	lsls	r2, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <UART_SetConfig+0x118>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	0119      	lsls	r1, r3, #4
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009a      	lsls	r2, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	fbb2 f2f3 	udiv	r2, r2, r3
 8004658:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <UART_SetConfig+0x118>)
 800465a:	fba3 0302 	umull	r0, r3, r3, r2
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	2064      	movs	r0, #100	; 0x64
 8004662:	fb00 f303 	mul.w	r3, r0, r3
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	3332      	adds	r3, #50	; 0x32
 800466c:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <UART_SetConfig+0x118>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004678:	4419      	add	r1, r3
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	009a      	lsls	r2, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <UART_SetConfig+0x118>)
 8004692:	fba3 0302 	umull	r0, r3, r3, r2
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2064      	movs	r0, #100	; 0x64
 800469a:	fb00 f303 	mul.w	r3, r0, r3
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	3332      	adds	r3, #50	; 0x32
 80046a4:	4a07      	ldr	r2, [pc, #28]	; (80046c4 <UART_SetConfig+0x118>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	f003 020f 	and.w	r2, r3, #15
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	440a      	add	r2, r1
 80046b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40013800 	.word	0x40013800
 80046c4:	51eb851f 	.word	0x51eb851f

080046c8 <__libc_init_array>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	2600      	movs	r6, #0
 80046cc:	4d0c      	ldr	r5, [pc, #48]	; (8004700 <__libc_init_array+0x38>)
 80046ce:	4c0d      	ldr	r4, [pc, #52]	; (8004704 <__libc_init_array+0x3c>)
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	42a6      	cmp	r6, r4
 80046d6:	d109      	bne.n	80046ec <__libc_init_array+0x24>
 80046d8:	f000 f822 	bl	8004720 <_init>
 80046dc:	2600      	movs	r6, #0
 80046de:	4d0a      	ldr	r5, [pc, #40]	; (8004708 <__libc_init_array+0x40>)
 80046e0:	4c0a      	ldr	r4, [pc, #40]	; (800470c <__libc_init_array+0x44>)
 80046e2:	1b64      	subs	r4, r4, r5
 80046e4:	10a4      	asrs	r4, r4, #2
 80046e6:	42a6      	cmp	r6, r4
 80046e8:	d105      	bne.n	80046f6 <__libc_init_array+0x2e>
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f0:	4798      	blx	r3
 80046f2:	3601      	adds	r6, #1
 80046f4:	e7ee      	b.n	80046d4 <__libc_init_array+0xc>
 80046f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fa:	4798      	blx	r3
 80046fc:	3601      	adds	r6, #1
 80046fe:	e7f2      	b.n	80046e6 <__libc_init_array+0x1e>
 8004700:	08004760 	.word	0x08004760
 8004704:	08004760 	.word	0x08004760
 8004708:	08004760 	.word	0x08004760
 800470c:	08004764 	.word	0x08004764

08004710 <memset>:
 8004710:	4603      	mov	r3, r0
 8004712:	4402      	add	r2, r0
 8004714:	4293      	cmp	r3, r2
 8004716:	d100      	bne.n	800471a <memset+0xa>
 8004718:	4770      	bx	lr
 800471a:	f803 1b01 	strb.w	r1, [r3], #1
 800471e:	e7f9      	b.n	8004714 <memset+0x4>

08004720 <_init>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr

0800472c <_fini>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr
