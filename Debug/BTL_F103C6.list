
BTL_F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00004be0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004cec  08004cec  00014cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db8  08004db8  00020148  2**0
                  CONTENTS
  4 .ARM          00000000  08004db8  08004db8  00020148  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004db8  08004db8  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  08004dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000148  08004f08  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08004f08  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113e7  00000000  00000000  00020171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a1  00000000  00000000  00031558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00033f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  00034e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018db9  00000000  00000000  00035b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fe5  00000000  00000000  0004e941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008978c  00000000  00000000  0005f926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e90b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc4  00000000  00000000  000e9108  2**2
=======
  1 .text         0000462c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004738  08004738  00014738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004760  08004760  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08004760  08004760  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004760  08004760  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004764  08004764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08004768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200000ac  08004814  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08004814  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6a1  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f5  00000000  00000000  0002e776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00031a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a64  00000000  00000000  00032838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffc7  00000000  00000000  0004a29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000853da  00000000  00000000  0005a263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df63d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000df690  2**2
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
<<<<<<< HEAD
 8000124:	20000148 	.word	0x20000148
 8000128:	00000000 	.word	0x00000000
 800012c:	08004cd4 	.word	0x08004cd4
=======
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08004720 	.word	0x08004720
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000144:	2000014c 	.word	0x2000014c
 8000148:	08004cd4 	.word	0x08004cd4
=======
 8000144:	200000b0 	.word	0x200000b0
 8000148:	08004720 	.word	0x08004720
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

0800014c <isButton_BUT1_Pressed>:
int button_BUT3_LongPressed_flag = 0;
int button_PEDES_LongPressed_flag = 0;


int isButton_BUT1_Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_BUT1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton_BUT1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton_BUT1_Pressed+0x16>
	{
		button_BUT1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton_BUT1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton_BUT1_Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
<<<<<<< HEAD
 800016c:	20000164 	.word	0x20000164
=======
 800016c:	200000c8 	.word	0x200000c8
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

08000170 <isButton_BUT2_Pressed>:
int isButton_BUT2_Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_BUT2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton_BUT2_Pressed+0x16>
	{
		button_BUT2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton_BUT2_Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
<<<<<<< HEAD
 8000190:	20000168 	.word	0x20000168
=======
 8000190:	200000cc 	.word	0x200000cc
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

08000194 <isButton_BUT3_Pressed>:
int isButton_BUT3_Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_BUT3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton_BUT3_Pressed+0x16>
	{
		button_BUT3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton_BUT3_Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
<<<<<<< HEAD
 80001b4:	2000016c 	.word	0x2000016c
=======
 80001b4:	200000d0 	.word	0x200000d0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

080001b8 <isButton_Pedes_Pressed>:
int isButton_Pedes_Pressed()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button_PEDES_flag == 1)
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton_Pedes_Pressed+0x16>
	{
		button_PEDES_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton_Pedes_Pressed+0x18>
	}
	else return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
<<<<<<< HEAD
 80001d8:	20000170 	.word	0x20000170
=======
 80001d8:	200000d4 	.word	0x200000d4
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

080001dc <getKeyInput>:
	else return 0;
}


void getKeyInput()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e187      	b.n	80004f8 <getKeyInput+0x31c>
		// button debouncing
		keyReg0[i] = keyReg1[i];
 80001e8:	4a7f      	ldr	r2, [pc, #508]	; (80003e8 <getKeyInput+0x20c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	497e      	ldr	r1, [pc, #504]	; (80003ec <getKeyInput+0x210>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001f8:	4a7d      	ldr	r2, [pc, #500]	; (80003f0 <getKeyInput+0x214>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4979      	ldr	r1, [pc, #484]	; (80003e8 <getKeyInput+0x20c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//handle button 1
		if(i == 0){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d154      	bne.n	80002b8 <getKeyInput+0xdc>
			keyReg2[i] = HAL_GPIO_ReadPin(A1_BUTTON1_GPIO_Port, A1_BUTTON1_Pin);
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	4878      	ldr	r0, [pc, #480]	; (80003f4 <getKeyInput+0x218>)
<<<<<<< HEAD
 8000214:	f002 fbd4 	bl	80029c0 <HAL_GPIO_ReadPin>
=======
 8000214:	f002 fab8 	bl	8002788 <HAL_GPIO_ReadPin>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
 8000218:	4603      	mov	r3, r0
 800021a:	4619      	mov	r1, r3
 800021c:	4a74      	ldr	r2, [pc, #464]	; (80003f0 <getKeyInput+0x214>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000224:	4a71      	ldr	r2, [pc, #452]	; (80003ec <getKeyInput+0x210>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	496e      	ldr	r1, [pc, #440]	; (80003e8 <getKeyInput+0x20c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d13f      	bne.n	80002b8 <getKeyInput+0xdc>
 8000238:	4a6b      	ldr	r2, [pc, #428]	; (80003e8 <getKeyInput+0x20c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	496b      	ldr	r1, [pc, #428]	; (80003f0 <getKeyInput+0x214>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d135      	bne.n	80002b8 <getKeyInput+0xdc>
			{
				 //case short pressed
				if(keyReg3[i] != keyReg2[i])
 800024c:	4a6a      	ldr	r2, [pc, #424]	; (80003f8 <getKeyInput+0x21c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4966      	ldr	r1, [pc, #408]	; (80003f0 <getKeyInput+0x214>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d015      	beq.n	800028c <getKeyInput+0xb0>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 8000260:	4a63      	ldr	r2, [pc, #396]	; (80003f0 <getKeyInput+0x214>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	4963      	ldr	r1, [pc, #396]	; (80003f8 <getKeyInput+0x21c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000270:	4a5f      	ldr	r2, [pc, #380]	; (80003f0 <getKeyInput+0x214>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d11d      	bne.n	80002b8 <getKeyInput+0xdc>
					{
						//TODO
						button_BUT1_flag = 1;
 800027c:	4b5f      	ldr	r3, [pc, #380]	; (80003fc <getKeyInput+0x220>)
 800027e:	2201      	movs	r2, #1
 8000280:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000282:	4b5f      	ldr	r3, [pc, #380]	; (8000400 <getKeyInput+0x224>)
 8000284:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	e015      	b.n	80002b8 <getKeyInput+0xdc>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800028c:	4a58      	ldr	r2, [pc, #352]	; (80003f0 <getKeyInput+0x214>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10f      	bne.n	80002b8 <getKeyInput+0xdc>
						timerForKeyPress--;
 8000298:	4b59      	ldr	r3, [pc, #356]	; (8000400 <getKeyInput+0x224>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a58      	ldr	r2, [pc, #352]	; (8000400 <getKeyInput+0x224>)
 80002a0:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80002a2:	4b57      	ldr	r3, [pc, #348]	; (8000400 <getKeyInput+0x224>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d106      	bne.n	80002b8 <getKeyInput+0xdc>
						{
							//TODO
							button_BUT1_LongPressed_flag = 1;
 80002aa:	4b56      	ldr	r3, [pc, #344]	; (8000404 <getKeyInput+0x228>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80002b0:	4b53      	ldr	r3, [pc, #332]	; (8000400 <getKeyInput+0x224>)
 80002b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002b6:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 2
		if(i == 1){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d153      	bne.n	8000366 <getKeyInput+0x18a>
			keyReg2[i] = HAL_GPIO_ReadPin(A2_BUTTON2_GPIO_Port, A2_BUTTON2_Pin);
 80002be:	2120      	movs	r1, #32
 80002c0:	4851      	ldr	r0, [pc, #324]	; (8000408 <getKeyInput+0x22c>)
<<<<<<< HEAD
 80002c2:	f002 fb7d 	bl	80029c0 <HAL_GPIO_ReadPin>
=======
 80002c2:	f002 fa61 	bl	8002788 <HAL_GPIO_ReadPin>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
 80002c6:	4603      	mov	r3, r0
 80002c8:	4619      	mov	r1, r3
 80002ca:	4a49      	ldr	r2, [pc, #292]	; (80003f0 <getKeyInput+0x214>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80002d2:	4a46      	ldr	r2, [pc, #280]	; (80003ec <getKeyInput+0x210>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002da:	4943      	ldr	r1, [pc, #268]	; (80003e8 <getKeyInput+0x20c>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d13f      	bne.n	8000366 <getKeyInput+0x18a>
 80002e6:	4a40      	ldr	r2, [pc, #256]	; (80003e8 <getKeyInput+0x20c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ee:	4940      	ldr	r1, [pc, #256]	; (80003f0 <getKeyInput+0x214>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d135      	bne.n	8000366 <getKeyInput+0x18a>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80002fa:	4a3f      	ldr	r2, [pc, #252]	; (80003f8 <getKeyInput+0x21c>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000302:	493b      	ldr	r1, [pc, #236]	; (80003f0 <getKeyInput+0x214>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800030a:	429a      	cmp	r2, r3
 800030c:	d015      	beq.n	800033a <getKeyInput+0x15e>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 800030e:	4a38      	ldr	r2, [pc, #224]	; (80003f0 <getKeyInput+0x214>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000316:	4938      	ldr	r1, [pc, #224]	; (80003f8 <getKeyInput+0x21c>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 800031e:	4a34      	ldr	r2, [pc, #208]	; (80003f0 <getKeyInput+0x214>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11d      	bne.n	8000366 <getKeyInput+0x18a>
					{
						//TODO
						button_BUT2_flag = 1;
 800032a:	4b38      	ldr	r3, [pc, #224]	; (800040c <getKeyInput+0x230>)
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000330:	4b33      	ldr	r3, [pc, #204]	; (8000400 <getKeyInput+0x224>)
 8000332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	e015      	b.n	8000366 <getKeyInput+0x18a>
					}
				}
				else// key long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800033a:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <getKeyInput+0x214>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10f      	bne.n	8000366 <getKeyInput+0x18a>
						timerForKeyPress--;
 8000346:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <getKeyInput+0x224>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a2c      	ldr	r2, [pc, #176]	; (8000400 <getKeyInput+0x224>)
 800034e:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <getKeyInput+0x224>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d106      	bne.n	8000366 <getKeyInput+0x18a>
						{
							//TODO
							button_BUT2_LongPressed_flag = 1;
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <getKeyInput+0x234>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <getKeyInput+0x224>)
 8000360:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000364:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 3
		if(i == 2){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d16b      	bne.n	8000444 <getKeyInput+0x268>
			keyReg2[i] = HAL_GPIO_ReadPin(A3_BUTTON3_GPIO_Port, A3_BUTTON3_Pin);
 800036c:	2101      	movs	r1, #1
 800036e:	4821      	ldr	r0, [pc, #132]	; (80003f4 <getKeyInput+0x218>)
<<<<<<< HEAD
 8000370:	f002 fb26 	bl	80029c0 <HAL_GPIO_ReadPin>
=======
 8000370:	f002 fa0a 	bl	8002788 <HAL_GPIO_ReadPin>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
 8000374:	4603      	mov	r3, r0
 8000376:	4619      	mov	r1, r3
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <getKeyInput+0x214>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000380:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <getKeyInput+0x210>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000388:	4917      	ldr	r1, [pc, #92]	; (80003e8 <getKeyInput+0x20c>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000390:	429a      	cmp	r2, r3
 8000392:	d157      	bne.n	8000444 <getKeyInput+0x268>
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <getKeyInput+0x20c>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <getKeyInput+0x214>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d14d      	bne.n	8000444 <getKeyInput+0x268>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <getKeyInput+0x21c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b0:	490f      	ldr	r1, [pc, #60]	; (80003f0 <getKeyInput+0x214>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d02d      	beq.n	8000418 <getKeyInput+0x23c>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <getKeyInput+0x214>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <getKeyInput+0x21c>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80003cc:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <getKeyInput+0x214>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d135      	bne.n	8000444 <getKeyInput+0x268>
					{
						//TODO
						button_BUT3_flag = 1;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <getKeyInput+0x238>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <getKeyInput+0x224>)
 80003e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e02d      	b.n	8000444 <getKeyInput+0x268>
 80003e8:	20000010 	.word	0x20000010
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000020 	.word	0x20000020
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	20000030 	.word	0x20000030
<<<<<<< HEAD
 80003fc:	20000164 	.word	0x20000164
 8000400:	20000040 	.word	0x20000040
 8000404:	20000174 	.word	0x20000174
 8000408:	40010800 	.word	0x40010800
 800040c:	20000168 	.word	0x20000168
 8000410:	20000178 	.word	0x20000178
 8000414:	2000016c 	.word	0x2000016c
=======
 80003fc:	200000c8 	.word	0x200000c8
 8000400:	20000040 	.word	0x20000040
 8000404:	200000d8 	.word	0x200000d8
 8000408:	40010800 	.word	0x40010800
 800040c:	200000cc 	.word	0x200000cc
 8000410:	200000dc 	.word	0x200000dc
 8000414:	200000d0 	.word	0x200000d0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <getKeyInput+0x330>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10f      	bne.n	8000444 <getKeyInput+0x268>
						timerForKeyPress--;
 8000424:	4b3a      	ldr	r3, [pc, #232]	; (8000510 <getKeyInput+0x334>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	4a39      	ldr	r2, [pc, #228]	; (8000510 <getKeyInput+0x334>)
 800042c:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <getKeyInput+0x334>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d106      	bne.n	8000444 <getKeyInput+0x268>
						{
							//TODO
							button_BUT3_LongPressed_flag = 1;
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <getKeyInput+0x338>)
 8000438:	2201      	movs	r2, #1
 800043a:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <getKeyInput+0x334>)
 800043e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000442:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button pedestrian
		if(i == 3){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d153      	bne.n	80004f2 <getKeyInput+0x316>
			keyReg2[i] = HAL_GPIO_ReadPin(A0_PEDES_BUTTON_GPIO_Port, A0_PEDES_BUTTON_Pin);
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	4832      	ldr	r0, [pc, #200]	; (8000518 <getKeyInput+0x33c>)
<<<<<<< HEAD
 800044e:	f002 fab7 	bl	80029c0 <HAL_GPIO_ReadPin>
=======
 800044e:	f002 f99b 	bl	8002788 <HAL_GPIO_ReadPin>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
 8000452:	4603      	mov	r3, r0
 8000454:	4619      	mov	r1, r3
 8000456:	4a2d      	ldr	r2, [pc, #180]	; (800050c <getKeyInput+0x330>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 800045e:	4a2f      	ldr	r2, [pc, #188]	; (800051c <getKeyInput+0x340>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000466:	492e      	ldr	r1, [pc, #184]	; (8000520 <getKeyInput+0x344>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800046e:	429a      	cmp	r2, r3
 8000470:	d13f      	bne.n	80004f2 <getKeyInput+0x316>
 8000472:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <getKeyInput+0x344>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047a:	4924      	ldr	r1, [pc, #144]	; (800050c <getKeyInput+0x330>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000482:	429a      	cmp	r2, r3
 8000484:	d135      	bne.n	80004f2 <getKeyInput+0x316>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 8000486:	4a27      	ldr	r2, [pc, #156]	; (8000524 <getKeyInput+0x348>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	491f      	ldr	r1, [pc, #124]	; (800050c <getKeyInput+0x330>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000496:	429a      	cmp	r2, r3
 8000498:	d015      	beq.n	80004c6 <getKeyInput+0x2ea>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <getKeyInput+0x330>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a2:	4920      	ldr	r1, [pc, #128]	; (8000524 <getKeyInput+0x348>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80004aa:	4a18      	ldr	r2, [pc, #96]	; (800050c <getKeyInput+0x330>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d11d      	bne.n	80004f2 <getKeyInput+0x316>
					{
						//TODO
						button_PEDES_flag = 1;
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <getKeyInput+0x34c>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <getKeyInput+0x334>)
 80004be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	e015      	b.n	80004f2 <getKeyInput+0x316>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <getKeyInput+0x330>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d10f      	bne.n	80004f2 <getKeyInput+0x316>
						timerForKeyPress--;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <getKeyInput+0x334>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <getKeyInput+0x334>)
 80004da:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <getKeyInput+0x334>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d106      	bne.n	80004f2 <getKeyInput+0x316>
						{
							//TODO
							button_PEDES_LongPressed_flag = 1;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <getKeyInput+0x350>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <getKeyInput+0x334>)
 80004ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004f0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f77f ae74 	ble.w	80001e8 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000020 	.word	0x20000020
 8000510:	20000040 	.word	0x20000040
<<<<<<< HEAD
 8000514:	2000017c 	.word	0x2000017c
=======
 8000514:	200000e0 	.word	0x200000e0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
 8000518:	40010800 	.word	0x40010800
 800051c:	20000000 	.word	0x20000000
 8000520:	20000010 	.word	0x20000010
 8000524:	20000030 	.word	0x20000030
<<<<<<< HEAD
 8000528:	20000170 	.word	0x20000170
 800052c:	20000180 	.word	0x20000180

08000530 <FSM_Buzzer>:

int FSM_Buzzer_State = OFF;
=======
 8000528:	200000d4 	.word	0x200000d4
 800052c:	200000e4 	.word	0x200000e4

08000530 <FSM_Buzzer>:

//int FSM_Buzzer_State = OFF;

TIM_HandleTypeDef htim2;
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

TIM_HandleTypeDef htim2;

void FSM_Buzzer(){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	switch(FSM_Buzzer_State){
<<<<<<< HEAD
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <FSM_Buzzer+0x48>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <FSM_Buzzer+0x12>
 800053c:	2b01      	cmp	r3, #1
 800053e:	d009      	beq.n	8000554 <FSM_Buzzer+0x24>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
=======
 8000534:	4b20      	ldr	r3, [pc, #128]	; (80005b8 <FSM_Buzzer+0x88>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b35      	cmp	r3, #53	; 0x35
 800053a:	d019      	beq.n	8000570 <FSM_Buzzer+0x40>
 800053c:	2b35      	cmp	r3, #53	; 0x35
 800053e:	dc35      	bgt.n	80005ac <FSM_Buzzer+0x7c>
 8000540:	2b32      	cmp	r3, #50	; 0x32
 8000542:	d002      	beq.n	800054a <FSM_Buzzer+0x1a>
 8000544:	2b33      	cmp	r3, #51	; 0x33
 8000546:	d005      	beq.n	8000554 <FSM_Buzzer+0x24>
			FSM_Buzzer_State = OFF;
//			set_off_buzzer();
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
		}

		break;
	default:
		break;
<<<<<<< HEAD
 8000540:	e017      	b.n	8000572 <FSM_Buzzer+0x42>
		if(isButton_Pedes_Pressed()){
 8000542:	f7ff fe39 	bl	80001b8 <isButton_Pedes_Pressed>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00f      	beq.n	800056c <FSM_Buzzer+0x3c>
			FSM_Buzzer_State=ON;
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <FSM_Buzzer+0x48>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
		break;
 8000552:	e00b      	b.n	800056c <FSM_Buzzer+0x3c>
		if(time_red_horizontal_temp==0){
 8000554:	4b09      	ldr	r3, [pc, #36]	; (800057c <FSM_Buzzer+0x4c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d109      	bne.n	8000570 <FSM_Buzzer+0x40>
			FSM_Buzzer_State=OFF;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <FSM_Buzzer+0x48>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <FSM_Buzzer+0x50>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2200      	movs	r2, #0
 8000568:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800056a:	e001      	b.n	8000570 <FSM_Buzzer+0x40>
		break;
 800056c:	bf00      	nop
 800056e:	e000      	b.n	8000572 <FSM_Buzzer+0x42>
		break;
 8000570:	bf00      	nop
	}
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000184 	.word	0x20000184
 800057c:	200000b0 	.word	0x200000b0
 8000580:	20000228 	.word	0x20000228

08000584 <fsm_7SEG_horizontal_run>:
=======
 8000548:	e030      	b.n	80005ac <FSM_Buzzer+0x7c>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800054a:	4b1c      	ldr	r3, [pc, #112]	; (80005bc <FSM_Buzzer+0x8c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2200      	movs	r2, #0
 8000550:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000552:	e02e      	b.n	80005b2 <FSM_Buzzer+0x82>
		if(timer32_flag==1){  //end 1s
 8000554:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <FSM_Buzzer+0x90>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d103      	bne.n	8000564 <FSM_Buzzer+0x34>
			FSM_Buzzer_State = OFF;
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <FSM_Buzzer+0x88>)
 800055e:	2232      	movs	r2, #50	; 0x32
 8000560:	601a      	str	r2, [r3, #0]
		break;
 8000562:	e026      	b.n	80005b2 <FSM_Buzzer+0x82>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 399);
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <FSM_Buzzer+0x8c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f240 128f 	movw	r2, #399	; 0x18f
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800056e:	e020      	b.n	80005b2 <FSM_Buzzer+0x82>
		if(time_red_horizontal_temp < 4 ){
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <FSM_Buzzer+0x94>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b03      	cmp	r3, #3
 8000576:	dc15      	bgt.n	80005a4 <FSM_Buzzer+0x74>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,Increase_Duty_Cycle);
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <FSM_Buzzer+0x98>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <FSM_Buzzer+0x8c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	635a      	str	r2, [r3, #52]	; 0x34
			set_on_buzzer();
 8000582:	f001 fd35 	bl	8001ff0 <set_on_buzzer>
			Increase_Duty_Cycle += 50;
 8000586:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <FSM_Buzzer+0x98>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3332      	adds	r3, #50	; 0x32
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <FSM_Buzzer+0x98>)
 800058e:	6013      	str	r3, [r2, #0]
			if(Increase_Duty_Cycle >= 999){
 8000590:	4b0d      	ldr	r3, [pc, #52]	; (80005c8 <FSM_Buzzer+0x98>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000598:	4293      	cmp	r3, r2
 800059a:	dd09      	ble.n	80005b0 <FSM_Buzzer+0x80>
				Increase_Duty_Cycle = 99;
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <FSM_Buzzer+0x98>)
 800059e:	2263      	movs	r2, #99	; 0x63
 80005a0:	601a      	str	r2, [r3, #0]
		break;
 80005a2:	e005      	b.n	80005b0 <FSM_Buzzer+0x80>
			FSM_Buzzer_State = OFF;
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <FSM_Buzzer+0x88>)
 80005a6:	2232      	movs	r2, #50	; 0x32
 80005a8:	601a      	str	r2, [r3, #0]
		break;
 80005aa:	e001      	b.n	80005b0 <FSM_Buzzer+0x80>
		break;
 80005ac:	bf00      	nop
 80005ae:	e000      	b.n	80005b2 <FSM_Buzzer+0x82>
		break;
 80005b0:	bf00      	nop
	}
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000094 	.word	0x20000094
 80005bc:	2000019c 	.word	0x2000019c
 80005c0:	20000154 	.word	0x20000154
 80005c4:	20000070 	.word	0x20000070
 80005c8:	20000098 	.word	0x20000098

080005cc <fsm_7SEG_horizontal_run>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#include "control_7SEG.h"

int status_7SEG_horizontal = display_countDown_horizontal;


void fsm_7SEG_horizontal_run(){
<<<<<<< HEAD
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	switch(status_7SEG_horizontal){
 8000588:	4b20      	ldr	r3, [pc, #128]	; (800060c <fsm_7SEG_horizontal_run+0x88>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	2b0f      	cmp	r3, #15
 8000590:	d837      	bhi.n	8000602 <fsm_7SEG_horizontal_run+0x7e>
 8000592:	a201      	add	r2, pc, #4	; (adr r2, 8000598 <fsm_7SEG_horizontal_run+0x14>)
 8000594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000598:	08000603 	.word	0x08000603
 800059c:	08000603 	.word	0x08000603
 80005a0:	08000603 	.word	0x08000603
 80005a4:	08000603 	.word	0x08000603
 80005a8:	08000603 	.word	0x08000603
 80005ac:	08000603 	.word	0x08000603
 80005b0:	08000603 	.word	0x08000603
 80005b4:	08000603 	.word	0x08000603
 80005b8:	08000603 	.word	0x08000603
 80005bc:	08000603 	.word	0x08000603
 80005c0:	08000603 	.word	0x08000603
 80005c4:	08000603 	.word	0x08000603
 80005c8:	08000603 	.word	0x08000603
 80005cc:	080005d9 	.word	0x080005d9
 80005d0:	080005e7 	.word	0x080005e7
 80005d4:	080005f5 	.word	0x080005f5
=======
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	switch(status_7SEG_horizontal){
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <fsm_7SEG_horizontal_run+0x88>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	2b0f      	cmp	r3, #15
 80005d8:	d837      	bhi.n	800064a <fsm_7SEG_horizontal_run+0x7e>
 80005da:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <fsm_7SEG_horizontal_run+0x14>)
 80005dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e0:	0800064b 	.word	0x0800064b
 80005e4:	0800064b 	.word	0x0800064b
 80005e8:	0800064b 	.word	0x0800064b
 80005ec:	0800064b 	.word	0x0800064b
 80005f0:	0800064b 	.word	0x0800064b
 80005f4:	0800064b 	.word	0x0800064b
 80005f8:	0800064b 	.word	0x0800064b
 80005fc:	0800064b 	.word	0x0800064b
 8000600:	0800064b 	.word	0x0800064b
 8000604:	0800064b 	.word	0x0800064b
 8000608:	0800064b 	.word	0x0800064b
 800060c:	0800064b 	.word	0x0800064b
 8000610:	0800064b 	.word	0x0800064b
 8000614:	08000621 	.word	0x08000621
 8000618:	0800062f 	.word	0x0800062f
 800061c:	0800063d 	.word	0x0800063d
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
		case display_mode02:
			_7SEG_buffer_horizontal[0] = 0;
<<<<<<< HEAD
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <fsm_7SEG_horizontal_run+0x8c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 2;
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <fsm_7SEG_horizontal_run+0x8c>)
 80005e0:	2202      	movs	r2, #2
 80005e2:	605a      	str	r2, [r3, #4]
=======
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 2;
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 8000628:	2202      	movs	r2, #2
 800062a:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 800062c:	e00e      	b.n	800064c <fsm_7SEG_horizontal_run+0x80>
		case display_mode03:
			_7SEG_buffer_horizontal[0] = 0;
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 3;
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 8000636:	2203      	movs	r2, #3
 8000638:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 800063a:	e007      	b.n	800064c <fsm_7SEG_horizontal_run+0x80>
		case display_mode04:
			_7SEG_buffer_horizontal[0] = 0;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 4;
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <fsm_7SEG_horizontal_run+0x8c>)
 8000644:	2204      	movs	r2, #4
 8000646:	605a      	str	r2, [r3, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
<<<<<<< HEAD
 80005e4:	e00e      	b.n	8000604 <fsm_7SEG_horizontal_run+0x80>
		case display_mode03:
			_7SEG_buffer_horizontal[0] = 0;
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <fsm_7SEG_horizontal_run+0x8c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 3;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <fsm_7SEG_horizontal_run+0x8c>)
 80005ee:	2203      	movs	r2, #3
 80005f0:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 80005f2:	e007      	b.n	8000604 <fsm_7SEG_horizontal_run+0x80>
		case display_mode04:
			_7SEG_buffer_horizontal[0] = 0;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <fsm_7SEG_horizontal_run+0x8c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 4;
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <fsm_7SEG_horizontal_run+0x8c>)
 80005fc:	2204      	movs	r2, #4
 80005fe:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 8000600:	e000      	b.n	8000604 <fsm_7SEG_horizontal_run+0x80>
=======
 8000648:	e000      	b.n	800064c <fsm_7SEG_horizontal_run+0x80>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
		case off_horizontal:
//			off7SEG_horizontal();
			break;
		default:
			break;
<<<<<<< HEAD
 8000602:	bf00      	nop
	}
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	20000044 	.word	0x20000044
 8000610:	20000210 	.word	0x20000210

08000614 <fsm_7SEG_vertical_run>:
=======
 800064a:	bf00      	nop
	}
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	20000044 	.word	0x20000044
 8000658:	2000018c 	.word	0x2000018c

0800065c <fsm_7SEG_vertical_run>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

int status_7SEG_vertical = display_countDown_vertical;



void fsm_7SEG_vertical_run(){
<<<<<<< HEAD
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
	switch(status_7SEG_vertical){
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <fsm_7SEG_vertical_run+0x2c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b10      	cmp	r3, #16
 800061e:	d006      	beq.n	800062e <fsm_7SEG_vertical_run+0x1a>
 8000620:	2b10      	cmp	r3, #16
 8000622:	dc06      	bgt.n	8000632 <fsm_7SEG_vertical_run+0x1e>
 8000624:	f113 0f02 	cmn.w	r3, #2
 8000628:	d005      	beq.n	8000636 <fsm_7SEG_vertical_run+0x22>
 800062a:	2b0f      	cmp	r3, #15
=======
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	switch(status_7SEG_vertical){
 8000660:	4b09      	ldr	r3, [pc, #36]	; (8000688 <fsm_7SEG_vertical_run+0x2c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b10      	cmp	r3, #16
 8000666:	d006      	beq.n	8000676 <fsm_7SEG_vertical_run+0x1a>
 8000668:	2b10      	cmp	r3, #16
 800066a:	dc06      	bgt.n	800067a <fsm_7SEG_vertical_run+0x1e>
 800066c:	f113 0f02 	cmn.w	r3, #2
 8000670:	d005      	beq.n	800067e <fsm_7SEG_vertical_run+0x22>
 8000672:	2b0f      	cmp	r3, #15
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
			break;
		case off_vertical:
//			off7SEG_vertical();
			break;
		default:
			break;
<<<<<<< HEAD
 800062c:	e001      	b.n	8000632 <fsm_7SEG_vertical_run+0x1e>
			break;
 800062e:	bf00      	nop
 8000630:	e002      	b.n	8000638 <fsm_7SEG_vertical_run+0x24>
			break;
 8000632:	bf00      	nop
 8000634:	e000      	b.n	8000638 <fsm_7SEG_vertical_run+0x24>
			break;
 8000636:	bf00      	nop
	}
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	20000048 	.word	0x20000048

08000644 <fsm_mannual_run>:
UART_HandleTypeDef huart2;
uint8_t str1[30] = " ";
=======
 8000674:	e001      	b.n	800067a <fsm_7SEG_vertical_run+0x1e>
			break;
 8000676:	bf00      	nop
 8000678:	e002      	b.n	8000680 <fsm_7SEG_vertical_run+0x24>
			break;
 800067a:	bf00      	nop
 800067c:	e000      	b.n	8000680 <fsm_7SEG_vertical_run+0x24>
			break;
 800067e:	bf00      	nop
	}
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	20000048 	.word	0x20000048

0800068c <fsm_mannual_run>:
#include "button.h"
#include "fsm_traffic_blink.h"
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

status_mannual = mannual_init;

void fsm_mannual_run(){
<<<<<<< HEAD
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	switch(status_mannual){
 8000648:	4b9d      	ldr	r3, [pc, #628]	; (80008c0 <fsm_mannual_run+0x27c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3b3c      	subs	r3, #60	; 0x3c
 800064e:	2b04      	cmp	r3, #4
 8000650:	f200 8133 	bhi.w	80008ba <fsm_mannual_run+0x276>
 8000654:	a201      	add	r2, pc, #4	; (adr r2, 800065c <fsm_mannual_run+0x18>)
 8000656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065a:	bf00      	nop
 800065c:	08000671 	.word	0x08000671
 8000660:	08000681 	.word	0x08000681
 8000664:	08000717 	.word	0x08000717
 8000668:	080007ad 	.word	0x080007ad
 800066c:	08000843 	.word	0x08000843
		case mannual_init:
			status_mannual = mannual_red_green;
 8000670:	4b93      	ldr	r3, [pc, #588]	; (80008c0 <fsm_mannual_run+0x27c>)
 8000672:	223d      	movs	r2, #61	; 0x3d
 8000674:	601a      	str	r2, [r3, #0]
			setTimer9(5000);
 8000676:	f241 3088 	movw	r0, #5000	; 0x1388
 800067a:	f001 f9ed 	bl	8001a58 <setTimer9>
			break;
 800067e:	e11d      	b.n	80008bc <fsm_mannual_run+0x278>
		case mannual_red_green:
			if(timer9_flag == 1){
 8000680:	4b90      	ldr	r3, [pc, #576]	; (80008c4 <fsm_mannual_run+0x280>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d10e      	bne.n	80006a6 <fsm_mannual_run+0x62>
				status_system = INIT;
 8000688:	4b8f      	ldr	r3, [pc, #572]	; (80008c8 <fsm_mannual_run+0x284>)
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 800068e:	4b8c      	ldr	r3, [pc, #560]	; (80008c0 <fsm_mannual_run+0x27c>)
 8000690:	223c      	movs	r2, #60	; 0x3c
 8000692:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000694:	4b8d      	ldr	r3, [pc, #564]	; (80008cc <fsm_mannual_run+0x288>)
 8000696:	2213      	movs	r2, #19
 8000698:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 800069a:	4b8d      	ldr	r3, [pc, #564]	; (80008d0 <fsm_mannual_run+0x28c>)
 800069c:	2217      	movs	r2, #23
 800069e:	601a      	str	r2, [r3, #0]

//				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 1 \r"), 1000);

				resetTimeTraffic();
 80006a0:	f001 fd5c 	bl	800215c <resetTimeTraffic>
				break;
 80006a4:	e10a      	b.n	80008bc <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 80006a6:	f7ff fd63 	bl	8000170 <isButton_BUT2_Pressed>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d106      	bne.n	80006be <fsm_mannual_run+0x7a>
				status_mannual = mannual_red_yellow;
 80006b0:	4b83      	ldr	r3, [pc, #524]	; (80008c0 <fsm_mannual_run+0x27c>)
 80006b2:	223e      	movs	r2, #62	; 0x3e
 80006b4:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80006b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80006ba:	f001 f9cd 	bl	8001a58 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 80006be:	f7ff fd45 	bl	800014c <isButton_BUT1_Pressed>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d121      	bne.n	800070c <fsm_mannual_run+0xc8>
				status_mannual = mannual_init;
 80006c8:	4b7d      	ldr	r3, [pc, #500]	; (80008c0 <fsm_mannual_run+0x27c>)
 80006ca:	223c      	movs	r2, #60	; 0x3c
 80006cc:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 80006ce:	4b7e      	ldr	r3, [pc, #504]	; (80008c8 <fsm_mannual_run+0x284>)
 80006d0:	2202      	movs	r2, #2
 80006d2:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 80006d4:	4a7f      	ldr	r2, [pc, #508]	; (80008d4 <fsm_mannual_run+0x290>)
 80006d6:	4980      	ldr	r1, [pc, #512]	; (80008d8 <fsm_mannual_run+0x294>)
 80006d8:	4880      	ldr	r0, [pc, #512]	; (80008dc <fsm_mannual_run+0x298>)
 80006da:	f003 fec1 	bl	8004460 <siprintf>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	497d      	ldr	r1, [pc, #500]	; (80008dc <fsm_mannual_run+0x298>)
 80006e8:	487d      	ldr	r0, [pc, #500]	; (80008e0 <fsm_mannual_run+0x29c>)
 80006ea:	f003 f9fc 	bl	8003ae6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%d \n", time_red_vertical), 1000);
 80006ee:	4b7d      	ldr	r3, [pc, #500]	; (80008e4 <fsm_mannual_run+0x2a0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	497c      	ldr	r1, [pc, #496]	; (80008e8 <fsm_mannual_run+0x2a4>)
 80006f6:	4879      	ldr	r0, [pc, #484]	; (80008dc <fsm_mannual_run+0x298>)
 80006f8:	f003 feb2 	bl	8004460 <siprintf>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b29a      	uxth	r2, r3
 8000700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000704:	4975      	ldr	r1, [pc, #468]	; (80008dc <fsm_mannual_run+0x298>)
 8000706:	4876      	ldr	r0, [pc, #472]	; (80008e0 <fsm_mannual_run+0x29c>)
 8000708:	f003 f9ed 	bl	8003ae6 <HAL_UART_Transmit>
			}
			setRed_horizontal();
 800070c:	f001 fc36 	bl	8001f7c <setRed_horizontal>
			setGreen_vertical();
 8000710:	f001 fc80 	bl	8002014 <setGreen_vertical>
			break;
 8000714:	e0d2      	b.n	80008bc <fsm_mannual_run+0x278>
		case mannual_red_yellow:
			if(timer9_flag == 1){
 8000716:	4b6b      	ldr	r3, [pc, #428]	; (80008c4 <fsm_mannual_run+0x280>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d10e      	bne.n	800073c <fsm_mannual_run+0xf8>
				status_system = INIT;
 800071e:	4b6a      	ldr	r3, [pc, #424]	; (80008c8 <fsm_mannual_run+0x284>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000724:	4b66      	ldr	r3, [pc, #408]	; (80008c0 <fsm_mannual_run+0x27c>)
 8000726:	223c      	movs	r2, #60	; 0x3c
 8000728:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 800072a:	4b68      	ldr	r3, [pc, #416]	; (80008cc <fsm_mannual_run+0x288>)
 800072c:	2213      	movs	r2, #19
 800072e:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000730:	4b67      	ldr	r3, [pc, #412]	; (80008d0 <fsm_mannual_run+0x28c>)
 8000732:	2217      	movs	r2, #23
 8000734:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 8000736:	f001 fd11 	bl	800215c <resetTimeTraffic>
				break;
 800073a:	e0bf      	b.n	80008bc <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 800073c:	f7ff fd18 	bl	8000170 <isButton_BUT2_Pressed>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d106      	bne.n	8000754 <fsm_mannual_run+0x110>
				status_mannual = mannual_green_red;
 8000746:	4b5e      	ldr	r3, [pc, #376]	; (80008c0 <fsm_mannual_run+0x27c>)
 8000748:	223f      	movs	r2, #63	; 0x3f
 800074a:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 800074c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000750:	f001 f982 	bl	8001a58 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000754:	f7ff fcfa 	bl	800014c <isButton_BUT1_Pressed>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d121      	bne.n	80007a2 <fsm_mannual_run+0x15e>
				status_mannual = mannual_init;
 800075e:	4b58      	ldr	r3, [pc, #352]	; (80008c0 <fsm_mannual_run+0x27c>)
 8000760:	223c      	movs	r2, #60	; 0x3c
 8000762:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 8000764:	4b58      	ldr	r3, [pc, #352]	; (80008c8 <fsm_mannual_run+0x284>)
 8000766:	2202      	movs	r2, #2
 8000768:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 800076a:	4a5a      	ldr	r2, [pc, #360]	; (80008d4 <fsm_mannual_run+0x290>)
 800076c:	495a      	ldr	r1, [pc, #360]	; (80008d8 <fsm_mannual_run+0x294>)
 800076e:	485b      	ldr	r0, [pc, #364]	; (80008dc <fsm_mannual_run+0x298>)
 8000770:	f003 fe76 	bl	8004460 <siprintf>
 8000774:	4603      	mov	r3, r0
 8000776:	b29a      	uxth	r2, r3
 8000778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077c:	4957      	ldr	r1, [pc, #348]	; (80008dc <fsm_mannual_run+0x298>)
 800077e:	4858      	ldr	r0, [pc, #352]	; (80008e0 <fsm_mannual_run+0x29c>)
 8000780:	f003 f9b1 	bl	8003ae6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%d \n", time_red_vertical), 1000);
 8000784:	4b57      	ldr	r3, [pc, #348]	; (80008e4 <fsm_mannual_run+0x2a0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	4957      	ldr	r1, [pc, #348]	; (80008e8 <fsm_mannual_run+0x2a4>)
 800078c:	4853      	ldr	r0, [pc, #332]	; (80008dc <fsm_mannual_run+0x298>)
 800078e:	f003 fe67 	bl	8004460 <siprintf>
 8000792:	4603      	mov	r3, r0
 8000794:	b29a      	uxth	r2, r3
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	4950      	ldr	r1, [pc, #320]	; (80008dc <fsm_mannual_run+0x298>)
 800079c:	4850      	ldr	r0, [pc, #320]	; (80008e0 <fsm_mannual_run+0x29c>)
 800079e:	f003 f9a2 	bl	8003ae6 <HAL_UART_Transmit>
			}
			setRed_horizontal();
 80007a2:	f001 fbeb 	bl	8001f7c <setRed_horizontal>
			setYellow_vertical();
 80007a6:	f001 fc45 	bl	8002034 <setYellow_vertical>
			break;
 80007aa:	e087      	b.n	80008bc <fsm_mannual_run+0x278>
		case mannual_green_red:
			if(timer9_flag == 1){
 80007ac:	4b45      	ldr	r3, [pc, #276]	; (80008c4 <fsm_mannual_run+0x280>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d10e      	bne.n	80007d2 <fsm_mannual_run+0x18e>
				status_system = INIT;
 80007b4:	4b44      	ldr	r3, [pc, #272]	; (80008c8 <fsm_mannual_run+0x284>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80007ba:	4b41      	ldr	r3, [pc, #260]	; (80008c0 <fsm_mannual_run+0x27c>)
 80007bc:	223c      	movs	r2, #60	; 0x3c
 80007be:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 80007c0:	4b42      	ldr	r3, [pc, #264]	; (80008cc <fsm_mannual_run+0x288>)
 80007c2:	2213      	movs	r2, #19
 80007c4:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80007c6:	4b42      	ldr	r3, [pc, #264]	; (80008d0 <fsm_mannual_run+0x28c>)
 80007c8:	2217      	movs	r2, #23
 80007ca:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 80007cc:	f001 fcc6 	bl	800215c <resetTimeTraffic>
				break;
 80007d0:	e074      	b.n	80008bc <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 80007d2:	f7ff fccd 	bl	8000170 <isButton_BUT2_Pressed>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d106      	bne.n	80007ea <fsm_mannual_run+0x1a6>
				status_mannual = mannual_yellow_red;
 80007dc:	4b38      	ldr	r3, [pc, #224]	; (80008c0 <fsm_mannual_run+0x27c>)
 80007de:	2240      	movs	r2, #64	; 0x40
 80007e0:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80007e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80007e6:	f001 f937 	bl	8001a58 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 80007ea:	f7ff fcaf 	bl	800014c <isButton_BUT1_Pressed>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d121      	bne.n	8000838 <fsm_mannual_run+0x1f4>
				status_system = MODE2;
 80007f4:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <fsm_mannual_run+0x284>)
 80007f6:	2202      	movs	r2, #2
 80007f8:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80007fa:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <fsm_mannual_run+0x27c>)
 80007fc:	223c      	movs	r2, #60	; 0x3c
 80007fe:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 8000800:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <fsm_mannual_run+0x290>)
 8000802:	4935      	ldr	r1, [pc, #212]	; (80008d8 <fsm_mannual_run+0x294>)
 8000804:	4835      	ldr	r0, [pc, #212]	; (80008dc <fsm_mannual_run+0x298>)
 8000806:	f003 fe2b 	bl	8004460 <siprintf>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000812:	4932      	ldr	r1, [pc, #200]	; (80008dc <fsm_mannual_run+0x298>)
 8000814:	4832      	ldr	r0, [pc, #200]	; (80008e0 <fsm_mannual_run+0x29c>)
 8000816:	f003 f966 	bl	8003ae6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%d \n", time_red_vertical), 1000);
 800081a:	4b32      	ldr	r3, [pc, #200]	; (80008e4 <fsm_mannual_run+0x2a0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	4931      	ldr	r1, [pc, #196]	; (80008e8 <fsm_mannual_run+0x2a4>)
 8000822:	482e      	ldr	r0, [pc, #184]	; (80008dc <fsm_mannual_run+0x298>)
 8000824:	f003 fe1c 	bl	8004460 <siprintf>
 8000828:	4603      	mov	r3, r0
 800082a:	b29a      	uxth	r2, r3
 800082c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000830:	492a      	ldr	r1, [pc, #168]	; (80008dc <fsm_mannual_run+0x298>)
 8000832:	482b      	ldr	r0, [pc, #172]	; (80008e0 <fsm_mannual_run+0x29c>)
 8000834:	f003 f957 	bl	8003ae6 <HAL_UART_Transmit>
			}
			setGreen_horizontal();
 8000838:	f001 fbb4 	bl	8001fa4 <setGreen_horizontal>
			setRed_vertical();
 800083c:	f001 fbda 	bl	8001ff4 <setRed_vertical>
			break;
 8000840:	e03c      	b.n	80008bc <fsm_mannual_run+0x278>
		case mannual_yellow_red:
			if(timer9_flag == 1){
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <fsm_mannual_run+0x280>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d10e      	bne.n	8000868 <fsm_mannual_run+0x224>
				status_system = INIT;
 800084a:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <fsm_mannual_run+0x284>)
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <fsm_mannual_run+0x27c>)
 8000852:	223c      	movs	r2, #60	; 0x3c
 8000854:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <fsm_mannual_run+0x288>)
 8000858:	2213      	movs	r2, #19
 800085a:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <fsm_mannual_run+0x28c>)
 800085e:	2217      	movs	r2, #23
 8000860:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 8000862:	f001 fc7b 	bl	800215c <resetTimeTraffic>
				break;
 8000866:	e029      	b.n	80008bc <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 8000868:	f7ff fc82 	bl	8000170 <isButton_BUT2_Pressed>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <fsm_mannual_run+0x23c>
				status_mannual = mannual_red_green;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <fsm_mannual_run+0x27c>)
 8000874:	223d      	movs	r2, #61	; 0x3d
 8000876:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 8000878:	f241 3088 	movw	r0, #5000	; 0x1388
 800087c:	f001 f8ec 	bl	8001a58 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000880:	f7ff fc64 	bl	800014c <isButton_BUT1_Pressed>
 8000884:	4603      	mov	r3, r0
 8000886:	2b01      	cmp	r3, #1
 8000888:	d112      	bne.n	80008b0 <fsm_mannual_run+0x26c>
				status_system = MODE2;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <fsm_mannual_run+0x284>)
 800088c:	2202      	movs	r2, #2
 800088e:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <fsm_mannual_run+0x27c>)
 8000892:	223c      	movs	r2, #60	; 0x3c
 8000894:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <fsm_mannual_run+0x290>)
 8000898:	490f      	ldr	r1, [pc, #60]	; (80008d8 <fsm_mannual_run+0x294>)
 800089a:	4810      	ldr	r0, [pc, #64]	; (80008dc <fsm_mannual_run+0x298>)
 800089c:	f003 fde0 	bl	8004460 <siprintf>
 80008a0:	4603      	mov	r3, r0
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a8:	490c      	ldr	r1, [pc, #48]	; (80008dc <fsm_mannual_run+0x298>)
 80008aa:	480d      	ldr	r0, [pc, #52]	; (80008e0 <fsm_mannual_run+0x29c>)
 80008ac:	f003 f91b 	bl	8003ae6 <HAL_UART_Transmit>
			}
			setYellow_horizontal();
 80008b0:	f001 fb8c 	bl	8001fcc <setYellow_horizontal>
			setRed_vertical();
 80008b4:	f001 fb9e 	bl	8001ff4 <setRed_vertical>
			break;
 80008b8:	e000      	b.n	80008bc <fsm_mannual_run+0x278>
		default:
			break;
 80008ba:	bf00      	nop
	}
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000006c 	.word	0x2000006c
 80008c4:	200001cc 	.word	0x200001cc
 80008c8:	20000188 	.word	0x20000188
 80008cc:	20000094 	.word	0x20000094
 80008d0:	20000098 	.word	0x20000098
 80008d4:	08004cec 	.word	0x08004cec
 80008d8:	08004cf8 	.word	0x08004cf8
 80008dc:	2000004c 	.word	0x2000004c
 80008e0:	20000270 	.word	0x20000270
 80008e4:	200000c4 	.word	0x200000c4
 80008e8:	08004d00 	.word	0x08004d00

080008ec <fsm_pedestrian_run>:
#include "buzzer.h"
=======
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	switch(status_mannual){
 8000690:	4b54      	ldr	r3, [pc, #336]	; (80007e4 <fsm_mannual_run+0x158>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3b3c      	subs	r3, #60	; 0x3c
 8000696:	2b03      	cmp	r3, #3
 8000698:	f200 80a1 	bhi.w	80007de <fsm_mannual_run+0x152>
 800069c:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <fsm_mannual_run+0x18>)
 800069e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a2:	bf00      	nop
 80006a4:	080006b5 	.word	0x080006b5
 80006a8:	080006c5 	.word	0x080006c5
 80006ac:	08000723 	.word	0x08000723
 80006b0:	08000781 	.word	0x08000781
		case mannual_init:
			status_mannual = mannual_red;
 80006b4:	4b4b      	ldr	r3, [pc, #300]	; (80007e4 <fsm_mannual_run+0x158>)
 80006b6:	223d      	movs	r2, #61	; 0x3d
 80006b8:	601a      	str	r2, [r3, #0]
			setTimer9(5000);
 80006ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80006be:	f001 f83f 	bl	8001740 <setTimer9>
			break;
 80006c2:	e08d      	b.n	80007e0 <fsm_mannual_run+0x154>
		case mannual_red:
			if(timer9_flag == 1){
 80006c4:	4b48      	ldr	r3, [pc, #288]	; (80007e8 <fsm_mannual_run+0x15c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10e      	bne.n	80006ea <fsm_mannual_run+0x5e>
				status_system = INIT;
 80006cc:	4b47      	ldr	r3, [pc, #284]	; (80007ec <fsm_mannual_run+0x160>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80006d2:	4b44      	ldr	r3, [pc, #272]	; (80007e4 <fsm_mannual_run+0x158>)
 80006d4:	223c      	movs	r2, #60	; 0x3c
 80006d6:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 80006d8:	4b45      	ldr	r3, [pc, #276]	; (80007f0 <fsm_mannual_run+0x164>)
 80006da:	2213      	movs	r2, #19
 80006dc:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80006de:	4b45      	ldr	r3, [pc, #276]	; (80007f4 <fsm_mannual_run+0x168>)
 80006e0:	2217      	movs	r2, #23
 80006e2:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 80006e4:	f001 fc12 	bl	8001f0c <resetTimeTraffic>
				break;
 80006e8:	e07a      	b.n	80007e0 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 80006ea:	f7ff fd41 	bl	8000170 <isButton_BUT2_Pressed>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d106      	bne.n	8000702 <fsm_mannual_run+0x76>
				status_mannual = mannual_green;
 80006f4:	4b3b      	ldr	r3, [pc, #236]	; (80007e4 <fsm_mannual_run+0x158>)
 80006f6:	223e      	movs	r2, #62	; 0x3e
 80006f8:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80006fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80006fe:	f001 f81f 	bl	8001740 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000702:	f7ff fd23 	bl	800014c <isButton_BUT1_Pressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d105      	bne.n	8000718 <fsm_mannual_run+0x8c>
				status_mannual = mannual_init;
 800070c:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <fsm_mannual_run+0x158>)
 800070e:	223c      	movs	r2, #60	; 0x3c
 8000710:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 8000712:	4b36      	ldr	r3, [pc, #216]	; (80007ec <fsm_mannual_run+0x160>)
 8000714:	2202      	movs	r2, #2
 8000716:	601a      	str	r2, [r3, #0]
			}
			setRed_horizontal();
 8000718:	f001 fb08 	bl	8001d2c <setRed_horizontal>
			setGreen_vertical();
 800071c:	f001 fb52 	bl	8001dc4 <setGreen_vertical>
			break;
 8000720:	e05e      	b.n	80007e0 <fsm_mannual_run+0x154>
		case mannual_green:
			if(timer9_flag == 1){
 8000722:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <fsm_mannual_run+0x15c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d10e      	bne.n	8000748 <fsm_mannual_run+0xbc>
				status_system = INIT;
 800072a:	4b30      	ldr	r3, [pc, #192]	; (80007ec <fsm_mannual_run+0x160>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000730:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <fsm_mannual_run+0x158>)
 8000732:	223c      	movs	r2, #60	; 0x3c
 8000734:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <fsm_mannual_run+0x164>)
 8000738:	2213      	movs	r2, #19
 800073a:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 800073c:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <fsm_mannual_run+0x168>)
 800073e:	2217      	movs	r2, #23
 8000740:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 8000742:	f001 fbe3 	bl	8001f0c <resetTimeTraffic>
				break;
 8000746:	e04b      	b.n	80007e0 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 8000748:	f7ff fd12 	bl	8000170 <isButton_BUT2_Pressed>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d106      	bne.n	8000760 <fsm_mannual_run+0xd4>
				status_mannual = mannual_yellow;
 8000752:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <fsm_mannual_run+0x158>)
 8000754:	223f      	movs	r2, #63	; 0x3f
 8000756:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 8000758:	f241 3088 	movw	r0, #5000	; 0x1388
 800075c:	f000 fff0 	bl	8001740 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000760:	f7ff fcf4 	bl	800014c <isButton_BUT1_Pressed>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d105      	bne.n	8000776 <fsm_mannual_run+0xea>
				status_mannual = mannual_init;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <fsm_mannual_run+0x158>)
 800076c:	223c      	movs	r2, #60	; 0x3c
 800076e:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <fsm_mannual_run+0x160>)
 8000772:	2202      	movs	r2, #2
 8000774:	601a      	str	r2, [r3, #0]
			}
			setGreen_horizontal();
 8000776:	f001 faed 	bl	8001d54 <setGreen_horizontal>
			setYellow_vertical();
 800077a:	f001 fb33 	bl	8001de4 <setYellow_vertical>
			break;
 800077e:	e02f      	b.n	80007e0 <fsm_mannual_run+0x154>
		case mannual_yellow:
			if(timer9_flag == 1){
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <fsm_mannual_run+0x15c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d10e      	bne.n	80007a6 <fsm_mannual_run+0x11a>
				status_system = INIT;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <fsm_mannual_run+0x160>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 800078e:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <fsm_mannual_run+0x158>)
 8000790:	223c      	movs	r2, #60	; 0x3c
 8000792:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <fsm_mannual_run+0x164>)
 8000796:	2213      	movs	r2, #19
 8000798:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <fsm_mannual_run+0x168>)
 800079c:	2217      	movs	r2, #23
 800079e:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 80007a0:	f001 fbb4 	bl	8001f0c <resetTimeTraffic>
				break;
 80007a4:	e01c      	b.n	80007e0 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 80007a6:	f7ff fce3 	bl	8000170 <isButton_BUT2_Pressed>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d106      	bne.n	80007be <fsm_mannual_run+0x132>
				status_mannual = mannual_red;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <fsm_mannual_run+0x158>)
 80007b2:	223d      	movs	r2, #61	; 0x3d
 80007b4:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80007b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80007ba:	f000 ffc1 	bl	8001740 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 80007be:	f7ff fcc5 	bl	800014c <isButton_BUT1_Pressed>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d105      	bne.n	80007d4 <fsm_mannual_run+0x148>
				status_system = MODE2;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <fsm_mannual_run+0x160>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <fsm_mannual_run+0x158>)
 80007d0:	223c      	movs	r2, #60	; 0x3c
 80007d2:	601a      	str	r2, [r3, #0]
			}
			setYellow_horizontal();
 80007d4:	f001 fad2 	bl	8001d7c <setYellow_horizontal>
			setRed_vertical();
 80007d8:	f001 fae4 	bl	8001da4 <setRed_vertical>
			break;
 80007dc:	e000      	b.n	80007e0 <fsm_mannual_run+0x154>
		default:
			break;
 80007de:	bf00      	nop
	}
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	2000004c 	.word	0x2000004c
 80007e8:	2000012c 	.word	0x2000012c
 80007ec:	200000e8 	.word	0x200000e8
 80007f0:	20000054 	.word	0x20000054
 80007f4:	20000058 	.word	0x20000058

080007f8 <fsm_pedestrian_run>:
#include "button.h"
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553


int status_pedestrian_light = pedes_off;

void fsm_pedestrian_run(){
<<<<<<< HEAD
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	switch(status_pedestrian_light){
 80008f0:	4b24      	ldr	r3, [pc, #144]	; (8000984 <fsm_pedestrian_run+0x98>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b84      	cmp	r3, #132	; 0x84
 80008f6:	d01e      	beq.n	8000936 <fsm_pedestrian_run+0x4a>
 80008f8:	2b84      	cmp	r3, #132	; 0x84
 80008fa:	dc3d      	bgt.n	8000978 <fsm_pedestrian_run+0x8c>
 80008fc:	2b82      	cmp	r3, #130	; 0x82
 80008fe:	d002      	beq.n	8000906 <fsm_pedestrian_run+0x1a>
 8000900:	2b83      	cmp	r3, #131	; 0x83
 8000902:	d003      	beq.n	800090c <fsm_pedestrian_run+0x20>

=======
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	switch(status_pedestrian_light){
 80007fc:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <fsm_pedestrian_run+0x80>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b84      	cmp	r3, #132	; 0x84
 8000802:	d01e      	beq.n	8000842 <fsm_pedestrian_run+0x4a>
 8000804:	2b84      	cmp	r3, #132	; 0x84
 8000806:	dc31      	bgt.n	800086c <fsm_pedestrian_run+0x74>
 8000808:	2b82      	cmp	r3, #130	; 0x82
 800080a:	d002      	beq.n	8000812 <fsm_pedestrian_run+0x1a>
 800080c:	2b83      	cmp	r3, #131	; 0x83
 800080e:	d003      	beq.n	8000818 <fsm_pedestrian_run+0x20>
				FSM_Buzzer_State = LOUDER_BIP;
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
			}

			break;
		default:
			break;
<<<<<<< HEAD
 8000904:	e038      	b.n	8000978 <fsm_pedestrian_run+0x8c>
			set_off_pedes();
 8000906:	f001 fc5f 	bl	80021c8 <set_off_pedes>
			break;
 800090a:	e038      	b.n	800097e <fsm_pedestrian_run+0x92>
			set_red_pedes();
 800090c:	f001 fc70 	bl	80021f0 <set_red_pedes>
			if (timer30_flag == 1){
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <fsm_pedestrian_run+0x9c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d102      	bne.n	800091e <fsm_pedestrian_run+0x32>
				status_pedestrian_light = pedes_off;
 8000918:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <fsm_pedestrian_run+0x98>)
 800091a:	2282      	movs	r2, #130	; 0x82
 800091c:	601a      	str	r2, [r3, #0]
			if (status_traffic_blink_horizontal == red_horizontal)
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <fsm_pedestrian_run+0xa0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b14      	cmp	r3, #20
 8000924:	d103      	bne.n	800092e <fsm_pedestrian_run+0x42>
				status_pedestrian_light = pedes_green;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <fsm_pedestrian_run+0x98>)
 8000928:	2284      	movs	r2, #132	; 0x84
 800092a:	601a      	str	r2, [r3, #0]
			break;
 800092c:	e027      	b.n	800097e <fsm_pedestrian_run+0x92>
				status_pedestrian_light = pedes_red;
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <fsm_pedestrian_run+0x98>)
 8000930:	2283      	movs	r2, #131	; 0x83
 8000932:	601a      	str	r2, [r3, #0]
			break;
 8000934:	e023      	b.n	800097e <fsm_pedestrian_run+0x92>
			set_green_pedes();
 8000936:	f001 fc6f 	bl	8002218 <set_green_pedes>
			if (status_traffic_blink_horizontal == red_horizontal)
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <fsm_pedestrian_run+0xa0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b14      	cmp	r3, #20
 8000940:	d103      	bne.n	800094a <fsm_pedestrian_run+0x5e>
				status_pedestrian_light = pedes_green;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <fsm_pedestrian_run+0x98>)
 8000944:	2284      	movs	r2, #132	; 0x84
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	e002      	b.n	8000950 <fsm_pedestrian_run+0x64>
				status_pedestrian_light = pedes_red;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <fsm_pedestrian_run+0x98>)
 800094c:	2283      	movs	r2, #131	; 0x83
 800094e:	601a      	str	r2, [r3, #0]
			if (time_red_horizontal_temp < 4){ //buzzer bip louder + faster
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <fsm_pedestrian_run+0xa4>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b03      	cmp	r3, #3
 8000956:	dc11      	bgt.n	800097c <fsm_pedestrian_run+0x90>
				FSM_Buzzer_State = ON;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <fsm_pedestrian_run+0xa8>)
 800095a:	2201      	movs	r2, #1
 800095c:	601a      	str	r2, [r3, #0]
				setTimer31(TICK);
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <fsm_pedestrian_run+0xac>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f8c6 	bl	8001af4 <setTimer31>
				if (time_red_horizontal_temp == 0){
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <fsm_pedestrian_run+0xa4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d105      	bne.n	800097c <fsm_pedestrian_run+0x90>
					FSM_Buzzer_State=OFF;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <fsm_pedestrian_run+0xa8>)
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
			break;
 8000976:	e001      	b.n	800097c <fsm_pedestrian_run+0x90>
			break;
 8000978:	bf00      	nop
 800097a:	e000      	b.n	800097e <fsm_pedestrian_run+0x92>
			break;
 800097c:	bf00      	nop
	}
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000070 	.word	0x20000070
 8000988:	200001e4 	.word	0x200001e4
 800098c:	20000094 	.word	0x20000094
 8000990:	200000b0 	.word	0x200000b0
 8000994:	20000184 	.word	0x20000184
 8000998:	200000d4 	.word	0x200000d4

0800099c <fsm_system_run>:
#include "software_timer.h"

UART_HandleTypeDef huart2;
uint8_t str[30] = " ";

fsm_system_run(){
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	switch(status_system){
 80009a0:	4b94      	ldr	r3, [pc, #592]	; (8000bf4 <fsm_system_run+0x258>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	dc13      	bgt.n	80009d0 <fsm_system_run+0x34>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f2c0 8231 	blt.w	8000e10 <fsm_system_run+0x474>
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	f200 822e 	bhi.w	8000e10 <fsm_system_run+0x474>
 80009b4:	a201      	add	r2, pc, #4	; (adr r2, 80009bc <fsm_system_run+0x20>)
 80009b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ba:	bf00      	nop
 80009bc:	080009d9 	.word	0x080009d9
 80009c0:	080009fb 	.word	0x080009fb
 80009c4:	08000b07 	.word	0x08000b07
 80009c8:	08000c59 	.word	0x08000c59
 80009cc:	08000d45 	.word	0x08000d45
 80009d0:	2b5f      	cmp	r3, #95	; 0x5f
 80009d2:	f000 8085 	beq.w	8000ae0 <fsm_system_run+0x144>
=======
 8000810:	e02c      	b.n	800086c <fsm_pedestrian_run+0x74>
			set_off_pedes();
 8000812:	f001 fbb1 	bl	8001f78 <set_off_pedes>
			break;
 8000816:	e02c      	b.n	8000872 <fsm_pedestrian_run+0x7a>
			set_red_pedes();
 8000818:	f001 fbc2 	bl	8001fa0 <set_red_pedes>
			if (timer30_flag == 1){
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <fsm_pedestrian_run+0x84>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d102      	bne.n	800082a <fsm_pedestrian_run+0x32>
				status_pedestrian_light = pedes_off;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <fsm_pedestrian_run+0x80>)
 8000826:	2282      	movs	r2, #130	; 0x82
 8000828:	601a      	str	r2, [r3, #0]
			if (status_traffic_blink_horizontal == red_horizontal)
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <fsm_pedestrian_run+0x88>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b14      	cmp	r3, #20
 8000830:	d103      	bne.n	800083a <fsm_pedestrian_run+0x42>
				status_pedestrian_light = pedes_green;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <fsm_pedestrian_run+0x80>)
 8000834:	2284      	movs	r2, #132	; 0x84
 8000836:	601a      	str	r2, [r3, #0]
			break;
 8000838:	e01b      	b.n	8000872 <fsm_pedestrian_run+0x7a>
				status_pedestrian_light = pedes_red;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <fsm_pedestrian_run+0x80>)
 800083c:	2283      	movs	r2, #131	; 0x83
 800083e:	601a      	str	r2, [r3, #0]
			break;
 8000840:	e017      	b.n	8000872 <fsm_pedestrian_run+0x7a>
			set_green_pedes();
 8000842:	f001 fbc1 	bl	8001fc8 <set_green_pedes>
			if (status_traffic_blink_horizontal == red_horizontal){
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <fsm_pedestrian_run+0x88>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b14      	cmp	r3, #20
 800084c:	d103      	bne.n	8000856 <fsm_pedestrian_run+0x5e>
				status_pedestrian_light = pedes_green;
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <fsm_pedestrian_run+0x80>)
 8000850:	2284      	movs	r2, #132	; 0x84
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	e002      	b.n	800085c <fsm_pedestrian_run+0x64>
				status_pedestrian_light = pedes_red;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <fsm_pedestrian_run+0x80>)
 8000858:	2283      	movs	r2, #131	; 0x83
 800085a:	601a      	str	r2, [r3, #0]
			if (time_red_horizontal_temp < 4){ //buzzer bip louder + faster
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <fsm_pedestrian_run+0x8c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b03      	cmp	r3, #3
 8000862:	dc05      	bgt.n	8000870 <fsm_pedestrian_run+0x78>
				FSM_Buzzer_State = LOUDER_BIP;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <fsm_pedestrian_run+0x90>)
 8000866:	2235      	movs	r2, #53	; 0x35
 8000868:	601a      	str	r2, [r3, #0]
			break;
 800086a:	e001      	b.n	8000870 <fsm_pedestrian_run+0x78>
			break;
 800086c:	bf00      	nop
 800086e:	e000      	b.n	8000872 <fsm_pedestrian_run+0x7a>
			break;
 8000870:	bf00      	nop
	}
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000050 	.word	0x20000050
 800087c:	20000144 	.word	0x20000144
 8000880:	20000054 	.word	0x20000054
 8000884:	20000070 	.word	0x20000070
 8000888:	20000094 	.word	0x20000094

0800088c <fsm_system_run>:
#include "fsm_traffic_blink.h"
#include "fsm_mannual.h"
#include "software_timer.h"
#include "buzzer.h"

fsm_system_run(){
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	switch(status_system){
 8000890:	4b8b      	ldr	r3, [pc, #556]	; (8000ac0 <fsm_system_run+0x234>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b04      	cmp	r3, #4
 8000896:	dc13      	bgt.n	80008c0 <fsm_system_run+0x34>
 8000898:	2b00      	cmp	r3, #0
 800089a:	f2c0 8190 	blt.w	8000bbe <fsm_system_run+0x332>
 800089e:	2b04      	cmp	r3, #4
 80008a0:	f200 818d 	bhi.w	8000bbe <fsm_system_run+0x332>
 80008a4:	a201      	add	r2, pc, #4	; (adr r2, 80008ac <fsm_system_run+0x20>)
 80008a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008aa:	bf00      	nop
 80008ac:	080008c7 	.word	0x080008c7
 80008b0:	080008cf 	.word	0x080008cf
 80008b4:	08000997 	.word	0x08000997
 80008b8:	08000a2d 	.word	0x08000a2d
 80008bc:	08000b11 	.word	0x08000b11
 80008c0:	2b5f      	cmp	r3, #95	; 0x5f
 80008c2:	d055      	beq.n	8000970 <fsm_system_run+0xe4>
				status_traffic_blink_vertical = init_vertical;
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
				status_system = INIT;
//				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 1 \r"), 1000);
			}
			break;
	}
}
<<<<<<< HEAD
 80009d6:	e21b      	b.n	8000e10 <fsm_system_run+0x474>
			status_system = MODE1;
 80009d8:	4b86      	ldr	r3, [pc, #536]	; (8000bf4 <fsm_system_run+0x258>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 1 \r"), 1000);
 80009de:	4a86      	ldr	r2, [pc, #536]	; (8000bf8 <fsm_system_run+0x25c>)
 80009e0:	4986      	ldr	r1, [pc, #536]	; (8000bfc <fsm_system_run+0x260>)
 80009e2:	4887      	ldr	r0, [pc, #540]	; (8000c00 <fsm_system_run+0x264>)
 80009e4:	f003 fd3c 	bl	8004460 <siprintf>
 80009e8:	4603      	mov	r3, r0
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f0:	4983      	ldr	r1, [pc, #524]	; (8000c00 <fsm_system_run+0x264>)
 80009f2:	4884      	ldr	r0, [pc, #528]	; (8000c04 <fsm_system_run+0x268>)
 80009f4:	f003 f877 	bl	8003ae6 <HAL_UART_Transmit>
			break;
 80009f8:	e20a      	b.n	8000e10 <fsm_system_run+0x474>
			status_traffic_horizontal = display_traffic_horizontal;
 80009fa:	4b83      	ldr	r3, [pc, #524]	; (8000c08 <fsm_system_run+0x26c>)
 80009fc:	2205      	movs	r2, #5
 80009fe:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = display_traffic_vertical;
 8000a00:	4b82      	ldr	r3, [pc, #520]	; (8000c0c <fsm_system_run+0x270>)
 8000a02:	2209      	movs	r2, #9
 8000a04:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_countDown_horizontal;
 8000a06:	4b82      	ldr	r3, [pc, #520]	; (8000c10 <fsm_system_run+0x274>)
 8000a08:	220b      	movs	r2, #11
 8000a0a:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_countDown_vertical;
 8000a0c:	4b81      	ldr	r3, [pc, #516]	; (8000c14 <fsm_system_run+0x278>)
 8000a0e:	220f      	movs	r2, #15
 8000a10:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000a12:	f7ff fb9b 	bl	800014c <isButton_BUT1_Pressed>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d121      	bne.n	8000a60 <fsm_system_run+0xc4>
				status_system = MODE2;
 8000a1c:	4b75      	ldr	r3, [pc, #468]	; (8000bf4 <fsm_system_run+0x258>)
 8000a1e:	2202      	movs	r2, #2
 8000a20:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 2 \r"), 1000);
 8000a22:	4a7d      	ldr	r2, [pc, #500]	; (8000c18 <fsm_system_run+0x27c>)
 8000a24:	4975      	ldr	r1, [pc, #468]	; (8000bfc <fsm_system_run+0x260>)
 8000a26:	4876      	ldr	r0, [pc, #472]	; (8000c00 <fsm_system_run+0x264>)
 8000a28:	f003 fd1a 	bl	8004460 <siprintf>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a34:	4972      	ldr	r1, [pc, #456]	; (8000c00 <fsm_system_run+0x264>)
 8000a36:	4873      	ldr	r0, [pc, #460]	; (8000c04 <fsm_system_run+0x268>)
 8000a38:	f003 f855 	bl	8003ae6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_red_vertical), 1000);
 8000a3c:	4b77      	ldr	r3, [pc, #476]	; (8000c1c <fsm_system_run+0x280>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4977      	ldr	r1, [pc, #476]	; (8000c20 <fsm_system_run+0x284>)
 8000a44:	486e      	ldr	r0, [pc, #440]	; (8000c00 <fsm_system_run+0x264>)
 8000a46:	f003 fd0b 	bl	8004460 <siprintf>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	496b      	ldr	r1, [pc, #428]	; (8000c00 <fsm_system_run+0x264>)
 8000a54:	486b      	ldr	r0, [pc, #428]	; (8000c04 <fsm_system_run+0x268>)
 8000a56:	f003 f846 	bl	8003ae6 <HAL_UART_Transmit>
				status_pedestrian_light = pedes_off;
 8000a5a:	4b72      	ldr	r3, [pc, #456]	; (8000c24 <fsm_system_run+0x288>)
 8000a5c:	2282      	movs	r2, #130	; 0x82
 8000a5e:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000a60:	f7ff fb86 	bl	8000170 <isButton_BUT2_Pressed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d112      	bne.n	8000a90 <fsm_system_run+0xf4>
				status_system = MAN_MODE;
 8000a6a:	4b62      	ldr	r3, [pc, #392]	; (8000bf4 <fsm_system_run+0x258>)
 8000a6c:	225f      	movs	r2, #95	; 0x5f
 8000a6e:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMAN MODE\r"), 1000);
 8000a70:	4a6d      	ldr	r2, [pc, #436]	; (8000c28 <fsm_system_run+0x28c>)
 8000a72:	4962      	ldr	r1, [pc, #392]	; (8000bfc <fsm_system_run+0x260>)
 8000a74:	4862      	ldr	r0, [pc, #392]	; (8000c00 <fsm_system_run+0x264>)
 8000a76:	f003 fcf3 	bl	8004460 <siprintf>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	495f      	ldr	r1, [pc, #380]	; (8000c00 <fsm_system_run+0x264>)
 8000a84:	485f      	ldr	r0, [pc, #380]	; (8000c04 <fsm_system_run+0x268>)
 8000a86:	f003 f82e 	bl	8003ae6 <HAL_UART_Transmit>
				status_pedestrian_light = pedes_off;
 8000a8a:	4b66      	ldr	r3, [pc, #408]	; (8000c24 <fsm_system_run+0x288>)
 8000a8c:	2282      	movs	r2, #130	; 0x82
 8000a8e:	601a      	str	r2, [r3, #0]
			if (isButton_Pedes_Pressed() == 1 ){
 8000a90:	f7ff fb92 	bl	80001b8 <isButton_Pedes_Pressed>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d119      	bne.n	8000ace <fsm_system_run+0x132>
				setTimer30(2000*(time_red_horizontal+time_green_horizontal+time_yellow_horizontal));
 8000a9a:	4b64      	ldr	r3, [pc, #400]	; (8000c2c <fsm_system_run+0x290>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b64      	ldr	r3, [pc, #400]	; (8000c30 <fsm_system_run+0x294>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	441a      	add	r2, r3
 8000aa4:	4b63      	ldr	r3, [pc, #396]	; (8000c34 <fsm_system_run+0x298>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000aae:	fb02 f303 	mul.w	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 f804 	bl	8001ac0 <setTimer30>
				if (status_traffic_blink_horizontal == red_horizontal)
 8000ab8:	4b5f      	ldr	r3, [pc, #380]	; (8000c38 <fsm_system_run+0x29c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b14      	cmp	r3, #20
 8000abe:	d103      	bne.n	8000ac8 <fsm_system_run+0x12c>
					status_pedestrian_light = pedes_green;
 8000ac0:	4b58      	ldr	r3, [pc, #352]	; (8000c24 <fsm_system_run+0x288>)
 8000ac2:	2284      	movs	r2, #132	; 0x84
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	e002      	b.n	8000ace <fsm_system_run+0x132>
					status_pedestrian_light = pedes_red;
 8000ac8:	4b56      	ldr	r3, [pc, #344]	; (8000c24 <fsm_system_run+0x288>)
 8000aca:	2283      	movs	r2, #131	; 0x83
 8000acc:	601a      	str	r2, [r3, #0]
			if (timer30_flag == 1){
 8000ace:	4b5b      	ldr	r3, [pc, #364]	; (8000c3c <fsm_system_run+0x2a0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	f040 8195 	bne.w	8000e02 <fsm_system_run+0x466>
				status_pedestrian_light = pedes_off;
 8000ad8:	4b52      	ldr	r3, [pc, #328]	; (8000c24 <fsm_system_run+0x288>)
 8000ada:	2282      	movs	r2, #130	; 0x82
 8000adc:	601a      	str	r2, [r3, #0]
			break;
 8000ade:	e190      	b.n	8000e02 <fsm_system_run+0x466>
			fsm_mannual_run();
 8000ae0:	f7ff fdb0 	bl	8000644 <fsm_mannual_run>
			status_7SEG_horizontal = off_horizontal;
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <fsm_system_run+0x274>)
 8000ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8000aea:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = off_vertical;
 8000aec:	4b49      	ldr	r3, [pc, #292]	; (8000c14 <fsm_system_run+0x278>)
 8000aee:	f06f 0201 	mvn.w	r2, #1
 8000af2:	601a      	str	r2, [r3, #0]
			status_traffic_horizontal = mannual_horizontal;
 8000af4:	4b44      	ldr	r3, [pc, #272]	; (8000c08 <fsm_system_run+0x26c>)
 8000af6:	f06f 0202 	mvn.w	r2, #2
 8000afa:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = mannual_vertical;
 8000afc:	4b43      	ldr	r3, [pc, #268]	; (8000c0c <fsm_system_run+0x270>)
 8000afe:	f06f 0203 	mvn.w	r2, #3
 8000b02:	601a      	str	r2, [r3, #0]
			break;
 8000b04:	e184      	b.n	8000e10 <fsm_system_run+0x474>
			status_traffic_horizontal = modifying_led_red_horizontal;
 8000b06:	4b40      	ldr	r3, [pc, #256]	; (8000c08 <fsm_system_run+0x26c>)
 8000b08:	2206      	movs	r2, #6
 8000b0a:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_red_vertical;
 8000b0c:	4b3f      	ldr	r3, [pc, #252]	; (8000c0c <fsm_system_run+0x270>)
 8000b0e:	221e      	movs	r2, #30
 8000b10:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode02;
 8000b12:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <fsm_system_run+0x274>)
 8000b14:	220c      	movs	r2, #12
 8000b16:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000b18:	4b3e      	ldr	r3, [pc, #248]	; (8000c14 <fsm_system_run+0x278>)
 8000b1a:	2210      	movs	r2, #16
 8000b1c:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000b1e:	f7ff fb27 	bl	8000170 <isButton_BUT2_Pressed>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d118      	bne.n	8000b5a <fsm_system_run+0x1be>
				time_red_horizontal++;
 8000b28:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <fsm_system_run+0x290>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	4a3f      	ldr	r2, [pc, #252]	; (8000c2c <fsm_system_run+0x290>)
 8000b30:	6013      	str	r3, [r2, #0]
				time_red_vertical++;
 8000b32:	4b3a      	ldr	r3, [pc, #232]	; (8000c1c <fsm_system_run+0x280>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a38      	ldr	r2, [pc, #224]	; (8000c1c <fsm_system_run+0x280>)
 8000b3a:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n",time_red_vertical), 1000);
 8000b3c:	4b37      	ldr	r3, [pc, #220]	; (8000c1c <fsm_system_run+0x280>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4937      	ldr	r1, [pc, #220]	; (8000c20 <fsm_system_run+0x284>)
 8000b44:	482e      	ldr	r0, [pc, #184]	; (8000c00 <fsm_system_run+0x264>)
 8000b46:	f003 fc8b 	bl	8004460 <siprintf>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	492b      	ldr	r1, [pc, #172]	; (8000c00 <fsm_system_run+0x264>)
 8000b54:	482b      	ldr	r0, [pc, #172]	; (8000c04 <fsm_system_run+0x268>)
 8000b56:	f002 ffc6 	bl	8003ae6 <HAL_UART_Transmit>
			_7SEG_buffer_vertical[0] = time_red_vertical/10;
 8000b5a:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <fsm_system_run+0x280>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a38      	ldr	r2, [pc, #224]	; (8000c40 <fsm_system_run+0x2a4>)
 8000b60:	fb82 1203 	smull	r1, r2, r2, r3
 8000b64:	1092      	asrs	r2, r2, #2
 8000b66:	17db      	asrs	r3, r3, #31
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	4a36      	ldr	r2, [pc, #216]	; (8000c44 <fsm_system_run+0x2a8>)
 8000b6c:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical%10;
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <fsm_system_run+0x280>)
 8000b70:	6819      	ldr	r1, [r3, #0]
 8000b72:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <fsm_system_run+0x2a4>)
 8000b74:	fb83 2301 	smull	r2, r3, r3, r1
 8000b78:	109a      	asrs	r2, r3, #2
 8000b7a:	17cb      	asrs	r3, r1, #31
 8000b7c:	1ad2      	subs	r2, r2, r3
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	1aca      	subs	r2, r1, r3
 8000b88:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <fsm_system_run+0x2a8>)
 8000b8a:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000b8c:	f7ff fb02 	bl	8000194 <isButton_BUT3_Pressed>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d107      	bne.n	8000ba6 <fsm_system_run+0x20a>
				time_red_horizontal_temp= time_red_horizontal;
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <fsm_system_run+0x290>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a2b      	ldr	r2, [pc, #172]	; (8000c48 <fsm_system_run+0x2ac>)
 8000b9c:	6013      	str	r3, [r2, #0]
				time_red_vertical_temp= time_red_vertical;
 8000b9e:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <fsm_system_run+0x280>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a2a      	ldr	r2, [pc, #168]	; (8000c4c <fsm_system_run+0x2b0>)
 8000ba4:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000ba6:	f7ff fad1 	bl	800014c <isButton_BUT1_Pressed>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	f040 812a 	bne.w	8000e06 <fsm_system_run+0x46a>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 3 \r"), 1000);
 8000bb2:	4a27      	ldr	r2, [pc, #156]	; (8000c50 <fsm_system_run+0x2b4>)
 8000bb4:	4911      	ldr	r1, [pc, #68]	; (8000bfc <fsm_system_run+0x260>)
 8000bb6:	4812      	ldr	r0, [pc, #72]	; (8000c00 <fsm_system_run+0x264>)
 8000bb8:	f003 fc52 	bl	8004460 <siprintf>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc4:	490e      	ldr	r1, [pc, #56]	; (8000c00 <fsm_system_run+0x264>)
 8000bc6:	480f      	ldr	r0, [pc, #60]	; (8000c04 <fsm_system_run+0x268>)
 8000bc8:	f002 ff8d 	bl	8003ae6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_yellow_vertical), 1000);
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <fsm_system_run+0x2b8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4913      	ldr	r1, [pc, #76]	; (8000c20 <fsm_system_run+0x284>)
 8000bd4:	480a      	ldr	r0, [pc, #40]	; (8000c00 <fsm_system_run+0x264>)
 8000bd6:	f003 fc43 	bl	8004460 <siprintf>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	4907      	ldr	r1, [pc, #28]	; (8000c00 <fsm_system_run+0x264>)
 8000be4:	4807      	ldr	r0, [pc, #28]	; (8000c04 <fsm_system_run+0x268>)
 8000be6:	f002 ff7e 	bl	8003ae6 <HAL_UART_Transmit>
				status_system = MODE3;
 8000bea:	4b02      	ldr	r3, [pc, #8]	; (8000bf4 <fsm_system_run+0x258>)
 8000bec:	2203      	movs	r2, #3
 8000bee:	601a      	str	r2, [r3, #0]
			break;
 8000bf0:	e109      	b.n	8000e06 <fsm_system_run+0x46a>
 8000bf2:	bf00      	nop
 8000bf4:	20000188 	.word	0x20000188
 8000bf8:	08004d08 	.word	0x08004d08
 8000bfc:	08004d14 	.word	0x08004d14
 8000c00:	20000074 	.word	0x20000074
 8000c04:	20000270 	.word	0x20000270
 8000c08:	2000009c 	.word	0x2000009c
 8000c0c:	200000a0 	.word	0x200000a0
 8000c10:	20000044 	.word	0x20000044
 8000c14:	20000048 	.word	0x20000048
 8000c18:	08004d1c 	.word	0x08004d1c
 8000c1c:	200000c4 	.word	0x200000c4
 8000c20:	08004d28 	.word	0x08004d28
 8000c24:	20000070 	.word	0x20000070
 8000c28:	08004d30 	.word	0x08004d30
 8000c2c:	200000a4 	.word	0x200000a4
 8000c30:	200000a8 	.word	0x200000a8
 8000c34:	200000ac 	.word	0x200000ac
 8000c38:	20000094 	.word	0x20000094
 8000c3c:	200001e4 	.word	0x200001e4
 8000c40:	66666667 	.word	0x66666667
 8000c44:	20000218 	.word	0x20000218
 8000c48:	200000b0 	.word	0x200000b0
 8000c4c:	200000d0 	.word	0x200000d0
 8000c50:	08004d3c 	.word	0x08004d3c
 8000c54:	200000c0 	.word	0x200000c0
			status_traffic_horizontal = modifying_led_yellow_horizontal;
 8000c58:	4b6e      	ldr	r3, [pc, #440]	; (8000e14 <fsm_system_run+0x478>)
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_yellow_vertical;
 8000c5e:	4b6e      	ldr	r3, [pc, #440]	; (8000e18 <fsm_system_run+0x47c>)
 8000c60:	2220      	movs	r2, #32
 8000c62:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode03;
 8000c64:	4b6d      	ldr	r3, [pc, #436]	; (8000e1c <fsm_system_run+0x480>)
 8000c66:	220d      	movs	r2, #13
 8000c68:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000c6a:	4b6d      	ldr	r3, [pc, #436]	; (8000e20 <fsm_system_run+0x484>)
 8000c6c:	2210      	movs	r2, #16
 8000c6e:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000c70:	f7ff fa7e 	bl	8000170 <isButton_BUT2_Pressed>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d118      	bne.n	8000cac <fsm_system_run+0x310>
				time_yellow_horizontal++;
 8000c7a:	4b6a      	ldr	r3, [pc, #424]	; (8000e24 <fsm_system_run+0x488>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4a68      	ldr	r2, [pc, #416]	; (8000e24 <fsm_system_run+0x488>)
 8000c82:	6013      	str	r3, [r2, #0]
				time_yellow_vertical++;
 8000c84:	4b68      	ldr	r3, [pc, #416]	; (8000e28 <fsm_system_run+0x48c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a67      	ldr	r2, [pc, #412]	; (8000e28 <fsm_system_run+0x48c>)
 8000c8c:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_yellow_vertical), 1000);
 8000c8e:	4b66      	ldr	r3, [pc, #408]	; (8000e28 <fsm_system_run+0x48c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4965      	ldr	r1, [pc, #404]	; (8000e2c <fsm_system_run+0x490>)
 8000c96:	4866      	ldr	r0, [pc, #408]	; (8000e30 <fsm_system_run+0x494>)
 8000c98:	f003 fbe2 	bl	8004460 <siprintf>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca4:	4962      	ldr	r1, [pc, #392]	; (8000e30 <fsm_system_run+0x494>)
 8000ca6:	4863      	ldr	r0, [pc, #396]	; (8000e34 <fsm_system_run+0x498>)
 8000ca8:	f002 ff1d 	bl	8003ae6 <HAL_UART_Transmit>
			_7SEG_buffer_vertical[0] = time_yellow_vertical/10;
 8000cac:	4b5e      	ldr	r3, [pc, #376]	; (8000e28 <fsm_system_run+0x48c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a61      	ldr	r2, [pc, #388]	; (8000e38 <fsm_system_run+0x49c>)
 8000cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb6:	1092      	asrs	r2, r2, #2
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	4a5f      	ldr	r2, [pc, #380]	; (8000e3c <fsm_system_run+0x4a0>)
 8000cbe:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical%10;
 8000cc0:	4b59      	ldr	r3, [pc, #356]	; (8000e28 <fsm_system_run+0x48c>)
 8000cc2:	6819      	ldr	r1, [r3, #0]
 8000cc4:	4b5c      	ldr	r3, [pc, #368]	; (8000e38 <fsm_system_run+0x49c>)
 8000cc6:	fb83 2301 	smull	r2, r3, r3, r1
 8000cca:	109a      	asrs	r2, r3, #2
 8000ccc:	17cb      	asrs	r3, r1, #31
 8000cce:	1ad2      	subs	r2, r2, r3
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	1aca      	subs	r2, r1, r3
 8000cda:	4b58      	ldr	r3, [pc, #352]	; (8000e3c <fsm_system_run+0x4a0>)
 8000cdc:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000cde:	f7ff fa59 	bl	8000194 <isButton_BUT3_Pressed>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d107      	bne.n	8000cf8 <fsm_system_run+0x35c>
				time_yellow_horizontal_temp= time_yellow_horizontal;
 8000ce8:	4b4e      	ldr	r3, [pc, #312]	; (8000e24 <fsm_system_run+0x488>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a54      	ldr	r2, [pc, #336]	; (8000e40 <fsm_system_run+0x4a4>)
 8000cee:	6013      	str	r3, [r2, #0]
				time_yellow_vertical_temp= time_yellow_vertical;
 8000cf0:	4b4d      	ldr	r3, [pc, #308]	; (8000e28 <fsm_system_run+0x48c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a53      	ldr	r2, [pc, #332]	; (8000e44 <fsm_system_run+0x4a8>)
 8000cf6:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000cf8:	f7ff fa28 	bl	800014c <isButton_BUT1_Pressed>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	f040 8083 	bne.w	8000e0a <fsm_system_run+0x46e>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 4 \r"), 1000);
 8000d04:	4a50      	ldr	r2, [pc, #320]	; (8000e48 <fsm_system_run+0x4ac>)
 8000d06:	4951      	ldr	r1, [pc, #324]	; (8000e4c <fsm_system_run+0x4b0>)
 8000d08:	4849      	ldr	r0, [pc, #292]	; (8000e30 <fsm_system_run+0x494>)
 8000d0a:	f003 fba9 	bl	8004460 <siprintf>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	4946      	ldr	r1, [pc, #280]	; (8000e30 <fsm_system_run+0x494>)
 8000d18:	4846      	ldr	r0, [pc, #280]	; (8000e34 <fsm_system_run+0x498>)
 8000d1a:	f002 fee4 	bl	8003ae6 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_green_vertical), 1000);
 8000d1e:	4b4c      	ldr	r3, [pc, #304]	; (8000e50 <fsm_system_run+0x4b4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	4941      	ldr	r1, [pc, #260]	; (8000e2c <fsm_system_run+0x490>)
 8000d26:	4842      	ldr	r0, [pc, #264]	; (8000e30 <fsm_system_run+0x494>)
 8000d28:	f003 fb9a 	bl	8004460 <siprintf>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d34:	493e      	ldr	r1, [pc, #248]	; (8000e30 <fsm_system_run+0x494>)
 8000d36:	483f      	ldr	r0, [pc, #252]	; (8000e34 <fsm_system_run+0x498>)
 8000d38:	f002 fed5 	bl	8003ae6 <HAL_UART_Transmit>
				status_system = MODE4;
 8000d3c:	4b45      	ldr	r3, [pc, #276]	; (8000e54 <fsm_system_run+0x4b8>)
 8000d3e:	2204      	movs	r2, #4
 8000d40:	601a      	str	r2, [r3, #0]
			break;
 8000d42:	e062      	b.n	8000e0a <fsm_system_run+0x46e>
			status_traffic_horizontal = modifying_led_green_horizontal;
 8000d44:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <fsm_system_run+0x478>)
 8000d46:	2207      	movs	r2, #7
 8000d48:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_green_vertical;
 8000d4a:	4b33      	ldr	r3, [pc, #204]	; (8000e18 <fsm_system_run+0x47c>)
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode04;
 8000d50:	4b32      	ldr	r3, [pc, #200]	; (8000e1c <fsm_system_run+0x480>)
 8000d52:	220e      	movs	r2, #14
 8000d54:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000d56:	4b32      	ldr	r3, [pc, #200]	; (8000e20 <fsm_system_run+0x484>)
 8000d58:	2210      	movs	r2, #16
 8000d5a:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000d5c:	f7ff fa08 	bl	8000170 <isButton_BUT2_Pressed>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d118      	bne.n	8000d98 <fsm_system_run+0x3fc>
				time_green_horizontal++;
 8000d66:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <fsm_system_run+0x4bc>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	4a3a      	ldr	r2, [pc, #232]	; (8000e58 <fsm_system_run+0x4bc>)
 8000d6e:	6013      	str	r3, [r2, #0]
				time_green_vertical++;
 8000d70:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <fsm_system_run+0x4b4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a36      	ldr	r2, [pc, #216]	; (8000e50 <fsm_system_run+0x4b4>)
 8000d78:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_green_vertical), 1000);
 8000d7a:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <fsm_system_run+0x4b4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	461a      	mov	r2, r3
 8000d80:	492a      	ldr	r1, [pc, #168]	; (8000e2c <fsm_system_run+0x490>)
 8000d82:	482b      	ldr	r0, [pc, #172]	; (8000e30 <fsm_system_run+0x494>)
 8000d84:	f003 fb6c 	bl	8004460 <siprintf>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d90:	4927      	ldr	r1, [pc, #156]	; (8000e30 <fsm_system_run+0x494>)
 8000d92:	4828      	ldr	r0, [pc, #160]	; (8000e34 <fsm_system_run+0x498>)
 8000d94:	f002 fea7 	bl	8003ae6 <HAL_UART_Transmit>
			_7SEG_buffer_vertical[0] = time_green_vertical/10;
 8000d98:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <fsm_system_run+0x4b4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <fsm_system_run+0x49c>)
 8000d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000da2:	1092      	asrs	r2, r2, #2
 8000da4:	17db      	asrs	r3, r3, #31
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	4a24      	ldr	r2, [pc, #144]	; (8000e3c <fsm_system_run+0x4a0>)
 8000daa:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical%10;
 8000dac:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <fsm_system_run+0x4b4>)
 8000dae:	6819      	ldr	r1, [r3, #0]
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <fsm_system_run+0x49c>)
 8000db2:	fb83 2301 	smull	r2, r3, r3, r1
 8000db6:	109a      	asrs	r2, r3, #2
 8000db8:	17cb      	asrs	r3, r1, #31
 8000dba:	1ad2      	subs	r2, r2, r3
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	4413      	add	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	1aca      	subs	r2, r1, r3
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <fsm_system_run+0x4a0>)
 8000dc8:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000dca:	f7ff f9e3 	bl	8000194 <isButton_BUT3_Pressed>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d107      	bne.n	8000de4 <fsm_system_run+0x448>
				time_green_horizontal_temp= time_green_horizontal;
 8000dd4:	4b20      	ldr	r3, [pc, #128]	; (8000e58 <fsm_system_run+0x4bc>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a20      	ldr	r2, [pc, #128]	; (8000e5c <fsm_system_run+0x4c0>)
 8000dda:	6013      	str	r3, [r2, #0]
				time_green_vertical_temp= time_green_vertical;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <fsm_system_run+0x4b4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a1f      	ldr	r2, [pc, #124]	; (8000e60 <fsm_system_run+0x4c4>)
 8000de2:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000de4:	f7ff f9b2 	bl	800014c <isButton_BUT1_Pressed>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d10f      	bne.n	8000e0e <fsm_system_run+0x472>
				status_traffic_blink_horizontal = init_horizontal;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <fsm_system_run+0x4c8>)
 8000df0:	2213      	movs	r2, #19
 8000df2:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <fsm_system_run+0x4cc>)
 8000df6:	2217      	movs	r2, #23
 8000df8:	601a      	str	r2, [r3, #0]
				status_system = INIT;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <fsm_system_run+0x4b8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
			break;
 8000e00:	e005      	b.n	8000e0e <fsm_system_run+0x472>
			break;
 8000e02:	bf00      	nop
 8000e04:	e004      	b.n	8000e10 <fsm_system_run+0x474>
			break;
 8000e06:	bf00      	nop
 8000e08:	e002      	b.n	8000e10 <fsm_system_run+0x474>
			break;
 8000e0a:	bf00      	nop
 8000e0c:	e000      	b.n	8000e10 <fsm_system_run+0x474>
			break;
 8000e0e:	bf00      	nop
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000009c 	.word	0x2000009c
 8000e18:	200000a0 	.word	0x200000a0
 8000e1c:	20000044 	.word	0x20000044
 8000e20:	20000048 	.word	0x20000048
 8000e24:	200000ac 	.word	0x200000ac
 8000e28:	200000c0 	.word	0x200000c0
 8000e2c:	08004d28 	.word	0x08004d28
 8000e30:	20000074 	.word	0x20000074
 8000e34:	20000270 	.word	0x20000270
 8000e38:	66666667 	.word	0x66666667
 8000e3c:	20000218 	.word	0x20000218
 8000e40:	200000b8 	.word	0x200000b8
 8000e44:	200000cc 	.word	0x200000cc
 8000e48:	08004d48 	.word	0x08004d48
 8000e4c:	08004d14 	.word	0x08004d14
 8000e50:	200000bc 	.word	0x200000bc
 8000e54:	20000188 	.word	0x20000188
 8000e58:	200000a8 	.word	0x200000a8
 8000e5c:	200000b4 	.word	0x200000b4
 8000e60:	200000c8 	.word	0x200000c8
 8000e64:	20000094 	.word	0x20000094
 8000e68:	20000098 	.word	0x20000098

08000e6c <fsm_traffic_blink_horizontal_run>:
=======
 80008c4:	e17b      	b.n	8000bbe <fsm_system_run+0x332>
			status_system = MODE1;
 80008c6:	4b7e      	ldr	r3, [pc, #504]	; (8000ac0 <fsm_system_run+0x234>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
			break;
 80008cc:	e177      	b.n	8000bbe <fsm_system_run+0x332>
			status_traffic_horizontal = display_traffic_horizontal;
 80008ce:	4b7d      	ldr	r3, [pc, #500]	; (8000ac4 <fsm_system_run+0x238>)
 80008d0:	2205      	movs	r2, #5
 80008d2:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = display_traffic_vertical;
 80008d4:	4b7c      	ldr	r3, [pc, #496]	; (8000ac8 <fsm_system_run+0x23c>)
 80008d6:	2209      	movs	r2, #9
 80008d8:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_countDown_horizontal;
 80008da:	4b7c      	ldr	r3, [pc, #496]	; (8000acc <fsm_system_run+0x240>)
 80008dc:	220b      	movs	r2, #11
 80008de:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_countDown_vertical;
 80008e0:	4b7b      	ldr	r3, [pc, #492]	; (8000ad0 <fsm_system_run+0x244>)
 80008e2:	220f      	movs	r2, #15
 80008e4:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 80008e6:	f7ff fc31 	bl	800014c <isButton_BUT1_Pressed>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d105      	bne.n	80008fc <fsm_system_run+0x70>
				status_system = MODE2;
 80008f0:	4b73      	ldr	r3, [pc, #460]	; (8000ac0 <fsm_system_run+0x234>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	601a      	str	r2, [r3, #0]
				status_pedestrian_light = pedes_off;
 80008f6:	4b77      	ldr	r3, [pc, #476]	; (8000ad4 <fsm_system_run+0x248>)
 80008f8:	2282      	movs	r2, #130	; 0x82
 80008fa:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 80008fc:	f7ff fc38 	bl	8000170 <isButton_BUT2_Pressed>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d105      	bne.n	8000912 <fsm_system_run+0x86>
				status_system = MAN_MODE;
 8000906:	4b6e      	ldr	r3, [pc, #440]	; (8000ac0 <fsm_system_run+0x234>)
 8000908:	225f      	movs	r2, #95	; 0x5f
 800090a:	601a      	str	r2, [r3, #0]
				status_pedestrian_light = pedes_off;
 800090c:	4b71      	ldr	r3, [pc, #452]	; (8000ad4 <fsm_system_run+0x248>)
 800090e:	2282      	movs	r2, #130	; 0x82
 8000910:	601a      	str	r2, [r3, #0]
			if (isButton_Pedes_Pressed() == 1 ){
 8000912:	f7ff fc51 	bl	80001b8 <isButton_Pedes_Pressed>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d120      	bne.n	800095e <fsm_system_run+0xd2>
				FSM_Buzzer_State = ONE_BIP;
 800091c:	4b6e      	ldr	r3, [pc, #440]	; (8000ad8 <fsm_system_run+0x24c>)
 800091e:	2233      	movs	r2, #51	; 0x33
 8000920:	601a      	str	r2, [r3, #0]
				setTimer32(1000);
 8000922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000926:	f000 ff59 	bl	80017dc <setTimer32>
				setTimer30(2000*(time_red_horizontal+time_green_horizontal+time_yellow_horizontal));
 800092a:	4b6c      	ldr	r3, [pc, #432]	; (8000adc <fsm_system_run+0x250>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b6c      	ldr	r3, [pc, #432]	; (8000ae0 <fsm_system_run+0x254>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	441a      	add	r2, r3
 8000934:	4b6b      	ldr	r3, [pc, #428]	; (8000ae4 <fsm_system_run+0x258>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4413      	add	r3, r2
 800093a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800093e:	fb02 f303 	mul.w	r3, r2, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f000 ff30 	bl	80017a8 <setTimer30>
				if (status_traffic_blink_horizontal == red_horizontal){
 8000948:	4b67      	ldr	r3, [pc, #412]	; (8000ae8 <fsm_system_run+0x25c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b14      	cmp	r3, #20
 800094e:	d103      	bne.n	8000958 <fsm_system_run+0xcc>
					status_pedestrian_light = pedes_green;
 8000950:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <fsm_system_run+0x248>)
 8000952:	2284      	movs	r2, #132	; 0x84
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e002      	b.n	800095e <fsm_system_run+0xd2>
					status_pedestrian_light = pedes_red;
 8000958:	4b5e      	ldr	r3, [pc, #376]	; (8000ad4 <fsm_system_run+0x248>)
 800095a:	2283      	movs	r2, #131	; 0x83
 800095c:	601a      	str	r2, [r3, #0]
			if (timer30_flag == 1){
 800095e:	4b63      	ldr	r3, [pc, #396]	; (8000aec <fsm_system_run+0x260>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	f040 8124 	bne.w	8000bb0 <fsm_system_run+0x324>
				status_pedestrian_light = pedes_off;
 8000968:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <fsm_system_run+0x248>)
 800096a:	2282      	movs	r2, #130	; 0x82
 800096c:	601a      	str	r2, [r3, #0]
			break;
 800096e:	e11f      	b.n	8000bb0 <fsm_system_run+0x324>
			fsm_mannual_run();
 8000970:	f7ff fe8c 	bl	800068c <fsm_mannual_run>
			status_7SEG_horizontal = off_horizontal;
 8000974:	4b55      	ldr	r3, [pc, #340]	; (8000acc <fsm_system_run+0x240>)
 8000976:	f04f 32ff 	mov.w	r2, #4294967295
 800097a:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = off_vertical;
 800097c:	4b54      	ldr	r3, [pc, #336]	; (8000ad0 <fsm_system_run+0x244>)
 800097e:	f06f 0201 	mvn.w	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
			status_traffic_horizontal = mannual_horizontal;
 8000984:	4b4f      	ldr	r3, [pc, #316]	; (8000ac4 <fsm_system_run+0x238>)
 8000986:	f06f 0202 	mvn.w	r2, #2
 800098a:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = mannual_vertical;
 800098c:	4b4e      	ldr	r3, [pc, #312]	; (8000ac8 <fsm_system_run+0x23c>)
 800098e:	f06f 0203 	mvn.w	r2, #3
 8000992:	601a      	str	r2, [r3, #0]
			break;
 8000994:	e113      	b.n	8000bbe <fsm_system_run+0x332>
			status_traffic_horizontal = modifying_led_red_horizontal;
 8000996:	4b4b      	ldr	r3, [pc, #300]	; (8000ac4 <fsm_system_run+0x238>)
 8000998:	2206      	movs	r2, #6
 800099a:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_red_vertical;
 800099c:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <fsm_system_run+0x23c>)
 800099e:	221e      	movs	r2, #30
 80009a0:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode02;
 80009a2:	4b4a      	ldr	r3, [pc, #296]	; (8000acc <fsm_system_run+0x240>)
 80009a4:	220c      	movs	r2, #12
 80009a6:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 80009a8:	4b49      	ldr	r3, [pc, #292]	; (8000ad0 <fsm_system_run+0x244>)
 80009aa:	2210      	movs	r2, #16
 80009ac:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 80009ae:	f7ff fbdf 	bl	8000170 <isButton_BUT2_Pressed>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d109      	bne.n	80009cc <fsm_system_run+0x140>
				time_red_horizontal++;
 80009b8:	4b48      	ldr	r3, [pc, #288]	; (8000adc <fsm_system_run+0x250>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	4a47      	ldr	r2, [pc, #284]	; (8000adc <fsm_system_run+0x250>)
 80009c0:	6013      	str	r3, [r2, #0]
				time_red_vertical++;
 80009c2:	4b4b      	ldr	r3, [pc, #300]	; (8000af0 <fsm_system_run+0x264>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3301      	adds	r3, #1
 80009c8:	4a49      	ldr	r2, [pc, #292]	; (8000af0 <fsm_system_run+0x264>)
 80009ca:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_red_vertical/10;
 80009cc:	4b48      	ldr	r3, [pc, #288]	; (8000af0 <fsm_system_run+0x264>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a48      	ldr	r2, [pc, #288]	; (8000af4 <fsm_system_run+0x268>)
 80009d2:	fb82 1203 	smull	r1, r2, r2, r3
 80009d6:	1092      	asrs	r2, r2, #2
 80009d8:	17db      	asrs	r3, r3, #31
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	4a46      	ldr	r2, [pc, #280]	; (8000af8 <fsm_system_run+0x26c>)
 80009de:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical%10;
 80009e0:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <fsm_system_run+0x264>)
 80009e2:	6819      	ldr	r1, [r3, #0]
 80009e4:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <fsm_system_run+0x268>)
 80009e6:	fb83 2301 	smull	r2, r3, r3, r1
 80009ea:	109a      	asrs	r2, r3, #2
 80009ec:	17cb      	asrs	r3, r1, #31
 80009ee:	1ad2      	subs	r2, r2, r3
 80009f0:	4613      	mov	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	1aca      	subs	r2, r1, r3
 80009fa:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <fsm_system_run+0x26c>)
 80009fc:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 80009fe:	f7ff fbc9 	bl	8000194 <isButton_BUT3_Pressed>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d107      	bne.n	8000a18 <fsm_system_run+0x18c>
				time_red_horizontal_temp= time_red_horizontal;
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <fsm_system_run+0x250>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a3b      	ldr	r2, [pc, #236]	; (8000afc <fsm_system_run+0x270>)
 8000a0e:	6013      	str	r3, [r2, #0]
				time_red_vertical_temp= time_red_vertical;
 8000a10:	4b37      	ldr	r3, [pc, #220]	; (8000af0 <fsm_system_run+0x264>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a3a      	ldr	r2, [pc, #232]	; (8000b00 <fsm_system_run+0x274>)
 8000a16:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000a18:	f7ff fb98 	bl	800014c <isButton_BUT1_Pressed>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	f040 80c8 	bne.w	8000bb4 <fsm_system_run+0x328>
				status_system = MODE3;
 8000a24:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <fsm_system_run+0x234>)
 8000a26:	2203      	movs	r2, #3
 8000a28:	601a      	str	r2, [r3, #0]
			break;
 8000a2a:	e0c3      	b.n	8000bb4 <fsm_system_run+0x328>
			status_traffic_horizontal = modifying_led_yellow_horizontal;
 8000a2c:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <fsm_system_run+0x238>)
 8000a2e:	2208      	movs	r2, #8
 8000a30:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_yellow_vertical;
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <fsm_system_run+0x23c>)
 8000a34:	2220      	movs	r2, #32
 8000a36:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode03;
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <fsm_system_run+0x240>)
 8000a3a:	220d      	movs	r2, #13
 8000a3c:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <fsm_system_run+0x244>)
 8000a40:	2210      	movs	r2, #16
 8000a42:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000a44:	f7ff fb94 	bl	8000170 <isButton_BUT2_Pressed>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d109      	bne.n	8000a62 <fsm_system_run+0x1d6>
				time_yellow_horizontal++;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <fsm_system_run+0x258>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <fsm_system_run+0x258>)
 8000a56:	6013      	str	r3, [r2, #0]
				time_yellow_vertical++;
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <fsm_system_run+0x278>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	4a29      	ldr	r2, [pc, #164]	; (8000b04 <fsm_system_run+0x278>)
 8000a60:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_yellow_vertical/10;
 8000a62:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <fsm_system_run+0x278>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a23      	ldr	r2, [pc, #140]	; (8000af4 <fsm_system_run+0x268>)
 8000a68:	fb82 1203 	smull	r1, r2, r2, r3
 8000a6c:	1092      	asrs	r2, r2, #2
 8000a6e:	17db      	asrs	r3, r3, #31
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <fsm_system_run+0x26c>)
 8000a74:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical%10;
 8000a76:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <fsm_system_run+0x278>)
 8000a78:	6819      	ldr	r1, [r3, #0]
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <fsm_system_run+0x268>)
 8000a7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000a80:	109a      	asrs	r2, r3, #2
 8000a82:	17cb      	asrs	r3, r1, #31
 8000a84:	1ad2      	subs	r2, r2, r3
 8000a86:	4613      	mov	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4413      	add	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	1aca      	subs	r2, r1, r3
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <fsm_system_run+0x26c>)
 8000a92:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000a94:	f7ff fb7e 	bl	8000194 <isButton_BUT3_Pressed>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d107      	bne.n	8000aae <fsm_system_run+0x222>
				time_yellow_horizontal_temp= time_yellow_horizontal;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <fsm_system_run+0x258>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <fsm_system_run+0x27c>)
 8000aa4:	6013      	str	r3, [r2, #0]
				time_yellow_vertical_temp= time_yellow_vertical;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <fsm_system_run+0x278>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <fsm_system_run+0x280>)
 8000aac:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000aae:	f7ff fb4d 	bl	800014c <isButton_BUT1_Pressed>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d17f      	bne.n	8000bb8 <fsm_system_run+0x32c>
				status_system = MODE4;
 8000ab8:	4b01      	ldr	r3, [pc, #4]	; (8000ac0 <fsm_system_run+0x234>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	601a      	str	r2, [r3, #0]
			break;
 8000abe:	e07b      	b.n	8000bb8 <fsm_system_run+0x32c>
 8000ac0:	200000e8 	.word	0x200000e8
 8000ac4:	2000005c 	.word	0x2000005c
 8000ac8:	20000060 	.word	0x20000060
 8000acc:	20000044 	.word	0x20000044
 8000ad0:	20000048 	.word	0x20000048
 8000ad4:	20000050 	.word	0x20000050
 8000ad8:	20000094 	.word	0x20000094
 8000adc:	20000064 	.word	0x20000064
 8000ae0:	20000068 	.word	0x20000068
 8000ae4:	2000006c 	.word	0x2000006c
 8000ae8:	20000054 	.word	0x20000054
 8000aec:	20000144 	.word	0x20000144
 8000af0:	20000084 	.word	0x20000084
 8000af4:	66666667 	.word	0x66666667
 8000af8:	20000194 	.word	0x20000194
 8000afc:	20000070 	.word	0x20000070
 8000b00:	20000090 	.word	0x20000090
 8000b04:	20000080 	.word	0x20000080
 8000b08:	20000078 	.word	0x20000078
 8000b0c:	2000008c 	.word	0x2000008c
			status_traffic_horizontal = modifying_led_green_horizontal;
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <fsm_system_run+0x338>)
 8000b12:	2207      	movs	r2, #7
 8000b14:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_green_vertical;
 8000b16:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <fsm_system_run+0x33c>)
 8000b18:	221f      	movs	r2, #31
 8000b1a:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode04;
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <fsm_system_run+0x340>)
 8000b1e:	220e      	movs	r2, #14
 8000b20:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000b22:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <fsm_system_run+0x344>)
 8000b24:	2210      	movs	r2, #16
 8000b26:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000b28:	f7ff fb22 	bl	8000170 <isButton_BUT2_Pressed>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d109      	bne.n	8000b46 <fsm_system_run+0x2ba>
				time_green_horizontal++;
 8000b32:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <fsm_system_run+0x348>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <fsm_system_run+0x348>)
 8000b3a:	6013      	str	r3, [r2, #0]
				time_green_vertical++;
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <fsm_system_run+0x34c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	3301      	adds	r3, #1
 8000b42:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <fsm_system_run+0x34c>)
 8000b44:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_green_vertical/10;
 8000b46:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <fsm_system_run+0x34c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <fsm_system_run+0x350>)
 8000b4c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b50:	1092      	asrs	r2, r2, #2
 8000b52:	17db      	asrs	r3, r3, #31
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <fsm_system_run+0x354>)
 8000b58:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical%10;
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <fsm_system_run+0x34c>)
 8000b5c:	6819      	ldr	r1, [r3, #0]
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <fsm_system_run+0x350>)
 8000b60:	fb83 2301 	smull	r2, r3, r3, r1
 8000b64:	109a      	asrs	r2, r3, #2
 8000b66:	17cb      	asrs	r3, r1, #31
 8000b68:	1ad2      	subs	r2, r2, r3
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	4413      	add	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	1aca      	subs	r2, r1, r3
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <fsm_system_run+0x354>)
 8000b76:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000b78:	f7ff fb0c 	bl	8000194 <isButton_BUT3_Pressed>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d107      	bne.n	8000b92 <fsm_system_run+0x306>
				time_green_horizontal_temp= time_green_horizontal;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <fsm_system_run+0x348>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <fsm_system_run+0x358>)
 8000b88:	6013      	str	r3, [r2, #0]
				time_green_vertical_temp= time_green_vertical;
 8000b8a:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <fsm_system_run+0x34c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <fsm_system_run+0x35c>)
 8000b90:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000b92:	f7ff fadb 	bl	800014c <isButton_BUT1_Pressed>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d10f      	bne.n	8000bbc <fsm_system_run+0x330>
				status_traffic_blink_horizontal = init_horizontal;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <fsm_system_run+0x360>)
 8000b9e:	2213      	movs	r2, #19
 8000ba0:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <fsm_system_run+0x364>)
 8000ba4:	2217      	movs	r2, #23
 8000ba6:	601a      	str	r2, [r3, #0]
				status_system = INIT;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <fsm_system_run+0x368>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
			break;
 8000bae:	e005      	b.n	8000bbc <fsm_system_run+0x330>
			break;
 8000bb0:	bf00      	nop
 8000bb2:	e004      	b.n	8000bbe <fsm_system_run+0x332>
			break;
 8000bb4:	bf00      	nop
 8000bb6:	e002      	b.n	8000bbe <fsm_system_run+0x332>
			break;
 8000bb8:	bf00      	nop
 8000bba:	e000      	b.n	8000bbe <fsm_system_run+0x332>
			break;
 8000bbc:	bf00      	nop
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2000005c 	.word	0x2000005c
 8000bc8:	20000060 	.word	0x20000060
 8000bcc:	20000044 	.word	0x20000044
 8000bd0:	20000048 	.word	0x20000048
 8000bd4:	20000068 	.word	0x20000068
 8000bd8:	2000007c 	.word	0x2000007c
 8000bdc:	66666667 	.word	0x66666667
 8000be0:	20000194 	.word	0x20000194
 8000be4:	20000074 	.word	0x20000074
 8000be8:	20000088 	.word	0x20000088
 8000bec:	20000054 	.word	0x20000054
 8000bf0:	20000058 	.word	0x20000058
 8000bf4:	200000e8 	.word	0x200000e8

08000bf8 <fsm_traffic_blink_horizontal_run>:
#include "control_7SEG.h"

int status_traffic_blink_horizontal = init_horizontal;
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
int status_traffic_blink_vertical = init_vertical;

uint8_t str[30];
UART_HandleTypeDef huart2;

void fsm_traffic_blink_horizontal_run(){
<<<<<<< HEAD
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_horizontal){
 8000e70:	4b86      	ldr	r3, [pc, #536]	; (800108c <fsm_traffic_blink_horizontal_run+0x220>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3b13      	subs	r3, #19
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	f200 8182 	bhi.w	8001180 <fsm_traffic_blink_horizontal_run+0x314>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <fsm_traffic_blink_horizontal_run+0x18>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	08000e95 	.word	0x08000e95
 8000e88:	08000edd 	.word	0x08000edd
 8000e8c:	08000fb5 	.word	0x08000fb5
 8000e90:	080010c9 	.word	0x080010c9
		case init_horizontal:
			status_traffic_blink_horizontal = red_horizontal;
 8000e94:	4b7d      	ldr	r3, [pc, #500]	; (800108c <fsm_traffic_blink_horizontal_run+0x220>)
 8000e96:	2214      	movs	r2, #20
 8000e98:	601a      	str	r2, [r3, #0]
			traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000e9a:	4b7d      	ldr	r3, [pc, #500]	; (8001090 <fsm_traffic_blink_horizontal_run+0x224>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	4a7b      	ldr	r2, [pc, #492]	; (8001094 <fsm_traffic_blink_horizontal_run+0x228>)
 8000ea8:	6013      	str	r3, [r2, #0]
			//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
			setTimer1(traffic_buffer_horizontal[0]);
 8000eaa:	4b7a      	ldr	r3, [pc, #488]	; (8001094 <fsm_traffic_blink_horizontal_run+0x228>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fd02 	bl	80018b8 <setTimer1>
			setTimer3(1000);// count down as a clock
 8000eb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb8:	f000 fd32 	bl	8001920 <setTimer3>
			HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_red_horizontal_temp), 1000);
 8000ebc:	4b76      	ldr	r3, [pc, #472]	; (8001098 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4976      	ldr	r1, [pc, #472]	; (800109c <fsm_traffic_blink_horizontal_run+0x230>)
 8000ec4:	4876      	ldr	r0, [pc, #472]	; (80010a0 <fsm_traffic_blink_horizontal_run+0x234>)
 8000ec6:	f003 facb 	bl	8004460 <siprintf>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	4973      	ldr	r1, [pc, #460]	; (80010a0 <fsm_traffic_blink_horizontal_run+0x234>)
 8000ed4:	4873      	ldr	r0, [pc, #460]	; (80010a4 <fsm_traffic_blink_horizontal_run+0x238>)
 8000ed6:	f002 fe06 	bl	8003ae6 <HAL_UART_Transmit>
			break;
 8000eda:	e158      	b.n	800118e <fsm_traffic_blink_horizontal_run+0x322>
		case red_horizontal:
			setRed_horizontal();
 8000edc:	f001 f84e 	bl	8001f7c <setRed_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_red_horizontal_temp/10;
 8000ee0:	4b6d      	ldr	r3, [pc, #436]	; (8001098 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a70      	ldr	r2, [pc, #448]	; (80010a8 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000ee6:	fb82 1203 	smull	r1, r2, r2, r3
 8000eea:	1092      	asrs	r2, r2, #2
 8000eec:	17db      	asrs	r3, r3, #31
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	4a6e      	ldr	r2, [pc, #440]	; (80010ac <fsm_traffic_blink_horizontal_run+0x240>)
 8000ef2:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_red_horizontal_temp%10;
 8000ef4:	4b68      	ldr	r3, [pc, #416]	; (8001098 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	4b6b      	ldr	r3, [pc, #428]	; (80010a8 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000efa:	fb83 2301 	smull	r2, r3, r3, r1
 8000efe:	109a      	asrs	r2, r3, #2
 8000f00:	17cb      	asrs	r3, r1, #31
 8000f02:	1ad2      	subs	r2, r2, r3
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	1aca      	subs	r2, r1, r3
 8000f0e:	4b67      	ldr	r3, [pc, #412]	; (80010ac <fsm_traffic_blink_horizontal_run+0x240>)
 8000f10:	605a      	str	r2, [r3, #4]


			if(timer3_flag == 1){
 8000f12:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <fsm_traffic_blink_horizontal_run+0x244>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d123      	bne.n	8000f62 <fsm_traffic_blink_horizontal_run+0xf6>
				time_red_horizontal_temp--;
 8000f1a:	4b5f      	ldr	r3, [pc, #380]	; (8001098 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	4a5d      	ldr	r2, [pc, #372]	; (8001098 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f22:	6013      	str	r3, [r2, #0]
				if(time_red_horizontal_temp != 0)
 8000f24:	4b5c      	ldr	r3, [pc, #368]	; (8001098 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00e      	beq.n	8000f4a <fsm_traffic_blink_horizontal_run+0xde>
					HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_red_horizontal_temp), 1000);
 8000f2c:	4b5a      	ldr	r3, [pc, #360]	; (8001098 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	495a      	ldr	r1, [pc, #360]	; (800109c <fsm_traffic_blink_horizontal_run+0x230>)
 8000f34:	485a      	ldr	r0, [pc, #360]	; (80010a0 <fsm_traffic_blink_horizontal_run+0x234>)
 8000f36:	f003 fa93 	bl	8004460 <siprintf>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	4957      	ldr	r1, [pc, #348]	; (80010a0 <fsm_traffic_blink_horizontal_run+0x234>)
 8000f44:	4857      	ldr	r0, [pc, #348]	; (80010a4 <fsm_traffic_blink_horizontal_run+0x238>)
 8000f46:	f002 fdce 	bl	8003ae6 <HAL_UART_Transmit>
				if(time_red_horizontal_temp == 0){
 8000f4a:	4b53      	ldr	r3, [pc, #332]	; (8001098 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d103      	bne.n	8000f5a <fsm_traffic_blink_horizontal_run+0xee>
					time_red_horizontal_temp = time_red_horizontal;
 8000f52:	4b4f      	ldr	r3, [pc, #316]	; (8001090 <fsm_traffic_blink_horizontal_run+0x224>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a50      	ldr	r2, [pc, #320]	; (8001098 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f58:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f5e:	f000 fcdf 	bl	8001920 <setTimer3>
			}

			if(timer1_flag == 1){
 8000f62:	4b54      	ldr	r3, [pc, #336]	; (80010b4 <fsm_traffic_blink_horizontal_run+0x248>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	f040 810c 	bne.w	8001184 <fsm_traffic_blink_horizontal_run+0x318>
				status_traffic_blink_horizontal = green_horizontal;
 8000f6c:	4b47      	ldr	r3, [pc, #284]	; (800108c <fsm_traffic_blink_horizontal_run+0x220>)
 8000f6e:	2215      	movs	r2, #21
 8000f70:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[1] = time_green_horizontal*1000;
 8000f72:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <fsm_traffic_blink_horizontal_run+0x24c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	4a45      	ldr	r2, [pc, #276]	; (8001094 <fsm_traffic_blink_horizontal_run+0x228>)
 8000f80:	6053      	str	r3, [r2, #4]
				//led green will turn on in traffic_buffer_horizontal[1]/1000 seconds
				setTimer1(traffic_buffer_horizontal[1]);
 8000f82:	4b44      	ldr	r3, [pc, #272]	; (8001094 <fsm_traffic_blink_horizontal_run+0x228>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fc96 	bl	80018b8 <setTimer1>
				setTimer3(1000);
 8000f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f90:	f000 fcc6 	bl	8001920 <setTimer3>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_green_horizontal_temp), 1000);
 8000f94:	4b49      	ldr	r3, [pc, #292]	; (80010bc <fsm_traffic_blink_horizontal_run+0x250>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4940      	ldr	r1, [pc, #256]	; (800109c <fsm_traffic_blink_horizontal_run+0x230>)
 8000f9c:	4840      	ldr	r0, [pc, #256]	; (80010a0 <fsm_traffic_blink_horizontal_run+0x234>)
 8000f9e:	f003 fa5f 	bl	8004460 <siprintf>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	493d      	ldr	r1, [pc, #244]	; (80010a0 <fsm_traffic_blink_horizontal_run+0x234>)
 8000fac:	483d      	ldr	r0, [pc, #244]	; (80010a4 <fsm_traffic_blink_horizontal_run+0x238>)
 8000fae:	f002 fd9a 	bl	8003ae6 <HAL_UART_Transmit>
			}
			break;
 8000fb2:	e0e7      	b.n	8001184 <fsm_traffic_blink_horizontal_run+0x318>
		case green_horizontal:
			setGreen_horizontal();
 8000fb4:	f000 fff6 	bl	8001fa4 <setGreen_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_green_horizontal_temp/10;
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <fsm_traffic_blink_horizontal_run+0x250>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a3a      	ldr	r2, [pc, #232]	; (80010a8 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000fbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc2:	1092      	asrs	r2, r2, #2
 8000fc4:	17db      	asrs	r3, r3, #31
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	4a38      	ldr	r2, [pc, #224]	; (80010ac <fsm_traffic_blink_horizontal_run+0x240>)
 8000fca:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_green_horizontal_temp%10;
 8000fcc:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <fsm_traffic_blink_horizontal_run+0x250>)
 8000fce:	6819      	ldr	r1, [r3, #0]
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000fd2:	fb83 2301 	smull	r2, r3, r3, r1
 8000fd6:	109a      	asrs	r2, r3, #2
 8000fd8:	17cb      	asrs	r3, r1, #31
 8000fda:	1ad2      	subs	r2, r2, r3
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	1aca      	subs	r2, r1, r3
 8000fe6:	4b31      	ldr	r3, [pc, #196]	; (80010ac <fsm_traffic_blink_horizontal_run+0x240>)
 8000fe8:	605a      	str	r2, [r3, #4]


			if(timer3_flag == 1){
 8000fea:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <fsm_traffic_blink_horizontal_run+0x244>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d123      	bne.n	800103a <fsm_traffic_blink_horizontal_run+0x1ce>

				time_green_horizontal_temp--;
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <fsm_traffic_blink_horizontal_run+0x250>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	4a30      	ldr	r2, [pc, #192]	; (80010bc <fsm_traffic_blink_horizontal_run+0x250>)
 8000ffa:	6013      	str	r3, [r2, #0]
				if(time_green_horizontal_temp != 0)
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	; (80010bc <fsm_traffic_blink_horizontal_run+0x250>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00e      	beq.n	8001022 <fsm_traffic_blink_horizontal_run+0x1b6>
					HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_green_horizontal_temp), 1000);
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <fsm_traffic_blink_horizontal_run+0x250>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4924      	ldr	r1, [pc, #144]	; (800109c <fsm_traffic_blink_horizontal_run+0x230>)
 800100c:	4824      	ldr	r0, [pc, #144]	; (80010a0 <fsm_traffic_blink_horizontal_run+0x234>)
 800100e:	f003 fa27 	bl	8004460 <siprintf>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	4921      	ldr	r1, [pc, #132]	; (80010a0 <fsm_traffic_blink_horizontal_run+0x234>)
 800101c:	4821      	ldr	r0, [pc, #132]	; (80010a4 <fsm_traffic_blink_horizontal_run+0x238>)
 800101e:	f002 fd62 	bl	8003ae6 <HAL_UART_Transmit>
				if(time_green_horizontal_temp == 0){
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <fsm_traffic_blink_horizontal_run+0x250>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d103      	bne.n	8001032 <fsm_traffic_blink_horizontal_run+0x1c6>
					time_green_horizontal_temp = time_green_horizontal;
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <fsm_traffic_blink_horizontal_run+0x24c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a23      	ldr	r2, [pc, #140]	; (80010bc <fsm_traffic_blink_horizontal_run+0x250>)
 8001030:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8001032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001036:	f000 fc73 	bl	8001920 <setTimer3>
			}

			if(timer1_flag == 1){
 800103a:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <fsm_traffic_blink_horizontal_run+0x248>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b01      	cmp	r3, #1
 8001040:	f040 80a2 	bne.w	8001188 <fsm_traffic_blink_horizontal_run+0x31c>
				status_traffic_blink_horizontal = yellow_horizontal;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <fsm_traffic_blink_horizontal_run+0x220>)
 8001046:	2216      	movs	r2, #22
 8001048:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[2] = time_yellow_horizontal*1000;
 800104a:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <fsm_traffic_blink_horizontal_run+0x254>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001052:	fb02 f303 	mul.w	r3, r2, r3
 8001056:	4a0f      	ldr	r2, [pc, #60]	; (8001094 <fsm_traffic_blink_horizontal_run+0x228>)
 8001058:	6093      	str	r3, [r2, #8]
				//led yellow will turn on in traffic_buffer_horizontal[2]/1000 seconds
				setTimer1(traffic_buffer_horizontal[2]);
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <fsm_traffic_blink_horizontal_run+0x228>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fc2a 	bl	80018b8 <setTimer1>
				setTimer3(1000);
 8001064:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001068:	f000 fc5a 	bl	8001920 <setTimer3>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_yellow_horizontal_temp), 1000);
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <fsm_traffic_blink_horizontal_run+0x258>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	490a      	ldr	r1, [pc, #40]	; (800109c <fsm_traffic_blink_horizontal_run+0x230>)
 8001074:	480a      	ldr	r0, [pc, #40]	; (80010a0 <fsm_traffic_blink_horizontal_run+0x234>)
 8001076:	f003 f9f3 	bl	8004460 <siprintf>
 800107a:	4603      	mov	r3, r0
 800107c:	b29a      	uxth	r2, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001082:	4907      	ldr	r1, [pc, #28]	; (80010a0 <fsm_traffic_blink_horizontal_run+0x234>)
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <fsm_traffic_blink_horizontal_run+0x238>)
 8001086:	f002 fd2e 	bl	8003ae6 <HAL_UART_Transmit>
			}
			break;
 800108a:	e07d      	b.n	8001188 <fsm_traffic_blink_horizontal_run+0x31c>
 800108c:	20000094 	.word	0x20000094
 8001090:	200000a4 	.word	0x200000a4
 8001094:	200001f8 	.word	0x200001f8
 8001098:	200000b0 	.word	0x200000b0
 800109c:	08004d54 	.word	0x08004d54
 80010a0:	20000074 	.word	0x20000074
 80010a4:	20000270 	.word	0x20000270
 80010a8:	66666667 	.word	0x66666667
 80010ac:	20000210 	.word	0x20000210
 80010b0:	2000019c 	.word	0x2000019c
 80010b4:	2000018c 	.word	0x2000018c
 80010b8:	200000a8 	.word	0x200000a8
 80010bc:	200000b4 	.word	0x200000b4
 80010c0:	200000ac 	.word	0x200000ac
 80010c4:	200000b8 	.word	0x200000b8
		case yellow_horizontal:
			setYellow_horizontal();
 80010c8:	f000 ff80 	bl	8001fcc <setYellow_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_yellow_horizontal_temp/10;
 80010cc:	4b31      	ldr	r3, [pc, #196]	; (8001194 <fsm_traffic_blink_horizontal_run+0x328>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a31      	ldr	r2, [pc, #196]	; (8001198 <fsm_traffic_blink_horizontal_run+0x32c>)
 80010d2:	fb82 1203 	smull	r1, r2, r2, r3
 80010d6:	1092      	asrs	r2, r2, #2
 80010d8:	17db      	asrs	r3, r3, #31
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	4a2f      	ldr	r2, [pc, #188]	; (800119c <fsm_traffic_blink_horizontal_run+0x330>)
 80010de:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_yellow_horizontal_temp%10;
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <fsm_traffic_blink_horizontal_run+0x328>)
 80010e2:	6819      	ldr	r1, [r3, #0]
 80010e4:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <fsm_traffic_blink_horizontal_run+0x32c>)
 80010e6:	fb83 2301 	smull	r2, r3, r3, r1
 80010ea:	109a      	asrs	r2, r3, #2
 80010ec:	17cb      	asrs	r3, r1, #31
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	1aca      	subs	r2, r1, r3
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <fsm_traffic_blink_horizontal_run+0x330>)
 80010fc:	605a      	str	r2, [r3, #4]


			if(timer3_flag == 1){
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <fsm_traffic_blink_horizontal_run+0x334>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d123      	bne.n	800114e <fsm_traffic_blink_horizontal_run+0x2e2>

				time_yellow_horizontal_temp--;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <fsm_traffic_blink_horizontal_run+0x328>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3b01      	subs	r3, #1
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <fsm_traffic_blink_horizontal_run+0x328>)
 800110e:	6013      	str	r3, [r2, #0]
				if(time_yellow_horizontal_temp != 0)
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <fsm_traffic_blink_horizontal_run+0x328>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00e      	beq.n	8001136 <fsm_traffic_blink_horizontal_run+0x2ca>
					HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_yellow_horizontal_temp), 1000);
 8001118:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <fsm_traffic_blink_horizontal_run+0x328>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4921      	ldr	r1, [pc, #132]	; (80011a4 <fsm_traffic_blink_horizontal_run+0x338>)
 8001120:	4821      	ldr	r0, [pc, #132]	; (80011a8 <fsm_traffic_blink_horizontal_run+0x33c>)
 8001122:	f003 f99d 	bl	8004460 <siprintf>
 8001126:	4603      	mov	r3, r0
 8001128:	b29a      	uxth	r2, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	491e      	ldr	r1, [pc, #120]	; (80011a8 <fsm_traffic_blink_horizontal_run+0x33c>)
 8001130:	481e      	ldr	r0, [pc, #120]	; (80011ac <fsm_traffic_blink_horizontal_run+0x340>)
 8001132:	f002 fcd8 	bl	8003ae6 <HAL_UART_Transmit>
				if(time_yellow_horizontal_temp == 0){
 8001136:	4b17      	ldr	r3, [pc, #92]	; (8001194 <fsm_traffic_blink_horizontal_run+0x328>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d103      	bne.n	8001146 <fsm_traffic_blink_horizontal_run+0x2da>
					time_yellow_horizontal_temp = time_yellow_horizontal;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <fsm_traffic_blink_horizontal_run+0x344>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a14      	ldr	r2, [pc, #80]	; (8001194 <fsm_traffic_blink_horizontal_run+0x328>)
 8001144:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8001146:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114a:	f000 fbe9 	bl	8001920 <setTimer3>
			}

			if(timer1_flag == 1){
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <fsm_traffic_blink_horizontal_run+0x348>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d11a      	bne.n	800118c <fsm_traffic_blink_horizontal_run+0x320>
				status_traffic_blink_horizontal = init_horizontal;
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <fsm_traffic_blink_horizontal_run+0x34c>)
 8001158:	2213      	movs	r2, #19
 800115a:	601a      	str	r2, [r3, #0]
				//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
				traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <fsm_traffic_blink_horizontal_run+0x350>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	4a15      	ldr	r2, [pc, #84]	; (80011c0 <fsm_traffic_blink_horizontal_run+0x354>)
 800116a:	6013      	str	r3, [r2, #0]
				setTimer1(traffic_buffer_horizontal[0]);
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <fsm_traffic_blink_horizontal_run+0x354>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 fba1 	bl	80018b8 <setTimer1>
				setTimer3(1000);
 8001176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800117a:	f000 fbd1 	bl	8001920 <setTimer3>
			}
			break;
 800117e:	e005      	b.n	800118c <fsm_traffic_blink_horizontal_run+0x320>
		default:
			break;
 8001180:	bf00      	nop
 8001182:	e004      	b.n	800118e <fsm_traffic_blink_horizontal_run+0x322>
			break;
 8001184:	bf00      	nop
 8001186:	e002      	b.n	800118e <fsm_traffic_blink_horizontal_run+0x322>
			break;
 8001188:	bf00      	nop
 800118a:	e000      	b.n	800118e <fsm_traffic_blink_horizontal_run+0x322>
			break;
 800118c:	bf00      	nop
	}
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200000b8 	.word	0x200000b8
 8001198:	66666667 	.word	0x66666667
 800119c:	20000210 	.word	0x20000210
 80011a0:	2000019c 	.word	0x2000019c
 80011a4:	08004d54 	.word	0x08004d54
 80011a8:	20000074 	.word	0x20000074
 80011ac:	20000270 	.word	0x20000270
 80011b0:	200000ac 	.word	0x200000ac
 80011b4:	2000018c 	.word	0x2000018c
 80011b8:	20000094 	.word	0x20000094
 80011bc:	200000a4 	.word	0x200000a4
 80011c0:	200001f8 	.word	0x200001f8

080011c4 <fsm_traffic_blink_vertical_run>:

void fsm_traffic_blink_vertical_run(){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_vertical){
 80011c8:	4b89      	ldr	r3, [pc, #548]	; (80013f0 <fsm_traffic_blink_vertical_run+0x22c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3b17      	subs	r3, #23
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	f200 8105 	bhi.w	80013de <fsm_traffic_blink_vertical_run+0x21a>
 80011d4:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <fsm_traffic_blink_vertical_run+0x18>)
 80011d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011da:	bf00      	nop
 80011dc:	080011ed 	.word	0x080011ed
 80011e0:	0800134d 	.word	0x0800134d
 80011e4:	08001217 	.word	0x08001217
 80011e8:	080012bb 	.word	0x080012bb
		case init_vertical:
			status_traffic_blink_vertical = green_vertical;
 80011ec:	4b80      	ldr	r3, [pc, #512]	; (80013f0 <fsm_traffic_blink_vertical_run+0x22c>)
 80011ee:	2219      	movs	r2, #25
 80011f0:	601a      	str	r2, [r3, #0]
			traffic_buffer_vertical[0] = time_green_vertical*1000;
 80011f2:	4b80      	ldr	r3, [pc, #512]	; (80013f4 <fsm_traffic_blink_vertical_run+0x230>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	4a7e      	ldr	r2, [pc, #504]	; (80013f8 <fsm_traffic_blink_vertical_run+0x234>)
 8001200:	6013      	str	r3, [r2, #0]
			setTimer2(traffic_buffer_vertical[0]);
 8001202:	4b7d      	ldr	r3, [pc, #500]	; (80013f8 <fsm_traffic_blink_vertical_run+0x234>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fb70 	bl	80018ec <setTimer2>
			setTimer5(1000);// count down as a clock
 800120c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001210:	f000 fbba 	bl	8001988 <setTimer5>
			break;
 8001214:	e0ea      	b.n	80013ec <fsm_traffic_blink_vertical_run+0x228>
		case green_vertical:
			setGreen_vertical();
 8001216:	f000 fefd 	bl	8002014 <setGreen_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_green_vertical_temp/10;
 800121a:	4b78      	ldr	r3, [pc, #480]	; (80013fc <fsm_traffic_blink_vertical_run+0x238>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a78      	ldr	r2, [pc, #480]	; (8001400 <fsm_traffic_blink_vertical_run+0x23c>)
 8001220:	fb82 1203 	smull	r1, r2, r2, r3
 8001224:	1092      	asrs	r2, r2, #2
 8001226:	17db      	asrs	r3, r3, #31
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	4a76      	ldr	r2, [pc, #472]	; (8001404 <fsm_traffic_blink_vertical_run+0x240>)
 800122c:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical_temp%10;
 800122e:	4b73      	ldr	r3, [pc, #460]	; (80013fc <fsm_traffic_blink_vertical_run+0x238>)
 8001230:	6819      	ldr	r1, [r3, #0]
 8001232:	4b73      	ldr	r3, [pc, #460]	; (8001400 <fsm_traffic_blink_vertical_run+0x23c>)
 8001234:	fb83 2301 	smull	r2, r3, r3, r1
 8001238:	109a      	asrs	r2, r3, #2
 800123a:	17cb      	asrs	r3, r1, #31
 800123c:	1ad2      	subs	r2, r2, r3
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	1aca      	subs	r2, r1, r3
 8001248:	4b6e      	ldr	r3, [pc, #440]	; (8001404 <fsm_traffic_blink_vertical_run+0x240>)
 800124a:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 800124c:	4b6e      	ldr	r3, [pc, #440]	; (8001408 <fsm_traffic_blink_vertical_run+0x244>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d118      	bne.n	8001286 <fsm_traffic_blink_vertical_run+0xc2>
				time_green_vertical_temp--;
 8001254:	4b69      	ldr	r3, [pc, #420]	; (80013fc <fsm_traffic_blink_vertical_run+0x238>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3b01      	subs	r3, #1
 800125a:	4a68      	ldr	r2, [pc, #416]	; (80013fc <fsm_traffic_blink_vertical_run+0x238>)
 800125c:	6013      	str	r3, [r2, #0]
				if(time_green_vertical_temp != 0) setTimer5(1000);
 800125e:	4b67      	ldr	r3, [pc, #412]	; (80013fc <fsm_traffic_blink_vertical_run+0x238>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <fsm_traffic_blink_vertical_run+0xaa>
 8001266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126a:	f000 fb8d 	bl	8001988 <setTimer5>
				if(time_green_vertical_temp == 0){
 800126e:	4b63      	ldr	r3, [pc, #396]	; (80013fc <fsm_traffic_blink_vertical_run+0x238>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d103      	bne.n	800127e <fsm_traffic_blink_vertical_run+0xba>
					time_green_vertical_temp = time_green_vertical;
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <fsm_traffic_blink_vertical_run+0x230>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a60      	ldr	r2, [pc, #384]	; (80013fc <fsm_traffic_blink_vertical_run+0x238>)
 800127c:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 800127e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001282:	f000 fb81 	bl	8001988 <setTimer5>
			}

			if(timer2_flag == 1){
 8001286:	4b61      	ldr	r3, [pc, #388]	; (800140c <fsm_traffic_blink_vertical_run+0x248>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	f040 80a9 	bne.w	80013e2 <fsm_traffic_blink_vertical_run+0x21e>
				status_traffic_blink_vertical = yellow_vertical;
 8001290:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <fsm_traffic_blink_vertical_run+0x22c>)
 8001292:	221a      	movs	r2, #26
 8001294:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[1] = time_yellow_vertical*1000;
 8001296:	4b5e      	ldr	r3, [pc, #376]	; (8001410 <fsm_traffic_blink_vertical_run+0x24c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	4a55      	ldr	r2, [pc, #340]	; (80013f8 <fsm_traffic_blink_vertical_run+0x234>)
 80012a4:	6053      	str	r3, [r2, #4]
				setTimer2(traffic_buffer_vertical[1]);
 80012a6:	4b54      	ldr	r3, [pc, #336]	; (80013f8 <fsm_traffic_blink_vertical_run+0x234>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fb1e 	bl	80018ec <setTimer2>
				setTimer5(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b4:	f000 fb68 	bl	8001988 <setTimer5>
			}
			break;
 80012b8:	e093      	b.n	80013e2 <fsm_traffic_blink_vertical_run+0x21e>
		case yellow_vertical:
			setYellow_vertical();
 80012ba:	f000 febb 	bl	8002034 <setYellow_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_yellow_vertical_temp/10;
 80012be:	4b55      	ldr	r3, [pc, #340]	; (8001414 <fsm_traffic_blink_vertical_run+0x250>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a4f      	ldr	r2, [pc, #316]	; (8001400 <fsm_traffic_blink_vertical_run+0x23c>)
 80012c4:	fb82 1203 	smull	r1, r2, r2, r3
 80012c8:	1092      	asrs	r2, r2, #2
 80012ca:	17db      	asrs	r3, r3, #31
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <fsm_traffic_blink_vertical_run+0x240>)
 80012d0:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical_temp%10;
 80012d2:	4b50      	ldr	r3, [pc, #320]	; (8001414 <fsm_traffic_blink_vertical_run+0x250>)
 80012d4:	6819      	ldr	r1, [r3, #0]
 80012d6:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <fsm_traffic_blink_vertical_run+0x23c>)
 80012d8:	fb83 2301 	smull	r2, r3, r3, r1
 80012dc:	109a      	asrs	r2, r3, #2
 80012de:	17cb      	asrs	r3, r1, #31
 80012e0:	1ad2      	subs	r2, r2, r3
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	1aca      	subs	r2, r1, r3
 80012ec:	4b45      	ldr	r3, [pc, #276]	; (8001404 <fsm_traffic_blink_vertical_run+0x240>)
 80012ee:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 80012f0:	4b45      	ldr	r3, [pc, #276]	; (8001408 <fsm_traffic_blink_vertical_run+0x244>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d110      	bne.n	800131a <fsm_traffic_blink_vertical_run+0x156>
				time_yellow_vertical_temp--;
 80012f8:	4b46      	ldr	r3, [pc, #280]	; (8001414 <fsm_traffic_blink_vertical_run+0x250>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	4a45      	ldr	r2, [pc, #276]	; (8001414 <fsm_traffic_blink_vertical_run+0x250>)
 8001300:	6013      	str	r3, [r2, #0]
				if(time_yellow_vertical_temp == 0){
 8001302:	4b44      	ldr	r3, [pc, #272]	; (8001414 <fsm_traffic_blink_vertical_run+0x250>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d103      	bne.n	8001312 <fsm_traffic_blink_vertical_run+0x14e>
					time_yellow_vertical_temp = time_yellow_vertical;
 800130a:	4b41      	ldr	r3, [pc, #260]	; (8001410 <fsm_traffic_blink_vertical_run+0x24c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a41      	ldr	r2, [pc, #260]	; (8001414 <fsm_traffic_blink_vertical_run+0x250>)
 8001310:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8001312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001316:	f000 fb37 	bl	8001988 <setTimer5>
			}

			if(timer2_flag == 1){
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <fsm_traffic_blink_vertical_run+0x248>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d161      	bne.n	80013e6 <fsm_traffic_blink_vertical_run+0x222>
				status_traffic_blink_vertical = red_vertical;
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <fsm_traffic_blink_vertical_run+0x22c>)
 8001324:	2218      	movs	r2, #24
 8001326:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[2] = time_red_vertical*1000;
 8001328:	4b3b      	ldr	r3, [pc, #236]	; (8001418 <fsm_traffic_blink_vertical_run+0x254>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	4a30      	ldr	r2, [pc, #192]	; (80013f8 <fsm_traffic_blink_vertical_run+0x234>)
 8001336:	6093      	str	r3, [r2, #8]
				setTimer2(traffic_buffer_vertical[2]);
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <fsm_traffic_blink_vertical_run+0x234>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fad5 	bl	80018ec <setTimer2>
				setTimer5(1000);
 8001342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001346:	f000 fb1f 	bl	8001988 <setTimer5>
			}
			break;
 800134a:	e04c      	b.n	80013e6 <fsm_traffic_blink_vertical_run+0x222>
		case red_vertical:
			setRed_vertical();
 800134c:	f000 fe52 	bl	8001ff4 <setRed_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_red_vertical_temp/10;
 8001350:	4b32      	ldr	r3, [pc, #200]	; (800141c <fsm_traffic_blink_vertical_run+0x258>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a2a      	ldr	r2, [pc, #168]	; (8001400 <fsm_traffic_blink_vertical_run+0x23c>)
 8001356:	fb82 1203 	smull	r1, r2, r2, r3
 800135a:	1092      	asrs	r2, r2, #2
 800135c:	17db      	asrs	r3, r3, #31
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	4a28      	ldr	r2, [pc, #160]	; (8001404 <fsm_traffic_blink_vertical_run+0x240>)
 8001362:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical_temp%10;
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <fsm_traffic_blink_vertical_run+0x258>)
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <fsm_traffic_blink_vertical_run+0x23c>)
 800136a:	fb83 2301 	smull	r2, r3, r3, r1
 800136e:	109a      	asrs	r2, r3, #2
 8001370:	17cb      	asrs	r3, r1, #31
 8001372:	1ad2      	subs	r2, r2, r3
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	1aca      	subs	r2, r1, r3
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <fsm_traffic_blink_vertical_run+0x240>)
 8001380:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <fsm_traffic_blink_vertical_run+0x244>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d110      	bne.n	80013ac <fsm_traffic_blink_vertical_run+0x1e8>
				time_red_vertical_temp--;
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <fsm_traffic_blink_vertical_run+0x258>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a22      	ldr	r2, [pc, #136]	; (800141c <fsm_traffic_blink_vertical_run+0x258>)
 8001392:	6013      	str	r3, [r2, #0]
				if(time_red_vertical_temp == 0){
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <fsm_traffic_blink_vertical_run+0x258>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d103      	bne.n	80013a4 <fsm_traffic_blink_vertical_run+0x1e0>
					time_red_vertical_temp = time_red_vertical;
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <fsm_traffic_blink_vertical_run+0x254>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1e      	ldr	r2, [pc, #120]	; (800141c <fsm_traffic_blink_vertical_run+0x258>)
 80013a2:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 80013a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a8:	f000 faee 	bl	8001988 <setTimer5>
			}

			if(timer2_flag == 1){
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <fsm_traffic_blink_vertical_run+0x248>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d11a      	bne.n	80013ea <fsm_traffic_blink_vertical_run+0x226>
				status_traffic_blink_vertical = green_vertical;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <fsm_traffic_blink_vertical_run+0x22c>)
 80013b6:	2219      	movs	r2, #25
 80013b8:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[0] = time_green_vertical*1000;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <fsm_traffic_blink_vertical_run+0x230>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	4a0c      	ldr	r2, [pc, #48]	; (80013f8 <fsm_traffic_blink_vertical_run+0x234>)
 80013c8:	6013      	str	r3, [r2, #0]
				setTimer2(traffic_buffer_vertical[0]);
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <fsm_traffic_blink_vertical_run+0x234>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fa8c 	bl	80018ec <setTimer2>
				setTimer5(1000);
 80013d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d8:	f000 fad6 	bl	8001988 <setTimer5>
			}
			break;
 80013dc:	e005      	b.n	80013ea <fsm_traffic_blink_vertical_run+0x226>
		default:
			break;
 80013de:	bf00      	nop
 80013e0:	e004      	b.n	80013ec <fsm_traffic_blink_vertical_run+0x228>
			break;
 80013e2:	bf00      	nop
 80013e4:	e002      	b.n	80013ec <fsm_traffic_blink_vertical_run+0x228>
			break;
 80013e6:	bf00      	nop
 80013e8:	e000      	b.n	80013ec <fsm_traffic_blink_vertical_run+0x228>
			break;
 80013ea:	bf00      	nop
	}
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000098 	.word	0x20000098
 80013f4:	200000bc 	.word	0x200000bc
 80013f8:	20000204 	.word	0x20000204
 80013fc:	200000c8 	.word	0x200000c8
 8001400:	66666667 	.word	0x66666667
 8001404:	20000218 	.word	0x20000218
 8001408:	200001ac 	.word	0x200001ac
 800140c:	20000194 	.word	0x20000194
 8001410:	200000c0 	.word	0x200000c0
 8001414:	200000cc 	.word	0x200000cc
 8001418:	200000c4 	.word	0x200000c4
 800141c:	200000d0 	.word	0x200000d0

08001420 <fsm_traffic_horizontal_run>:
=======
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_horizontal){
 8000bfc:	4b85      	ldr	r3, [pc, #532]	; (8000e14 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3b13      	subs	r3, #19
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	f200 80fd 	bhi.w	8000e02 <fsm_traffic_blink_horizontal_run+0x20a>
 8000c08:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <fsm_traffic_blink_horizontal_run+0x18>)
 8000c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c0e:	bf00      	nop
 8000c10:	08000c21 	.word	0x08000c21
 8000c14:	08000c4b 	.word	0x08000c4b
 8000c18:	08000cdf 	.word	0x08000cdf
 8000c1c:	08000d71 	.word	0x08000d71
		case init_horizontal:
			status_traffic_blink_horizontal = red_horizontal;
 8000c20:	4b7c      	ldr	r3, [pc, #496]	; (8000e14 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000c22:	2214      	movs	r2, #20
 8000c24:	601a      	str	r2, [r3, #0]
			traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000c26:	4b7c      	ldr	r3, [pc, #496]	; (8000e18 <fsm_traffic_blink_horizontal_run+0x220>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c2e:	fb02 f303 	mul.w	r3, r2, r3
 8000c32:	4a7a      	ldr	r2, [pc, #488]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000c34:	6013      	str	r3, [r2, #0]
			//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
			setTimer1(traffic_buffer_horizontal[0]);
 8000c36:	4b79      	ldr	r3, [pc, #484]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 fcb0 	bl	80015a0 <setTimer1>
			setTimer3(1000);// count down as a clock
 8000c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c44:	f000 fce0 	bl	8001608 <setTimer3>
			break;
 8000c48:	e0e2      	b.n	8000e10 <fsm_traffic_blink_horizontal_run+0x218>
		case red_horizontal:
			setRed_horizontal();
 8000c4a:	f001 f86f 	bl	8001d2c <setRed_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_red_horizontal_temp/10;
 8000c4e:	4b74      	ldr	r3, [pc, #464]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a74      	ldr	r2, [pc, #464]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000c54:	fb82 1203 	smull	r1, r2, r2, r3
 8000c58:	1092      	asrs	r2, r2, #2
 8000c5a:	17db      	asrs	r3, r3, #31
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	4a72      	ldr	r2, [pc, #456]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000c60:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_red_horizontal_temp%10;
 8000c62:	4b6f      	ldr	r3, [pc, #444]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	4b6f      	ldr	r3, [pc, #444]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000c68:	fb83 2301 	smull	r2, r3, r3, r1
 8000c6c:	109a      	asrs	r2, r3, #2
 8000c6e:	17cb      	asrs	r3, r1, #31
 8000c70:	1ad2      	subs	r2, r2, r3
 8000c72:	4613      	mov	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	1aca      	subs	r2, r1, r3
 8000c7c:	4b6a      	ldr	r3, [pc, #424]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000c7e:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000c80:	4b6a      	ldr	r3, [pc, #424]	; (8000e2c <fsm_traffic_blink_horizontal_run+0x234>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d110      	bne.n	8000caa <fsm_traffic_blink_horizontal_run+0xb2>
				time_red_horizontal_temp--;
 8000c88:	4b65      	ldr	r3, [pc, #404]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	4a64      	ldr	r2, [pc, #400]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000c90:	6013      	str	r3, [r2, #0]
				if(time_red_horizontal_temp == 0){
 8000c92:	4b63      	ldr	r3, [pc, #396]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d103      	bne.n	8000ca2 <fsm_traffic_blink_horizontal_run+0xaa>
					time_red_horizontal_temp = time_red_horizontal;
 8000c9a:	4b5f      	ldr	r3, [pc, #380]	; (8000e18 <fsm_traffic_blink_horizontal_run+0x220>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a60      	ldr	r2, [pc, #384]	; (8000e20 <fsm_traffic_blink_horizontal_run+0x228>)
 8000ca0:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca6:	f000 fcaf 	bl	8001608 <setTimer3>
			}

			if(timer1_flag == 1){
 8000caa:	4b61      	ldr	r3, [pc, #388]	; (8000e30 <fsm_traffic_blink_horizontal_run+0x238>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	f040 80a9 	bne.w	8000e06 <fsm_traffic_blink_horizontal_run+0x20e>
				status_traffic_blink_horizontal = green_horizontal;
 8000cb4:	4b57      	ldr	r3, [pc, #348]	; (8000e14 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000cb6:	2215      	movs	r2, #21
 8000cb8:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[1] = time_green_horizontal*1000;
 8000cba:	4b5e      	ldr	r3, [pc, #376]	; (8000e34 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cc2:	fb02 f303 	mul.w	r3, r2, r3
 8000cc6:	4a55      	ldr	r2, [pc, #340]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000cc8:	6053      	str	r3, [r2, #4]
				//led green will turn on in traffic_buffer_horizontal[1]/1000 seconds
				setTimer1(traffic_buffer_horizontal[1]);
 8000cca:	4b54      	ldr	r3, [pc, #336]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fc66 	bl	80015a0 <setTimer1>
				setTimer3(1000);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd8:	f000 fc96 	bl	8001608 <setTimer3>
			}
			break;
 8000cdc:	e093      	b.n	8000e06 <fsm_traffic_blink_horizontal_run+0x20e>
		case green_horizontal:
			setGreen_horizontal();
 8000cde:	f001 f839 	bl	8001d54 <setGreen_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_green_horizontal_temp/10;
 8000ce2:	4b55      	ldr	r3, [pc, #340]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a4f      	ldr	r2, [pc, #316]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000ce8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cec:	1092      	asrs	r2, r2, #2
 8000cee:	17db      	asrs	r3, r3, #31
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	4a4d      	ldr	r2, [pc, #308]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000cf4:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_green_horizontal_temp%10;
 8000cf6:	4b50      	ldr	r3, [pc, #320]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000cf8:	6819      	ldr	r1, [r3, #0]
 8000cfa:	4b4a      	ldr	r3, [pc, #296]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000cfc:	fb83 2301 	smull	r2, r3, r3, r1
 8000d00:	109a      	asrs	r2, r3, #2
 8000d02:	17cb      	asrs	r3, r1, #31
 8000d04:	1ad2      	subs	r2, r2, r3
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1aca      	subs	r2, r1, r3
 8000d10:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000d12:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000d14:	4b45      	ldr	r3, [pc, #276]	; (8000e2c <fsm_traffic_blink_horizontal_run+0x234>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d110      	bne.n	8000d3e <fsm_traffic_blink_horizontal_run+0x146>
				time_green_horizontal_temp--;
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	4a45      	ldr	r2, [pc, #276]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000d24:	6013      	str	r3, [r2, #0]
				if(time_green_horizontal_temp == 0){
 8000d26:	4b44      	ldr	r3, [pc, #272]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d103      	bne.n	8000d36 <fsm_traffic_blink_horizontal_run+0x13e>
					time_green_horizontal_temp = time_green_horizontal;
 8000d2e:	4b41      	ldr	r3, [pc, #260]	; (8000e34 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a41      	ldr	r2, [pc, #260]	; (8000e38 <fsm_traffic_blink_horizontal_run+0x240>)
 8000d34:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000d36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3a:	f000 fc65 	bl	8001608 <setTimer3>
			}

			if(timer1_flag == 1){
 8000d3e:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <fsm_traffic_blink_horizontal_run+0x238>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d161      	bne.n	8000e0a <fsm_traffic_blink_horizontal_run+0x212>
				status_traffic_blink_horizontal = yellow_horizontal;
 8000d46:	4b33      	ldr	r3, [pc, #204]	; (8000e14 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000d48:	2216      	movs	r2, #22
 8000d4a:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[2] = time_yellow_horizontal*1000;
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <fsm_traffic_blink_horizontal_run+0x244>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	4a30      	ldr	r2, [pc, #192]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000d5a:	6093      	str	r3, [r2, #8]
				//led yellow will turn on in traffic_buffer_horizontal[2]/1000 seconds
				setTimer1(traffic_buffer_horizontal[2]);
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fc1d 	bl	80015a0 <setTimer1>
				setTimer3(1000);
 8000d66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6a:	f000 fc4d 	bl	8001608 <setTimer3>
			}
			break;
 8000d6e:	e04c      	b.n	8000e0a <fsm_traffic_blink_horizontal_run+0x212>
		case yellow_horizontal:
			setYellow_horizontal();
 8000d70:	f001 f804 	bl	8001d7c <setYellow_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_yellow_horizontal_temp/10;
 8000d74:	4b32      	ldr	r3, [pc, #200]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000d7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7e:	1092      	asrs	r2, r2, #2
 8000d80:	17db      	asrs	r3, r3, #31
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000d86:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_yellow_horizontal_temp%10;
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000d8a:	6819      	ldr	r1, [r3, #0]
 8000d8c:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000d8e:	fb83 2301 	smull	r2, r3, r3, r1
 8000d92:	109a      	asrs	r2, r3, #2
 8000d94:	17cb      	asrs	r3, r1, #31
 8000d96:	1ad2      	subs	r2, r2, r3
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	1aca      	subs	r2, r1, r3
 8000da2:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <fsm_traffic_blink_horizontal_run+0x230>)
 8000da4:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <fsm_traffic_blink_horizontal_run+0x234>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d110      	bne.n	8000dd0 <fsm_traffic_blink_horizontal_run+0x1d8>
				time_yellow_horizontal_temp--;
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000db6:	6013      	str	r3, [r2, #0]
				if(time_yellow_horizontal_temp == 0){
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d103      	bne.n	8000dc8 <fsm_traffic_blink_horizontal_run+0x1d0>
					time_yellow_horizontal_temp = time_yellow_horizontal;
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <fsm_traffic_blink_horizontal_run+0x244>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1e      	ldr	r2, [pc, #120]	; (8000e40 <fsm_traffic_blink_horizontal_run+0x248>)
 8000dc6:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f000 fc1c 	bl	8001608 <setTimer3>
			}

			if(timer1_flag == 1){
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <fsm_traffic_blink_horizontal_run+0x238>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d11a      	bne.n	8000e0e <fsm_traffic_blink_horizontal_run+0x216>
				status_traffic_blink_horizontal = red_horizontal;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <fsm_traffic_blink_horizontal_run+0x21c>)
 8000dda:	2214      	movs	r2, #20
 8000ddc:	601a      	str	r2, [r3, #0]
				//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
				traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <fsm_traffic_blink_horizontal_run+0x220>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000dec:	6013      	str	r3, [r2, #0]
				setTimer1(traffic_buffer_horizontal[0]);
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <fsm_traffic_blink_horizontal_run+0x224>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fbd4 	bl	80015a0 <setTimer1>
				setTimer3(1000);
 8000df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dfc:	f000 fc04 	bl	8001608 <setTimer3>
			}
			break;
 8000e00:	e005      	b.n	8000e0e <fsm_traffic_blink_horizontal_run+0x216>
		default:
			break;
 8000e02:	bf00      	nop
 8000e04:	e004      	b.n	8000e10 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000e06:	bf00      	nop
 8000e08:	e002      	b.n	8000e10 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000e0a:	bf00      	nop
 8000e0c:	e000      	b.n	8000e10 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000e0e:	bf00      	nop
	}
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000054 	.word	0x20000054
 8000e18:	20000064 	.word	0x20000064
 8000e1c:	20000174 	.word	0x20000174
 8000e20:	20000070 	.word	0x20000070
 8000e24:	66666667 	.word	0x66666667
 8000e28:	2000018c 	.word	0x2000018c
 8000e2c:	200000fc 	.word	0x200000fc
 8000e30:	200000ec 	.word	0x200000ec
 8000e34:	20000068 	.word	0x20000068
 8000e38:	20000074 	.word	0x20000074
 8000e3c:	2000006c 	.word	0x2000006c
 8000e40:	20000078 	.word	0x20000078

08000e44 <fsm_traffic_blink_vertical_run>:

void fsm_traffic_blink_vertical_run(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_vertical){
 8000e48:	4b89      	ldr	r3, [pc, #548]	; (8001070 <fsm_traffic_blink_vertical_run+0x22c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3b17      	subs	r3, #23
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	f200 8105 	bhi.w	800105e <fsm_traffic_blink_vertical_run+0x21a>
 8000e54:	a201      	add	r2, pc, #4	; (adr r2, 8000e5c <fsm_traffic_blink_vertical_run+0x18>)
 8000e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e5a:	bf00      	nop
 8000e5c:	08000e6d 	.word	0x08000e6d
 8000e60:	08000fcd 	.word	0x08000fcd
 8000e64:	08000e97 	.word	0x08000e97
 8000e68:	08000f3b 	.word	0x08000f3b
		case init_vertical:
			status_traffic_blink_vertical = green_vertical;
 8000e6c:	4b80      	ldr	r3, [pc, #512]	; (8001070 <fsm_traffic_blink_vertical_run+0x22c>)
 8000e6e:	2219      	movs	r2, #25
 8000e70:	601a      	str	r2, [r3, #0]
			traffic_buffer_vertical[0] = time_green_vertical*1000;
 8000e72:	4b80      	ldr	r3, [pc, #512]	; (8001074 <fsm_traffic_blink_vertical_run+0x230>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e7a:	fb02 f303 	mul.w	r3, r2, r3
 8000e7e:	4a7e      	ldr	r2, [pc, #504]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000e80:	6013      	str	r3, [r2, #0]
			setTimer2(traffic_buffer_vertical[0]);
 8000e82:	4b7d      	ldr	r3, [pc, #500]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fba4 	bl	80015d4 <setTimer2>
			setTimer5(1000);// count down as a clock
 8000e8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e90:	f000 fbee 	bl	8001670 <setTimer5>
			break;
 8000e94:	e0ea      	b.n	800106c <fsm_traffic_blink_vertical_run+0x228>
		case green_vertical:
			setGreen_vertical();
 8000e96:	f000 ff95 	bl	8001dc4 <setGreen_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_green_vertical_temp/10;
 8000e9a:	4b78      	ldr	r3, [pc, #480]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a78      	ldr	r2, [pc, #480]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea4:	1092      	asrs	r2, r2, #2
 8000ea6:	17db      	asrs	r3, r3, #31
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	4a76      	ldr	r2, [pc, #472]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8000eac:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical_temp%10;
 8000eae:	4b73      	ldr	r3, [pc, #460]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000eb0:	6819      	ldr	r1, [r3, #0]
 8000eb2:	4b73      	ldr	r3, [pc, #460]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000eb4:	fb83 2301 	smull	r2, r3, r3, r1
 8000eb8:	109a      	asrs	r2, r3, #2
 8000eba:	17cb      	asrs	r3, r1, #31
 8000ebc:	1ad2      	subs	r2, r2, r3
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	1aca      	subs	r2, r1, r3
 8000ec8:	4b6e      	ldr	r3, [pc, #440]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8000eca:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000ecc:	4b6e      	ldr	r3, [pc, #440]	; (8001088 <fsm_traffic_blink_vertical_run+0x244>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d118      	bne.n	8000f06 <fsm_traffic_blink_vertical_run+0xc2>
				time_green_vertical_temp--;
 8000ed4:	4b69      	ldr	r3, [pc, #420]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	4a68      	ldr	r2, [pc, #416]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000edc:	6013      	str	r3, [r2, #0]
				if(time_green_vertical_temp != 0) setTimer5(1000);
 8000ede:	4b67      	ldr	r3, [pc, #412]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <fsm_traffic_blink_vertical_run+0xaa>
 8000ee6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eea:	f000 fbc1 	bl	8001670 <setTimer5>
				if(time_green_vertical_temp == 0){
 8000eee:	4b63      	ldr	r3, [pc, #396]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d103      	bne.n	8000efe <fsm_traffic_blink_vertical_run+0xba>
					time_green_vertical_temp = time_green_vertical;
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	; (8001074 <fsm_traffic_blink_vertical_run+0x230>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a60      	ldr	r2, [pc, #384]	; (800107c <fsm_traffic_blink_vertical_run+0x238>)
 8000efc:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000efe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f02:	f000 fbb5 	bl	8001670 <setTimer5>
			}

			if(timer2_flag == 1){
 8000f06:	4b61      	ldr	r3, [pc, #388]	; (800108c <fsm_traffic_blink_vertical_run+0x248>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	f040 80a9 	bne.w	8001062 <fsm_traffic_blink_vertical_run+0x21e>
				status_traffic_blink_vertical = yellow_vertical;
 8000f10:	4b57      	ldr	r3, [pc, #348]	; (8001070 <fsm_traffic_blink_vertical_run+0x22c>)
 8000f12:	221a      	movs	r2, #26
 8000f14:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[1] = time_yellow_vertical*1000;
 8000f16:	4b5e      	ldr	r3, [pc, #376]	; (8001090 <fsm_traffic_blink_vertical_run+0x24c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1e:	fb02 f303 	mul.w	r3, r2, r3
 8000f22:	4a55      	ldr	r2, [pc, #340]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000f24:	6053      	str	r3, [r2, #4]
				setTimer2(traffic_buffer_vertical[1]);
 8000f26:	4b54      	ldr	r3, [pc, #336]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fb52 	bl	80015d4 <setTimer2>
				setTimer5(1000);
 8000f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f34:	f000 fb9c 	bl	8001670 <setTimer5>
			}
			break;
 8000f38:	e093      	b.n	8001062 <fsm_traffic_blink_vertical_run+0x21e>
		case yellow_vertical:
			setYellow_vertical();
 8000f3a:	f000 ff53 	bl	8001de4 <setYellow_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_yellow_vertical_temp/10;
 8000f3e:	4b55      	ldr	r3, [pc, #340]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a4f      	ldr	r2, [pc, #316]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000f44:	fb82 1203 	smull	r1, r2, r2, r3
 8000f48:	1092      	asrs	r2, r2, #2
 8000f4a:	17db      	asrs	r3, r3, #31
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	4a4d      	ldr	r2, [pc, #308]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8000f50:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical_temp%10;
 8000f52:	4b50      	ldr	r3, [pc, #320]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f54:	6819      	ldr	r1, [r3, #0]
 8000f56:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000f58:	fb83 2301 	smull	r2, r3, r3, r1
 8000f5c:	109a      	asrs	r2, r3, #2
 8000f5e:	17cb      	asrs	r3, r1, #31
 8000f60:	1ad2      	subs	r2, r2, r3
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	1aca      	subs	r2, r1, r3
 8000f6c:	4b45      	ldr	r3, [pc, #276]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8000f6e:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000f70:	4b45      	ldr	r3, [pc, #276]	; (8001088 <fsm_traffic_blink_vertical_run+0x244>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d110      	bne.n	8000f9a <fsm_traffic_blink_vertical_run+0x156>
				time_yellow_vertical_temp--;
 8000f78:	4b46      	ldr	r3, [pc, #280]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	4a45      	ldr	r2, [pc, #276]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f80:	6013      	str	r3, [r2, #0]
				if(time_yellow_vertical_temp == 0){
 8000f82:	4b44      	ldr	r3, [pc, #272]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d103      	bne.n	8000f92 <fsm_traffic_blink_vertical_run+0x14e>
					time_yellow_vertical_temp = time_yellow_vertical;
 8000f8a:	4b41      	ldr	r3, [pc, #260]	; (8001090 <fsm_traffic_blink_vertical_run+0x24c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a41      	ldr	r2, [pc, #260]	; (8001094 <fsm_traffic_blink_vertical_run+0x250>)
 8000f90:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000f92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f96:	f000 fb6b 	bl	8001670 <setTimer5>
			}

			if(timer2_flag == 1){
 8000f9a:	4b3c      	ldr	r3, [pc, #240]	; (800108c <fsm_traffic_blink_vertical_run+0x248>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d161      	bne.n	8001066 <fsm_traffic_blink_vertical_run+0x222>
				status_traffic_blink_vertical = red_vertical;
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <fsm_traffic_blink_vertical_run+0x22c>)
 8000fa4:	2218      	movs	r2, #24
 8000fa6:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[2] = time_red_vertical*1000;
 8000fa8:	4b3b      	ldr	r3, [pc, #236]	; (8001098 <fsm_traffic_blink_vertical_run+0x254>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fb0:	fb02 f303 	mul.w	r3, r2, r3
 8000fb4:	4a30      	ldr	r2, [pc, #192]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000fb6:	6093      	str	r3, [r2, #8]
				setTimer2(traffic_buffer_vertical[2]);
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fb09 	bl	80015d4 <setTimer2>
				setTimer5(1000);
 8000fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc6:	f000 fb53 	bl	8001670 <setTimer5>
			}
			break;
 8000fca:	e04c      	b.n	8001066 <fsm_traffic_blink_vertical_run+0x222>
		case red_vertical:
			setRed_vertical();
 8000fcc:	f000 feea 	bl	8001da4 <setRed_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_red_vertical_temp/10;
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2a      	ldr	r2, [pc, #168]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000fd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000fda:	1092      	asrs	r2, r2, #2
 8000fdc:	17db      	asrs	r3, r3, #31
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	4a28      	ldr	r2, [pc, #160]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8000fe2:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical_temp%10;
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 8000fe6:	6819      	ldr	r1, [r3, #0]
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <fsm_traffic_blink_vertical_run+0x23c>)
 8000fea:	fb83 2301 	smull	r2, r3, r3, r1
 8000fee:	109a      	asrs	r2, r3, #2
 8000ff0:	17cb      	asrs	r3, r1, #31
 8000ff2:	1ad2      	subs	r2, r2, r3
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	1aca      	subs	r2, r1, r3
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <fsm_traffic_blink_vertical_run+0x240>)
 8001000:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8001002:	4b21      	ldr	r3, [pc, #132]	; (8001088 <fsm_traffic_blink_vertical_run+0x244>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d110      	bne.n	800102c <fsm_traffic_blink_vertical_run+0x1e8>
				time_red_vertical_temp--;
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3b01      	subs	r3, #1
 8001010:	4a22      	ldr	r2, [pc, #136]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 8001012:	6013      	str	r3, [r2, #0]
				if(time_red_vertical_temp == 0){
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d103      	bne.n	8001024 <fsm_traffic_blink_vertical_run+0x1e0>
					time_red_vertical_temp = time_red_vertical;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <fsm_traffic_blink_vertical_run+0x254>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a1e      	ldr	r2, [pc, #120]	; (800109c <fsm_traffic_blink_vertical_run+0x258>)
 8001022:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8001024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001028:	f000 fb22 	bl	8001670 <setTimer5>
			}

			if(timer2_flag == 1){
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <fsm_traffic_blink_vertical_run+0x248>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d11a      	bne.n	800106a <fsm_traffic_blink_vertical_run+0x226>
				status_traffic_blink_vertical = green_vertical;
 8001034:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <fsm_traffic_blink_vertical_run+0x22c>)
 8001036:	2219      	movs	r2, #25
 8001038:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[0] = time_green_vertical*1000;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <fsm_traffic_blink_vertical_run+0x230>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 8001048:	6013      	str	r3, [r2, #0]
				setTimer2(traffic_buffer_vertical[0]);
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <fsm_traffic_blink_vertical_run+0x234>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fac0 	bl	80015d4 <setTimer2>
				setTimer5(1000);
 8001054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001058:	f000 fb0a 	bl	8001670 <setTimer5>
			}
			break;
 800105c:	e005      	b.n	800106a <fsm_traffic_blink_vertical_run+0x226>
		default:
			break;
 800105e:	bf00      	nop
 8001060:	e004      	b.n	800106c <fsm_traffic_blink_vertical_run+0x228>
			break;
 8001062:	bf00      	nop
 8001064:	e002      	b.n	800106c <fsm_traffic_blink_vertical_run+0x228>
			break;
 8001066:	bf00      	nop
 8001068:	e000      	b.n	800106c <fsm_traffic_blink_vertical_run+0x228>
			break;
 800106a:	bf00      	nop
	}
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000058 	.word	0x20000058
 8001074:	2000007c 	.word	0x2000007c
 8001078:	20000180 	.word	0x20000180
 800107c:	20000088 	.word	0x20000088
 8001080:	66666667 	.word	0x66666667
 8001084:	20000194 	.word	0x20000194
 8001088:	2000010c 	.word	0x2000010c
 800108c:	200000f4 	.word	0x200000f4
 8001090:	20000080 	.word	0x20000080
 8001094:	2000008c 	.word	0x2000008c
 8001098:	20000084 	.word	0x20000084
 800109c:	20000090 	.word	0x20000090

080010a0 <fsm_traffic_horizontal_run>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#include "traffic.h"

int status_traffic_horizontal = display_traffic_horizontal;


void fsm_traffic_horizontal_run(){
<<<<<<< HEAD
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	switch(status_traffic_horizontal){
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <fsm_traffic_horizontal_run+0xa0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	3303      	adds	r3, #3
 800142a:	2b0b      	cmp	r3, #11
 800142c:	d83e      	bhi.n	80014ac <fsm_traffic_horizontal_run+0x8c>
 800142e:	a201      	add	r2, pc, #4	; (adr r2, 8001434 <fsm_traffic_horizontal_run+0x14>)
 8001430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001434:	080014ad 	.word	0x080014ad
 8001438:	080014ad 	.word	0x080014ad
 800143c:	080014ad 	.word	0x080014ad
 8001440:	080014ad 	.word	0x080014ad
 8001444:	080014ad 	.word	0x080014ad
 8001448:	080014ad 	.word	0x080014ad
 800144c:	080014ad 	.word	0x080014ad
 8001450:	080014ad 	.word	0x080014ad
 8001454:	08001465 	.word	0x08001465
 8001458:	0800146b 	.word	0x0800146b
 800145c:	08001497 	.word	0x08001497
 8001460:	08001481 	.word	0x08001481
		case display_traffic_horizontal:
			fsm_traffic_blink_horizontal_run();
 8001464:	f7ff fd02 	bl	8000e6c <fsm_traffic_blink_horizontal_run>
			break;
 8001468:	e027      	b.n	80014ba <fsm_traffic_horizontal_run+0x9a>
=======
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	switch(status_traffic_horizontal){
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <fsm_traffic_horizontal_run+0xa0>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3303      	adds	r3, #3
 80010aa:	2b0b      	cmp	r3, #11
 80010ac:	d83e      	bhi.n	800112c <fsm_traffic_horizontal_run+0x8c>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <fsm_traffic_horizontal_run+0x14>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	0800112d 	.word	0x0800112d
 80010b8:	0800112d 	.word	0x0800112d
 80010bc:	0800112d 	.word	0x0800112d
 80010c0:	0800112d 	.word	0x0800112d
 80010c4:	0800112d 	.word	0x0800112d
 80010c8:	0800112d 	.word	0x0800112d
 80010cc:	0800112d 	.word	0x0800112d
 80010d0:	0800112d 	.word	0x0800112d
 80010d4:	080010e5 	.word	0x080010e5
 80010d8:	080010eb 	.word	0x080010eb
 80010dc:	08001117 	.word	0x08001117
 80010e0:	08001101 	.word	0x08001101
		case display_traffic_horizontal:
			fsm_traffic_blink_horizontal_run();
 80010e4:	f7ff fd88 	bl	8000bf8 <fsm_traffic_blink_horizontal_run>
			break;
 80010e8:	e027      	b.n	800113a <fsm_traffic_horizontal_run+0x9a>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
		case modifying_led_red_horizontal:
			// turn off led green and yellow
//			offGreenYellow_horizontal();
			if(timer8_flag == 1){
<<<<<<< HEAD
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <fsm_traffic_horizontal_run+0xa4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d11e      	bne.n	80014b0 <fsm_traffic_horizontal_run+0x90>
=======
 80010ea:	4b16      	ldr	r3, [pc, #88]	; (8001144 <fsm_traffic_horizontal_run+0xa4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d11e      	bne.n	8001130 <fsm_traffic_horizontal_run+0x90>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
				//toggle led red with frequency 2Hz

				toggleRed_horizontal();
<<<<<<< HEAD
 8001472:	f000 fdfb 	bl	800206c <toggleRed_horizontal>
				setTimer8(500);
 8001476:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800147a:	f000 fad3 	bl	8001a24 <setTimer8>
			}
			break;
 800147e:	e017      	b.n	80014b0 <fsm_traffic_horizontal_run+0x90>
=======
 80010f2:	f000 fe93 	bl	8001e1c <toggleRed_horizontal>
				setTimer8(500);
 80010f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fa:	f000 fb07 	bl	800170c <setTimer8>
			}
			break;
 80010fe:	e017      	b.n	8001130 <fsm_traffic_horizontal_run+0x90>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
		case modifying_led_yellow_horizontal:
//			offGreenRed_horizontal();
//			offAllLed_horizontal();
			if(timer8_flag == 1){
<<<<<<< HEAD
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <fsm_traffic_horizontal_run+0xa4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d115      	bne.n	80014b4 <fsm_traffic_horizontal_run+0x94>
				//toggle led yellow with frequency 2Hz
				toggleYellow_horizontal();
 8001488:	f000 fe14 	bl	80020b4 <toggleYellow_horizontal>
				setTimer8(500);
 800148c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001490:	f000 fac8 	bl	8001a24 <setTimer8>
			}
			break;
 8001494:	e00e      	b.n	80014b4 <fsm_traffic_horizontal_run+0x94>
		case modifying_led_green_horizontal:
//			offRedYellow_horizontal();
			if(timer8_flag == 1){
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <fsm_traffic_horizontal_run+0xa4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d10c      	bne.n	80014b8 <fsm_traffic_horizontal_run+0x98>
				//toggle led green with frequency 2Hz
				toggleGreen_horizontal();
 800149e:	f000 fdf7 	bl	8002090 <toggleGreen_horizontal>
				setTimer8(500);
 80014a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a6:	f000 fabd 	bl	8001a24 <setTimer8>
			}
			break;
 80014aa:	e005      	b.n	80014b8 <fsm_traffic_horizontal_run+0x98>
=======
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <fsm_traffic_horizontal_run+0xa4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d115      	bne.n	8001134 <fsm_traffic_horizontal_run+0x94>
				//toggle led yellow with frequency 2Hz
				toggleYellow_horizontal();
 8001108:	f000 feac 	bl	8001e64 <toggleYellow_horizontal>
				setTimer8(500);
 800110c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001110:	f000 fafc 	bl	800170c <setTimer8>
			}
			break;
 8001114:	e00e      	b.n	8001134 <fsm_traffic_horizontal_run+0x94>
		case modifying_led_green_horizontal:
//			offRedYellow_horizontal();
			if(timer8_flag == 1){
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <fsm_traffic_horizontal_run+0xa4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d10c      	bne.n	8001138 <fsm_traffic_horizontal_run+0x98>
				//toggle led green with frequency 2Hz
				toggleGreen_horizontal();
 800111e:	f000 fe8f 	bl	8001e40 <toggleGreen_horizontal>
				setTimer8(500);
 8001122:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001126:	f000 faf1 	bl	800170c <setTimer8>
			}
			break;
 800112a:	e005      	b.n	8001138 <fsm_traffic_horizontal_run+0x98>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
		case mannual_horizontal:
			break;
		default:
			break;
<<<<<<< HEAD
 80014ac:	bf00      	nop
 80014ae:	e004      	b.n	80014ba <fsm_traffic_horizontal_run+0x9a>
			break;
 80014b0:	bf00      	nop
 80014b2:	e002      	b.n	80014ba <fsm_traffic_horizontal_run+0x9a>
			break;
 80014b4:	bf00      	nop
 80014b6:	e000      	b.n	80014ba <fsm_traffic_horizontal_run+0x9a>
			break;
 80014b8:	bf00      	nop
	}
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000009c 	.word	0x2000009c
 80014c4:	200001c4 	.word	0x200001c4

080014c8 <fsm_traffic_vertical_run>:
=======
 800112c:	bf00      	nop
 800112e:	e004      	b.n	800113a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001130:	bf00      	nop
 8001132:	e002      	b.n	800113a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001134:	bf00      	nop
 8001136:	e000      	b.n	800113a <fsm_traffic_horizontal_run+0x9a>
			break;
 8001138:	bf00      	nop
	}
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000005c 	.word	0x2000005c
 8001144:	20000124 	.word	0x20000124

08001148 <fsm_traffic_vertical_run>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#include "traffic.h"
#include "fsm_traffic_blink.h"

int status_traffic_vertical = display_traffic_vertical;

void fsm_traffic_vertical_run(){
<<<<<<< HEAD
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	switch(status_traffic_vertical){
 80014cc:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <fsm_traffic_vertical_run+0x104>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b24      	cmp	r3, #36	; 0x24
 80014d4:	d870      	bhi.n	80015b8 <fsm_traffic_vertical_run+0xf0>
 80014d6:	a201      	add	r2, pc, #4	; (adr r2, 80014dc <fsm_traffic_vertical_run+0x14>)
 80014d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014dc:	080015b9 	.word	0x080015b9
 80014e0:	080015b9 	.word	0x080015b9
 80014e4:	080015b9 	.word	0x080015b9
 80014e8:	080015b9 	.word	0x080015b9
 80014ec:	080015b9 	.word	0x080015b9
 80014f0:	080015b9 	.word	0x080015b9
 80014f4:	080015b9 	.word	0x080015b9
 80014f8:	080015b9 	.word	0x080015b9
 80014fc:	080015b9 	.word	0x080015b9
 8001500:	080015b9 	.word	0x080015b9
 8001504:	080015b9 	.word	0x080015b9
 8001508:	080015b9 	.word	0x080015b9
 800150c:	080015b9 	.word	0x080015b9
 8001510:	08001571 	.word	0x08001571
 8001514:	080015b9 	.word	0x080015b9
 8001518:	080015b9 	.word	0x080015b9
 800151c:	080015b9 	.word	0x080015b9
 8001520:	080015b9 	.word	0x080015b9
 8001524:	080015b9 	.word	0x080015b9
 8001528:	080015b9 	.word	0x080015b9
 800152c:	080015b9 	.word	0x080015b9
 8001530:	080015b9 	.word	0x080015b9
 8001534:	080015b9 	.word	0x080015b9
 8001538:	080015b9 	.word	0x080015b9
 800153c:	080015b9 	.word	0x080015b9
 8001540:	080015b9 	.word	0x080015b9
 8001544:	080015b9 	.word	0x080015b9
 8001548:	080015b9 	.word	0x080015b9
 800154c:	080015b9 	.word	0x080015b9
 8001550:	080015b9 	.word	0x080015b9
 8001554:	080015b9 	.word	0x080015b9
 8001558:	080015b9 	.word	0x080015b9
 800155c:	080015b9 	.word	0x080015b9
 8001560:	080015b9 	.word	0x080015b9
 8001564:	08001577 	.word	0x08001577
 8001568:	080015a3 	.word	0x080015a3
 800156c:	0800158d 	.word	0x0800158d
		case display_traffic_vertical:
//			status_traffic_blink_vertical = init_vertical;
			fsm_traffic_blink_vertical_run();
 8001570:	f7ff fe28 	bl	80011c4 <fsm_traffic_blink_vertical_run>
			break;
 8001574:	e027      	b.n	80015c6 <fsm_traffic_vertical_run+0xfe>
		case modifying_led_red_vertical:
//			offGreenYellow_vertical();
			if(timer7_flag == 1){
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <fsm_traffic_vertical_run+0x108>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d11e      	bne.n	80015bc <fsm_traffic_vertical_run+0xf4>
				toggleRed_vertical();
 800157e:	f000 fdb5 	bl	80020ec <toggleRed_vertical>
				setTimer7(500);
 8001582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001586:	f000 fa33 	bl	80019f0 <setTimer7>
			}
			break;
 800158a:	e017      	b.n	80015bc <fsm_traffic_vertical_run+0xf4>
=======
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	switch(status_traffic_vertical){
 800114c:	4b3f      	ldr	r3, [pc, #252]	; (800124c <fsm_traffic_vertical_run+0x104>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3304      	adds	r3, #4
 8001152:	2b24      	cmp	r3, #36	; 0x24
 8001154:	d870      	bhi.n	8001238 <fsm_traffic_vertical_run+0xf0>
 8001156:	a201      	add	r2, pc, #4	; (adr r2, 800115c <fsm_traffic_vertical_run+0x14>)
 8001158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115c:	08001239 	.word	0x08001239
 8001160:	08001239 	.word	0x08001239
 8001164:	08001239 	.word	0x08001239
 8001168:	08001239 	.word	0x08001239
 800116c:	08001239 	.word	0x08001239
 8001170:	08001239 	.word	0x08001239
 8001174:	08001239 	.word	0x08001239
 8001178:	08001239 	.word	0x08001239
 800117c:	08001239 	.word	0x08001239
 8001180:	08001239 	.word	0x08001239
 8001184:	08001239 	.word	0x08001239
 8001188:	08001239 	.word	0x08001239
 800118c:	08001239 	.word	0x08001239
 8001190:	080011f1 	.word	0x080011f1
 8001194:	08001239 	.word	0x08001239
 8001198:	08001239 	.word	0x08001239
 800119c:	08001239 	.word	0x08001239
 80011a0:	08001239 	.word	0x08001239
 80011a4:	08001239 	.word	0x08001239
 80011a8:	08001239 	.word	0x08001239
 80011ac:	08001239 	.word	0x08001239
 80011b0:	08001239 	.word	0x08001239
 80011b4:	08001239 	.word	0x08001239
 80011b8:	08001239 	.word	0x08001239
 80011bc:	08001239 	.word	0x08001239
 80011c0:	08001239 	.word	0x08001239
 80011c4:	08001239 	.word	0x08001239
 80011c8:	08001239 	.word	0x08001239
 80011cc:	08001239 	.word	0x08001239
 80011d0:	08001239 	.word	0x08001239
 80011d4:	08001239 	.word	0x08001239
 80011d8:	08001239 	.word	0x08001239
 80011dc:	08001239 	.word	0x08001239
 80011e0:	08001239 	.word	0x08001239
 80011e4:	080011f7 	.word	0x080011f7
 80011e8:	08001223 	.word	0x08001223
 80011ec:	0800120d 	.word	0x0800120d
		case display_traffic_vertical:
//			status_traffic_blink_vertical = init_vertical;
			fsm_traffic_blink_vertical_run();
 80011f0:	f7ff fe28 	bl	8000e44 <fsm_traffic_blink_vertical_run>
			break;
 80011f4:	e027      	b.n	8001246 <fsm_traffic_vertical_run+0xfe>
		case modifying_led_red_vertical:
//			offGreenYellow_vertical();
			if(timer7_flag == 1){
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <fsm_traffic_vertical_run+0x108>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d11e      	bne.n	800123c <fsm_traffic_vertical_run+0xf4>
				toggleRed_vertical();
 80011fe:	f000 fe4d 	bl	8001e9c <toggleRed_vertical>
				setTimer7(500);
 8001202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001206:	f000 fa67 	bl	80016d8 <setTimer7>
			}
			break;
 800120a:	e017      	b.n	800123c <fsm_traffic_vertical_run+0xf4>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
		case modifying_led_yellow_vertical:
//			offGreenRed_vertical();
//			offAllLed_vertical();
			if(timer7_flag == 1){
<<<<<<< HEAD
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <fsm_traffic_vertical_run+0x108>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d115      	bne.n	80015c0 <fsm_traffic_vertical_run+0xf8>
				toggleYellow_vertical();
 8001594:	f000 fdca 	bl	800212c <toggleYellow_vertical>
				setTimer7(500);
 8001598:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800159c:	f000 fa28 	bl	80019f0 <setTimer7>
			}
			break;
 80015a0:	e00e      	b.n	80015c0 <fsm_traffic_vertical_run+0xf8>
=======
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <fsm_traffic_vertical_run+0x108>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d115      	bne.n	8001240 <fsm_traffic_vertical_run+0xf8>
				toggleYellow_vertical();
 8001214:	f000 fe62 	bl	8001edc <toggleYellow_vertical>
				setTimer7(500);
 8001218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800121c:	f000 fa5c 	bl	80016d8 <setTimer7>
			}
			break;
 8001220:	e00e      	b.n	8001240 <fsm_traffic_vertical_run+0xf8>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
		case modifying_led_green_vertical:
			// turn off red and yellow led
//			offRedYellow_vertical();
			if(timer7_flag == 1){
<<<<<<< HEAD
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <fsm_traffic_vertical_run+0x108>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10c      	bne.n	80015c4 <fsm_traffic_vertical_run+0xfc>
				//toggle green led with frequency 2Hz
				toggleGreen_vertical();
 80015aa:	f000 fdaf 	bl	800210c <toggleGreen_vertical>
				setTimer7(500);
 80015ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b2:	f000 fa1d 	bl	80019f0 <setTimer7>
			}
			break;
 80015b6:	e005      	b.n	80015c4 <fsm_traffic_vertical_run+0xfc>
=======
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <fsm_traffic_vertical_run+0x108>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d10c      	bne.n	8001244 <fsm_traffic_vertical_run+0xfc>
				//toggle green led with frequency 2Hz
				toggleGreen_vertical();
 800122a:	f000 fe47 	bl	8001ebc <toggleGreen_vertical>
				setTimer7(500);
 800122e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001232:	f000 fa51 	bl	80016d8 <setTimer7>
			}
			break;
 8001236:	e005      	b.n	8001244 <fsm_traffic_vertical_run+0xfc>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
		case mannual_vertical:
			break;
		default:
			break;
<<<<<<< HEAD
 80015b8:	bf00      	nop
 80015ba:	e004      	b.n	80015c6 <fsm_traffic_vertical_run+0xfe>
			break;
 80015bc:	bf00      	nop
 80015be:	e002      	b.n	80015c6 <fsm_traffic_vertical_run+0xfe>
			break;
 80015c0:	bf00      	nop
 80015c2:	e000      	b.n	80015c6 <fsm_traffic_vertical_run+0xfe>
			break;
 80015c4:	bf00      	nop
	}
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200000a0 	.word	0x200000a0
 80015d0:	200001bc 	.word	0x200001bc

080015d4 <main>:
=======
 8001238:	bf00      	nop
 800123a:	e004      	b.n	8001246 <fsm_traffic_vertical_run+0xfe>
			break;
 800123c:	bf00      	nop
 800123e:	e002      	b.n	8001246 <fsm_traffic_vertical_run+0xfe>
			break;
 8001240:	bf00      	nop
 8001242:	e000      	b.n	8001246 <fsm_traffic_vertical_run+0xfe>
			break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000060 	.word	0x20000060
 8001250:	2000011c 	.word	0x2000011c

08001254 <main>:
/**
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
<<<<<<< HEAD
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
=======
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 80015d8:	f000 fe58 	bl	800228c <HAL_Init>
=======
 8001258:	f000 fefc 	bl	8002054 <HAL_Init>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 80015dc:	f000 f838 	bl	8001650 <SystemClock_Config>
=======
 800125c:	f000 f842 	bl	80012e4 <SystemClock_Config>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 80015e0:	f000 f8e8 	bl	80017b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015e4:	f000 f870 	bl	80016c8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80015e8:	f000 f8ba 	bl	8001760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80015ec:	4816      	ldr	r0, [pc, #88]	; (8001648 <main+0x74>)
 80015ee:	f001 fe99 	bl	8003324 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
=======
 8001260:	f000 f91c 	bl	800149c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001264:	f000 f87a 	bl	800135c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001268:	f000 f8ee 	bl	8001448 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800126c:	481b      	ldr	r0, [pc, #108]	; (80012dc <main+0x88>)
 800126e:	f001 ff3d 	bl	80030ec <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001272:	2100      	movs	r1, #0
 8001274:	4819      	ldr	r0, [pc, #100]	; (80012dc <main+0x88>)
 8001276:	f001 ffdd 	bl	8003234 <HAL_TIM_PWM_Start>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	setTimer4(10);
<<<<<<< HEAD
 80015f2:	200a      	movs	r0, #10
 80015f4:	f000 f9ae 	bl	8001954 <setTimer4>
    setTimer6(10);
 80015f8:	200a      	movs	r0, #10
 80015fa:	f000 f9df 	bl	80019bc <setTimer6>
    setTimer7(500);// toggle led-red/green/yellow vertical road 2Hz while modifying time of it
 80015fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001602:	f000 f9f5 	bl	80019f0 <setTimer7>
    setTimer8(500);// toggle led-red/green/yellow horizontal road 2Hz while modifying time of it
 8001606:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800160a:	f000 fa0b 	bl	8001a24 <setTimer8>
    setTimer10(500);// timer blink led-red for debugging
 800160e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001612:	f000 fa3b 	bl	8001a8c <setTimer10>
=======
 800127a:	200a      	movs	r0, #10
 800127c:	f000 f9de 	bl	800163c <setTimer4>
    setTimer6(10);
 8001280:	200a      	movs	r0, #10
 8001282:	f000 fa0f 	bl	80016a4 <setTimer6>
    setTimer7(500);// toggle led-red/green/yellow vertical road 2Hz while modifying time of it
 8001286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800128a:	f000 fa25 	bl	80016d8 <setTimer7>
    setTimer8(500);// toggle led-red/green/yellow horizontal road 2Hz while modifying time of it
 800128e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001292:	f000 fa3b 	bl	800170c <setTimer8>
    setTimer10(500);// timer blink led-red for debugging
 8001296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800129a:	f000 fa6b 	bl	8001774 <setTimer10>
    setTimer32(10);
 800129e:	200a      	movs	r0, #10
 80012a0:	f000 fa9c 	bl	80017dc <setTimer32>
    setTimer34(10);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f000 fab3 	bl	8001810 <setTimer34>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

    /* USER CODE BEGIN 3 */
  //	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,i);

  	  //blink led-red for debugging
  	  if(timer10_flag == 1){
<<<<<<< HEAD
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <main+0x78>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d105      	bne.n	800162a <main+0x56>
  		  toggleLedRed();
 800161e:	f000 fd19 	bl	8002054 <toggleLedRed>
  		  setTimer10(1000);
 8001622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001626:	f000 fa31 	bl	8001a8c <setTimer10>
  	  }

  	  fsm_system_run();
 800162a:	f7ff f9b7 	bl	800099c <fsm_system_run>
  	  fsm_7SEG_horizontal_run();
 800162e:	f7fe ffa9 	bl	8000584 <fsm_7SEG_horizontal_run>
  	  fsm_7SEG_vertical_run();
 8001632:	f7fe ffef 	bl	8000614 <fsm_7SEG_vertical_run>
  	  fsm_traffic_vertical_run();
 8001636:	f7ff ff47 	bl	80014c8 <fsm_traffic_vertical_run>
  	  fsm_traffic_horizontal_run();
 800163a:	f7ff fef1 	bl	8001420 <fsm_traffic_horizontal_run>
=======
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <main+0x8c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <main+0x6a>
  		  toggleLedRed();
 80012b2:	f000 fda7 	bl	8001e04 <toggleLedRed>
  		  setTimer10(1000);
 80012b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ba:	f000 fa5b 	bl	8001774 <setTimer10>
  	  }

  	  fsm_system_run();
 80012be:	f7ff fae5 	bl	800088c <fsm_system_run>
  	  fsm_7SEG_horizontal_run();
 80012c2:	f7ff f983 	bl	80005cc <fsm_7SEG_horizontal_run>
  	  fsm_7SEG_vertical_run();
 80012c6:	f7ff f9c9 	bl	800065c <fsm_7SEG_vertical_run>
  	  fsm_traffic_vertical_run();
 80012ca:	f7ff ff3d 	bl	8001148 <fsm_traffic_vertical_run>
  	  fsm_traffic_horizontal_run();
 80012ce:	f7ff fee7 	bl	80010a0 <fsm_traffic_horizontal_run>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  	  ///add function
  	  fsm_pedestrian_run();
<<<<<<< HEAD
 800163e:	f7ff f955 	bl	80008ec <fsm_pedestrian_run>
  	  FSM_Buzzer();
 8001642:	f7fe ff75 	bl	8000530 <FSM_Buzzer>
  	  if(timer10_flag == 1){
 8001646:	e7e6      	b.n	8001616 <main+0x42>
 8001648:	20000228 	.word	0x20000228
 800164c:	200001d4 	.word	0x200001d4

08001650 <SystemClock_Config>:
=======
 80012d2:	f7ff fa91 	bl	80007f8 <fsm_pedestrian_run>
  	  FSM_Buzzer();
 80012d6:	f7ff f92b 	bl	8000530 <FSM_Buzzer>
  	  if(timer10_flag == 1){
 80012da:	e7e6      	b.n	80012aa <main+0x56>
 80012dc:	2000019c 	.word	0x2000019c
 80012e0:	20000134 	.word	0x20000134

080012e4 <SystemClock_Config>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8001650:	b580      	push	{r7, lr}
 8001652:	b090      	sub	sp, #64	; 0x40
 8001654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001656:	f107 0318 	add.w	r3, r7, #24
 800165a:	2228      	movs	r2, #40	; 0x28
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fef6 	bl	8004450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
=======
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b090      	sub	sp, #64	; 0x40
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0318 	add.w	r3, r7, #24
 80012ee:	2228      	movs	r2, #40	; 0x28
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 fa0c 	bl	8004710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 8001672:	2302      	movs	r3, #2
 8001674:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001676:	2301      	movs	r3, #1
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800167a:	2310      	movs	r3, #16
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800167e:	2300      	movs	r3, #0
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001682:	f107 0318 	add.w	r3, r7, #24
 8001686:	4618      	mov	r0, r3
 8001688:	f001 f9e2 	bl	8002a50 <HAL_RCC_OscConfig>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001692:	f000 f90b 	bl	80018ac <Error_Handler>
=======
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130a:	2301      	movs	r3, #1
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130e:	2310      	movs	r3, #16
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	4618      	mov	r0, r3
 800131c:	f001 fa7c 	bl	8002818 <HAL_RCC_OscConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001326:	f000 f935 	bl	8001594 <Error_Handler>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8001696:	230f      	movs	r3, #15
 8001698:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f001 fc4e 	bl	8002f50 <HAL_RCC_ClockConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016ba:	f000 f8f7 	bl	80018ac <Error_Handler>
  }
}
 80016be:	bf00      	nop
 80016c0:	3740      	adds	r7, #64	; 0x40
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <MX_TIM2_Init>:
=======
 800132a:	230f      	movs	r3, #15
 800132c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f001 fce8 	bl	8002d18 <HAL_RCC_ClockConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800134e:	f000 f921 	bl	8001594 <Error_Handler>
  }
}
 8001352:	bf00      	nop
 8001354:	3740      	adds	r7, #64	; 0x40
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <MX_TIM2_Init>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
=======
 800135c:	b580      	push	{r7, lr}
 800135e:	b08e      	sub	sp, #56	; 0x38
 8001360:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016dc:	463b      	mov	r3, r7
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
=======
 8001362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]
 800138a:	619a      	str	r2, [r3, #24]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_TIM2_Init+0x94>)
 80016e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_TIM2_Init+0x94>)
 80016ee:	2207      	movs	r2, #7
 80016f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_TIM2_Init+0x94>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_TIM2_Init+0x94>)
 80016fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80016fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <MX_TIM2_Init+0x94>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_TIM2_Init+0x94>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <MX_TIM2_Init+0x94>)
 800170e:	f001 fdb9 	bl	8003284 <HAL_TIM_Base_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001718:	f000 f8c8 	bl	80018ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800171c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001720:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001722:	f107 0308 	add.w	r3, r7, #8
 8001726:	4619      	mov	r1, r3
 8001728:	480c      	ldr	r0, [pc, #48]	; (800175c <MX_TIM2_Init+0x94>)
 800172a:	f001 ff4f 	bl	80035cc <HAL_TIM_ConfigClockSource>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001734:	f000 f8ba 	bl	80018ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001740:	463b      	mov	r3, r7
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_TIM2_Init+0x94>)
 8001746:	f002 f917 	bl	8003978 <HAL_TIMEx_MasterConfigSynchronization>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001750:	f000 f8ac 	bl	80018ac <Error_Handler>
=======
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <MX_TIM2_Init+0xe8>)
 800138e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001392:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001394:	4b2b      	ldr	r3, [pc, #172]	; (8001444 <MX_TIM2_Init+0xe8>)
 8001396:	2207      	movs	r2, #7
 8001398:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <MX_TIM2_Init+0xe8>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80013a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b26      	ldr	r3, [pc, #152]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b4:	4823      	ldr	r0, [pc, #140]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013b6:	f001 fe49 	bl	800304c <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013c0:	f000 f8e8 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ce:	4619      	mov	r1, r3
 80013d0:	481c      	ldr	r0, [pc, #112]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013d2:	f002 f991 	bl	80036f8 <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013dc:	f000 f8da 	bl	8001594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013e0:	4818      	ldr	r0, [pc, #96]	; (8001444 <MX_TIM2_Init+0xe8>)
 80013e2:	f001 fecf 	bl	8003184 <HAL_TIM_PWM_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013ec:	f000 f8d2 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	4619      	mov	r1, r3
 80013fe:	4811      	ldr	r0, [pc, #68]	; (8001444 <MX_TIM2_Init+0xe8>)
 8001400:	f002 fcfc 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800140a:	f000 f8c3 	bl	8001594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140e:	2360      	movs	r3, #96	; 0x60
 8001410:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM2_Init+0xe8>)
 8001426:	f002 f8a9 	bl	800357c <HAL_TIM_PWM_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001430:	f000 f8b0 	bl	8001594 <Error_Handler>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
<<<<<<< HEAD

}
 8001754:	bf00      	nop
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000228 	.word	0x20000228

08001760 <MX_USART2_UART_Init>:
=======
  HAL_TIM_MspPostInit(&htim2);
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM2_Init+0xe8>)
 8001436:	f000 fbb5 	bl	8001ba4 <HAL_TIM_MspPostInit>

}
 800143a:	bf00      	nop
 800143c:	3738      	adds	r7, #56	; 0x38
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000019c 	.word	0x2000019c

08001448 <MX_USART2_UART_Init>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
=======
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART2_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800176c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x4c>)
 8001798:	f002 f958 	bl	8003a4c <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f000 f883 	bl	80018ac <Error_Handler>
=======
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <MX_USART2_UART_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_USART2_UART_Init+0x4c>)
 8001480:	f002 fd26 	bl	8003ed0 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148a:	f000 f883 	bl	8001594 <Error_Handler>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000270 	.word	0x20000270
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_GPIO_Init>:
=======
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001e4 	.word	0x200001e4
 8001498:	40004400 	.word	0x40004400

0800149c <MX_GPIO_Init>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <MX_GPIO_Init+0xd4>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a2e      	ldr	r2, [pc, #184]	; (8001888 <MX_GPIO_Init+0xd4>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <MX_GPIO_Init+0xd4>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b29      	ldr	r3, [pc, #164]	; (8001888 <MX_GPIO_Init+0xd4>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	4a28      	ldr	r2, [pc, #160]	; (8001888 <MX_GPIO_Init+0xd4>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	6193      	str	r3, [r2, #24]
 80017ec:	4b26      	ldr	r3, [pc, #152]	; (8001888 <MX_GPIO_Init+0xd4>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 80017f8:	2200      	movs	r2, #0
 80017fa:	f242 013c 	movw	r1, #8252	; 0x203c
 80017fe:	4823      	ldr	r0, [pc, #140]	; (800188c <MX_GPIO_Init+0xd8>)
 8001800:	f001 f8f5 	bl	80029ee <HAL_GPIO_WritePin>
                          |D4_TRAFFIC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800180a:	4821      	ldr	r0, [pc, #132]	; (8001890 <MX_GPIO_Init+0xdc>)
 800180c:	f001 f8ef 	bl	80029ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A2_BUTTON2_Pin A0_PEDES_BUTTON_Pin */
  GPIO_InitStruct.Pin = A2_BUTTON2_Pin|A0_PEDES_BUTTON_Pin;
 8001810:	2360      	movs	r3, #96	; 0x60
 8001812:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001818:	2301      	movs	r3, #1
 800181a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4619      	mov	r1, r3
 8001822:	481b      	ldr	r0, [pc, #108]	; (8001890 <MX_GPIO_Init+0xdc>)
 8001824:	f000 ff52 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_BUTTON3_Pin A1_BUTTON1_Pin */
  GPIO_InitStruct.Pin = A3_BUTTON3_Pin|A1_BUTTON1_Pin;
 8001828:	f244 0301 	movw	r3, #16385	; 0x4001
 800182c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001832:	2301      	movs	r3, #1
 8001834:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 0308 	add.w	r3, r7, #8
 800183a:	4619      	mov	r1, r3
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_GPIO_Init+0xd8>)
 800183e:	f000 ff45 	bl	80026cc <HAL_GPIO_Init>
=======
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b0:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014b6:	f043 0304 	orr.w	r3, r3, #4
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a28      	ldr	r2, [pc, #160]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014ce:	f043 0308 	orr.w	r3, r3, #8
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_GPIO_Init+0xd4>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 80014e6:	4823      	ldr	r0, [pc, #140]	; (8001574 <MX_GPIO_Init+0xd8>)
 80014e8:	f001 f965 	bl	80027b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 80014ec:	2200      	movs	r2, #0
 80014ee:	f242 013c 	movw	r1, #8252	; 0x203c
 80014f2:	4821      	ldr	r0, [pc, #132]	; (8001578 <MX_GPIO_Init+0xdc>)
 80014f4:	f001 f95f 	bl	80027b6 <HAL_GPIO_WritePin>
                          |D4_TRAFFIC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_BLUE_Pin D7_PEDES_LIGHT_Pin D2_TRAFFIC1_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin;
 80014f8:	f44f 63a2 	mov.w	r3, #1296	; 0x510
 80014fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2302      	movs	r3, #2
 8001508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	4619      	mov	r1, r3
 8001510:	4818      	ldr	r0, [pc, #96]	; (8001574 <MX_GPIO_Init+0xd8>)
 8001512:	f000 ffbf 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : A2_BUTTON2_Pin A0_PEDES_BUTTON_Pin */
  GPIO_InitStruct.Pin = A2_BUTTON2_Pin|A0_PEDES_BUTTON_Pin;
 8001516:	2360      	movs	r3, #96	; 0x60
 8001518:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151e:	2301      	movs	r3, #1
 8001520:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	4619      	mov	r1, r3
 8001528:	4812      	ldr	r0, [pc, #72]	; (8001574 <MX_GPIO_Init+0xd8>)
 800152a:	f000 ffb3 	bl	8002494 <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_BUTTON3_Pin A1_BUTTON1_Pin */
  GPIO_InitStruct.Pin = A3_BUTTON3_Pin|A1_BUTTON1_Pin;
 800152e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001538:	2301      	movs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4619      	mov	r1, r3
 8001542:	480d      	ldr	r0, [pc, #52]	; (8001578 <MX_GPIO_Init+0xdc>)
 8001544:	f000 ffa6 	bl	8002494 <HAL_GPIO_Init>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /*Configure GPIO pins : D6_PEDES_LIGHT_Pin LED_RED_Pin D3_TRAFFIC1_Pin D5_TRAFFIC2_Pin
                           D4_TRAFFIC2_Pin */
  GPIO_InitStruct.Pin = D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
<<<<<<< HEAD
 8001842:	f242 033c 	movw	r3, #8252	; 0x203c
 8001846:	60bb      	str	r3, [r7, #8]
                          |D4_TRAFFIC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2302      	movs	r3, #2
 8001852:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	4619      	mov	r1, r3
 800185a:	480c      	ldr	r0, [pc, #48]	; (800188c <MX_GPIO_Init+0xd8>)
 800185c:	f000 ff36 	bl	80026cc <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_PEDES_LIGHT_Pin D2_TRAFFIC1_Pin */
  GPIO_InitStruct.Pin = D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin;
 8001860:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001864:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2302      	movs	r3, #2
 8001870:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_GPIO_Init+0xdc>)
 800187a:	f000 ff27 	bl	80026cc <HAL_GPIO_Init>

}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	40010c00 	.word	0x40010c00
 8001890:	40010800 	.word	0x40010800

08001894 <HAL_TIM_PeriodElapsedCallback>:
=======
 8001548:	f242 033c 	movw	r3, #8252	; 0x203c
 800154c:	60bb      	str	r3, [r7, #8]
                          |D4_TRAFFIC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2302      	movs	r3, #2
 8001558:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_GPIO_Init+0xdc>)
 8001562:	f000 ff97 	bl	8002494 <HAL_GPIO_Init>

}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40010800 	.word	0x40010800
 8001578:	40010c00 	.word	0x40010c00

0800157c <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
<<<<<<< HEAD
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	timerRun();
 800189c:	f000 f944 	bl	8001b28 <timerRun>
	getKeyInput();
 80018a0:	f7fe fc9c 	bl	80001dc <getKeyInput>
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <Error_Handler>:
=======
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	timerRun();
 8001584:	f000 f95e 	bl	8001844 <timerRun>
	getKeyInput();
 8001588:	f7fe fe28 	bl	80001dc <getKeyInput>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <Error_Handler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
=======
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 80018b0:	b672      	cpsid	i
}
 80018b2:	bf00      	nop
=======
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 80018b4:	e7fe      	b.n	80018b4 <Error_Handler+0x8>
	...

080018b8 <setTimer1>:
=======
 800159c:	e7fe      	b.n	800159c <Error_Handler+0x8>
	...

080015a0 <setTimer1>:
int timer34_counter = 0;
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

int timer35_flag = 0;
int timer35_counter = 0;

void setTimer1(int duration){
<<<<<<< HEAD
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <setTimer1+0x28>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ca:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <setTimer1+0x2c>)
 80018cc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <setTimer1+0x30>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	200000d4 	.word	0x200000d4
 80018e4:	20000190 	.word	0x20000190
 80018e8:	2000018c 	.word	0x2000018c

080018ec <setTimer2>:

void setTimer2(int duration){
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <setTimer2+0x28>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80018fe:	4a06      	ldr	r2, [pc, #24]	; (8001918 <setTimer2+0x2c>)
 8001900:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <setTimer2+0x30>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	200000d4 	.word	0x200000d4
 8001918:	20000198 	.word	0x20000198
 800191c:	20000194 	.word	0x20000194

08001920 <setTimer3>:

void setTimer3(int duration){
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <setTimer3+0x28>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001932:	4a06      	ldr	r2, [pc, #24]	; (800194c <setTimer3+0x2c>)
 8001934:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <setTimer3+0x30>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200000d4 	.word	0x200000d4
 800194c:	200001a0 	.word	0x200001a0
 8001950:	2000019c 	.word	0x2000019c

08001954 <setTimer4>:

void setTimer4(int duration){
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <setTimer4+0x28>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	fb92 f3f3 	sdiv	r3, r2, r3
 8001966:	4a06      	ldr	r2, [pc, #24]	; (8001980 <setTimer4+0x2c>)
 8001968:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <setTimer4+0x30>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200000d4 	.word	0x200000d4
 8001980:	200001a8 	.word	0x200001a8
 8001984:	200001a4 	.word	0x200001a4

08001988 <setTimer5>:

void setTimer5(int duration){
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <setTimer5+0x28>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	fb92 f3f3 	sdiv	r3, r2, r3
 800199a:	4a06      	ldr	r2, [pc, #24]	; (80019b4 <setTimer5+0x2c>)
 800199c:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <setTimer5+0x30>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	200000d4 	.word	0x200000d4
 80019b4:	200001b0 	.word	0x200001b0
 80019b8:	200001ac 	.word	0x200001ac

080019bc <setTimer6>:

void setTimer6(int duration){
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <setTimer6+0x28>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80019ce:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <setTimer6+0x2c>)
 80019d0:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <setTimer6+0x30>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	200000d4 	.word	0x200000d4
 80019e8:	200001b8 	.word	0x200001b8
 80019ec:	200001b4 	.word	0x200001b4

080019f0 <setTimer7>:

void setTimer7(int duration){
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <setTimer7+0x28>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a02:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <setTimer7+0x2c>)
 8001a04:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <setTimer7+0x30>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	200000d4 	.word	0x200000d4
 8001a1c:	200001c0 	.word	0x200001c0
 8001a20:	200001bc 	.word	0x200001bc

08001a24 <setTimer8>:

void setTimer8(int duration){
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <setTimer8+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a36:	4a06      	ldr	r2, [pc, #24]	; (8001a50 <setTimer8+0x2c>)
 8001a38:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <setTimer8+0x30>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200000d4 	.word	0x200000d4
 8001a50:	200001c8 	.word	0x200001c8
 8001a54:	200001c4 	.word	0x200001c4

08001a58 <setTimer9>:

void setTimer9(int duration){
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	timer9_counter = duration/TICK;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <setTimer9+0x28>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a6a:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <setTimer9+0x2c>)
 8001a6c:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <setTimer9+0x30>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	200000d4 	.word	0x200000d4
 8001a84:	200001d0 	.word	0x200001d0
 8001a88:	200001cc 	.word	0x200001cc

08001a8c <setTimer10>:

void setTimer10(int duration){
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	timer10_counter = duration/TICK;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <setTimer10+0x28>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a9e:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <setTimer10+0x2c>)
 8001aa0:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <setTimer10+0x30>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200000d4 	.word	0x200000d4
 8001ab8:	200001d8 	.word	0x200001d8
 8001abc:	200001d4 	.word	0x200001d4

08001ac0 <setTimer30>:
=======
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <setTimer1+0x28>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80015b2:	4a06      	ldr	r2, [pc, #24]	; (80015cc <setTimer1+0x2c>)
 80015b4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <setTimer1+0x30>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	2000009c 	.word	0x2000009c
 80015cc:	200000f0 	.word	0x200000f0
 80015d0:	200000ec 	.word	0x200000ec

080015d4 <setTimer2>:

void setTimer2(int duration){
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <setTimer2+0x28>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80015e6:	4a06      	ldr	r2, [pc, #24]	; (8001600 <setTimer2+0x2c>)
 80015e8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <setTimer2+0x30>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	2000009c 	.word	0x2000009c
 8001600:	200000f8 	.word	0x200000f8
 8001604:	200000f4 	.word	0x200000f4

08001608 <setTimer3>:

void setTimer3(int duration){
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <setTimer3+0x28>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	fb92 f3f3 	sdiv	r3, r2, r3
 800161a:	4a06      	ldr	r2, [pc, #24]	; (8001634 <setTimer3+0x2c>)
 800161c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <setTimer3+0x30>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000009c 	.word	0x2000009c
 8001634:	20000100 	.word	0x20000100
 8001638:	200000fc 	.word	0x200000fc

0800163c <setTimer4>:

void setTimer4(int duration){
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001644:	4b07      	ldr	r3, [pc, #28]	; (8001664 <setTimer4+0x28>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	fb92 f3f3 	sdiv	r3, r2, r3
 800164e:	4a06      	ldr	r2, [pc, #24]	; (8001668 <setTimer4+0x2c>)
 8001650:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <setTimer4+0x30>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	2000009c 	.word	0x2000009c
 8001668:	20000108 	.word	0x20000108
 800166c:	20000104 	.word	0x20000104

08001670 <setTimer5>:

void setTimer5(int duration){
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <setTimer5+0x28>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001682:	4a06      	ldr	r2, [pc, #24]	; (800169c <setTimer5+0x2c>)
 8001684:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <setTimer5+0x30>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	2000009c 	.word	0x2000009c
 800169c:	20000110 	.word	0x20000110
 80016a0:	2000010c 	.word	0x2000010c

080016a4 <setTimer6>:

void setTimer6(int duration){
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <setTimer6+0x28>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80016b6:	4a06      	ldr	r2, [pc, #24]	; (80016d0 <setTimer6+0x2c>)
 80016b8:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <setTimer6+0x30>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	2000009c 	.word	0x2000009c
 80016d0:	20000118 	.word	0x20000118
 80016d4:	20000114 	.word	0x20000114

080016d8 <setTimer7>:

void setTimer7(int duration){
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 80016e0:	4b07      	ldr	r3, [pc, #28]	; (8001700 <setTimer7+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ea:	4a06      	ldr	r2, [pc, #24]	; (8001704 <setTimer7+0x2c>)
 80016ec:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 80016ee:	4b06      	ldr	r3, [pc, #24]	; (8001708 <setTimer7+0x30>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2000009c 	.word	0x2000009c
 8001704:	20000120 	.word	0x20000120
 8001708:	2000011c 	.word	0x2000011c

0800170c <setTimer8>:

void setTimer8(int duration){
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <setTimer8+0x28>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	fb92 f3f3 	sdiv	r3, r2, r3
 800171e:	4a06      	ldr	r2, [pc, #24]	; (8001738 <setTimer8+0x2c>)
 8001720:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <setTimer8+0x30>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000009c 	.word	0x2000009c
 8001738:	20000128 	.word	0x20000128
 800173c:	20000124 	.word	0x20000124

08001740 <setTimer9>:

void setTimer9(int duration){
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	timer9_counter = duration/TICK;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <setTimer9+0x28>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001752:	4a06      	ldr	r2, [pc, #24]	; (800176c <setTimer9+0x2c>)
 8001754:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <setTimer9+0x30>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	2000009c 	.word	0x2000009c
 800176c:	20000130 	.word	0x20000130
 8001770:	2000012c 	.word	0x2000012c

08001774 <setTimer10>:

void setTimer10(int duration){
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	timer10_counter = duration/TICK;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <setTimer10+0x28>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	fb92 f3f3 	sdiv	r3, r2, r3
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <setTimer10+0x2c>)
 8001788:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <setTimer10+0x30>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000009c 	.word	0x2000009c
 80017a0:	20000138 	.word	0x20000138
 80017a4:	20000134 	.word	0x20000134

080017a8 <setTimer30>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
void setTimer11(int duration){
	timer11_counter = duration/TICK;
	timer11_flag = 0;
}

void setTimer30(int duration){
<<<<<<< HEAD
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	timer30_counter = duration/TICK;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <setTimer30+0x28>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ad2:	4a06      	ldr	r2, [pc, #24]	; (8001aec <setTimer30+0x2c>)
 8001ad4:	6013      	str	r3, [r2, #0]
	timer30_flag = 0;
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <setTimer30+0x30>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	200000d4 	.word	0x200000d4
 8001aec:	200001e8 	.word	0x200001e8
 8001af0:	200001e4 	.word	0x200001e4

08001af4 <setTimer31>:
=======
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	timer30_counter = duration/TICK;
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <setTimer30+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ba:	4a06      	ldr	r2, [pc, #24]	; (80017d4 <setTimer30+0x2c>)
 80017bc:	6013      	str	r3, [r2, #0]
	timer30_flag = 0;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <setTimer30+0x30>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000009c 	.word	0x2000009c
 80017d4:	20000148 	.word	0x20000148
 80017d8:	20000144 	.word	0x20000144
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

080017dc <setTimer32>:
void setTimer31(int duration){
<<<<<<< HEAD
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	timer31_counter = duration/TICK;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <setTimer31+0x28>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b06:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <setTimer31+0x2c>)
 8001b08:	6013      	str	r3, [r2, #0]
	timer31_flag = 0;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <setTimer31+0x30>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	200000d4 	.word	0x200000d4
 8001b20:	200001f0 	.word	0x200001f0
 8001b24:	200001ec 	.word	0x200001ec

08001b28 <timerRun>:

void timerRun(){
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 8001b2c:	4b69      	ldr	r3, [pc, #420]	; (8001cd4 <timerRun+0x1ac>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	dd04      	ble.n	8001b3e <timerRun+0x16>
 8001b34:	4b67      	ldr	r3, [pc, #412]	; (8001cd4 <timerRun+0x1ac>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	4a66      	ldr	r2, [pc, #408]	; (8001cd4 <timerRun+0x1ac>)
 8001b3c:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 8001b3e:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <timerRun+0x1ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <timerRun+0x24>
		timer1_flag = 1;
 8001b46:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <timerRun+0x1b0>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 8001b4c:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <timerRun+0x1b4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	dd04      	ble.n	8001b5e <timerRun+0x36>
 8001b54:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <timerRun+0x1b4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	4a60      	ldr	r2, [pc, #384]	; (8001cdc <timerRun+0x1b4>)
 8001b5c:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 8001b5e:	4b5f      	ldr	r3, [pc, #380]	; (8001cdc <timerRun+0x1b4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <timerRun+0x44>
		timer2_flag = 1;
 8001b66:	4b5e      	ldr	r3, [pc, #376]	; (8001ce0 <timerRun+0x1b8>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 8001b6c:	4b5d      	ldr	r3, [pc, #372]	; (8001ce4 <timerRun+0x1bc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	dd04      	ble.n	8001b7e <timerRun+0x56>
 8001b74:	4b5b      	ldr	r3, [pc, #364]	; (8001ce4 <timerRun+0x1bc>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	4a5a      	ldr	r2, [pc, #360]	; (8001ce4 <timerRun+0x1bc>)
 8001b7c:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 8001b7e:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <timerRun+0x1bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <timerRun+0x64>
		timer3_flag = 1;
 8001b86:	4b58      	ldr	r3, [pc, #352]	; (8001ce8 <timerRun+0x1c0>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 8001b8c:	4b57      	ldr	r3, [pc, #348]	; (8001cec <timerRun+0x1c4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	dd04      	ble.n	8001b9e <timerRun+0x76>
 8001b94:	4b55      	ldr	r3, [pc, #340]	; (8001cec <timerRun+0x1c4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	4a54      	ldr	r2, [pc, #336]	; (8001cec <timerRun+0x1c4>)
 8001b9c:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 8001b9e:	4b53      	ldr	r3, [pc, #332]	; (8001cec <timerRun+0x1c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <timerRun+0x84>
		timer4_flag = 1;
 8001ba6:	4b52      	ldr	r3, [pc, #328]	; (8001cf0 <timerRun+0x1c8>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0) timer5_counter--;
 8001bac:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <timerRun+0x1cc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	dd04      	ble.n	8001bbe <timerRun+0x96>
 8001bb4:	4b4f      	ldr	r3, [pc, #316]	; (8001cf4 <timerRun+0x1cc>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	4a4e      	ldr	r2, [pc, #312]	; (8001cf4 <timerRun+0x1cc>)
 8001bbc:	6013      	str	r3, [r2, #0]
	if(timer5_counter == 0){
 8001bbe:	4b4d      	ldr	r3, [pc, #308]	; (8001cf4 <timerRun+0x1cc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d102      	bne.n	8001bcc <timerRun+0xa4>
		timer5_flag = 1;
 8001bc6:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <timerRun+0x1d0>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0) timer6_counter--;
 8001bcc:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <timerRun+0x1d4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	dd04      	ble.n	8001bde <timerRun+0xb6>
 8001bd4:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <timerRun+0x1d4>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	4a48      	ldr	r2, [pc, #288]	; (8001cfc <timerRun+0x1d4>)
 8001bdc:	6013      	str	r3, [r2, #0]
	if(timer6_counter == 0){
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <timerRun+0x1d4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <timerRun+0xc4>
		timer6_flag = 1;
 8001be6:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <timerRun+0x1d8>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0) timer7_counter--;
 8001bec:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <timerRun+0x1dc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	dd04      	ble.n	8001bfe <timerRun+0xd6>
 8001bf4:	4b43      	ldr	r3, [pc, #268]	; (8001d04 <timerRun+0x1dc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	4a42      	ldr	r2, [pc, #264]	; (8001d04 <timerRun+0x1dc>)
 8001bfc:	6013      	str	r3, [r2, #0]
	if(timer7_counter == 0){
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <timerRun+0x1dc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <timerRun+0xe4>
		timer7_flag = 1;
 8001c06:	4b40      	ldr	r3, [pc, #256]	; (8001d08 <timerRun+0x1e0>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0) timer8_counter--;
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <timerRun+0x1e4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	dd04      	ble.n	8001c1e <timerRun+0xf6>
 8001c14:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <timerRun+0x1e4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	4a3c      	ldr	r2, [pc, #240]	; (8001d0c <timerRun+0x1e4>)
 8001c1c:	6013      	str	r3, [r2, #0]
	if(timer8_counter == 0){
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <timerRun+0x1e4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <timerRun+0x104>
		timer8_flag = 1;
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <timerRun+0x1e8>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0) timer9_counter--;
 8001c2c:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <timerRun+0x1ec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	dd04      	ble.n	8001c3e <timerRun+0x116>
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <timerRun+0x1ec>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	4a36      	ldr	r2, [pc, #216]	; (8001d14 <timerRun+0x1ec>)
 8001c3c:	6013      	str	r3, [r2, #0]
	if(timer9_counter == 0){
 8001c3e:	4b35      	ldr	r3, [pc, #212]	; (8001d14 <timerRun+0x1ec>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <timerRun+0x124>
		timer9_flag = 1;
 8001c46:	4b34      	ldr	r3, [pc, #208]	; (8001d18 <timerRun+0x1f0>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
	}

	if(timer10_counter > 0) timer10_counter--;
 8001c4c:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <timerRun+0x1f4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	dd04      	ble.n	8001c5e <timerRun+0x136>
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <timerRun+0x1f4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	4a30      	ldr	r2, [pc, #192]	; (8001d1c <timerRun+0x1f4>)
 8001c5c:	6013      	str	r3, [r2, #0]
	if(timer10_counter == 0){
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <timerRun+0x1f4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d102      	bne.n	8001c6c <timerRun+0x144>
		timer10_flag = 1;
 8001c66:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <timerRun+0x1f8>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
	}

	if(timer11_counter > 0) timer11_counter--;
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <timerRun+0x1fc>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dd04      	ble.n	8001c7e <timerRun+0x156>
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <timerRun+0x1fc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <timerRun+0x1fc>)
 8001c7c:	6013      	str	r3, [r2, #0]
	if(timer11_counter == 0){
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <timerRun+0x1fc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <timerRun+0x164>
		timer11_flag = 1;
 8001c86:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <timerRun+0x200>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
	}

	if(timer30_counter > 0) timer30_counter--;
 8001c8c:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <timerRun+0x204>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	dd04      	ble.n	8001c9e <timerRun+0x176>
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <timerRun+0x204>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	4a24      	ldr	r2, [pc, #144]	; (8001d2c <timerRun+0x204>)
 8001c9c:	6013      	str	r3, [r2, #0]
	if(timer30_counter == 0){
 8001c9e:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <timerRun+0x204>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <timerRun+0x184>
		timer30_flag = 1;
 8001ca6:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <timerRun+0x208>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
	}

	if(timer31_counter > 0) timer31_counter--;
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <timerRun+0x20c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	dd04      	ble.n	8001cbe <timerRun+0x196>
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <timerRun+0x20c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <timerRun+0x20c>)
 8001cbc:	6013      	str	r3, [r2, #0]
	if(timer31_counter == 0){
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <timerRun+0x20c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <timerRun+0x1a4>
		timer31_flag = 1;
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <timerRun+0x210>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
	}
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000190 	.word	0x20000190
 8001cd8:	2000018c 	.word	0x2000018c
 8001cdc:	20000198 	.word	0x20000198
 8001ce0:	20000194 	.word	0x20000194
 8001ce4:	200001a0 	.word	0x200001a0
 8001ce8:	2000019c 	.word	0x2000019c
 8001cec:	200001a8 	.word	0x200001a8
 8001cf0:	200001a4 	.word	0x200001a4
 8001cf4:	200001b0 	.word	0x200001b0
 8001cf8:	200001ac 	.word	0x200001ac
 8001cfc:	200001b8 	.word	0x200001b8
 8001d00:	200001b4 	.word	0x200001b4
 8001d04:	200001c0 	.word	0x200001c0
 8001d08:	200001bc 	.word	0x200001bc
 8001d0c:	200001c8 	.word	0x200001c8
 8001d10:	200001c4 	.word	0x200001c4
 8001d14:	200001d0 	.word	0x200001d0
 8001d18:	200001cc 	.word	0x200001cc
 8001d1c:	200001d8 	.word	0x200001d8
 8001d20:	200001d4 	.word	0x200001d4
 8001d24:	200001e0 	.word	0x200001e0
 8001d28:	200001dc 	.word	0x200001dc
 8001d2c:	200001e8 	.word	0x200001e8
 8001d30:	200001e4 	.word	0x200001e4
 8001d34:	200001f0 	.word	0x200001f0
 8001d38:	200001ec 	.word	0x200001ec

08001d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
=======
	timer31_counter = duration/TICK;
	timer31_flag = 0;
}

void setTimer32(int duration){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	timer32_counter = duration/TICK;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <setTimer32+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <setTimer32+0x2c>)
 80017f0:	6013      	str	r3, [r2, #0]
	timer32_flag = 0;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <setTimer32+0x30>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	2000009c 	.word	0x2000009c
 8001808:	20000158 	.word	0x20000158
 800180c:	20000154 	.word	0x20000154

08001810 <setTimer34>:
void setTimer33(int duration){
	timer33_counter = duration/TICK;
	timer33_flag = 0;
}

void setTimer34(int duration){
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	timer34_counter = duration/TICK;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <setTimer34+0x28>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001822:	4a06      	ldr	r2, [pc, #24]	; (800183c <setTimer34+0x2c>)
 8001824:	6013      	str	r3, [r2, #0]
	timer34_flag = 0;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <setTimer34+0x30>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	2000009c 	.word	0x2000009c
 800183c:	20000168 	.word	0x20000168
 8001840:	20000164 	.word	0x20000164

08001844 <timerRun>:
void setTimer35(int duration){
	timer35_counter = duration/TICK;
	timer35_flag = 0;
}

void timerRun(){
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 8001848:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <timerRun+0x22c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	dd04      	ble.n	800185a <timerRun+0x16>
 8001850:	4b87      	ldr	r3, [pc, #540]	; (8001a70 <timerRun+0x22c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3b01      	subs	r3, #1
 8001856:	4a86      	ldr	r2, [pc, #536]	; (8001a70 <timerRun+0x22c>)
 8001858:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 800185a:	4b85      	ldr	r3, [pc, #532]	; (8001a70 <timerRun+0x22c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <timerRun+0x24>
		timer1_flag = 1;
 8001862:	4b84      	ldr	r3, [pc, #528]	; (8001a74 <timerRun+0x230>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 8001868:	4b83      	ldr	r3, [pc, #524]	; (8001a78 <timerRun+0x234>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	dd04      	ble.n	800187a <timerRun+0x36>
 8001870:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <timerRun+0x234>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	3b01      	subs	r3, #1
 8001876:	4a80      	ldr	r2, [pc, #512]	; (8001a78 <timerRun+0x234>)
 8001878:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 800187a:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <timerRun+0x234>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <timerRun+0x44>
		timer2_flag = 1;
 8001882:	4b7e      	ldr	r3, [pc, #504]	; (8001a7c <timerRun+0x238>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 8001888:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <timerRun+0x23c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	dd04      	ble.n	800189a <timerRun+0x56>
 8001890:	4b7b      	ldr	r3, [pc, #492]	; (8001a80 <timerRun+0x23c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	4a7a      	ldr	r2, [pc, #488]	; (8001a80 <timerRun+0x23c>)
 8001898:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 800189a:	4b79      	ldr	r3, [pc, #484]	; (8001a80 <timerRun+0x23c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <timerRun+0x64>
		timer3_flag = 1;
 80018a2:	4b78      	ldr	r3, [pc, #480]	; (8001a84 <timerRun+0x240>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 80018a8:	4b77      	ldr	r3, [pc, #476]	; (8001a88 <timerRun+0x244>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	dd04      	ble.n	80018ba <timerRun+0x76>
 80018b0:	4b75      	ldr	r3, [pc, #468]	; (8001a88 <timerRun+0x244>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	4a74      	ldr	r2, [pc, #464]	; (8001a88 <timerRun+0x244>)
 80018b8:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 80018ba:	4b73      	ldr	r3, [pc, #460]	; (8001a88 <timerRun+0x244>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <timerRun+0x84>
		timer4_flag = 1;
 80018c2:	4b72      	ldr	r3, [pc, #456]	; (8001a8c <timerRun+0x248>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0) timer5_counter--;
 80018c8:	4b71      	ldr	r3, [pc, #452]	; (8001a90 <timerRun+0x24c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	dd04      	ble.n	80018da <timerRun+0x96>
 80018d0:	4b6f      	ldr	r3, [pc, #444]	; (8001a90 <timerRun+0x24c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	4a6e      	ldr	r2, [pc, #440]	; (8001a90 <timerRun+0x24c>)
 80018d8:	6013      	str	r3, [r2, #0]
	if(timer5_counter == 0){
 80018da:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <timerRun+0x24c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <timerRun+0xa4>
		timer5_flag = 1;
 80018e2:	4b6c      	ldr	r3, [pc, #432]	; (8001a94 <timerRun+0x250>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0) timer6_counter--;
 80018e8:	4b6b      	ldr	r3, [pc, #428]	; (8001a98 <timerRun+0x254>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	dd04      	ble.n	80018fa <timerRun+0xb6>
 80018f0:	4b69      	ldr	r3, [pc, #420]	; (8001a98 <timerRun+0x254>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	4a68      	ldr	r2, [pc, #416]	; (8001a98 <timerRun+0x254>)
 80018f8:	6013      	str	r3, [r2, #0]
	if(timer6_counter == 0){
 80018fa:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <timerRun+0x254>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <timerRun+0xc4>
		timer6_flag = 1;
 8001902:	4b66      	ldr	r3, [pc, #408]	; (8001a9c <timerRun+0x258>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0) timer7_counter--;
 8001908:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <timerRun+0x25c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	dd04      	ble.n	800191a <timerRun+0xd6>
 8001910:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <timerRun+0x25c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3b01      	subs	r3, #1
 8001916:	4a62      	ldr	r2, [pc, #392]	; (8001aa0 <timerRun+0x25c>)
 8001918:	6013      	str	r3, [r2, #0]
	if(timer7_counter == 0){
 800191a:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <timerRun+0x25c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d102      	bne.n	8001928 <timerRun+0xe4>
		timer7_flag = 1;
 8001922:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <timerRun+0x260>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0) timer8_counter--;
 8001928:	4b5f      	ldr	r3, [pc, #380]	; (8001aa8 <timerRun+0x264>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	dd04      	ble.n	800193a <timerRun+0xf6>
 8001930:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <timerRun+0x264>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	4a5c      	ldr	r2, [pc, #368]	; (8001aa8 <timerRun+0x264>)
 8001938:	6013      	str	r3, [r2, #0]
	if(timer8_counter == 0){
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <timerRun+0x264>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <timerRun+0x104>
		timer8_flag = 1;
 8001942:	4b5a      	ldr	r3, [pc, #360]	; (8001aac <timerRun+0x268>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0) timer9_counter--;
 8001948:	4b59      	ldr	r3, [pc, #356]	; (8001ab0 <timerRun+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	dd04      	ble.n	800195a <timerRun+0x116>
 8001950:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <timerRun+0x26c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3b01      	subs	r3, #1
 8001956:	4a56      	ldr	r2, [pc, #344]	; (8001ab0 <timerRun+0x26c>)
 8001958:	6013      	str	r3, [r2, #0]
	if(timer9_counter == 0){
 800195a:	4b55      	ldr	r3, [pc, #340]	; (8001ab0 <timerRun+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <timerRun+0x124>
		timer9_flag = 1;
 8001962:	4b54      	ldr	r3, [pc, #336]	; (8001ab4 <timerRun+0x270>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
	}

	if(timer10_counter > 0) timer10_counter--;
 8001968:	4b53      	ldr	r3, [pc, #332]	; (8001ab8 <timerRun+0x274>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	dd04      	ble.n	800197a <timerRun+0x136>
 8001970:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <timerRun+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3b01      	subs	r3, #1
 8001976:	4a50      	ldr	r2, [pc, #320]	; (8001ab8 <timerRun+0x274>)
 8001978:	6013      	str	r3, [r2, #0]
	if(timer10_counter == 0){
 800197a:	4b4f      	ldr	r3, [pc, #316]	; (8001ab8 <timerRun+0x274>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <timerRun+0x144>
		timer10_flag = 1;
 8001982:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <timerRun+0x278>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
	}

	if(timer11_counter > 0) timer11_counter--;
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <timerRun+0x27c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	dd04      	ble.n	800199a <timerRun+0x156>
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <timerRun+0x27c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3b01      	subs	r3, #1
 8001996:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <timerRun+0x27c>)
 8001998:	6013      	str	r3, [r2, #0]
	if(timer11_counter == 0){
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <timerRun+0x27c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <timerRun+0x164>
		timer11_flag = 1;
 80019a2:	4b48      	ldr	r3, [pc, #288]	; (8001ac4 <timerRun+0x280>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
	}

	if(timer30_counter > 0) timer30_counter--;
 80019a8:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <timerRun+0x284>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	dd04      	ble.n	80019ba <timerRun+0x176>
 80019b0:	4b45      	ldr	r3, [pc, #276]	; (8001ac8 <timerRun+0x284>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	4a44      	ldr	r2, [pc, #272]	; (8001ac8 <timerRun+0x284>)
 80019b8:	6013      	str	r3, [r2, #0]
	if(timer30_counter == 0){
 80019ba:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <timerRun+0x284>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <timerRun+0x184>
		timer30_flag = 1;
 80019c2:	4b42      	ldr	r3, [pc, #264]	; (8001acc <timerRun+0x288>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
	}

	if(timer31_counter > 0) timer31_counter--;
 80019c8:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <timerRun+0x28c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	dd04      	ble.n	80019da <timerRun+0x196>
 80019d0:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <timerRun+0x28c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	4a3e      	ldr	r2, [pc, #248]	; (8001ad0 <timerRun+0x28c>)
 80019d8:	6013      	str	r3, [r2, #0]
	if(timer31_counter == 0){
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <timerRun+0x28c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <timerRun+0x1a4>
		timer31_flag = 1;
 80019e2:	4b3c      	ldr	r3, [pc, #240]	; (8001ad4 <timerRun+0x290>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
	}

	if(timer32_counter > 0) timer32_counter--;
 80019e8:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <timerRun+0x294>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	dd04      	ble.n	80019fa <timerRun+0x1b6>
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <timerRun+0x294>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	4a38      	ldr	r2, [pc, #224]	; (8001ad8 <timerRun+0x294>)
 80019f8:	6013      	str	r3, [r2, #0]
	if(timer32_counter == 0){
 80019fa:	4b37      	ldr	r3, [pc, #220]	; (8001ad8 <timerRun+0x294>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <timerRun+0x1c4>
		timer32_flag = 1;
 8001a02:	4b36      	ldr	r3, [pc, #216]	; (8001adc <timerRun+0x298>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
	}

	if(timer33_counter > 0) timer33_counter--;
 8001a08:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <timerRun+0x29c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dd04      	ble.n	8001a1a <timerRun+0x1d6>
 8001a10:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <timerRun+0x29c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <timerRun+0x29c>)
 8001a18:	6013      	str	r3, [r2, #0]
	if(timer33_counter == 0){
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <timerRun+0x29c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <timerRun+0x1e4>
		timer33_flag = 1;
 8001a22:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <timerRun+0x2a0>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
	}

	if(timer34_counter > 0) timer34_counter--;
 8001a28:	4b2f      	ldr	r3, [pc, #188]	; (8001ae8 <timerRun+0x2a4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	dd04      	ble.n	8001a3a <timerRun+0x1f6>
 8001a30:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <timerRun+0x2a4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	4a2c      	ldr	r2, [pc, #176]	; (8001ae8 <timerRun+0x2a4>)
 8001a38:	6013      	str	r3, [r2, #0]
	if(timer34_counter == 0){
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <timerRun+0x2a4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <timerRun+0x204>
		timer34_flag = 1;
 8001a42:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <timerRun+0x2a8>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
	}
	if(timer35_counter > 0) timer35_counter--;
 8001a48:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <timerRun+0x2ac>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	dd04      	ble.n	8001a5a <timerRun+0x216>
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <timerRun+0x2ac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	4a26      	ldr	r2, [pc, #152]	; (8001af0 <timerRun+0x2ac>)
 8001a58:	6013      	str	r3, [r2, #0]
	if(timer35_counter == 0){
 8001a5a:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <timerRun+0x2ac>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <timerRun+0x224>
		timer35_flag = 1;
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <timerRun+0x2b0>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
	}
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	200000f0 	.word	0x200000f0
 8001a74:	200000ec 	.word	0x200000ec
 8001a78:	200000f8 	.word	0x200000f8
 8001a7c:	200000f4 	.word	0x200000f4
 8001a80:	20000100 	.word	0x20000100
 8001a84:	200000fc 	.word	0x200000fc
 8001a88:	20000108 	.word	0x20000108
 8001a8c:	20000104 	.word	0x20000104
 8001a90:	20000110 	.word	0x20000110
 8001a94:	2000010c 	.word	0x2000010c
 8001a98:	20000118 	.word	0x20000118
 8001a9c:	20000114 	.word	0x20000114
 8001aa0:	20000120 	.word	0x20000120
 8001aa4:	2000011c 	.word	0x2000011c
 8001aa8:	20000128 	.word	0x20000128
 8001aac:	20000124 	.word	0x20000124
 8001ab0:	20000130 	.word	0x20000130
 8001ab4:	2000012c 	.word	0x2000012c
 8001ab8:	20000138 	.word	0x20000138
 8001abc:	20000134 	.word	0x20000134
 8001ac0:	20000140 	.word	0x20000140
 8001ac4:	2000013c 	.word	0x2000013c
 8001ac8:	20000148 	.word	0x20000148
 8001acc:	20000144 	.word	0x20000144
 8001ad0:	20000150 	.word	0x20000150
 8001ad4:	2000014c 	.word	0x2000014c
 8001ad8:	20000158 	.word	0x20000158
 8001adc:	20000154 	.word	0x20000154
 8001ae0:	20000160 	.word	0x20000160
 8001ae4:	2000015c 	.word	0x2000015c
 8001ae8:	20000168 	.word	0x20000168
 8001aec:	20000164 	.word	0x20000164
 8001af0:	20000170 	.word	0x20000170
 8001af4:	2000016c 	.word	0x2000016c

08001af8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
=======
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6193      	str	r3, [r2, #24]
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_MspInit+0x5c>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
=======
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6193      	str	r3, [r2, #24]
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	61d3      	str	r3, [r2, #28]
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_MspInit+0x5c>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_MspInit+0x60>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <HAL_MspInit+0x60>)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6053      	str	r3, [r2, #4]
=======
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_MspInit+0x60>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	4a04      	ldr	r2, [pc, #16]	; (8001b58 <HAL_MspInit+0x60>)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6053      	str	r3, [r2, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010000 	.word	0x40010000

08001da0 <HAL_TIM_Base_MspInit>:
=======
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010000 	.word	0x40010000

08001b5c <HAL_TIM_Base_MspInit>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db0:	d113      	bne.n	8001dda <HAL_TIM_Base_MspInit+0x3a>
=======
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b6c:	d113      	bne.n	8001b96 <HAL_TIM_Base_MspInit+0x3a>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <HAL_TIM_Base_MspInit+0x44>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <HAL_TIM_Base_MspInit+0x44>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_TIM_Base_MspInit+0x44>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	201c      	movs	r0, #28
 8001dd0:	f000 fb95 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001dd4:	201c      	movs	r0, #28
 8001dd6:	f000 fbae 	bl	8002536 <HAL_NVIC_EnableIRQ>
=======
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_TIM_Base_MspInit+0x44>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_TIM_Base_MspInit+0x44>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	61d3      	str	r3, [r2, #28]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_TIM_Base_MspInit+0x44>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	201c      	movs	r0, #28
 8001b8c:	f000 fb9b 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b90:	201c      	movs	r0, #28
 8001b92:	f000 fbb4 	bl	80022fe <HAL_NVIC_EnableIRQ>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_UART_MspInit>:
=======
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc2:	d117      	bne.n	8001bf4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <HAL_TIM_MspPostInit+0x58>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <HAL_TIM_MspPostInit+0x58>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_TIM_MspPostInit+0x58>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2302      	movs	r3, #2
 8001be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	4804      	ldr	r0, [pc, #16]	; (8001c00 <HAL_TIM_MspPostInit+0x5c>)
 8001bf0:	f000 fc50 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bf4:	bf00      	nop
 8001bf6:	3720      	adds	r7, #32
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010800 	.word	0x40010800

08001c04 <HAL_UART_MspInit>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <HAL_UART_MspInit+0x98>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d137      	bne.n	8001e78 <HAL_UART_MspInit+0x90>
=======
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_UART_MspInit+0x98>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d137      	bne.n	8001c94 <HAL_UART_MspInit+0x90>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< HEAD
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_UART_MspInit+0x9c>)
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <HAL_UART_MspInit+0x9c>)
 8001e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e12:	61d3      	str	r3, [r2, #28]
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_UART_MspInit+0x9c>)
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_UART_MspInit+0x9c>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a17      	ldr	r2, [pc, #92]	; (8001e84 <HAL_UART_MspInit+0x9c>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_UART_MspInit+0x9c>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
=======
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2e:	61d3      	str	r3, [r2, #28]
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0x9c>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
<<<<<<< HEAD
 8001e38:	2304      	movs	r3, #4
 8001e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	4619      	mov	r1, r3
 8001e4a:	480f      	ldr	r0, [pc, #60]	; (8001e88 <HAL_UART_MspInit+0xa0>)
 8001e4c:	f000 fc3e 	bl	80026cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e50:	2308      	movs	r3, #8
 8001e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	4619      	mov	r1, r3
 8001e62:	4809      	ldr	r0, [pc, #36]	; (8001e88 <HAL_UART_MspInit+0xa0>)
 8001e64:	f000 fc32 	bl	80026cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2026      	movs	r0, #38	; 0x26
 8001e6e:	f000 fb46 	bl	80024fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e72:	2026      	movs	r0, #38	; 0x26
 8001e74:	f000 fb5f 	bl	8002536 <HAL_NVIC_EnableIRQ>
=======
 8001c54:	2304      	movs	r3, #4
 8001c56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0310 	add.w	r3, r7, #16
 8001c64:	4619      	mov	r1, r3
 8001c66:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <HAL_UART_MspInit+0xa0>)
 8001c68:	f000 fc14 	bl	8002494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c6c:	2308      	movs	r3, #8
 8001c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <HAL_UART_MspInit+0xa0>)
 8001c80:	f000 fc08 	bl	8002494 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	2026      	movs	r0, #38	; 0x26
 8001c8a:	f000 fb1c 	bl	80022c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c8e:	2026      	movs	r0, #38	; 0x26
 8001c90:	f000 fb35 	bl	80022fe <HAL_NVIC_EnableIRQ>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40004400 	.word	0x40004400
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010800 	.word	0x40010800

08001e8c <NMI_Handler>:
=======
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010800 	.word	0x40010800

08001ca8 <NMI_Handler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
=======
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8001e90:	e7fe      	b.n	8001e90 <NMI_Handler+0x4>

08001e92 <HardFault_Handler>:
=======
 8001cac:	e7fe      	b.n	8001cac <NMI_Handler+0x4>

08001cae <HardFault_Handler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
=======
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001e96:	e7fe      	b.n	8001e96 <HardFault_Handler+0x4>

08001e98 <MemManage_Handler>:
=======
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
=======
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001e9c:	e7fe      	b.n	8001e9c <MemManage_Handler+0x4>

08001e9e <BusFault_Handler>:
=======
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
=======
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001ea2:	e7fe      	b.n	8001ea2 <BusFault_Handler+0x4>

08001ea4 <UsageFault_Handler>:
=======
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
=======
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001ea8:	e7fe      	b.n	8001ea8 <UsageFault_Handler+0x4>

08001eaa <SVC_Handler>:
=======
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <SVC_Handler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
=======
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <DebugMon_Handler>:
=======
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <DebugMon_Handler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
=======
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <PendSV_Handler>:
=======
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
=======
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr

08001ece <SysTick_Handler>:
=======
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <SysTick_Handler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
=======
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8001ed2:	f000 fa21 	bl	8002318 <HAL_IncTick>
=======
 8001cee:	f000 f9f7 	bl	80020e0 <HAL_IncTick>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <TIM2_IRQHandler>:
=======
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <TIM2_IRQHandler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< HEAD
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
=======
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <TIM2_IRQHandler+0x10>)
 8001ee2:	f001 fa6b 	bl	80033bc <HAL_TIM_IRQHandler>
=======
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <TIM2_IRQHandler+0x10>)
 8001cfe:	f001 fb35 	bl	800336c <HAL_TIM_IRQHandler>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< HEAD
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000228 	.word	0x20000228

08001ef0 <USART2_IRQHandler>:
=======
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000019c 	.word	0x2000019c

08001d0c <USART2_IRQHandler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
<<<<<<< HEAD
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
=======
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
<<<<<<< HEAD
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <USART2_IRQHandler+0x10>)
 8001ef6:	f001 fe89 	bl	8003c0c <HAL_UART_IRQHandler>
=======
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <USART2_IRQHandler+0x10>)
 8001d12:	f002 f92b 	bl	8003f6c <HAL_UART_IRQHandler>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
<<<<<<< HEAD
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000270 	.word	0x20000270

08001f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <_sbrk+0x5c>)
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <_sbrk+0x60>)
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <_sbrk+0x64>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <_sbrk+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f34:	f002 fa62 	bl	80043fc <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <_sbrk+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20002800 	.word	0x20002800
 8001f64:	00000400 	.word	0x00000400
 8001f68:	200001f4 	.word	0x200001f4
 8001f6c:	200002c8 	.word	0x200002c8

08001f70 <SystemInit>:
=======
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200001e4 	.word	0x200001e4

08001d20 <SystemInit>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
=======
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <setRed_horizontal>:
=======
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <setRed_horizontal>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
 */
#include "traffic.h"
#include "global.h"
#include "main.h"

void setRed_horizontal(){
<<<<<<< HEAD
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001f80:	2201      	movs	r2, #1
 8001f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <setRed_horizontal+0x20>)
 8001f88:	f000 fd31 	bl	80029ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2108      	movs	r1, #8
 8001f90:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <setRed_horizontal+0x24>)
 8001f92:	f000 fd2c 	bl	80029ee <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	40010c00 	.word	0x40010c00

08001fa4 <setGreen_horizontal>:

void setGreen_horizontal(){
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fae:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <setGreen_horizontal+0x20>)
 8001fb0:	f000 fd1d 	bl	80029ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2108      	movs	r1, #8
 8001fb8:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <setGreen_horizontal+0x24>)
 8001fba:	f000 fd18 	bl	80029ee <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_SET);
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40010800 	.word	0x40010800
 8001fc8:	40010c00 	.word	0x40010c00

08001fcc <setYellow_horizontal>:

void setYellow_horizontal(){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <setYellow_horizontal+0x20>)
 8001fd8:	f000 fd09 	bl	80029ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	2108      	movs	r1, #8
 8001fe0:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <setYellow_horizontal+0x24>)
 8001fe2:	f000 fd04 	bl	80029ee <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40010800 	.word	0x40010800
 8001ff0:	40010c00 	.word	0x40010c00

08001ff4 <setRed_vertical>:

void setRed_vertical(){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2120      	movs	r1, #32
 8001ffc:	4804      	ldr	r0, [pc, #16]	; (8002010 <setRed_vertical+0x1c>)
 8001ffe:	f000 fcf6 	bl	80029ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	2110      	movs	r1, #16
 8002006:	4802      	ldr	r0, [pc, #8]	; (8002010 <setRed_vertical+0x1c>)
 8002008:	f000 fcf1 	bl	80029ee <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40010c00 	.word	0x40010c00

08002014 <setGreen_vertical>:

void setGreen_vertical(){
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	2120      	movs	r1, #32
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <setGreen_vertical+0x1c>)
 800201e:	f000 fce6 	bl	80029ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8002022:	2201      	movs	r2, #1
 8002024:	2110      	movs	r1, #16
 8002026:	4802      	ldr	r0, [pc, #8]	; (8002030 <setGreen_vertical+0x1c>)
 8002028:	f000 fce1 	bl	80029ee <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_SET);
}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40010c00 	.word	0x40010c00

08002034 <setYellow_vertical>:

void setYellow_vertical(){
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	2120      	movs	r1, #32
 800203c:	4804      	ldr	r0, [pc, #16]	; (8002050 <setYellow_vertical+0x1c>)
 800203e:	f000 fcd6 	bl	80029ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	2110      	movs	r1, #16
 8002046:	4802      	ldr	r0, [pc, #8]	; (8002050 <setYellow_vertical+0x1c>)
 8002048:	f000 fcd1 	bl	80029ee <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40010c00 	.word	0x40010c00

08002054 <toggleLedRed>:


void toggleLedRed(){
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002058:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <toggleLedRed+0x14>)
 800205e:	f000 fcde 	bl	8002a1e <HAL_GPIO_TogglePin>
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40010c00 	.word	0x40010c00

0800206c <toggleRed_horizontal>:

void toggleRed_horizontal(){
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDA_GPIO_Port, REDA_Pin);
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8002070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002074:	4804      	ldr	r0, [pc, #16]	; (8002088 <toggleRed_horizontal+0x1c>)
 8002076:	f000 fcd2 	bl	8002a1e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2108      	movs	r1, #8
 800207e:	4803      	ldr	r0, [pc, #12]	; (800208c <toggleRed_horizontal+0x20>)
 8002080:	f000 fcb5 	bl	80029ee <HAL_GPIO_WritePin>
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40010800 	.word	0x40010800
 800208c:	40010c00 	.word	0x40010c00

08002090 <toggleGreen_horizontal>:

void toggleGreen_horizontal(){
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENA_GPIO_Port, GREENA_Pin);
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8002094:	2108      	movs	r1, #8
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <toggleGreen_horizontal+0x1c>)
 8002098:	f000 fcc1 	bl	8002a1e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 800209c:	2200      	movs	r2, #0
 800209e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020a2:	4803      	ldr	r0, [pc, #12]	; (80020b0 <toggleGreen_horizontal+0x20>)
 80020a4:	f000 fca3 	bl	80029ee <HAL_GPIO_WritePin>
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40010c00 	.word	0x40010c00
 80020b0:	40010800 	.word	0x40010800

080020b4 <toggleYellow_horizontal>:

void toggleYellow_horizontal(){
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWA_GPIO_Port, YELLOWA_Pin);
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, HAL_GPIO_ReadPin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin));
 80020b8:	2108      	movs	r1, #8
 80020ba:	480a      	ldr	r0, [pc, #40]	; (80020e4 <toggleYellow_horizontal+0x30>)
 80020bc:	f000 fc80 	bl	80029c0 <HAL_GPIO_ReadPin>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020c8:	4807      	ldr	r0, [pc, #28]	; (80020e8 <toggleYellow_horizontal+0x34>)
 80020ca:	f000 fc90 	bl	80029ee <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 80020ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <toggleYellow_horizontal+0x34>)
 80020d4:	f000 fca3 	bl	8002a1e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 80020d8:	2108      	movs	r1, #8
 80020da:	4802      	ldr	r0, [pc, #8]	; (80020e4 <toggleYellow_horizontal+0x30>)
 80020dc:	f000 fc9f 	bl	8002a1e <HAL_GPIO_TogglePin>
}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40010c00 	.word	0x40010c00
 80020e8:	40010800 	.word	0x40010800

080020ec <toggleRed_vertical>:

void toggleRed_vertical(){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDB_GPIO_Port, REDB_Pin);
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 80020f0:	2120      	movs	r1, #32
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <toggleRed_vertical+0x1c>)
 80020f4:	f000 fc93 	bl	8002a1e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	2110      	movs	r1, #16
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <toggleRed_vertical+0x1c>)
 80020fe:	f000 fc76 	bl	80029ee <HAL_GPIO_WritePin>
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40010c00 	.word	0x40010c00

0800210c <toggleGreen_vertical>:

void toggleGreen_vertical(){
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENB_GPIO_Port, GREENB_Pin);
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8002110:	2110      	movs	r1, #16
 8002112:	4805      	ldr	r0, [pc, #20]	; (8002128 <toggleGreen_vertical+0x1c>)
 8002114:	f000 fc83 	bl	8002a1e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	2120      	movs	r1, #32
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <toggleGreen_vertical+0x1c>)
 800211e:	f000 fc66 	bl	80029ee <HAL_GPIO_WritePin>
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40010c00 	.word	0x40010c00

0800212c <toggleYellow_vertical>:

void toggleYellow_vertical(){
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWB_GPIO_Port, YELLOWB_Pin);
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, HAL_GPIO_ReadPin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin));
 8002130:	2110      	movs	r1, #16
 8002132:	4809      	ldr	r0, [pc, #36]	; (8002158 <toggleYellow_vertical+0x2c>)
 8002134:	f000 fc44 	bl	80029c0 <HAL_GPIO_ReadPin>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	2120      	movs	r1, #32
 800213e:	4806      	ldr	r0, [pc, #24]	; (8002158 <toggleYellow_vertical+0x2c>)
 8002140:	f000 fc55 	bl	80029ee <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8002144:	2120      	movs	r1, #32
 8002146:	4804      	ldr	r0, [pc, #16]	; (8002158 <toggleYellow_vertical+0x2c>)
 8002148:	f000 fc69 	bl	8002a1e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 800214c:	2110      	movs	r1, #16
 800214e:	4802      	ldr	r0, [pc, #8]	; (8002158 <toggleYellow_vertical+0x2c>)
 8002150:	f000 fc65 	bl	8002a1e <HAL_GPIO_TogglePin>
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40010c00 	.word	0x40010c00

0800215c <resetTimeTraffic>:
=======
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <setRed_horizontal+0x20>)
 8001d38:	f000 fd3d 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2108      	movs	r1, #8
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <setRed_horizontal+0x24>)
 8001d42:	f000 fd38 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	40010c00 	.word	0x40010c00

08001d54 <setGreen_horizontal>:

void setGreen_horizontal(){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <setGreen_horizontal+0x20>)
 8001d60:	f000 fd29 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	2108      	movs	r1, #8
 8001d68:	4803      	ldr	r0, [pc, #12]	; (8001d78 <setGreen_horizontal+0x24>)
 8001d6a:	f000 fd24 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_SET);
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40010800 	.word	0x40010800
 8001d78:	40010c00 	.word	0x40010c00

08001d7c <setYellow_horizontal>:

void setYellow_horizontal(){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <setYellow_horizontal+0x20>)
 8001d88:	f000 fd15 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	2108      	movs	r1, #8
 8001d90:	4803      	ldr	r0, [pc, #12]	; (8001da0 <setYellow_horizontal+0x24>)
 8001d92:	f000 fd10 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40010800 	.word	0x40010800
 8001da0:	40010c00 	.word	0x40010c00

08001da4 <setRed_vertical>:

void setRed_vertical(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001da8:	2201      	movs	r2, #1
 8001daa:	2120      	movs	r1, #32
 8001dac:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <setRed_vertical+0x1c>)
 8001dae:	f000 fd02 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2110      	movs	r1, #16
 8001db6:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <setRed_vertical+0x1c>)
 8001db8:	f000 fcfd 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40010c00 	.word	0x40010c00

08001dc4 <setGreen_vertical>:

void setGreen_vertical(){
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2120      	movs	r1, #32
 8001dcc:	4804      	ldr	r0, [pc, #16]	; (8001de0 <setGreen_vertical+0x1c>)
 8001dce:	f000 fcf2 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	2110      	movs	r1, #16
 8001dd6:	4802      	ldr	r0, [pc, #8]	; (8001de0 <setGreen_vertical+0x1c>)
 8001dd8:	f000 fced 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_SET);
}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40010c00 	.word	0x40010c00

08001de4 <setYellow_vertical>:

void setYellow_vertical(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001de8:	2201      	movs	r2, #1
 8001dea:	2120      	movs	r1, #32
 8001dec:	4804      	ldr	r0, [pc, #16]	; (8001e00 <setYellow_vertical+0x1c>)
 8001dee:	f000 fce2 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	2110      	movs	r1, #16
 8001df6:	4802      	ldr	r0, [pc, #8]	; (8001e00 <setYellow_vertical+0x1c>)
 8001df8:	f000 fcdd 	bl	80027b6 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40010c00 	.word	0x40010c00

08001e04 <toggleLedRed>:


void toggleLedRed(){
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e0c:	4802      	ldr	r0, [pc, #8]	; (8001e18 <toggleLedRed+0x14>)
 8001e0e:	f000 fcea 	bl	80027e6 <HAL_GPIO_TogglePin>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40010c00 	.word	0x40010c00

08001e1c <toggleRed_horizontal>:

void toggleRed_horizontal(){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDA_GPIO_Port, REDA_Pin);
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8001e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <toggleRed_horizontal+0x1c>)
 8001e26:	f000 fcde 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2108      	movs	r1, #8
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <toggleRed_horizontal+0x20>)
 8001e30:	f000 fcc1 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40010800 	.word	0x40010800
 8001e3c:	40010c00 	.word	0x40010c00

08001e40 <toggleGreen_horizontal>:

void toggleGreen_horizontal(){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENA_GPIO_Port, GREENA_Pin);
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8001e44:	2108      	movs	r1, #8
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <toggleGreen_horizontal+0x1c>)
 8001e48:	f000 fccd 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e52:	4803      	ldr	r0, [pc, #12]	; (8001e60 <toggleGreen_horizontal+0x20>)
 8001e54:	f000 fcaf 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40010c00 	.word	0x40010c00
 8001e60:	40010800 	.word	0x40010800

08001e64 <toggleYellow_horizontal>:

void toggleYellow_horizontal(){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWA_GPIO_Port, YELLOWA_Pin);
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, HAL_GPIO_ReadPin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin));
 8001e68:	2108      	movs	r1, #8
 8001e6a:	480a      	ldr	r0, [pc, #40]	; (8001e94 <toggleYellow_horizontal+0x30>)
 8001e6c:	f000 fc8c 	bl	8002788 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e78:	4807      	ldr	r0, [pc, #28]	; (8001e98 <toggleYellow_horizontal+0x34>)
 8001e7a:	f000 fc9c 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8001e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <toggleYellow_horizontal+0x34>)
 8001e84:	f000 fcaf 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8001e88:	2108      	movs	r1, #8
 8001e8a:	4802      	ldr	r0, [pc, #8]	; (8001e94 <toggleYellow_horizontal+0x30>)
 8001e8c:	f000 fcab 	bl	80027e6 <HAL_GPIO_TogglePin>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40010c00 	.word	0x40010c00
 8001e98:	40010800 	.word	0x40010800

08001e9c <toggleRed_vertical>:

void toggleRed_vertical(){
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDB_GPIO_Port, REDB_Pin);
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8001ea0:	2120      	movs	r1, #32
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <toggleRed_vertical+0x1c>)
 8001ea4:	f000 fc9f 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2110      	movs	r1, #16
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <toggleRed_vertical+0x1c>)
 8001eae:	f000 fc82 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40010c00 	.word	0x40010c00

08001ebc <toggleGreen_vertical>:

void toggleGreen_vertical(){
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENB_GPIO_Port, GREENB_Pin);
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8001ec0:	2110      	movs	r1, #16
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <toggleGreen_vertical+0x1c>)
 8001ec4:	f000 fc8f 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2120      	movs	r1, #32
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <toggleGreen_vertical+0x1c>)
 8001ece:	f000 fc72 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40010c00 	.word	0x40010c00

08001edc <toggleYellow_vertical>:

void toggleYellow_vertical(){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWB_GPIO_Port, YELLOWB_Pin);
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, HAL_GPIO_ReadPin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin));
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	4809      	ldr	r0, [pc, #36]	; (8001f08 <toggleYellow_vertical+0x2c>)
 8001ee4:	f000 fc50 	bl	8002788 <HAL_GPIO_ReadPin>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	2120      	movs	r1, #32
 8001eee:	4806      	ldr	r0, [pc, #24]	; (8001f08 <toggleYellow_vertical+0x2c>)
 8001ef0:	f000 fc61 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	4804      	ldr	r0, [pc, #16]	; (8001f08 <toggleYellow_vertical+0x2c>)
 8001ef8:	f000 fc75 	bl	80027e6 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8001efc:	2110      	movs	r1, #16
 8001efe:	4802      	ldr	r0, [pc, #8]	; (8001f08 <toggleYellow_vertical+0x2c>)
 8001f00:	f000 fc71 	bl	80027e6 <HAL_GPIO_TogglePin>
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40010c00 	.word	0x40010c00

08001f0c <resetTimeTraffic>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
void offRedYellow_vertical(){
//	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
}

void resetTimeTraffic(){
<<<<<<< HEAD
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	time_red_horizontal_temp = time_red_horizontal;
 8002160:	4b0d      	ldr	r3, [pc, #52]	; (8002198 <resetTimeTraffic+0x3c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0d      	ldr	r2, [pc, #52]	; (800219c <resetTimeTraffic+0x40>)
 8002166:	6013      	str	r3, [r2, #0]
	time_green_horizontal_temp = time_green_horizontal;
 8002168:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <resetTimeTraffic+0x44>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <resetTimeTraffic+0x48>)
 800216e:	6013      	str	r3, [r2, #0]
	time_yellow_horizontal_temp = time_yellow_horizontal;
 8002170:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <resetTimeTraffic+0x4c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <resetTimeTraffic+0x50>)
 8002176:	6013      	str	r3, [r2, #0]

	time_red_vertical_temp = time_red_vertical;
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <resetTimeTraffic+0x54>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <resetTimeTraffic+0x58>)
 800217e:	6013      	str	r3, [r2, #0]
	time_green_vertical_temp = time_green_vertical;
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <resetTimeTraffic+0x5c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0d      	ldr	r2, [pc, #52]	; (80021bc <resetTimeTraffic+0x60>)
 8002186:	6013      	str	r3, [r2, #0]
	time_yellow_vertical_temp = time_yellow_vertical;
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <resetTimeTraffic+0x64>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <resetTimeTraffic+0x68>)
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	200000a4 	.word	0x200000a4
 800219c:	200000b0 	.word	0x200000b0
 80021a0:	200000a8 	.word	0x200000a8
 80021a4:	200000b4 	.word	0x200000b4
 80021a8:	200000ac 	.word	0x200000ac
 80021ac:	200000b8 	.word	0x200000b8
 80021b0:	200000c4 	.word	0x200000c4
 80021b4:	200000d0 	.word	0x200000d0
 80021b8:	200000bc 	.word	0x200000bc
 80021bc:	200000c8 	.word	0x200000c8
 80021c0:	200000c0 	.word	0x200000c0
 80021c4:	200000cc 	.word	0x200000cc

080021c8 <set_off_pedes>:

void set_off_pedes(){
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	2104      	movs	r1, #4
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <set_off_pedes+0x20>)
 80021d2:	f000 fc0c 	bl	80029ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021dc:	4803      	ldr	r0, [pc, #12]	; (80021ec <set_off_pedes+0x24>)
 80021de:	f000 fc06 	bl	80029ee <HAL_GPIO_WritePin>
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40010c00 	.word	0x40010c00
 80021ec:	40010800 	.word	0x40010800

080021f0 <set_red_pedes>:
void set_red_pedes(){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 80021f4:	2201      	movs	r2, #1
 80021f6:	2104      	movs	r1, #4
 80021f8:	4805      	ldr	r0, [pc, #20]	; (8002210 <set_red_pedes+0x20>)
 80021fa:	f000 fbf8 	bl	80029ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 80021fe:	2200      	movs	r2, #0
 8002200:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002204:	4803      	ldr	r0, [pc, #12]	; (8002214 <set_red_pedes+0x24>)
 8002206:	f000 fbf2 	bl	80029ee <HAL_GPIO_WritePin>
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40010c00 	.word	0x40010c00
 8002214:	40010800 	.word	0x40010800

08002218 <set_green_pedes>:
void set_green_pedes(){
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 800221c:	2200      	movs	r2, #0
 800221e:	2104      	movs	r1, #4
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <set_green_pedes+0x20>)
 8002222:	f000 fbe4 	bl	80029ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 8002226:	2201      	movs	r2, #1
 8002228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800222c:	4803      	ldr	r0, [pc, #12]	; (800223c <set_green_pedes+0x24>)
 800222e:	f000 fbde 	bl	80029ee <HAL_GPIO_WritePin>
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40010c00 	.word	0x40010c00
 800223c:	40010800 	.word	0x40010800

08002240 <Reset_Handler>:
=======
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
	time_red_horizontal_temp = time_red_horizontal;
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <resetTimeTraffic+0x3c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <resetTimeTraffic+0x40>)
 8001f16:	6013      	str	r3, [r2, #0]
	time_green_horizontal_temp = time_green_horizontal;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <resetTimeTraffic+0x44>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <resetTimeTraffic+0x48>)
 8001f1e:	6013      	str	r3, [r2, #0]
	time_yellow_horizontal_temp = time_yellow_horizontal;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <resetTimeTraffic+0x4c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <resetTimeTraffic+0x50>)
 8001f26:	6013      	str	r3, [r2, #0]

	time_red_vertical_temp = time_red_vertical;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <resetTimeTraffic+0x54>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <resetTimeTraffic+0x58>)
 8001f2e:	6013      	str	r3, [r2, #0]
	time_green_vertical_temp = time_green_vertical;
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <resetTimeTraffic+0x5c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <resetTimeTraffic+0x60>)
 8001f36:	6013      	str	r3, [r2, #0]
	time_yellow_vertical_temp = time_yellow_vertical;
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <resetTimeTraffic+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <resetTimeTraffic+0x68>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	20000064 	.word	0x20000064
 8001f4c:	20000070 	.word	0x20000070
 8001f50:	20000068 	.word	0x20000068
 8001f54:	20000074 	.word	0x20000074
 8001f58:	2000006c 	.word	0x2000006c
 8001f5c:	20000078 	.word	0x20000078
 8001f60:	20000084 	.word	0x20000084
 8001f64:	20000090 	.word	0x20000090
 8001f68:	2000007c 	.word	0x2000007c
 8001f6c:	20000088 	.word	0x20000088
 8001f70:	20000080 	.word	0x20000080
 8001f74:	2000008c 	.word	0x2000008c

08001f78 <set_off_pedes>:

void set_off_pedes(){
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2104      	movs	r1, #4
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <set_off_pedes+0x20>)
 8001f82:	f000 fc18 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <set_off_pedes+0x24>)
 8001f8e:	f000 fc12 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40010c00 	.word	0x40010c00
 8001f9c:	40010800 	.word	0x40010800

08001fa0 <set_red_pedes>:
void set_red_pedes(){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	2104      	movs	r1, #4
 8001fa8:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <set_red_pedes+0x20>)
 8001faa:	f000 fc04 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb4:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <set_red_pedes+0x24>)
 8001fb6:	f000 fbfe 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40010c00 	.word	0x40010c00
 8001fc4:	40010800 	.word	0x40010800

08001fc8 <set_green_pedes>:
void set_green_pedes(){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2104      	movs	r1, #4
 8001fd0:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <set_green_pedes+0x20>)
 8001fd2:	f000 fbf0 	bl	80027b6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fdc:	4803      	ldr	r0, [pc, #12]	; (8001fec <set_green_pedes+0x24>)
 8001fde:	f000 fbea 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40010c00 	.word	0x40010c00
 8001fec:	40010800 	.word	0x40010800

08001ff0 <set_on_buzzer>:

void set_on_buzzer(){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <set_on_buzzer+0x14>)
 8001ffa:	f000 fbdc 	bl	80027b6 <HAL_GPIO_WritePin>
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40010800 	.word	0x40010800

08002008 <Reset_Handler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
<<<<<<< HEAD
 8002240:	480c      	ldr	r0, [pc, #48]	; (8002274 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002242:	490d      	ldr	r1, [pc, #52]	; (8002278 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002244:	4a0d      	ldr	r2, [pc, #52]	; (800227c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002248:	e002      	b.n	8002250 <LoopCopyDataInit>

0800224a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800224c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800224e:	3304      	adds	r3, #4

08002250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002254:	d3f9      	bcc.n	800224a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002258:	4c0a      	ldr	r4, [pc, #40]	; (8002284 <LoopFillZerobss+0x22>)
  movs r3, #0
 800225a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800225c:	e001      	b.n	8002262 <LoopFillZerobss>

0800225e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800225e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002260:	3204      	adds	r2, #4

08002262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002264:	d3fb      	bcc.n	800225e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002266:	f7ff fe83 	bl	8001f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800226a:	f002 f8cd 	bl	8004408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800226e:	f7ff f9b1 	bl	80015d4 <main>
  bx lr
 8002272:	4770      	bx	lr
  ldr r0, =_sdata
 8002274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002278:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 800227c:	08004dc0 	.word	0x08004dc0
  ldr r2, =_sbss
 8002280:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8002284:	200002c8 	.word	0x200002c8

08002288 <ADC1_2_IRQHandler>:
=======
 8002008:	480c      	ldr	r0, [pc, #48]	; (800203c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800200a:	490d      	ldr	r1, [pc, #52]	; (8002040 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800200e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002010:	e002      	b.n	8002018 <LoopCopyDataInit>

08002012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002016:	3304      	adds	r3, #4

08002018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800201c:	d3f9      	bcc.n	8002012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002020:	4c0a      	ldr	r4, [pc, #40]	; (800204c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002024:	e001      	b.n	800202a <LoopFillZerobss>

08002026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002028:	3204      	adds	r2, #4

0800202a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800202c:	d3fb      	bcc.n	8002026 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800202e:	f7ff fe77 	bl	8001d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002032:	f002 fb49 	bl	80046c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002036:	f7ff f90d 	bl	8001254 <main>
  bx lr
 800203a:	4770      	bx	lr
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002044:	08004768 	.word	0x08004768
  ldr r2, =_sbss
 8002048:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800204c:	2000022c 	.word	0x2000022c

08002050 <ADC1_2_IRQHandler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8002288:	e7fe      	b.n	8002288 <ADC1_2_IRQHandler>
	...

0800228c <HAL_Init>:
=======
 8002050:	e7fe      	b.n	8002050 <ADC1_2_IRQHandler>
	...

08002054 <HAL_Init>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
=======
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <HAL_Init+0x28>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a07      	ldr	r2, [pc, #28]	; (80022b4 <HAL_Init+0x28>)
 8002296:	f043 0310 	orr.w	r3, r3, #16
 800229a:	6013      	str	r3, [r2, #0]
=======
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_Init+0x28>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_Init+0x28>)
 800205e:	f043 0310 	orr.w	r3, r3, #16
 8002062:	6013      	str	r3, [r2, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 800229c:	2003      	movs	r0, #3
 800229e:	f000 f923 	bl	80024e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a2:	200f      	movs	r0, #15
 80022a4:	f000 f808 	bl	80022b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022a8:	f7ff fd48 	bl	8001d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40022000 	.word	0x40022000

080022b8 <HAL_InitTick>:
=======
 8002064:	2003      	movs	r0, #3
 8002066:	f000 f923 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206a:	200f      	movs	r0, #15
 800206c:	f000 f808 	bl	8002080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002070:	f7ff fd42 	bl	8001af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40022000 	.word	0x40022000

08002080 <HAL_InitTick>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_InitTick+0x54>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_InitTick+0x58>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f93b 	bl	8002552 <HAL_SYSTICK_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00e      	b.n	8002304 <HAL_InitTick+0x4c>
=======
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_InitTick+0x54>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_InitTick+0x58>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002096:	fbb3 f3f1 	udiv	r3, r3, r1
 800209a:	fbb2 f3f3 	udiv	r3, r2, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f93b 	bl	800231a <HAL_SYSTICK_Config>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00e      	b.n	80020cc <HAL_InitTick+0x4c>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0f      	cmp	r3, #15
 80022ea:	d80a      	bhi.n	8002302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ec:	2200      	movs	r2, #0
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f000 f903 	bl	80024fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <HAL_InitTick+0x5c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6013      	str	r3, [r2, #0]
=======
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b0f      	cmp	r3, #15
 80020b2:	d80a      	bhi.n	80020ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b4:	2200      	movs	r2, #0
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f000 f903 	bl	80022c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <HAL_InitTick+0x5c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6013      	str	r3, [r2, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	200000d8 	.word	0x200000d8
 8002310:	200000e0 	.word	0x200000e0
 8002314:	200000dc 	.word	0x200000dc

08002318 <HAL_IncTick>:
=======
 80020c6:	2300      	movs	r3, #0
 80020c8:	e000      	b.n	80020cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200000a0 	.word	0x200000a0
 80020d8:	200000a8 	.word	0x200000a8
 80020dc:	200000a4 	.word	0x200000a4

080020e0 <HAL_IncTick>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_IncTick+0x1c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_IncTick+0x20>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4413      	add	r3, r2
 8002328:	4a03      	ldr	r2, [pc, #12]	; (8002338 <HAL_IncTick+0x20>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	200000e0 	.word	0x200000e0
 8002338:	200002b4 	.word	0x200002b4

0800233c <HAL_GetTick>:
=======
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_IncTick+0x1c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_IncTick+0x20>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a03      	ldr	r2, [pc, #12]	; (8002100 <HAL_IncTick+0x20>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	200000a8 	.word	0x200000a8
 8002100:	20000228 	.word	0x20000228

08002104 <HAL_GetTick>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return uwTick;
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <HAL_GetTick+0x10>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	200002b4 	.word	0x200002b4

08002350 <__NVIC_SetPriorityGrouping>:
=======
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return uwTick;
 8002108:	4b02      	ldr	r3, [pc, #8]	; (8002114 <HAL_GetTick+0x10>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	20000228 	.word	0x20000228

08002118 <__NVIC_SetPriorityGrouping>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800236c:	4013      	ands	r3, r2
 800236e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800237c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <__NVIC_SetPriorityGrouping+0x44>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <__NVIC_GetPriorityGrouping>:
=======
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002134:	4013      	ands	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <__NVIC_SetPriorityGrouping+0x44>)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	60d3      	str	r3, [r2, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_GetPriorityGrouping>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_GetPriorityGrouping+0x18>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	0a1b      	lsrs	r3, r3, #8
 80023a2:	f003 0307 	and.w	r3, r3, #7
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_EnableIRQ>:
=======
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <__NVIC_GetPriorityGrouping+0x18>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	0a1b      	lsrs	r3, r3, #8
 800216a:	f003 0307 	and.w	r3, r3, #7
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_EnableIRQ>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	db0b      	blt.n	80023de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f003 021f 	and.w	r2, r3, #31
 80023cc:	4906      	ldr	r1, [pc, #24]	; (80023e8 <__NVIC_EnableIRQ+0x34>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2001      	movs	r0, #1
 80023d6:	fa00 f202 	lsl.w	r2, r0, r2
 80023da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100

080023ec <__NVIC_SetPriority>:
=======
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218a:	2b00      	cmp	r3, #0
 800218c:	db0b      	blt.n	80021a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	f003 021f 	and.w	r2, r3, #31
 8002194:	4906      	ldr	r1, [pc, #24]	; (80021b0 <__NVIC_EnableIRQ+0x34>)
 8002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2001      	movs	r0, #1
 800219e:	fa00 f202 	lsl.w	r2, r0, r2
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db0a      	blt.n	8002416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	490c      	ldr	r1, [pc, #48]	; (8002438 <__NVIC_SetPriority+0x4c>)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	0112      	lsls	r2, r2, #4
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	440b      	add	r3, r1
 8002410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002414:	e00a      	b.n	800242c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4908      	ldr	r1, [pc, #32]	; (800243c <__NVIC_SetPriority+0x50>)
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3b04      	subs	r3, #4
 8002424:	0112      	lsls	r2, r2, #4
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	440b      	add	r3, r1
 800242a:	761a      	strb	r2, [r3, #24]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <NVIC_EncodePriority>:
=======
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002440:	b480      	push	{r7}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	61fb      	str	r3, [r7, #28]
=======
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f1c3 0307 	rsb	r3, r3, #7
 800245a:	2b04      	cmp	r3, #4
 800245c:	bf28      	it	cs
 800245e:	2304      	movcs	r3, #4
 8002460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3304      	adds	r3, #4
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <NVIC_EncodePriority+0x30>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b03      	subs	r3, #3
 800246e:	e000      	b.n	8002472 <NVIC_EncodePriority+0x32>
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	f04f 32ff 	mov.w	r2, #4294967295
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43da      	mvns	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	401a      	ands	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002488:	f04f 31ff 	mov.w	r1, #4294967295
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	fa01 f303 	lsl.w	r3, r1, r3
 8002492:	43d9      	mvns	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	4313      	orrs	r3, r2
         );
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <SysTick_Config>:
=======
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <SysTick_Config>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b4:	d301      	bcc.n	80024ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b6:	2301      	movs	r3, #1
 80024b8:	e00f      	b.n	80024da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <SysTick_Config+0x40>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3b01      	subs	r3, #1
 80024c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c2:	210f      	movs	r1, #15
 80024c4:	f04f 30ff 	mov.w	r0, #4294967295
 80024c8:	f7ff ff90 	bl	80023ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <SysTick_Config+0x40>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <SysTick_Config+0x40>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <HAL_NVIC_SetPriorityGrouping>:
=======
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227c:	d301      	bcc.n	8002282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <SysTick_Config+0x40>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228a:	210f      	movs	r1, #15
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f7ff ff90 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <SysTick_Config+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SysTick_Config+0x40>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
=======
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff ff2d 	bl	8002350 <__NVIC_SetPriorityGrouping>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_NVIC_SetPriority>:
=======
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff2d 	bl	8002118 <__NVIC_SetPriorityGrouping>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_SetPriority>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	4603      	mov	r3, r0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
=======
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002510:	f7ff ff42 	bl	8002398 <__NVIC_GetPriorityGrouping>
 8002514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f7ff ff90 	bl	8002440 <NVIC_EncodePriority>
 8002520:	4602      	mov	r2, r0
 8002522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff5f 	bl	80023ec <__NVIC_SetPriority>
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_EnableIRQ>:
=======
 80022d8:	f7ff ff42 	bl	8002160 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff90 	bl	8002208 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5f 	bl	80021b4 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	4603      	mov	r3, r0
 800253e:	71fb      	strb	r3, [r7, #7]
=======
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff35 	bl	80023b4 <__NVIC_EnableIRQ>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_SYSTICK_Config>:
=======
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff35 	bl	800217c <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffa2 	bl	80024a4 <SysTick_Config>
 8002560:	4603      	mov	r3, r0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_DMA_Abort>:
=======
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffa2 	bl	800226c <SysTick_Config>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_DMA_Abort>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800257c:	2b02      	cmp	r3, #2
 800257e:	d008      	beq.n	8002592 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2204      	movs	r2, #4
 8002584:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e020      	b.n	80025d4 <HAL_DMA_Abort+0x6a>
=======
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002344:	2b02      	cmp	r3, #2
 8002346:	d008      	beq.n	800235a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2204      	movs	r2, #4
 800234c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e020      	b.n	800239c <HAL_DMA_Abort+0x6a>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 020e 	bic.w	r2, r2, #14
 80025a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0201 	bic.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_DMA_Abort_IT>:
=======
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 020e 	bic.w	r2, r2, #14
 8002368:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f202 	lsl.w	r2, r1, r2
 8002388:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_DMA_Abort_IT>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
<<<<<<< HEAD
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d005      	beq.n	8002602 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2204      	movs	r2, #4
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e051      	b.n	80026a6 <HAL_DMA_Abort_IT+0xc6>
=======
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d005      	beq.n	80023ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2204      	movs	r2, #4
 80023c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	e051      	b.n	800246e <HAL_DMA_Abort_IT+0xc6>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 020e 	bic.w	r2, r2, #14
 8002610:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a22      	ldr	r2, [pc, #136]	; (80026b0 <HAL_DMA_Abort_IT+0xd0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d029      	beq.n	8002680 <HAL_DMA_Abort_IT+0xa0>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <HAL_DMA_Abort_IT+0xd4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d022      	beq.n	800267c <HAL_DMA_Abort_IT+0x9c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <HAL_DMA_Abort_IT+0xd8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d01a      	beq.n	8002676 <HAL_DMA_Abort_IT+0x96>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <HAL_DMA_Abort_IT+0xdc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d012      	beq.n	8002670 <HAL_DMA_Abort_IT+0x90>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1c      	ldr	r2, [pc, #112]	; (80026c0 <HAL_DMA_Abort_IT+0xe0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00a      	beq.n	800266a <HAL_DMA_Abort_IT+0x8a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1a      	ldr	r2, [pc, #104]	; (80026c4 <HAL_DMA_Abort_IT+0xe4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d102      	bne.n	8002664 <HAL_DMA_Abort_IT+0x84>
 800265e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002662:	e00e      	b.n	8002682 <HAL_DMA_Abort_IT+0xa2>
 8002664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002668:	e00b      	b.n	8002682 <HAL_DMA_Abort_IT+0xa2>
 800266a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800266e:	e008      	b.n	8002682 <HAL_DMA_Abort_IT+0xa2>
 8002670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002674:	e005      	b.n	8002682 <HAL_DMA_Abort_IT+0xa2>
 8002676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267a:	e002      	b.n	8002682 <HAL_DMA_Abort_IT+0xa2>
 800267c:	2310      	movs	r3, #16
 800267e:	e000      	b.n	8002682 <HAL_DMA_Abort_IT+0xa2>
 8002680:	2301      	movs	r3, #1
 8002682:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_DMA_Abort_IT+0xe8>)
 8002684:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	4798      	blx	r3
    } 
  }
  return status;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40020008 	.word	0x40020008
 80026b4:	4002001c 	.word	0x4002001c
 80026b8:	40020030 	.word	0x40020030
 80026bc:	40020044 	.word	0x40020044
 80026c0:	40020058 	.word	0x40020058
 80026c4:	4002006c 	.word	0x4002006c
 80026c8:	40020000 	.word	0x40020000

080026cc <HAL_GPIO_Init>:
=======
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 020e 	bic.w	r2, r2, #14
 80023d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0201 	bic.w	r2, r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a22      	ldr	r2, [pc, #136]	; (8002478 <HAL_DMA_Abort_IT+0xd0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d029      	beq.n	8002448 <HAL_DMA_Abort_IT+0xa0>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a20      	ldr	r2, [pc, #128]	; (800247c <HAL_DMA_Abort_IT+0xd4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d022      	beq.n	8002444 <HAL_DMA_Abort_IT+0x9c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <HAL_DMA_Abort_IT+0xd8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d01a      	beq.n	800243e <HAL_DMA_Abort_IT+0x96>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <HAL_DMA_Abort_IT+0xdc>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d012      	beq.n	8002438 <HAL_DMA_Abort_IT+0x90>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_DMA_Abort_IT+0xe0>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00a      	beq.n	8002432 <HAL_DMA_Abort_IT+0x8a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1a      	ldr	r2, [pc, #104]	; (800248c <HAL_DMA_Abort_IT+0xe4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d102      	bne.n	800242c <HAL_DMA_Abort_IT+0x84>
 8002426:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800242a:	e00e      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 800242c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002430:	e00b      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 8002432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002436:	e008      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 8002438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800243c:	e005      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 800243e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002442:	e002      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 8002444:	2310      	movs	r3, #16
 8002446:	e000      	b.n	800244a <HAL_DMA_Abort_IT+0xa2>
 8002448:	2301      	movs	r3, #1
 800244a:	4a11      	ldr	r2, [pc, #68]	; (8002490 <HAL_DMA_Abort_IT+0xe8>)
 800244c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
    } 
  }
  return status;
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40020008 	.word	0x40020008
 800247c:	4002001c 	.word	0x4002001c
 8002480:	40020030 	.word	0x40020030
 8002484:	40020044 	.word	0x40020044
 8002488:	40020058 	.word	0x40020058
 800248c:	4002006c 	.word	0x4002006c
 8002490:	40020000 	.word	0x40020000

08002494 <HAL_GPIO_Init>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80026cc:	b480      	push	{r7}
 80026ce:	b08b      	sub	sp, #44	; 0x2c
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8002494:	b480      	push	{r7}
 8002496:	b08b      	sub	sp, #44	; 0x2c
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
=======
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 80026de:	e148      	b.n	8002972 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026e0:	2201      	movs	r2, #1
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	f040 8137 	bne.w	800296c <HAL_GPIO_Init+0x2a0>
=======
 80024a6:	e148      	b.n	800273a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024a8:	2201      	movs	r2, #1
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	f040 8137 	bne.w	8002734 <HAL_GPIO_Init+0x2a0>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4aa3      	ldr	r2, [pc, #652]	; (8002990 <HAL_GPIO_Init+0x2c4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d05e      	beq.n	80027c6 <HAL_GPIO_Init+0xfa>
 8002708:	4aa1      	ldr	r2, [pc, #644]	; (8002990 <HAL_GPIO_Init+0x2c4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d875      	bhi.n	80027fa <HAL_GPIO_Init+0x12e>
 800270e:	4aa1      	ldr	r2, [pc, #644]	; (8002994 <HAL_GPIO_Init+0x2c8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d058      	beq.n	80027c6 <HAL_GPIO_Init+0xfa>
 8002714:	4a9f      	ldr	r2, [pc, #636]	; (8002994 <HAL_GPIO_Init+0x2c8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d86f      	bhi.n	80027fa <HAL_GPIO_Init+0x12e>
 800271a:	4a9f      	ldr	r2, [pc, #636]	; (8002998 <HAL_GPIO_Init+0x2cc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d052      	beq.n	80027c6 <HAL_GPIO_Init+0xfa>
 8002720:	4a9d      	ldr	r2, [pc, #628]	; (8002998 <HAL_GPIO_Init+0x2cc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d869      	bhi.n	80027fa <HAL_GPIO_Init+0x12e>
 8002726:	4a9d      	ldr	r2, [pc, #628]	; (800299c <HAL_GPIO_Init+0x2d0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d04c      	beq.n	80027c6 <HAL_GPIO_Init+0xfa>
 800272c:	4a9b      	ldr	r2, [pc, #620]	; (800299c <HAL_GPIO_Init+0x2d0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d863      	bhi.n	80027fa <HAL_GPIO_Init+0x12e>
 8002732:	4a9b      	ldr	r2, [pc, #620]	; (80029a0 <HAL_GPIO_Init+0x2d4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d046      	beq.n	80027c6 <HAL_GPIO_Init+0xfa>
 8002738:	4a99      	ldr	r2, [pc, #612]	; (80029a0 <HAL_GPIO_Init+0x2d4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d85d      	bhi.n	80027fa <HAL_GPIO_Init+0x12e>
 800273e:	2b12      	cmp	r3, #18
 8002740:	d82a      	bhi.n	8002798 <HAL_GPIO_Init+0xcc>
 8002742:	2b12      	cmp	r3, #18
 8002744:	d859      	bhi.n	80027fa <HAL_GPIO_Init+0x12e>
 8002746:	a201      	add	r2, pc, #4	; (adr r2, 800274c <HAL_GPIO_Init+0x80>)
 8002748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274c:	080027c7 	.word	0x080027c7
 8002750:	080027a1 	.word	0x080027a1
 8002754:	080027b3 	.word	0x080027b3
 8002758:	080027f5 	.word	0x080027f5
 800275c:	080027fb 	.word	0x080027fb
 8002760:	080027fb 	.word	0x080027fb
 8002764:	080027fb 	.word	0x080027fb
 8002768:	080027fb 	.word	0x080027fb
 800276c:	080027fb 	.word	0x080027fb
 8002770:	080027fb 	.word	0x080027fb
 8002774:	080027fb 	.word	0x080027fb
 8002778:	080027fb 	.word	0x080027fb
 800277c:	080027fb 	.word	0x080027fb
 8002780:	080027fb 	.word	0x080027fb
 8002784:	080027fb 	.word	0x080027fb
 8002788:	080027fb 	.word	0x080027fb
 800278c:	080027fb 	.word	0x080027fb
 8002790:	080027a9 	.word	0x080027a9
 8002794:	080027bd 	.word	0x080027bd
 8002798:	4a82      	ldr	r2, [pc, #520]	; (80029a4 <HAL_GPIO_Init+0x2d8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d013      	beq.n	80027c6 <HAL_GPIO_Init+0xfa>
=======
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4aa3      	ldr	r2, [pc, #652]	; (8002758 <HAL_GPIO_Init+0x2c4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d05e      	beq.n	800258e <HAL_GPIO_Init+0xfa>
 80024d0:	4aa1      	ldr	r2, [pc, #644]	; (8002758 <HAL_GPIO_Init+0x2c4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d875      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 80024d6:	4aa1      	ldr	r2, [pc, #644]	; (800275c <HAL_GPIO_Init+0x2c8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d058      	beq.n	800258e <HAL_GPIO_Init+0xfa>
 80024dc:	4a9f      	ldr	r2, [pc, #636]	; (800275c <HAL_GPIO_Init+0x2c8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d86f      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 80024e2:	4a9f      	ldr	r2, [pc, #636]	; (8002760 <HAL_GPIO_Init+0x2cc>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d052      	beq.n	800258e <HAL_GPIO_Init+0xfa>
 80024e8:	4a9d      	ldr	r2, [pc, #628]	; (8002760 <HAL_GPIO_Init+0x2cc>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d869      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 80024ee:	4a9d      	ldr	r2, [pc, #628]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d04c      	beq.n	800258e <HAL_GPIO_Init+0xfa>
 80024f4:	4a9b      	ldr	r2, [pc, #620]	; (8002764 <HAL_GPIO_Init+0x2d0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d863      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 80024fa:	4a9b      	ldr	r2, [pc, #620]	; (8002768 <HAL_GPIO_Init+0x2d4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d046      	beq.n	800258e <HAL_GPIO_Init+0xfa>
 8002500:	4a99      	ldr	r2, [pc, #612]	; (8002768 <HAL_GPIO_Init+0x2d4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d85d      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 8002506:	2b12      	cmp	r3, #18
 8002508:	d82a      	bhi.n	8002560 <HAL_GPIO_Init+0xcc>
 800250a:	2b12      	cmp	r3, #18
 800250c:	d859      	bhi.n	80025c2 <HAL_GPIO_Init+0x12e>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <HAL_GPIO_Init+0x80>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	0800258f 	.word	0x0800258f
 8002518:	08002569 	.word	0x08002569
 800251c:	0800257b 	.word	0x0800257b
 8002520:	080025bd 	.word	0x080025bd
 8002524:	080025c3 	.word	0x080025c3
 8002528:	080025c3 	.word	0x080025c3
 800252c:	080025c3 	.word	0x080025c3
 8002530:	080025c3 	.word	0x080025c3
 8002534:	080025c3 	.word	0x080025c3
 8002538:	080025c3 	.word	0x080025c3
 800253c:	080025c3 	.word	0x080025c3
 8002540:	080025c3 	.word	0x080025c3
 8002544:	080025c3 	.word	0x080025c3
 8002548:	080025c3 	.word	0x080025c3
 800254c:	080025c3 	.word	0x080025c3
 8002550:	080025c3 	.word	0x080025c3
 8002554:	080025c3 	.word	0x080025c3
 8002558:	08002571 	.word	0x08002571
 800255c:	08002585 	.word	0x08002585
 8002560:	4a82      	ldr	r2, [pc, #520]	; (800276c <HAL_GPIO_Init+0x2d8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0xfa>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 800279e:	e02c      	b.n	80027fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	623b      	str	r3, [r7, #32]
          break;
 80027a6:	e029      	b.n	80027fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	3304      	adds	r3, #4
 80027ae:	623b      	str	r3, [r7, #32]
          break;
 80027b0:	e024      	b.n	80027fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	3308      	adds	r3, #8
 80027b8:	623b      	str	r3, [r7, #32]
          break;
 80027ba:	e01f      	b.n	80027fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	330c      	adds	r3, #12
 80027c2:	623b      	str	r3, [r7, #32]
          break;
 80027c4:	e01a      	b.n	80027fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ce:	2304      	movs	r3, #4
 80027d0:	623b      	str	r3, [r7, #32]
          break;
 80027d2:	e013      	b.n	80027fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027dc:	2308      	movs	r3, #8
 80027de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	611a      	str	r2, [r3, #16]
          break;
 80027e6:	e009      	b.n	80027fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027e8:	2308      	movs	r3, #8
 80027ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	615a      	str	r2, [r3, #20]
          break;
 80027f2:	e003      	b.n	80027fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027f4:	2300      	movs	r3, #0
 80027f6:	623b      	str	r3, [r7, #32]
          break;
 80027f8:	e000      	b.n	80027fc <HAL_GPIO_Init+0x130>
          break;
 80027fa:	bf00      	nop
=======
 8002566:	e02c      	b.n	80025c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	623b      	str	r3, [r7, #32]
          break;
 800256e:	e029      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	3304      	adds	r3, #4
 8002576:	623b      	str	r3, [r7, #32]
          break;
 8002578:	e024      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	3308      	adds	r3, #8
 8002580:	623b      	str	r3, [r7, #32]
          break;
 8002582:	e01f      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	330c      	adds	r3, #12
 800258a:	623b      	str	r3, [r7, #32]
          break;
 800258c:	e01a      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002596:	2304      	movs	r3, #4
 8002598:	623b      	str	r3, [r7, #32]
          break;
 800259a:	e013      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d105      	bne.n	80025b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025a4:	2308      	movs	r3, #8
 80025a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	611a      	str	r2, [r3, #16]
          break;
 80025ae:	e009      	b.n	80025c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b0:	2308      	movs	r3, #8
 80025b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	615a      	str	r2, [r3, #20]
          break;
 80025ba:	e003      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
          break;
 80025c0:	e000      	b.n	80025c4 <HAL_GPIO_Init+0x130>
          break;
 80025c2:	bf00      	nop
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2bff      	cmp	r3, #255	; 0xff
 8002800:	d801      	bhi.n	8002806 <HAL_GPIO_Init+0x13a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	e001      	b.n	800280a <HAL_GPIO_Init+0x13e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3304      	adds	r3, #4
 800280a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2bff      	cmp	r3, #255	; 0xff
 8002810:	d802      	bhi.n	8002818 <HAL_GPIO_Init+0x14c>
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	e002      	b.n	800281e <HAL_GPIO_Init+0x152>
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	3b08      	subs	r3, #8
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	210f      	movs	r1, #15
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	401a      	ands	r2, r3
 8002830:	6a39      	ldr	r1, [r7, #32]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	431a      	orrs	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	601a      	str	r2, [r3, #0]
=======
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2bff      	cmp	r3, #255	; 0xff
 80025c8:	d801      	bhi.n	80025ce <HAL_GPIO_Init+0x13a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	e001      	b.n	80025d2 <HAL_GPIO_Init+0x13e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3304      	adds	r3, #4
 80025d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2bff      	cmp	r3, #255	; 0xff
 80025d8:	d802      	bhi.n	80025e0 <HAL_GPIO_Init+0x14c>
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	e002      	b.n	80025e6 <HAL_GPIO_Init+0x152>
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	3b08      	subs	r3, #8
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	210f      	movs	r1, #15
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	401a      	ands	r2, r3
 80025f8:	6a39      	ldr	r1, [r7, #32]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	431a      	orrs	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	601a      	str	r2, [r3, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8090 	beq.w	800296c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800284c:	4b56      	ldr	r3, [pc, #344]	; (80029a8 <HAL_GPIO_Init+0x2dc>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	4a55      	ldr	r2, [pc, #340]	; (80029a8 <HAL_GPIO_Init+0x2dc>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6193      	str	r3, [r2, #24]
 8002858:	4b53      	ldr	r3, [pc, #332]	; (80029a8 <HAL_GPIO_Init+0x2dc>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002864:	4a51      	ldr	r2, [pc, #324]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	3302      	adds	r3, #2
 800286c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002870:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4013      	ands	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a49      	ldr	r2, [pc, #292]	; (80029b0 <HAL_GPIO_Init+0x2e4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00d      	beq.n	80028ac <HAL_GPIO_Init+0x1e0>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a48      	ldr	r2, [pc, #288]	; (80029b4 <HAL_GPIO_Init+0x2e8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d007      	beq.n	80028a8 <HAL_GPIO_Init+0x1dc>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a47      	ldr	r2, [pc, #284]	; (80029b8 <HAL_GPIO_Init+0x2ec>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_GPIO_Init+0x1d8>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e004      	b.n	80028ae <HAL_GPIO_Init+0x1e2>
 80028a4:	2303      	movs	r3, #3
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x1e2>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_GPIO_Init+0x1e2>
 80028ac:	2300      	movs	r3, #0
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	f002 0203 	and.w	r2, r2, #3
 80028b4:	0092      	lsls	r2, r2, #2
 80028b6:	4093      	lsls	r3, r2
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028be:	493b      	ldr	r1, [pc, #236]	; (80029ac <HAL_GPIO_Init+0x2e0>)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 8090 	beq.w	8002734 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002614:	4b56      	ldr	r3, [pc, #344]	; (8002770 <HAL_GPIO_Init+0x2dc>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4a55      	ldr	r2, [pc, #340]	; (8002770 <HAL_GPIO_Init+0x2dc>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_GPIO_Init+0x2dc>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800262c:	4a51      	ldr	r2, [pc, #324]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002638:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	220f      	movs	r2, #15
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a49      	ldr	r2, [pc, #292]	; (8002778 <HAL_GPIO_Init+0x2e4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00d      	beq.n	8002674 <HAL_GPIO_Init+0x1e0>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a48      	ldr	r2, [pc, #288]	; (800277c <HAL_GPIO_Init+0x2e8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d007      	beq.n	8002670 <HAL_GPIO_Init+0x1dc>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a47      	ldr	r2, [pc, #284]	; (8002780 <HAL_GPIO_Init+0x2ec>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d101      	bne.n	800266c <HAL_GPIO_Init+0x1d8>
 8002668:	2302      	movs	r3, #2
 800266a:	e004      	b.n	8002676 <HAL_GPIO_Init+0x1e2>
 800266c:	2303      	movs	r3, #3
 800266e:	e002      	b.n	8002676 <HAL_GPIO_Init+0x1e2>
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_GPIO_Init+0x1e2>
 8002674:	2300      	movs	r3, #0
 8002676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002678:	f002 0203 	and.w	r2, r2, #3
 800267c:	0092      	lsls	r2, r2, #2
 800267e:	4093      	lsls	r3, r2
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002686:	493b      	ldr	r1, [pc, #236]	; (8002774 <HAL_GPIO_Init+0x2e0>)
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028d8:	4b38      	ldr	r3, [pc, #224]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4937      	ldr	r1, [pc, #220]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x228>
=======
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026a0:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4937      	ldr	r1, [pc, #220]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x228>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 80028e6:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	4933      	ldr	r1, [pc, #204]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
=======
 80026ae:	4b35      	ldr	r3, [pc, #212]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	4933      	ldr	r1, [pc, #204]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002900:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	492d      	ldr	r1, [pc, #180]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x250>
=======
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026c8:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	492d      	ldr	r1, [pc, #180]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	e006      	b.n	80026e4 <HAL_GPIO_Init+0x250>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	43db      	mvns	r3, r3
 8002916:	4929      	ldr	r1, [pc, #164]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002918:	4013      	ands	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
=======
 80026d6:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	43db      	mvns	r3, r3
 80026de:	4929      	ldr	r1, [pc, #164]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002928:	4b24      	ldr	r3, [pc, #144]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	4923      	ldr	r1, [pc, #140]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x278>
=======
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d006      	beq.n	80026fe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	4923      	ldr	r1, [pc, #140]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x278>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8002936:	4b21      	ldr	r3, [pc, #132]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	43db      	mvns	r3, r3
 800293e:	491f      	ldr	r1, [pc, #124]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002940:	4013      	ands	r3, r2
 8002942:	608b      	str	r3, [r1, #8]
=======
 80026fe:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	43db      	mvns	r3, r3
 8002706:	491f      	ldr	r1, [pc, #124]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 8002708:	4013      	ands	r3, r2
 800270a:	608b      	str	r3, [r1, #8]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d006      	beq.n	800295e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	4919      	ldr	r1, [pc, #100]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x2a0>
=======
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4919      	ldr	r1, [pc, #100]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x2a0>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	43db      	mvns	r3, r3
 8002966:	4915      	ldr	r1, [pc, #84]	; (80029bc <HAL_GPIO_Init+0x2f0>)
 8002968:	4013      	ands	r3, r2
 800296a:	60cb      	str	r3, [r1, #12]
=======
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	43db      	mvns	r3, r3
 800272e:	4915      	ldr	r1, [pc, #84]	; (8002784 <HAL_GPIO_Init+0x2f0>)
 8002730:	4013      	ands	r3, r2
 8002732:	60cb      	str	r3, [r1, #12]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
      }
    }

	position++;
<<<<<<< HEAD
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	3301      	adds	r3, #1
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	f47f aeaf 	bne.w	80026e0 <HAL_GPIO_Init+0x14>
  }
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	372c      	adds	r7, #44	; 0x2c
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	10320000 	.word	0x10320000
 8002994:	10310000 	.word	0x10310000
 8002998:	10220000 	.word	0x10220000
 800299c:	10210000 	.word	0x10210000
 80029a0:	10120000 	.word	0x10120000
 80029a4:	10110000 	.word	0x10110000
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40010000 	.word	0x40010000
 80029b0:	40010800 	.word	0x40010800
 80029b4:	40010c00 	.word	0x40010c00
 80029b8:	40011000 	.word	0x40011000
 80029bc:	40010400 	.word	0x40010400

080029c0 <HAL_GPIO_ReadPin>:
=======
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	3301      	adds	r3, #1
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	f47f aeaf 	bne.w	80024a8 <HAL_GPIO_Init+0x14>
  }
}
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	372c      	adds	r7, #44	; 0x2c
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	10320000 	.word	0x10320000
 800275c:	10310000 	.word	0x10310000
 8002760:	10220000 	.word	0x10220000
 8002764:	10210000 	.word	0x10210000
 8002768:	10120000 	.word	0x10120000
 800276c:	10110000 	.word	0x10110000
 8002770:	40021000 	.word	0x40021000
 8002774:	40010000 	.word	0x40010000
 8002778:	40010800 	.word	0x40010800
 800277c:	40010c00 	.word	0x40010c00
 8002780:	40011000 	.word	0x40011000
 8002784:	40010400 	.word	0x40010400

08002788 <HAL_GPIO_ReadPin>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
=======
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	887b      	ldrh	r3, [r7, #2]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
 80029dc:	e001      	b.n	80029e2 <HAL_GPIO_ReadPin+0x22>
=======
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	e001      	b.n	80027aa <HAL_GPIO_ReadPin+0x22>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 80029de:	2300      	movs	r3, #0
 80029e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <HAL_GPIO_WritePin>:
=======
 80027a6:	2300      	movs	r3, #0
 80027a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_GPIO_WritePin>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	807b      	strh	r3, [r7, #2]
 80029fa:	4613      	mov	r3, r2
 80029fc:	707b      	strb	r3, [r7, #1]
=======
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	807b      	strh	r3, [r7, #2]
 80027c2:	4613      	mov	r3, r2
 80027c4:	707b      	strb	r3, [r7, #1]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80029fe:	787b      	ldrb	r3, [r7, #1]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a04:	887a      	ldrh	r2, [r7, #2]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	611a      	str	r2, [r3, #16]
=======
 80027c6:	787b      	ldrb	r3, [r7, #1]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027cc:	887a      	ldrh	r2, [r7, #2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	611a      	str	r2, [r3, #16]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8002a0a:	e003      	b.n	8002a14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a0c:	887b      	ldrh	r3, [r7, #2]
 8002a0e:	041a      	lsls	r2, r3, #16
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	611a      	str	r2, [r3, #16]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <HAL_GPIO_TogglePin>:
=======
 80027d2:	e003      	b.n	80027dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	041a      	lsls	r2, r3, #16
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	611a      	str	r2, [r3, #16]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <HAL_GPIO_TogglePin>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	807b      	strh	r3, [r7, #2]
=======
 80027e6:	b480      	push	{r7}
 80027e8:	b085      	sub	sp, #20
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	807b      	strh	r3, [r7, #2]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a30:	887a      	ldrh	r2, [r7, #2]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	041a      	lsls	r2, r3, #16
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	887b      	ldrh	r3, [r7, #2]
 8002a3e:	400b      	ands	r3, r1
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	611a      	str	r2, [r3, #16]
}
 8002a46:	bf00      	nop
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <HAL_RCC_OscConfig>:
=======
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027f8:	887a      	ldrh	r2, [r7, #2]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4013      	ands	r3, r2
 80027fe:	041a      	lsls	r2, r3, #16
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	43d9      	mvns	r1, r3
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	400b      	ands	r3, r1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]
}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <HAL_RCC_OscConfig>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
=======
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e26c      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
=======
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e26c      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 8087 	beq.w	8002b7e <HAL_RCC_OscConfig+0x12e>
=======
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8087 	beq.w	8002946 <HAL_RCC_OscConfig+0x12e>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8002a70:	4b92      	ldr	r3, [pc, #584]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d00c      	beq.n	8002a96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a7c:	4b8f      	ldr	r3, [pc, #572]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d112      	bne.n	8002aae <HAL_RCC_OscConfig+0x5e>
 8002a88:	4b8c      	ldr	r3, [pc, #560]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a94:	d10b      	bne.n	8002aae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a96:	4b89      	ldr	r3, [pc, #548]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d06c      	beq.n	8002b7c <HAL_RCC_OscConfig+0x12c>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d168      	bne.n	8002b7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e246      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
=======
 8002838:	4b92      	ldr	r3, [pc, #584]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b04      	cmp	r3, #4
 8002842:	d00c      	beq.n	800285e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002844:	4b8f      	ldr	r3, [pc, #572]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d112      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
 8002850:	4b8c      	ldr	r3, [pc, #560]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285c:	d10b      	bne.n	8002876 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285e:	4b89      	ldr	r3, [pc, #548]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d06c      	beq.n	8002944 <HAL_RCC_OscConfig+0x12c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d168      	bne.n	8002944 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e246      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x76>
 8002ab8:	4b80      	ldr	r3, [pc, #512]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a7f      	ldr	r2, [pc, #508]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac2:	6013      	str	r3, [r2, #0]
 8002ac4:	e02e      	b.n	8002b24 <HAL_RCC_OscConfig+0xd4>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x98>
 8002ace:	4b7b      	ldr	r3, [pc, #492]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a7a      	ldr	r2, [pc, #488]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b78      	ldr	r3, [pc, #480]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a77      	ldr	r2, [pc, #476]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e01d      	b.n	8002b24 <HAL_RCC_OscConfig+0xd4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0xbc>
 8002af2:	4b72      	ldr	r3, [pc, #456]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a71      	ldr	r2, [pc, #452]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b6f      	ldr	r3, [pc, #444]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a6e      	ldr	r2, [pc, #440]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0xd4>
 8002b0c:	4b6b      	ldr	r3, [pc, #428]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a6a      	ldr	r2, [pc, #424]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	4b68      	ldr	r3, [pc, #416]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a67      	ldr	r2, [pc, #412]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b22:	6013      	str	r3, [r2, #0]
=======
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287e:	d106      	bne.n	800288e <HAL_RCC_OscConfig+0x76>
 8002880:	4b80      	ldr	r3, [pc, #512]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a7f      	ldr	r2, [pc, #508]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	e02e      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCC_OscConfig+0x98>
 8002896:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a7a      	ldr	r2, [pc, #488]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b78      	ldr	r3, [pc, #480]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a77      	ldr	r2, [pc, #476]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e01d      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0xbc>
 80028ba:	4b72      	ldr	r3, [pc, #456]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a71      	ldr	r2, [pc, #452]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6e      	ldr	r2, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0xd4>
 80028d4:	4b6b      	ldr	r3, [pc, #428]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a6a      	ldr	r2, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b68      	ldr	r3, [pc, #416]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a67      	ldr	r2, [pc, #412]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d013      	beq.n	8002b54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fc06 	bl	800233c <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7ff fc02 	bl	800233c <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1fa      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0xe4>
 8002b52:	e014      	b.n	8002b7e <HAL_RCC_OscConfig+0x12e>
=======
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d013      	beq.n	800291c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7ff fc06 	bl	8002104 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff fc02 	bl	8002104 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1fa      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b5d      	ldr	r3, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0xe4>
 800291a:	e014      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002b54:	f7ff fbf2 	bl	800233c <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7ff fbee 	bl	800233c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e1e6      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x10c>
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	bf00      	nop
=======
 800291c:	f7ff fbf2 	bl	8002104 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff fbee 	bl	8002104 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1e6      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002936:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x10c>
 8002942:	e000      	b.n	8002946 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	bf00      	nop
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d063      	beq.n	8002c52 <HAL_RCC_OscConfig+0x202>
=======
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d063      	beq.n	8002a1a <HAL_RCC_OscConfig+0x202>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8002b8a:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00b      	beq.n	8002bae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b96:	4b49      	ldr	r3, [pc, #292]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d11c      	bne.n	8002bdc <HAL_RCC_OscConfig+0x18c>
 8002ba2:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d116      	bne.n	8002bdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x176>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d001      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e1ba      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
=======
 8002952:	4b4c      	ldr	r3, [pc, #304]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00b      	beq.n	8002976 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800295e:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b08      	cmp	r3, #8
 8002968:	d11c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
 800296a:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d116      	bne.n	80029a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e1ba      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4939      	ldr	r1, [pc, #228]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bda:	e03a      	b.n	8002c52 <HAL_RCC_OscConfig+0x202>
=======
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4939      	ldr	r1, [pc, #228]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a2:	e03a      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d020      	beq.n	8002c26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be4:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bea:	f7ff fba7 	bl	800233c <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf2:	f7ff fba3 	bl	800233c <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e19b      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c04:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f0      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x1a2>
=======
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ac:	4b36      	ldr	r3, [pc, #216]	; (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7ff fba7 	bl	8002104 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ba:	f7ff fba3 	bl	8002104 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e19b      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x1a2>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002c10:	4b2a      	ldr	r3, [pc, #168]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4927      	ldr	r1, [pc, #156]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	600b      	str	r3, [r1, #0]
 8002c24:	e015      	b.n	8002c52 <HAL_RCC_OscConfig+0x202>
=======
 80029d8:	4b2a      	ldr	r3, [pc, #168]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4927      	ldr	r1, [pc, #156]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	600b      	str	r3, [r1, #0]
 80029ec:	e015      	b.n	8002a1a <HAL_RCC_OscConfig+0x202>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8002c26:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <HAL_RCC_OscConfig+0x270>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7ff fb86 	bl	800233c <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c34:	f7ff fb82 	bl	800233c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e17a      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c46:	4b1d      	ldr	r3, [pc, #116]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <HAL_RCC_OscConfig+0x1e4>
=======
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <HAL_RCC_OscConfig+0x270>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7ff fb86 	bl	8002104 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fc:	f7ff fb82 	bl	8002104 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e17a      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x1e4>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d03a      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x284>
=======
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d03a      	beq.n	8002a9c <HAL_RCC_OscConfig+0x284>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d019      	beq.n	8002c9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c6c:	f7ff fb66 	bl	800233c <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c74:	f7ff fb62 	bl	800233c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e15a      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <HAL_RCC_OscConfig+0x26c>)
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x224>
=======
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d019      	beq.n	8002a62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2e:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7ff fb66 	bl	8002104 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7ff fb62 	bl	8002104 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e15a      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f0      	beq.n	8002a3c <HAL_RCC_OscConfig+0x224>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 8002c92:	2001      	movs	r0, #1
 8002c94:	f000 fad8 	bl	8003248 <RCC_Delay>
 8002c98:	e01c      	b.n	8002cd4 <HAL_RCC_OscConfig+0x284>
=======
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	f000 fad8 	bl	8003010 <RCC_Delay>
 8002a60:	e01c      	b.n	8002a9c <HAL_RCC_OscConfig+0x284>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_RCC_OscConfig+0x274>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca0:	f7ff fb4c 	bl	800233c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca6:	e00f      	b.n	8002cc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca8:	f7ff fb48 	bl	800233c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d908      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e140      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	42420000 	.word	0x42420000
 8002cc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc8:	4b9e      	ldr	r3, [pc, #632]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e9      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x258>
=======
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_RCC_OscConfig+0x274>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a68:	f7ff fb4c 	bl	8002104 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6e:	e00f      	b.n	8002a90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a70:	f7ff fb48 	bl	8002104 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d908      	bls.n	8002a90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e140      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
 8002a88:	42420000 	.word	0x42420000
 8002a8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	4b9e      	ldr	r3, [pc, #632]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e9      	bne.n	8002a70 <HAL_RCC_OscConfig+0x258>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a6 	beq.w	8002e2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	75fb      	strb	r3, [r7, #23]
=======
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 80a6 	beq.w	8002bf6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75fb      	strb	r3, [r7, #23]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8002ce6:	4b97      	ldr	r3, [pc, #604]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10d      	bne.n	8002d0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4b94      	ldr	r3, [pc, #592]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	4a93      	ldr	r2, [pc, #588]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	61d3      	str	r3, [r2, #28]
 8002cfe:	4b91      	ldr	r3, [pc, #580]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0e:	4b8e      	ldr	r3, [pc, #568]	; (8002f48 <HAL_RCC_OscConfig+0x4f8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d118      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1a:	4b8b      	ldr	r3, [pc, #556]	; (8002f48 <HAL_RCC_OscConfig+0x4f8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a8a      	ldr	r2, [pc, #552]	; (8002f48 <HAL_RCC_OscConfig+0x4f8>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d26:	f7ff fb09 	bl	800233c <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2e:	f7ff fb05 	bl	800233c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b64      	cmp	r3, #100	; 0x64
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e0fd      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <HAL_RCC_OscConfig+0x4f8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2de>
=======
 8002aae:	4b97      	ldr	r3, [pc, #604]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aba:	4b94      	ldr	r3, [pc, #592]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a93      	ldr	r2, [pc, #588]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	61d3      	str	r3, [r2, #28]
 8002ac6:	4b91      	ldr	r3, [pc, #580]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b8e      	ldr	r3, [pc, #568]	; (8002d10 <HAL_RCC_OscConfig+0x4f8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d118      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b8b      	ldr	r3, [pc, #556]	; (8002d10 <HAL_RCC_OscConfig+0x4f8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a8a      	ldr	r2, [pc, #552]	; (8002d10 <HAL_RCC_OscConfig+0x4f8>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7ff fb09 	bl	8002104 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7ff fb05 	bl	8002104 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	; 0x64
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0fd      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b81      	ldr	r3, [pc, #516]	; (8002d10 <HAL_RCC_OscConfig+0x4f8>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2de>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x312>
 8002d54:	4b7b      	ldr	r3, [pc, #492]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4a7a      	ldr	r2, [pc, #488]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6213      	str	r3, [r2, #32]
 8002d60:	e02d      	b.n	8002dbe <HAL_RCC_OscConfig+0x36e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x334>
 8002d6a:	4b76      	ldr	r3, [pc, #472]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a75      	ldr	r2, [pc, #468]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6213      	str	r3, [r2, #32]
 8002d76:	4b73      	ldr	r3, [pc, #460]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a72      	ldr	r2, [pc, #456]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	f023 0304 	bic.w	r3, r3, #4
 8002d80:	6213      	str	r3, [r2, #32]
 8002d82:	e01c      	b.n	8002dbe <HAL_RCC_OscConfig+0x36e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d10c      	bne.n	8002da6 <HAL_RCC_OscConfig+0x356>
 8002d8c:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4a6c      	ldr	r2, [pc, #432]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002d92:	f043 0304 	orr.w	r3, r3, #4
 8002d96:	6213      	str	r3, [r2, #32]
 8002d98:	4b6a      	ldr	r3, [pc, #424]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	4a69      	ldr	r2, [pc, #420]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6213      	str	r3, [r2, #32]
 8002da4:	e00b      	b.n	8002dbe <HAL_RCC_OscConfig+0x36e>
 8002da6:	4b67      	ldr	r3, [pc, #412]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4a66      	ldr	r2, [pc, #408]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	6213      	str	r3, [r2, #32]
 8002db2:	4b64      	ldr	r3, [pc, #400]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4a63      	ldr	r2, [pc, #396]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d015      	beq.n	8002df2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7ff fab9 	bl	800233c <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7ff fab5 	bl	800233c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e0ab      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	4b57      	ldr	r3, [pc, #348]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ee      	beq.n	8002dce <HAL_RCC_OscConfig+0x37e>
 8002df0:	e014      	b.n	8002e1c <HAL_RCC_OscConfig+0x3cc>
=======
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x312>
 8002b1c:	4b7b      	ldr	r3, [pc, #492]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4a7a      	ldr	r2, [pc, #488]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6213      	str	r3, [r2, #32]
 8002b28:	e02d      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x334>
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a75      	ldr	r2, [pc, #468]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	6213      	str	r3, [r2, #32]
 8002b3e:	4b73      	ldr	r3, [pc, #460]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4a72      	ldr	r2, [pc, #456]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	6213      	str	r3, [r2, #32]
 8002b4a:	e01c      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d10c      	bne.n	8002b6e <HAL_RCC_OscConfig+0x356>
 8002b54:	4b6d      	ldr	r3, [pc, #436]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4a6c      	ldr	r2, [pc, #432]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6213      	str	r3, [r2, #32]
 8002b60:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a69      	ldr	r2, [pc, #420]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	e00b      	b.n	8002b86 <HAL_RCC_OscConfig+0x36e>
 8002b6e:	4b67      	ldr	r3, [pc, #412]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a66      	ldr	r2, [pc, #408]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	f023 0301 	bic.w	r3, r3, #1
 8002b78:	6213      	str	r3, [r2, #32]
 8002b7a:	4b64      	ldr	r3, [pc, #400]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a63      	ldr	r2, [pc, #396]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002b80:	f023 0304 	bic.w	r3, r3, #4
 8002b84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8e:	f7ff fab9 	bl	8002104 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7ff fab5 	bl	8002104 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0ab      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bac:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0ee      	beq.n	8002b96 <HAL_RCC_OscConfig+0x37e>
 8002bb8:	e014      	b.n	8002be4 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002df2:	f7ff faa3 	bl	800233c <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7ff fa9f 	bl	800233c <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e095      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e10:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1ee      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3aa>
=======
 8002bba:	f7ff faa3 	bl	8002104 <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc2:	f7ff fa9f 	bl	8002104 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e095      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd8:	4b4c      	ldr	r3, [pc, #304]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1ee      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3aa>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d105      	bne.n	8002e2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e22:	4b48      	ldr	r3, [pc, #288]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	4a47      	ldr	r2, [pc, #284]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	61d3      	str	r3, [r2, #28]
=======
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bea:	4b48      	ldr	r3, [pc, #288]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a47      	ldr	r2, [pc, #284]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	61d3      	str	r3, [r2, #28]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8081 	beq.w	8002f3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e38:	4b42      	ldr	r3, [pc, #264]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d061      	beq.n	8002f08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d146      	bne.n	8002eda <HAL_RCC_OscConfig+0x48a>
=======
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8081 	beq.w	8002d02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c00:	4b42      	ldr	r3, [pc, #264]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d061      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d146      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x48a>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002e4c:	4b3f      	ldr	r3, [pc, #252]	; (8002f4c <HAL_RCC_OscConfig+0x4fc>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e52:	f7ff fa73 	bl	800233c <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e58:	e008      	b.n	8002e6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5a:	f7ff fa6f 	bl	800233c <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e067      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6c:	4b35      	ldr	r3, [pc, #212]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1f0      	bne.n	8002e5a <HAL_RCC_OscConfig+0x40a>
=======
 8002c14:	4b3f      	ldr	r3, [pc, #252]	; (8002d14 <HAL_RCC_OscConfig+0x4fc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7ff fa73 	bl	8002104 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c22:	f7ff fa6f 	bl	8002104 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e067      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c34:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x40a>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e80:	d108      	bne.n	8002e94 <HAL_RCC_OscConfig+0x444>
=======
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c48:	d108      	bne.n	8002c5c <HAL_RCC_OscConfig+0x444>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 8002e82:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	492d      	ldr	r1, [pc, #180]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	604b      	str	r3, [r1, #4]
=======
 8002c4a:	4b30      	ldr	r3, [pc, #192]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	492d      	ldr	r1, [pc, #180]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a19      	ldr	r1, [r3, #32]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	4927      	ldr	r1, [pc, #156]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eac:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_RCC_OscConfig+0x4fc>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7ff fa43 	bl	800233c <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eba:	f7ff fa3f 	bl	800233c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e037      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x46a>
 8002ed8:	e02f      	b.n	8002f3a <HAL_RCC_OscConfig+0x4ea>
=======
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a19      	ldr	r1, [r3, #32]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	4927      	ldr	r1, [pc, #156]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <HAL_RCC_OscConfig+0x4fc>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7a:	f7ff fa43 	bl	8002104 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7ff fa3f 	bl	8002104 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e037      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c94:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x46a>
 8002ca0:	e02f      	b.n	8002d02 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002eda:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <HAL_RCC_OscConfig+0x4fc>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7ff fa2c 	bl	800233c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7ff fa28 	bl	800233c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e020      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x498>
 8002f06:	e018      	b.n	8002f3a <HAL_RCC_OscConfig+0x4ea>
=======
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <HAL_RCC_OscConfig+0x4fc>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff fa2c 	bl	8002104 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7ff fa28 	bl	8002104 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e020      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x498>
 8002cce:	e018      	b.n	8002d02 <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e013      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
=======
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e013      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_RCC_OscConfig+0x4ec>
=======
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	42420060 	.word	0x42420060

08002f50 <HAL_RCC_ClockConfig>:
=======
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40007000 	.word	0x40007000
 8002d14:	42420060 	.word	0x42420060

08002d18 <HAL_RCC_ClockConfig>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
=======
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0d0      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0d0      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002f64:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d910      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b67      	ldr	r3, [pc, #412]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 0207 	bic.w	r2, r3, #7
 8002f7a:	4965      	ldr	r1, [pc, #404]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
=======
 8002d2c:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d910      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b67      	ldr	r3, [pc, #412]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 0207 	bic.w	r2, r3, #7
 8002d42:	4965      	ldr	r1, [pc, #404]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8002f82:	4b63      	ldr	r3, [pc, #396]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0b8      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002d4a:	4b63      	ldr	r3, [pc, #396]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0b8      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x92>
=======
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_ClockConfig+0x92>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fac:	4b59      	ldr	r3, [pc, #356]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a58      	ldr	r2, [pc, #352]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a52      	ldr	r2, [pc, #328]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fce:	6053      	str	r3, [r2, #4]
=======
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d74:	4b59      	ldr	r3, [pc, #356]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a58      	ldr	r2, [pc, #352]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d8c:	4b53      	ldr	r3, [pc, #332]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a52      	ldr	r2, [pc, #328]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d96:	6053      	str	r3, [r2, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8002fd0:	4b50      	ldr	r3, [pc, #320]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	494d      	ldr	r1, [pc, #308]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
=======
 8002d98:	4b50      	ldr	r3, [pc, #320]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	494d      	ldr	r1, [pc, #308]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d040      	beq.n	8003070 <HAL_RCC_ClockConfig+0x120>
=======
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d040      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d115      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07f      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d115      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e07f      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	4b41      	ldr	r3, [pc, #260]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e073      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e073      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 800301e:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e06b      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f023 0203 	bic.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4936      	ldr	r1, [pc, #216]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003040:	f7ff f97c 	bl	800233c <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003046:	e00a      	b.n	800305e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003048:	f7ff f978 	bl	800233c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	f241 3288 	movw	r2, #5000	; 0x1388
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e053      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 020c 	and.w	r2, r3, #12
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	429a      	cmp	r2, r3
 800306e:	d1eb      	bne.n	8003048 <HAL_RCC_ClockConfig+0xf8>
=======
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e06b      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df6:	4b39      	ldr	r3, [pc, #228]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4936      	ldr	r1, [pc, #216]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e08:	f7ff f97c 	bl	8002104 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7ff f978 	bl	8002104 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e053      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003070:	4b27      	ldr	r3, [pc, #156]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d210      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 0207 	bic.w	r2, r3, #7
 8003086:	4922      	ldr	r1, [pc, #136]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
=======
 8002e38:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d210      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 0207 	bic.w	r2, r3, #7
 8002e4e:	4922      	ldr	r1, [pc, #136]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	429a      	cmp	r2, r3
 800309a:	d001      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e032      	b.n	8003106 <HAL_RCC_ClockConfig+0x1b6>
=======
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e032      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4916      	ldr	r1, [pc, #88]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
=======
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4916      	ldr	r1, [pc, #88]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d009      	beq.n	80030de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ca:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	490e      	ldr	r1, [pc, #56]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
=======
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	490e      	ldr	r1, [pc, #56]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 80030de:	f000 f821 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	490a      	ldr	r1, [pc, #40]	; (8003118 <HAL_RCC_ClockConfig+0x1c8>)
 80030f0:	5ccb      	ldrb	r3, [r1, r3]
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	4a09      	ldr	r2, [pc, #36]	; (800311c <HAL_RCC_ClockConfig+0x1cc>)
 80030f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_RCC_ClockConfig+0x1d0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f8da 	bl	80022b8 <HAL_InitTick>

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40022000 	.word	0x40022000
 8003114:	40021000 	.word	0x40021000
 8003118:	08004d6c 	.word	0x08004d6c
 800311c:	200000d8 	.word	0x200000d8
 8003120:	200000dc 	.word	0x200000dc

08003124 <HAL_RCC_GetSysClockFreq>:
=======
 8002ea6:	f000 f821 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	490a      	ldr	r1, [pc, #40]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb8:	5ccb      	ldrb	r3, [r1, r3]
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff f8da 	bl	8002080 <HAL_InitTick>

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	08004748 	.word	0x08004748
 8002ee4:	200000a0 	.word	0x200000a0
 8002ee8:	200000a4 	.word	0x200000a4

08002eec <HAL_RCC_GetSysClockFreq>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8003124:	b490      	push	{r4, r7}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
=======
 8002eec:	b490      	push	{r4, r7}
 8002eee:	b08a      	sub	sp, #40	; 0x28
 8002ef0:	af00      	add	r7, sp, #0
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 800312a:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800312c:	1d3c      	adds	r4, r7, #4
 800312e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 8002ef2:	4b2a      	ldr	r3, [pc, #168]	; (8002f9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ef4:	1d3c      	adds	r4, r7, #4
 8002ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ef8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 8003134:	f240 2301 	movw	r3, #513	; 0x201
 8003138:	803b      	strh	r3, [r7, #0]
=======
 8002efc:	f240 2301 	movw	r3, #513	; 0x201
 8002f00:	803b      	strh	r3, [r7, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	2300      	movs	r3, #0
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
=======
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	2300      	movs	r3, #0
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 030c 	and.w	r3, r3, #12
 800315a:	2b04      	cmp	r3, #4
 800315c:	d002      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x40>
 800315e:	2b08      	cmp	r3, #8
 8003160:	d003      	beq.n	800316a <HAL_RCC_GetSysClockFreq+0x46>
 8003162:	e02d      	b.n	80031c0 <HAL_RCC_GetSysClockFreq+0x9c>
=======
 8002f16:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d002      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x40>
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d003      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x46>
 8002f2a:	e02d      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x9c>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003166:	623b      	str	r3, [r7, #32]
      break;
 8003168:	e02d      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f2e:	623b      	str	r3, [r7, #32]
      break;
 8002f30:	e02d      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	0c9b      	lsrs	r3, r3, #18
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003176:	4413      	add	r3, r2
 8003178:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800317c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x8c>
=======
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	0c9b      	lsrs	r3, r3, #18
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f3e:	4413      	add	r3, r2
 8002f40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d013      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x8c>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	0c5b      	lsrs	r3, r3, #17
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003196:	4413      	add	r3, r2
 8003198:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800319c:	61bb      	str	r3, [r7, #24]
=======
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	0c5b      	lsrs	r3, r3, #17
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f5e:	4413      	add	r3, r2
 8002f60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f64:	61bb      	str	r3, [r7, #24]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80031a2:	fb02 f203 	mul.w	r2, r2, r3
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
 80031ae:	e004      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x96>
=======
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f6a:	fb02 f203 	mul.w	r2, r2, r3
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
 8002f76:	e004      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x96>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	623b      	str	r3, [r7, #32]
      break;
 80031be:	e002      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	4a0b      	ldr	r2, [pc, #44]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	623b      	str	r3, [r7, #32]
      break;
 8002f86:	e002      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80031c2:	623b      	str	r3, [r7, #32]
      break;
 80031c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031c6:	6a3b      	ldr	r3, [r7, #32]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3728      	adds	r7, #40	; 0x28
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc90      	pop	{r4, r7}
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	08004d5c 	.word	0x08004d5c
 80031d8:	40021000 	.word	0x40021000
 80031dc:	007a1200 	.word	0x007a1200
 80031e0:	003d0900 	.word	0x003d0900

080031e4 <HAL_RCC_GetHCLKFreq>:
=======
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f8a:	623b      	str	r3, [r7, #32]
      break;
 8002f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3728      	adds	r7, #40	; 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc90      	pop	{r4, r7}
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	08004738 	.word	0x08004738
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	007a1200 	.word	0x007a1200
 8002fa8:	003d0900 	.word	0x003d0900

08002fac <HAL_RCC_GetHCLKFreq>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031e8:	4b02      	ldr	r3, [pc, #8]	; (80031f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	200000d8 	.word	0x200000d8

080031f8 <HAL_RCC_GetPCLK1Freq>:
=======
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb0:	4b02      	ldr	r3, [pc, #8]	; (8002fbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	200000a0 	.word	0x200000a0

08002fc0 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031fc:	f7ff fff2 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003200:	4602      	mov	r2, r0
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	0a1b      	lsrs	r3, r3, #8
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	4903      	ldr	r1, [pc, #12]	; (800321c <HAL_RCC_GetPCLK1Freq+0x24>)
 800320e:	5ccb      	ldrb	r3, [r1, r3]
 8003210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003214:	4618      	mov	r0, r3
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	08004d7c 	.word	0x08004d7c

08003220 <HAL_RCC_GetPCLK2Freq>:
=======
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fc4:	f7ff fff2 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	0a1b      	lsrs	r3, r3, #8
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4903      	ldr	r1, [pc, #12]	; (8002fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd6:	5ccb      	ldrb	r3, [r1, r3]
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	08004758 	.word	0x08004758

08002fe8 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003224:	f7ff ffde 	bl	80031e4 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	0adb      	lsrs	r3, r3, #11
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4903      	ldr	r1, [pc, #12]	; (8003244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	08004d7c 	.word	0x08004d7c

08003248 <RCC_Delay>:
=======
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fec:	f7ff ffde 	bl	8002fac <HAL_RCC_GetHCLKFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	0adb      	lsrs	r3, r3, #11
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	4903      	ldr	r1, [pc, #12]	; (800300c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ffe:	5ccb      	ldrb	r3, [r1, r3]
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000
 800300c:	08004758 	.word	0x08004758

08003010 <RCC_Delay>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <RCC_Delay+0x34>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <RCC_Delay+0x38>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0a5b      	lsrs	r3, r3, #9
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003264:	bf00      	nop
  }
  while (Delay --);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	60fa      	str	r2, [r7, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1f9      	bne.n	8003264 <RCC_Delay+0x1c>
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	200000d8 	.word	0x200000d8
 8003280:	10624dd3 	.word	0x10624dd3

08003284 <HAL_TIM_Base_Init>:
=======
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003018:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <RCC_Delay+0x34>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <RCC_Delay+0x38>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0a5b      	lsrs	r3, r3, #9
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800302c:	bf00      	nop
  }
  while (Delay --);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1e5a      	subs	r2, r3, #1
 8003032:	60fa      	str	r2, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f9      	bne.n	800302c <RCC_Delay+0x1c>
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	200000a0 	.word	0x200000a0
 8003048:	10624dd3 	.word	0x10624dd3

0800304c <HAL_TIM_Base_Init>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e041      	b.n	800331a <HAL_TIM_Base_Init+0x96>
=======
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e041      	b.n	80030e2 <HAL_TIM_Base_Init+0x96>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f7fe fd78 	bl	8001da0 <HAL_TIM_Base_MspInit>
=======
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fe fd72 	bl	8001b5c <HAL_TIM_Base_MspInit>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 fa6a 	bl	800379c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <HAL_TIM_Base_Start_IT>:
=======
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f000 fc1c 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_TIM_Base_Start_IT>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
=======
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d001      	beq.n	800333c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e035      	b.n	80033a8 <HAL_TIM_Base_Start_IT+0x84>
=======
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d001      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e035      	b.n	8003170 <HAL_TIM_Base_Start_IT+0x84>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <HAL_TIM_Base_Start_IT+0x90>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_TIM_Base_Start_IT+0x4e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003366:	d004      	beq.n	8003372 <HAL_TIM_Base_Start_IT+0x4e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <HAL_TIM_Base_Start_IT+0x94>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d111      	bne.n	8003396 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b06      	cmp	r3, #6
 8003382:	d010      	beq.n	80033a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003394:	e007      	b.n	80033a6 <HAL_TIM_Base_Start_IT+0x82>
=======
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a16      	ldr	r2, [pc, #88]	; (800317c <HAL_TIM_Base_Start_IT+0x90>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d009      	beq.n	800313a <HAL_TIM_Base_Start_IT+0x4e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312e:	d004      	beq.n	800313a <HAL_TIM_Base_Start_IT+0x4e>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a12      	ldr	r2, [pc, #72]	; (8003180 <HAL_TIM_Base_Start_IT+0x94>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d111      	bne.n	800315e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b06      	cmp	r3, #6
 800314a:	d010      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315c:	e007      	b.n	800316e <HAL_TIM_Base_Start_IT+0x82>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
=======
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40000400 	.word	0x40000400

080033bc <HAL_TIM_IRQHandler>:
=======
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400

08003184 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e041      	b.n	800321a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f839 	bl	8003222 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3304      	adds	r3, #4
 80031c0:	4619      	mov	r1, r3
 80031c2:	4610      	mov	r0, r2
 80031c4:	f000 fb80 	bl	80038c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d109      	bne.n	8003258 <HAL_TIM_PWM_Start+0x24>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b01      	cmp	r3, #1
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	e022      	b.n	800329e <HAL_TIM_PWM_Start+0x6a>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b04      	cmp	r3, #4
 800325c:	d109      	bne.n	8003272 <HAL_TIM_PWM_Start+0x3e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b01      	cmp	r3, #1
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e015      	b.n	800329e <HAL_TIM_PWM_Start+0x6a>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d109      	bne.n	800328c <HAL_TIM_PWM_Start+0x58>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e008      	b.n	800329e <HAL_TIM_PWM_Start+0x6a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b01      	cmp	r3, #1
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e059      	b.n	800335a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <HAL_TIM_PWM_Start+0x82>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032b4:	e013      	b.n	80032de <HAL_TIM_PWM_Start+0xaa>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d104      	bne.n	80032c6 <HAL_TIM_PWM_Start+0x92>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032c4:	e00b      	b.n	80032de <HAL_TIM_PWM_Start+0xaa>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_PWM_Start+0xa2>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d4:	e003      	b.n	80032de <HAL_TIM_PWM_Start+0xaa>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2201      	movs	r2, #1
 80032e4:	6839      	ldr	r1, [r7, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fd64 	bl	8003db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <HAL_TIM_PWM_Start+0x130>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d107      	bne.n	8003306 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003304:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a16      	ldr	r2, [pc, #88]	; (8003364 <HAL_TIM_PWM_Start+0x130>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_TIM_PWM_Start+0xf0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003318:	d004      	beq.n	8003324 <HAL_TIM_PWM_Start+0xf0>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <HAL_TIM_PWM_Start+0x134>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d111      	bne.n	8003348 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b06      	cmp	r3, #6
 8003334:	d010      	beq.n	8003358 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003346:	e007      	b.n	8003358 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400

0800336c <HAL_TIM_IRQHandler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d122      	bne.n	8003418 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d11b      	bne.n	8003418 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0202 	mvn.w	r2, #2
 80033e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_TIM_IRQHandler+0x4a>
=======
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d122      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b02      	cmp	r3, #2
 800338e:	d11b      	bne.n	80033c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0202 	mvn.w	r2, #2
 8003398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f9b1 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
 8003404:	e005      	b.n	8003412 <HAL_TIM_IRQHandler+0x56>
=======
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fa6f 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 80033b4:	e005      	b.n	80033c2 <HAL_TIM_IRQHandler+0x56>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f9a4 	bl	8003754 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f9b3 	bl	8003778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	771a      	strb	r2, [r3, #28]
=======
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa62 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fa71 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	771a      	strb	r2, [r3, #28]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d122      	bne.n	800346c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b04      	cmp	r3, #4
 8003432:	d11b      	bne.n	800346c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0204 	mvn.w	r2, #4
 800343c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_TIM_IRQHandler+0x9e>
=======
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d122      	bne.n	800341c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d11b      	bne.n	800341c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0204 	mvn.w	r2, #4
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f987 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
 8003458:	e005      	b.n	8003466 <HAL_TIM_IRQHandler+0xaa>
=======
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa45 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f97a 	bl	8003754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f989 	bl	8003778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	771a      	strb	r2, [r3, #28]
=======
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa38 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fa47 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b08      	cmp	r3, #8
 8003478:	d122      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b08      	cmp	r3, #8
 8003486:	d11b      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0208 	mvn.w	r2, #8
 8003490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2204      	movs	r2, #4
 8003496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_IRQHandler+0xf2>
=======
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b08      	cmp	r3, #8
 8003428:	d122      	bne.n	8003470 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d11b      	bne.n	8003470 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0208 	mvn.w	r2, #8
 8003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2204      	movs	r2, #4
 8003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_TIM_IRQHandler+0xf2>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f95d 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
 80034ac:	e005      	b.n	80034ba <HAL_TIM_IRQHandler+0xfe>
=======
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa1b 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 800345c:	e005      	b.n	800346a <HAL_TIM_IRQHandler+0xfe>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f950 	bl	8003754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f95f 	bl	8003778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	771a      	strb	r2, [r3, #28]
=======
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fa0e 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fa1d 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	771a      	strb	r2, [r3, #28]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b10      	cmp	r3, #16
 80034cc:	d122      	bne.n	8003514 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0310 	and.w	r3, r3, #16
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d11b      	bne.n	8003514 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0210 	mvn.w	r2, #16
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2208      	movs	r2, #8
 80034ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0x146>
=======
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b10      	cmp	r3, #16
 800347c:	d122      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b10      	cmp	r3, #16
 800348a:	d11b      	bne.n	80034c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0210 	mvn.w	r2, #16
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2208      	movs	r2, #8
 800349a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x146>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f933 	bl	8003766 <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0x152>
=======
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f9f1 	bl	8003892 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e005      	b.n	80034be <HAL_TIM_IRQHandler+0x152>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f926 	bl	8003754 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f935 	bl	8003778 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
=======
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f9e4 	bl	8003880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f9f3 	bl	80038a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	771a      	strb	r2, [r3, #28]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d10e      	bne.n	8003540 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0201 	mvn.w	r2, #1
 8003538:	611a      	str	r2, [r3, #16]
=======
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10e      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d107      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0201 	mvn.w	r2, #1
 80034e8:	611a      	str	r2, [r3, #16]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fe f9aa 	bl	8001894 <HAL_TIM_PeriodElapsedCallback>
=======
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fe f846 	bl	800157c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354a:	2b80      	cmp	r3, #128	; 0x80
 800354c:	d10e      	bne.n	800356c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003558:	2b80      	cmp	r3, #128	; 0x80
 800355a:	d107      	bne.n	800356c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003564:	611a      	str	r2, [r3, #16]
=======
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d10e      	bne.n	800351c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b80      	cmp	r3, #128	; 0x80
 800350a:	d107      	bne.n	800351c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003514:	611a      	str	r2, [r3, #16]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fa67 	bl	8003a3a <HAL_TIMEx_BreakCallback>
=======
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fcd1 	bl	8003ebe <HAL_TIMEx_BreakCallback>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	d10e      	bne.n	8003598 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d107      	bne.n	8003598 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003590:	611a      	str	r2, [r3, #16]
=======
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003540:	611a      	str	r2, [r3, #16]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8f9 	bl	800378a <HAL_TIM_TriggerCallback>
=======
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9b7 	bl	80038b6 <HAL_TIM_TriggerCallback>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d10e      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d107      	bne.n	80035c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0220 	mvn.w	r2, #32
 80035bc:	611a      	str	r2, [r3, #16]
=======
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b20      	cmp	r3, #32
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b20      	cmp	r3, #32
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0220 	mvn.w	r2, #32
 800356c:	611a      	str	r2, [r3, #16]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fa32 	bl	8003a28 <HAL_TIMEx_CommutCallback>
=======
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 fc9c 	bl	8003eac <HAL_TIMEx_CommutCallback>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_TIM_ConfigClockSource>:
=======
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358e:	2b01      	cmp	r3, #1
 8003590:	d101      	bne.n	8003596 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003592:	2302      	movs	r3, #2
 8003594:	e0ac      	b.n	80036f0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b0c      	cmp	r3, #12
 80035a2:	f200 809f 	bhi.w	80036e4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80035a6:	a201      	add	r2, pc, #4	; (adr r2, 80035ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	080035e1 	.word	0x080035e1
 80035b0:	080036e5 	.word	0x080036e5
 80035b4:	080036e5 	.word	0x080036e5
 80035b8:	080036e5 	.word	0x080036e5
 80035bc:	08003621 	.word	0x08003621
 80035c0:	080036e5 	.word	0x080036e5
 80035c4:	080036e5 	.word	0x080036e5
 80035c8:	080036e5 	.word	0x080036e5
 80035cc:	08003663 	.word	0x08003663
 80035d0:	080036e5 	.word	0x080036e5
 80035d4:	080036e5 	.word	0x080036e5
 80035d8:	080036e5 	.word	0x080036e5
 80035dc:	080036a3 	.word	0x080036a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 f9c6 	bl	8003978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0208 	orr.w	r2, r2, #8
 80035fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0204 	bic.w	r2, r2, #4
 800360a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6999      	ldr	r1, [r3, #24]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	691a      	ldr	r2, [r3, #16]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	619a      	str	r2, [r3, #24]
      break;
 800361e:	e062      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fa0c 	bl	8003a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699a      	ldr	r2, [r3, #24]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6999      	ldr	r1, [r3, #24]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	021a      	lsls	r2, r3, #8
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	619a      	str	r2, [r3, #24]
      break;
 8003660:	e041      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fa55 	bl	8003b18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69da      	ldr	r2, [r3, #28]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0208 	orr.w	r2, r2, #8
 800367c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0204 	bic.w	r2, r2, #4
 800368c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69d9      	ldr	r1, [r3, #28]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	61da      	str	r2, [r3, #28]
      break;
 80036a0:	e021      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fa9f 	bl	8003bec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69da      	ldr	r2, [r3, #28]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69d9      	ldr	r1, [r3, #28]
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	021a      	lsls	r2, r3, #8
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	61da      	str	r2, [r3, #28]
      break;
 80036e2:	e000      	b.n	80036e6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80036e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_TIM_ConfigClockSource>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
=======
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_TIM_ConfigClockSource+0x18>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0b3      	b.n	800374c <HAL_TIM_ConfigClockSource+0x180>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_TIM_ConfigClockSource+0x18>
 800370c:	2302      	movs	r3, #2
 800370e:	e0b3      	b.n	8003878 <HAL_TIM_ConfigClockSource+0x180>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003602:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800360a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361c:	d03e      	beq.n	800369c <HAL_TIM_ConfigClockSource+0xd0>
 800361e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003622:	f200 8087 	bhi.w	8003734 <HAL_TIM_ConfigClockSource+0x168>
 8003626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362a:	f000 8085 	beq.w	8003738 <HAL_TIM_ConfigClockSource+0x16c>
 800362e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003632:	d87f      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 8003634:	2b70      	cmp	r3, #112	; 0x70
 8003636:	d01a      	beq.n	800366e <HAL_TIM_ConfigClockSource+0xa2>
 8003638:	2b70      	cmp	r3, #112	; 0x70
 800363a:	d87b      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 800363c:	2b60      	cmp	r3, #96	; 0x60
 800363e:	d050      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x116>
 8003640:	2b60      	cmp	r3, #96	; 0x60
 8003642:	d877      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 8003644:	2b50      	cmp	r3, #80	; 0x50
 8003646:	d03c      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0xf6>
 8003648:	2b50      	cmp	r3, #80	; 0x50
 800364a:	d873      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d058      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x136>
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	d86f      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 8003654:	2b30      	cmp	r3, #48	; 0x30
 8003656:	d064      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0x156>
 8003658:	2b30      	cmp	r3, #48	; 0x30
 800365a:	d86b      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 800365c:	2b20      	cmp	r3, #32
 800365e:	d060      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0x156>
 8003660:	2b20      	cmp	r3, #32
 8003662:	d867      	bhi.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d05c      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0x156>
 8003668:	2b10      	cmp	r3, #16
 800366a:	d05a      	beq.n	8003722 <HAL_TIM_ConfigClockSource+0x156>
=======
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800372e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003736:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003748:	d03e      	beq.n	80037c8 <HAL_TIM_ConfigClockSource+0xd0>
 800374a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800374e:	f200 8087 	bhi.w	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003756:	f000 8085 	beq.w	8003864 <HAL_TIM_ConfigClockSource+0x16c>
 800375a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375e:	d87f      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003760:	2b70      	cmp	r3, #112	; 0x70
 8003762:	d01a      	beq.n	800379a <HAL_TIM_ConfigClockSource+0xa2>
 8003764:	2b70      	cmp	r3, #112	; 0x70
 8003766:	d87b      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003768:	2b60      	cmp	r3, #96	; 0x60
 800376a:	d050      	beq.n	800380e <HAL_TIM_ConfigClockSource+0x116>
 800376c:	2b60      	cmp	r3, #96	; 0x60
 800376e:	d877      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003770:	2b50      	cmp	r3, #80	; 0x50
 8003772:	d03c      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0xf6>
 8003774:	2b50      	cmp	r3, #80	; 0x50
 8003776:	d873      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d058      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x136>
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d86f      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003780:	2b30      	cmp	r3, #48	; 0x30
 8003782:	d064      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x156>
 8003784:	2b30      	cmp	r3, #48	; 0x30
 8003786:	d86b      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003788:	2b20      	cmp	r3, #32
 800378a:	d060      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x156>
 800378c:	2b20      	cmp	r3, #32
 800378e:	d867      	bhi.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d05c      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x156>
 8003794:	2b10      	cmp	r3, #16
 8003796:	d05a      	beq.n	800384e <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
<<<<<<< HEAD
 800366c:	e062      	b.n	8003734 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6899      	ldr	r1, [r3, #8]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f000 f95c 	bl	800393a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003690:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	609a      	str	r2, [r3, #8]
      break;
 800369a:	e04e      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6899      	ldr	r1, [r3, #8]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f000 f945 	bl	800393a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036be:	609a      	str	r2, [r3, #8]
      break;
 80036c0:	e03b      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f000 f8bc 	bl	800384c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2150      	movs	r1, #80	; 0x50
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f913 	bl	8003906 <TIM_ITRx_SetConfig>
      break;
 80036e0:	e02b      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	461a      	mov	r2, r3
 80036f0:	f000 f8da 	bl	80038a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2160      	movs	r1, #96	; 0x60
 80036fa:	4618      	mov	r0, r3
 80036fc:	f000 f903 	bl	8003906 <TIM_ITRx_SetConfig>
      break;
 8003700:	e01b      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	461a      	mov	r2, r3
 8003710:	f000 f89c 	bl	800384c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2140      	movs	r1, #64	; 0x40
 800371a:	4618      	mov	r0, r3
 800371c:	f000 f8f3 	bl	8003906 <TIM_ITRx_SetConfig>
      break;
 8003720:	e00b      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4619      	mov	r1, r3
 800372c:	4610      	mov	r0, r2
 800372e:	f000 f8ea 	bl	8003906 <TIM_ITRx_SetConfig>
        break;
 8003732:	e002      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003734:	bf00      	nop
 8003736:	e000      	b.n	800373a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003738:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8003798:	e062      	b.n	8003860 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6818      	ldr	r0, [r3, #0]
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6899      	ldr	r1, [r3, #8]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f000 fae4 	bl	8003d76 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	609a      	str	r2, [r3, #8]
      break;
 80037c6:	e04e      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f000 facd 	bl	8003d76 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ea:	609a      	str	r2, [r3, #8]
      break;
 80037ec:	e03b      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6859      	ldr	r1, [r3, #4]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	461a      	mov	r2, r3
 80037fc:	f000 fa44 	bl	8003c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2150      	movs	r1, #80	; 0x50
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fa9b 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 800380c:	e02b      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	461a      	mov	r2, r3
 800381c:	f000 fa62 	bl	8003ce4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2160      	movs	r1, #96	; 0x60
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fa8b 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 800382c:	e01b      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	461a      	mov	r2, r3
 800383c:	f000 fa24 	bl	8003c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2140      	movs	r1, #64	; 0x40
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fa7b 	bl	8003d42 <TIM_ITRx_SetConfig>
      break;
 800384c:	e00b      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f000 fa72 	bl	8003d42 <TIM_ITRx_SetConfig>
        break;
 800385e:	e002      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003860:	bf00      	nop
 8003862:	e000      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003864:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
=======
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr

08003892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr

<<<<<<< HEAD
08003766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
=======
080038b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

<<<<<<< HEAD
08003778 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <TIM_Base_SetConfig>:
=======
080038c8 <TIM_Base_SetConfig>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a25      	ldr	r2, [pc, #148]	; (8003844 <TIM_Base_SetConfig+0xa8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d007      	beq.n	80037c4 <TIM_Base_SetConfig+0x28>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ba:	d003      	beq.n	80037c4 <TIM_Base_SetConfig+0x28>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a22      	ldr	r2, [pc, #136]	; (8003848 <TIM_Base_SetConfig+0xac>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d108      	bne.n	80037d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1a      	ldr	r2, [pc, #104]	; (8003844 <TIM_Base_SetConfig+0xa8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <TIM_Base_SetConfig+0x52>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e4:	d003      	beq.n	80037ee <TIM_Base_SetConfig+0x52>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a17      	ldr	r2, [pc, #92]	; (8003848 <TIM_Base_SetConfig+0xac>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d108      	bne.n	8003800 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
=======
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a25      	ldr	r2, [pc, #148]	; (8003970 <TIM_Base_SetConfig+0xa8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d007      	beq.n	80038f0 <TIM_Base_SetConfig+0x28>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e6:	d003      	beq.n	80038f0 <TIM_Base_SetConfig+0x28>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a22      	ldr	r2, [pc, #136]	; (8003974 <TIM_Base_SetConfig+0xac>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d108      	bne.n	8003902 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1a      	ldr	r2, [pc, #104]	; (8003970 <TIM_Base_SetConfig+0xa8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <TIM_Base_SetConfig+0x52>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0x52>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a17      	ldr	r2, [pc, #92]	; (8003974 <TIM_Base_SetConfig+0xac>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a07      	ldr	r2, [pc, #28]	; (8003844 <TIM_Base_SetConfig+0xa8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d103      	bne.n	8003834 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a07      	ldr	r2, [pc, #28]	; (8003970 <TIM_Base_SetConfig+0xa8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	615a      	str	r2, [r3, #20]
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40000400 	.word	0x40000400

0800384c <TIM_TI1_ConfigInputStage>:
=======
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400

08003978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f023 0201 	bic.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f023 0302 	bic.w	r3, r3, #2
 80039c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <TIM_OC1_SetConfig+0xc8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10c      	bne.n	80039ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 0308 	bic.w	r3, r3, #8
 80039da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <TIM_OC1_SetConfig+0xc8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d111      	bne.n	8003a1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	621a      	str	r2, [r3, #32]
}
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40012c00 	.word	0x40012c00

08003a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f023 0210 	bic.w	r2, r3, #16
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f023 0320 	bic.w	r3, r3, #32
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <TIM_OC2_SetConfig+0xd0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10d      	bne.n	8003ac0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a14      	ldr	r2, [pc, #80]	; (8003b14 <TIM_OC2_SetConfig+0xd0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d113      	bne.n	8003af0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	40012c00 	.word	0x40012c00

08003b18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <TIM_OC3_SetConfig+0xd0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10d      	bne.n	8003b92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a14      	ldr	r2, [pc, #80]	; (8003be8 <TIM_OC3_SetConfig+0xd0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d113      	bne.n	8003bc2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	621a      	str	r2, [r3, #32]
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40012c00 	.word	0x40012c00

08003bec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	031b      	lsls	r3, r3, #12
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0f      	ldr	r2, [pc, #60]	; (8003c84 <TIM_OC4_SetConfig+0x98>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d109      	bne.n	8003c60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	019b      	lsls	r3, r3, #6
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	621a      	str	r2, [r3, #32]
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	40012c00 	.word	0x40012c00

08003c88 <TIM_TI1_ConfigInputStage>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
=======
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f023 0201 	bic.w	r2, r3, #1
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f023 030a 	bic.w	r3, r3, #10
 8003888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <TIM_TI2_ConfigInputStage>:
=======
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f023 0201 	bic.w	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f023 030a 	bic.w	r3, r3, #10
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	621a      	str	r2, [r3, #32]
}
 8003cda:	bf00      	nop
 8003cdc:	371c      	adds	r7, #28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <TIM_TI2_ConfigInputStage>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
=======
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f023 0210 	bic.w	r2, r3, #16
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	031b      	lsls	r3, r3, #12
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	621a      	str	r2, [r3, #32]
}
 80038fc:	bf00      	nop
 80038fe:	371c      	adds	r7, #28
 8003900:	46bd      	mov	sp, r7
 8003902:	bc80      	pop	{r7}
 8003904:	4770      	bx	lr

08003906 <TIM_ITRx_SetConfig>:
=======
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f023 0210 	bic.w	r2, r3, #16
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	031b      	lsls	r3, r3, #12
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <TIM_ITRx_SetConfig>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
=======
 8003d42:	b480      	push	{r7}
 8003d44:	b085      	sub	sp, #20
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	f043 0307 	orr.w	r3, r3, #7
 8003928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <TIM_ETR_SetConfig>:
=======
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f043 0307 	orr.w	r3, r3, #7
 8003d64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	609a      	str	r2, [r3, #8]
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <TIM_ETR_SetConfig>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 800393a:	b480      	push	{r7}
 800393c:	b087      	sub	sp, #28
 800393e:	af00      	add	r7, sp, #0
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	021a      	lsls	r2, r3, #8
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	431a      	orrs	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	4313      	orrs	r3, r2
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	609a      	str	r2, [r3, #8]
}
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr

08003978 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8003d76:	b480      	push	{r7}
 8003d78:	b087      	sub	sp, #28
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	607a      	str	r2, [r7, #4]
 8003d82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	021a      	lsls	r2, r3, #8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	609a      	str	r2, [r3, #8]
}
 8003daa:	bf00      	nop
 8003dac:	371c      	adds	r7, #28
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bc80      	pop	{r7}
 8003db2:	4770      	bx	lr

08003db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1a      	ldr	r2, [r3, #32]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
=======
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800398c:	2302      	movs	r3, #2
 800398e:	e041      	b.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039dc:	d004      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a10      	ldr	r2, [pc, #64]	; (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d10c      	bne.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	609a      	str	r2, [r3, #8]
=======
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e041      	b.n	8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d009      	beq.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d004      	beq.n	8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d10c      	bne.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	609a      	str	r2, [r3, #8]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bc80      	pop	{r7}
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40000400 	.word	0x40000400

08003a28 <HAL_TIMEx_CommutCallback>:
=======
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40000400 	.word	0x40000400

08003eac <HAL_TIMEx_CommutCallback>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
=======
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIMEx_BreakCallback>:
=======
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr

08003ebe <HAL_TIMEx_BreakCallback>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
=======
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <HAL_UART_Init>:
=======
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr

08003ed0 <HAL_UART_Init>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e03f      	b.n	8003ade <HAL_UART_Init+0x92>
=======
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e03f      	b.n	8003f62 <HAL_UART_Init+0x92>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fe f9b8 	bl	8001de8 <HAL_UART_MspInit>
=======
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd fe84 	bl	8001c04 <HAL_UART_MspInit>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	; 0x24
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fc25 	bl	80042e0 <UART_SetConfig>
=======
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fb49 	bl	80045ac <UART_SetConfig>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b08a      	sub	sp, #40	; 0x28
 8003aea:	af02      	add	r7, sp, #8
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	4613      	mov	r3, r2
 8003af4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b20      	cmp	r3, #32
 8003b04:	d17c      	bne.n	8003c00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <HAL_UART_Transmit+0x2c>
 8003b0c:	88fb      	ldrh	r3, [r7, #6]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e075      	b.n	8003c02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_UART_Transmit+0x3e>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e06e      	b.n	8003c02 <HAL_UART_Transmit+0x11c>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2221      	movs	r2, #33	; 0x21
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b3a:	f7fe fbff 	bl	800233c <HAL_GetTick>
 8003b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	88fa      	ldrh	r2, [r7, #6]
 8003b4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b54:	d108      	bne.n	8003b68 <HAL_UART_Transmit+0x82>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	e003      	b.n	8003b70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b78:	e02a      	b.n	8003bd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2180      	movs	r1, #128	; 0x80
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fa11 	bl	8003fac <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e036      	b.n	8003c02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10b      	bne.n	8003bb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	3302      	adds	r3, #2
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	e007      	b.n	8003bc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1cf      	bne.n	8003b7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2140      	movs	r1, #64	; 0x40
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f9e1 	bl	8003fac <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e006      	b.n	8003c02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3720      	adds	r7, #32
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_UART_IRQHandler>:
=======
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_UART_IRQHandler>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10d      	bne.n	8003c5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_UART_IRQHandler+0x52>
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa99 	bl	800418e <UART_Receive_IT>
      return;
 8003c5c:	e17b      	b.n	8003f56 <HAL_UART_IRQHandler+0x34a>
=======
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10d      	bne.n	8003fbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_UART_IRQHandler+0x52>
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fa4f 	bl	800445a <UART_Receive_IT>
      return;
 8003fbc:	e17b      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
<<<<<<< HEAD
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80b1 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x1bc>
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d105      	bne.n	8003c7c <HAL_UART_IRQHandler+0x70>
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80a6 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_UART_IRQHandler+0x90>
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f043 0201 	orr.w	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80b1 	beq.w	8004128 <HAL_UART_IRQHandler+0x1bc>
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d105      	bne.n	8003fdc <HAL_UART_IRQHandler+0x70>
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 80a6 	beq.w	8004128 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_UART_IRQHandler+0x90>
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f043 0201 	orr.w	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <HAL_UART_IRQHandler+0xb0>
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f043 0202 	orr.w	r2, r3, #2
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_UART_IRQHandler+0xb0>
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	f043 0202 	orr.w	r2, r3, #2
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_UART_IRQHandler+0xd0>
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f043 0204 	orr.w	r2, r3, #4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_UART_IRQHandler+0xd0>
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f043 0204 	orr.w	r2, r3, #4
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
<<<<<<< HEAD
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00f      	beq.n	8003d06 <HAL_UART_IRQHandler+0xfa>
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d104      	bne.n	8003cfa <HAL_UART_IRQHandler+0xee>
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f043 0208 	orr.w	r2, r3, #8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00f      	beq.n	8004066 <HAL_UART_IRQHandler+0xfa>
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d104      	bne.n	800405a <HAL_UART_IRQHandler+0xee>
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f043 0208 	orr.w	r2, r3, #8
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 811e 	beq.w	8003f4c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <HAL_UART_IRQHandler+0x11e>
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fa32 	bl	800418e <UART_Receive_IT>
=======
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 811e 	beq.w	80042ac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_UART_IRQHandler+0x11e>
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f9e8 	bl	800445a <UART_Receive_IT>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <HAL_UART_IRQHandler+0x146>
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d031      	beq.n	8003db6 <HAL_UART_IRQHandler+0x1aa>
=======
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf14      	ite	ne
 8004098:	2301      	movne	r3, #1
 800409a:	2300      	moveq	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <HAL_UART_IRQHandler+0x146>
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d031      	beq.n	8004116 <HAL_UART_IRQHandler+0x1aa>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f974 	bl	8004040 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d023      	beq.n	8003dae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d013      	beq.n	8003da6 <HAL_UART_IRQHandler+0x19a>
=======
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f92a 	bl	800430c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d023      	beq.n	800410e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695a      	ldr	r2, [r3, #20]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d013      	beq.n	8004106 <HAL_UART_IRQHandler+0x19a>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	4a76      	ldr	r2, [pc, #472]	; (8003f5c <HAL_UART_IRQHandler+0x350>)
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe fc28 	bl	80025e0 <HAL_DMA_Abort_IT>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003da0:	4610      	mov	r0, r2
 8003da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da4:	e00e      	b.n	8003dc4 <HAL_UART_IRQHandler+0x1b8>
=======
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	4a76      	ldr	r2, [pc, #472]	; (80042bc <HAL_UART_IRQHandler+0x350>)
 80040e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe f95c 	bl	80023a8 <HAL_DMA_Abort_IT>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d016      	beq.n	8004124 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004100:	4610      	mov	r0, r2
 8004102:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	e00e      	b.n	8004124 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f8ec 	bl	8003f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	e00a      	b.n	8003dc4 <HAL_UART_IRQHandler+0x1b8>
=======
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f8ec 	bl	80042e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	e00a      	b.n	8004124 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8e8 	bl	8003f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e006      	b.n	8003dc4 <HAL_UART_IRQHandler+0x1b8>
=======
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8e8 	bl	80042e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004114:	e006      	b.n	8004124 <HAL_UART_IRQHandler+0x1b8>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f8e4 	bl	8003f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dc2:	e0c3      	b.n	8003f4c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	bf00      	nop
    return;
 8003dc6:	e0c1      	b.n	8003f4c <HAL_UART_IRQHandler+0x340>
=======
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8e4 	bl	80042e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004122:	e0c3      	b.n	80042ac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	bf00      	nop
    return;
 8004126:	e0c1      	b.n	80042ac <HAL_UART_IRQHandler+0x340>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	f040 80a1 	bne.w	8003f14 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 809b 	beq.w	8003f14 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8095 	beq.w	8003f14 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04e      	beq.n	8003eac <HAL_UART_IRQHandler+0x2a0>
=======
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	2b01      	cmp	r3, #1
 800412e:	f040 80a1 	bne.w	8004274 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 809b 	beq.w	8004274 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8095 	beq.w	8004274 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d04e      	beq.n	800420c <HAL_UART_IRQHandler+0x2a0>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003e18:	8a3b      	ldrh	r3, [r7, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8098 	beq.w	8003f50 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e24:	8a3a      	ldrh	r2, [r7, #16]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	f080 8092 	bcs.w	8003f50 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8a3a      	ldrh	r2, [r7, #16]
 8003e30:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d02b      	beq.n	8003e94 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e4a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	615a      	str	r2, [r3, #20]
=======
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004178:	8a3b      	ldrh	r3, [r7, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 8098 	beq.w	80042b0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004184:	8a3a      	ldrh	r2, [r7, #16]
 8004186:	429a      	cmp	r2, r3
 8004188:	f080 8092 	bcs.w	80042b0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8a3a      	ldrh	r2, [r7, #16]
 8004190:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b20      	cmp	r3, #32
 800419a:	d02b      	beq.n	80041f4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041aa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	615a      	str	r2, [r3, #20]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0210 	bic.w	r2, r2, #16
 8003e88:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fb6b 	bl	800256a <HAL_DMA_Abort>
=======
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0210 	bic.w	r2, r2, #16
 80041e8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe f89f 	bl	8002332 <HAL_DMA_Abort>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f876 	bl	8003f96 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003eaa:	e051      	b.n	8003f50 <HAL_UART_IRQHandler+0x344>
=======
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	b29b      	uxth	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f876 	bl	80042f6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800420a:	e051      	b.n	80042b0 <HAL_UART_IRQHandler+0x344>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d047      	beq.n	8003f54 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003ec4:	8a7b      	ldrh	r3, [r7, #18]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d044      	beq.n	8003f54 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ed8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0201 	bic.w	r2, r2, #1
 8003ee8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0210 	bic.w	r2, r2, #16
 8003f06:	60da      	str	r2, [r3, #12]
=======
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004214:	b29b      	uxth	r3, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d047      	beq.n	80042b4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004224:	8a7b      	ldrh	r3, [r7, #18]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d044      	beq.n	80042b4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004238:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0210 	bic.w	r2, r2, #16
 8004266:	60da      	str	r2, [r3, #12]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8003f08:	8a7b      	ldrh	r3, [r7, #18]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f842 	bl	8003f96 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f12:	e01f      	b.n	8003f54 <HAL_UART_IRQHandler+0x348>
=======
 8004268:	8a7b      	ldrh	r3, [r7, #18]
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f842 	bl	80042f6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004272:	e01f      	b.n	80042b4 <HAL_UART_IRQHandler+0x348>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <HAL_UART_IRQHandler+0x324>
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f8c9 	bl	80040c0 <UART_Transmit_IT>
    return;
 8003f2e:	e012      	b.n	8003f56 <HAL_UART_IRQHandler+0x34a>
=======
 8004274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_UART_IRQHandler+0x324>
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f87f 	bl	800438c <UART_Transmit_IT>
    return;
 800428e:	e012      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <HAL_UART_IRQHandler+0x34a>
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f90a 	bl	800415e <UART_EndTransmit_IT>
    return;
 8003f4a:	e004      	b.n	8003f56 <HAL_UART_IRQHandler+0x34a>
    return;
 8003f4c:	bf00      	nop
 8003f4e:	e002      	b.n	8003f56 <HAL_UART_IRQHandler+0x34a>
      return;
 8003f50:	bf00      	nop
 8003f52:	e000      	b.n	8003f56 <HAL_UART_IRQHandler+0x34a>
      return;
 8003f54:	bf00      	nop
  }
}
 8003f56:	3728      	adds	r7, #40	; 0x28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	08004099 	.word	0x08004099

08003f60 <HAL_UART_TxCpltCallback>:
=======
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00d      	beq.n	80042b6 <HAL_UART_IRQHandler+0x34a>
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f8c0 	bl	800442a <UART_EndTransmit_IT>
    return;
 80042aa:	e004      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
    return;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_UART_IRQHandler+0x34a>
      return;
 80042b4:	bf00      	nop
  }
}
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	08004365 	.word	0x08004365

080042c0 <HAL_UART_TxCpltCallback>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
=======
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bc80      	pop	{r7}
 8003f70:	4770      	bx	lr

08003f72 <HAL_UART_RxCpltCallback>:
=======
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr

080042d2 <HAL_UART_RxCpltCallback>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
=======
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <HAL_UART_ErrorCallback>:
=======
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr

080042e4 <HAL_UART_ErrorCallback>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
=======
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <HAL_UARTEx_RxEventCallback>:
=======
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <HAL_UARTEx_RxEventCallback>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	807b      	strh	r3, [r7, #2]
=======
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	460b      	mov	r3, r1
 8004300:	807b      	strh	r3, [r7, #2]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fbc:	e02c      	b.n	8004018 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d028      	beq.n	8004018 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fcc:	f7fe f9b6 	bl	800233c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d21d      	bcs.n	8004018 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695a      	ldr	r2, [r3, #20]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e00f      	b.n	8004038 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4013      	ands	r3, r2
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	429a      	cmp	r2, r3
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	429a      	cmp	r2, r3
 8004034:	d0c3      	beq.n	8003fbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_EndRxTransfer>:
=======
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <UART_EndRxTransfer>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004056:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	2b01      	cmp	r3, #1
 800406e:	d107      	bne.n	8004080 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0210 	bic.w	r2, r2, #16
 800407e:	60da      	str	r2, [r3, #12]
=======
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004322:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0201 	bic.w	r2, r2, #1
 8004332:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	2b01      	cmp	r3, #1
 800433a:	d107      	bne.n	800434c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0210 	bic.w	r2, r2, #16
 800434a:	60da      	str	r2, [r3, #12]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr

08004098 <UART_DMAAbortOnError>:
=======
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	631a      	str	r2, [r3, #48]	; 0x30
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <UART_DMAAbortOnError>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff ff66 	bl	8003f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b8:	bf00      	nop
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <UART_Transmit_IT>:
=======
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f7ff ffb0 	bl	80042e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_Transmit_IT>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
=======
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b21      	cmp	r3, #33	; 0x21
 80040d2:	d13e      	bne.n	8004152 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d114      	bne.n	8004108 <UART_Transmit_IT+0x48>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d110      	bne.n	8004108 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	1c9a      	adds	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	621a      	str	r2, [r3, #32]
 8004106:	e008      	b.n	800411a <UART_Transmit_IT+0x5a>
=======
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b21      	cmp	r3, #33	; 0x21
 800439e:	d13e      	bne.n	800441e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a8:	d114      	bne.n	80043d4 <UART_Transmit_IT+0x48>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d110      	bne.n	80043d4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	1c9a      	adds	r2, r3, #2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	621a      	str	r2, [r3, #32]
 80043d2:	e008      	b.n	80043e6 <UART_Transmit_IT+0x5a>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	1c59      	adds	r1, r3, #1
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	6211      	str	r1, [r2, #32]
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29b      	uxth	r3, r3
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4619      	mov	r1, r3
 8004128:	84d1      	strh	r1, [r2, #38]	; 0x26
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800413c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800414c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e000      	b.n	8004154 <UART_Transmit_IT+0x94>
=======
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	1c59      	adds	r1, r3, #1
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6211      	str	r1, [r2, #32]
 80043de:	781a      	ldrb	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4619      	mov	r1, r3
 80043f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004408:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68da      	ldr	r2, [r3, #12]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004418:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e000      	b.n	8004420 <UART_Transmit_IT+0x94>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <UART_EndTransmit_IT>:
=======
 800441e:	2302      	movs	r3, #2
  }
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <UART_EndTransmit_IT>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004174:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004440:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff feee 	bl	8003f60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <UART_Receive_IT>:
=======
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ff38 	bl	80042c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <UART_Receive_IT>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800418e:	b580      	push	{r7, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
=======
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b22      	cmp	r3, #34	; 0x22
 80041a0:	f040 8099 	bne.w	80042d6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ac:	d117      	bne.n	80041de <UART_Receive_IT+0x50>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d113      	bne.n	80041de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	1c9a      	adds	r2, r3, #2
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	; 0x28
 80041dc:	e026      	b.n	800422c <UART_Receive_IT+0x9e>
=======
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b22      	cmp	r3, #34	; 0x22
 800446c:	f040 8099 	bne.w	80045a2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004478:	d117      	bne.n	80044aa <UART_Receive_IT+0x50>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d113      	bne.n	80044aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	b29b      	uxth	r3, r3
 8004494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004498:	b29a      	uxth	r2, r3
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	1c9a      	adds	r2, r3, #2
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28
 80044a8:	e026      	b.n	80044f8 <UART_Receive_IT+0x9e>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f0:	d007      	beq.n	8004202 <UART_Receive_IT+0x74>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <UART_Receive_IT+0x82>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e008      	b.n	8004222 <UART_Receive_IT+0x94>
=======
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044bc:	d007      	beq.n	80044ce <UART_Receive_IT+0x74>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <UART_Receive_IT+0x82>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e008      	b.n	80044ee <UART_Receive_IT+0x94>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800421c:	b2da      	uxtb	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29b      	uxth	r3, r3
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	4619      	mov	r1, r3
 800423a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800423c:	2b00      	cmp	r3, #0
 800423e:	d148      	bne.n	80042d2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0220 	bic.w	r2, r2, #32
 800424e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800425e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29b      	uxth	r3, r3
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	4619      	mov	r1, r3
 8004506:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004508:	2b00      	cmp	r3, #0
 800450a:	d148      	bne.n	800459e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0220 	bic.w	r2, r2, #32
 800451a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800452a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	2b01      	cmp	r3, #1
 800427e:	d123      	bne.n	80042c8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0210 	bic.w	r2, r2, #16
 8004294:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0310 	and.w	r3, r3, #16
 80042a0:	2b10      	cmp	r3, #16
 80042a2:	d10a      	bne.n	80042ba <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
=======
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	2b01      	cmp	r3, #1
 800454a:	d123      	bne.n	8004594 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68da      	ldr	r2, [r3, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0210 	bic.w	r2, r2, #16
 8004560:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b10      	cmp	r3, #16
 800456e:	d10a      	bne.n	8004586 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	60fb      	str	r3, [r7, #12]
 8004584:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042be:	4619      	mov	r1, r3
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff fe68 	bl	8003f96 <HAL_UARTEx_RxEventCallback>
 80042c6:	e002      	b.n	80042ce <UART_Receive_IT+0x140>
=======
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800458a:	4619      	mov	r1, r3
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff feb2 	bl	80042f6 <HAL_UARTEx_RxEventCallback>
 8004592:	e002      	b.n	800459a <UART_Receive_IT+0x140>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff fe52 	bl	8003f72 <HAL_UART_RxCpltCallback>
=======
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fe9c 	bl	80042d2 <HAL_UART_RxCpltCallback>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 80042ce:	2300      	movs	r3, #0
 80042d0:	e002      	b.n	80042d8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80042d2:	2300      	movs	r3, #0
 80042d4:	e000      	b.n	80042d8 <UART_Receive_IT+0x14a>
=======
 800459a:	2300      	movs	r3, #0
 800459c:	e002      	b.n	80045a4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e000      	b.n	80045a4 <UART_Receive_IT+0x14a>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80042d6:	2302      	movs	r3, #2
  }
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <UART_SetConfig>:
=======
 80045a2:	2302      	movs	r3, #2
  }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <UART_SetConfig>:
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
=======
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	611a      	str	r2, [r3, #16]
=======
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	611a      	str	r2, [r3, #16]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
<<<<<<< HEAD
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800431a:	f023 030c 	bic.w	r3, r3, #12
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	430b      	orrs	r3, r1
 8004326:	60d3      	str	r3, [r2, #12]
=======
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045e6:	f023 030c 	bic.w	r3, r3, #12
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	68b9      	ldr	r1, [r7, #8]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	60d3      	str	r3, [r2, #12]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a2c      	ldr	r2, [pc, #176]	; (80043f4 <UART_SetConfig+0x114>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d103      	bne.n	8004350 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004348:	f7fe ff6a 	bl	8003220 <HAL_RCC_GetPCLK2Freq>
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	e002      	b.n	8004356 <UART_SetConfig+0x76>
=======
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2c      	ldr	r2, [pc, #176]	; (80046c0 <UART_SetConfig+0x114>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d103      	bne.n	800461c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7fe fce8 	bl	8002fe8 <HAL_RCC_GetPCLK2Freq>
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	e002      	b.n	8004622 <UART_SetConfig+0x76>
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8004350:	f7fe ff52 	bl	80031f8 <HAL_RCC_GetPCLK1Freq>
 8004354:	60f8      	str	r0, [r7, #12]
=======
 800461c:	f7fe fcd0 	bl	8002fc0 <HAL_RCC_GetPCLK1Freq>
 8004620:	60f8      	str	r0, [r7, #12]
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009a      	lsls	r2, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	fbb2 f3f3 	udiv	r3, r2, r3
 800436c:	4a22      	ldr	r2, [pc, #136]	; (80043f8 <UART_SetConfig+0x118>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	0119      	lsls	r1, r3, #4
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009a      	lsls	r2, r3, #2
 8004380:	441a      	add	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	fbb2 f2f3 	udiv	r2, r2, r3
 800438c:	4b1a      	ldr	r3, [pc, #104]	; (80043f8 <UART_SetConfig+0x118>)
 800438e:	fba3 0302 	umull	r0, r3, r3, r2
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	2064      	movs	r0, #100	; 0x64
 8004396:	fb00 f303 	mul.w	r3, r0, r3
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	3332      	adds	r3, #50	; 0x32
 80043a0:	4a15      	ldr	r2, [pc, #84]	; (80043f8 <UART_SetConfig+0x118>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ac:	4419      	add	r1, r3
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	009a      	lsls	r2, r3, #2
 80043b8:	441a      	add	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c4:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <UART_SetConfig+0x118>)
 80043c6:	fba3 0302 	umull	r0, r3, r3, r2
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	2064      	movs	r0, #100	; 0x64
 80043ce:	fb00 f303 	mul.w	r3, r0, r3
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	011b      	lsls	r3, r3, #4
 80043d6:	3332      	adds	r3, #50	; 0x32
 80043d8:	4a07      	ldr	r2, [pc, #28]	; (80043f8 <UART_SetConfig+0x118>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	f003 020f 	and.w	r2, r3, #15
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	440a      	add	r2, r1
 80043ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043ec:	bf00      	nop
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40013800 	.word	0x40013800
 80043f8:	51eb851f 	.word	0x51eb851f

080043fc <__errno>:
 80043fc:	4b01      	ldr	r3, [pc, #4]	; (8004404 <__errno+0x8>)
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	200000e4 	.word	0x200000e4

08004408 <__libc_init_array>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	2600      	movs	r6, #0
 800440c:	4d0c      	ldr	r5, [pc, #48]	; (8004440 <__libc_init_array+0x38>)
 800440e:	4c0d      	ldr	r4, [pc, #52]	; (8004444 <__libc_init_array+0x3c>)
 8004410:	1b64      	subs	r4, r4, r5
 8004412:	10a4      	asrs	r4, r4, #2
 8004414:	42a6      	cmp	r6, r4
 8004416:	d109      	bne.n	800442c <__libc_init_array+0x24>
 8004418:	f000 fc5c 	bl	8004cd4 <_init>
 800441c:	2600      	movs	r6, #0
 800441e:	4d0a      	ldr	r5, [pc, #40]	; (8004448 <__libc_init_array+0x40>)
 8004420:	4c0a      	ldr	r4, [pc, #40]	; (800444c <__libc_init_array+0x44>)
 8004422:	1b64      	subs	r4, r4, r5
 8004424:	10a4      	asrs	r4, r4, #2
 8004426:	42a6      	cmp	r6, r4
 8004428:	d105      	bne.n	8004436 <__libc_init_array+0x2e>
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004430:	4798      	blx	r3
 8004432:	3601      	adds	r6, #1
 8004434:	e7ee      	b.n	8004414 <__libc_init_array+0xc>
 8004436:	f855 3b04 	ldr.w	r3, [r5], #4
 800443a:	4798      	blx	r3
 800443c:	3601      	adds	r6, #1
 800443e:	e7f2      	b.n	8004426 <__libc_init_array+0x1e>
 8004440:	08004db8 	.word	0x08004db8
 8004444:	08004db8 	.word	0x08004db8
 8004448:	08004db8 	.word	0x08004db8
 800444c:	08004dbc 	.word	0x08004dbc

08004450 <memset>:
 8004450:	4603      	mov	r3, r0
 8004452:	4402      	add	r2, r0
 8004454:	4293      	cmp	r3, r2
 8004456:	d100      	bne.n	800445a <memset+0xa>
 8004458:	4770      	bx	lr
 800445a:	f803 1b01 	strb.w	r1, [r3], #1
 800445e:	e7f9      	b.n	8004454 <memset+0x4>

08004460 <siprintf>:
 8004460:	b40e      	push	{r1, r2, r3}
 8004462:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004466:	b500      	push	{lr}
 8004468:	b09c      	sub	sp, #112	; 0x70
 800446a:	ab1d      	add	r3, sp, #116	; 0x74
 800446c:	9002      	str	r0, [sp, #8]
 800446e:	9006      	str	r0, [sp, #24]
 8004470:	9107      	str	r1, [sp, #28]
 8004472:	9104      	str	r1, [sp, #16]
 8004474:	4808      	ldr	r0, [pc, #32]	; (8004498 <siprintf+0x38>)
 8004476:	4909      	ldr	r1, [pc, #36]	; (800449c <siprintf+0x3c>)
 8004478:	f853 2b04 	ldr.w	r2, [r3], #4
 800447c:	9105      	str	r1, [sp, #20]
 800447e:	6800      	ldr	r0, [r0, #0]
 8004480:	a902      	add	r1, sp, #8
 8004482:	9301      	str	r3, [sp, #4]
 8004484:	f000 f868 	bl	8004558 <_svfiprintf_r>
 8004488:	2200      	movs	r2, #0
 800448a:	9b02      	ldr	r3, [sp, #8]
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	b01c      	add	sp, #112	; 0x70
 8004490:	f85d eb04 	ldr.w	lr, [sp], #4
 8004494:	b003      	add	sp, #12
 8004496:	4770      	bx	lr
 8004498:	200000e4 	.word	0x200000e4
 800449c:	ffff0208 	.word	0xffff0208

080044a0 <__ssputs_r>:
 80044a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a4:	688e      	ldr	r6, [r1, #8]
 80044a6:	4682      	mov	sl, r0
 80044a8:	429e      	cmp	r6, r3
 80044aa:	460c      	mov	r4, r1
 80044ac:	4690      	mov	r8, r2
 80044ae:	461f      	mov	r7, r3
 80044b0:	d838      	bhi.n	8004524 <__ssputs_r+0x84>
 80044b2:	898a      	ldrh	r2, [r1, #12]
 80044b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044b8:	d032      	beq.n	8004520 <__ssputs_r+0x80>
 80044ba:	6825      	ldr	r5, [r4, #0]
 80044bc:	6909      	ldr	r1, [r1, #16]
 80044be:	3301      	adds	r3, #1
 80044c0:	eba5 0901 	sub.w	r9, r5, r1
 80044c4:	6965      	ldr	r5, [r4, #20]
 80044c6:	444b      	add	r3, r9
 80044c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044d0:	106d      	asrs	r5, r5, #1
 80044d2:	429d      	cmp	r5, r3
 80044d4:	bf38      	it	cc
 80044d6:	461d      	movcc	r5, r3
 80044d8:	0553      	lsls	r3, r2, #21
 80044da:	d531      	bpl.n	8004540 <__ssputs_r+0xa0>
 80044dc:	4629      	mov	r1, r5
 80044de:	f000 fb53 	bl	8004b88 <_malloc_r>
 80044e2:	4606      	mov	r6, r0
 80044e4:	b950      	cbnz	r0, 80044fc <__ssputs_r+0x5c>
 80044e6:	230c      	movs	r3, #12
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	f8ca 3000 	str.w	r3, [sl]
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f6:	81a3      	strh	r3, [r4, #12]
 80044f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fc:	464a      	mov	r2, r9
 80044fe:	6921      	ldr	r1, [r4, #16]
 8004500:	f000 face 	bl	8004aa0 <memcpy>
 8004504:	89a3      	ldrh	r3, [r4, #12]
 8004506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800450a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800450e:	81a3      	strh	r3, [r4, #12]
 8004510:	6126      	str	r6, [r4, #16]
 8004512:	444e      	add	r6, r9
 8004514:	6026      	str	r6, [r4, #0]
 8004516:	463e      	mov	r6, r7
 8004518:	6165      	str	r5, [r4, #20]
 800451a:	eba5 0509 	sub.w	r5, r5, r9
 800451e:	60a5      	str	r5, [r4, #8]
 8004520:	42be      	cmp	r6, r7
 8004522:	d900      	bls.n	8004526 <__ssputs_r+0x86>
 8004524:	463e      	mov	r6, r7
 8004526:	4632      	mov	r2, r6
 8004528:	4641      	mov	r1, r8
 800452a:	6820      	ldr	r0, [r4, #0]
 800452c:	f000 fac6 	bl	8004abc <memmove>
 8004530:	68a3      	ldr	r3, [r4, #8]
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	1b9b      	subs	r3, r3, r6
 8004536:	4432      	add	r2, r6
 8004538:	2000      	movs	r0, #0
 800453a:	60a3      	str	r3, [r4, #8]
 800453c:	6022      	str	r2, [r4, #0]
 800453e:	e7db      	b.n	80044f8 <__ssputs_r+0x58>
 8004540:	462a      	mov	r2, r5
 8004542:	f000 fb7b 	bl	8004c3c <_realloc_r>
 8004546:	4606      	mov	r6, r0
 8004548:	2800      	cmp	r0, #0
 800454a:	d1e1      	bne.n	8004510 <__ssputs_r+0x70>
 800454c:	4650      	mov	r0, sl
 800454e:	6921      	ldr	r1, [r4, #16]
 8004550:	f000 face 	bl	8004af0 <_free_r>
 8004554:	e7c7      	b.n	80044e6 <__ssputs_r+0x46>
	...

08004558 <_svfiprintf_r>:
 8004558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455c:	4698      	mov	r8, r3
 800455e:	898b      	ldrh	r3, [r1, #12]
 8004560:	4607      	mov	r7, r0
 8004562:	061b      	lsls	r3, r3, #24
 8004564:	460d      	mov	r5, r1
 8004566:	4614      	mov	r4, r2
 8004568:	b09d      	sub	sp, #116	; 0x74
 800456a:	d50e      	bpl.n	800458a <_svfiprintf_r+0x32>
 800456c:	690b      	ldr	r3, [r1, #16]
 800456e:	b963      	cbnz	r3, 800458a <_svfiprintf_r+0x32>
 8004570:	2140      	movs	r1, #64	; 0x40
 8004572:	f000 fb09 	bl	8004b88 <_malloc_r>
 8004576:	6028      	str	r0, [r5, #0]
 8004578:	6128      	str	r0, [r5, #16]
 800457a:	b920      	cbnz	r0, 8004586 <_svfiprintf_r+0x2e>
 800457c:	230c      	movs	r3, #12
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	f04f 30ff 	mov.w	r0, #4294967295
 8004584:	e0d1      	b.n	800472a <_svfiprintf_r+0x1d2>
 8004586:	2340      	movs	r3, #64	; 0x40
 8004588:	616b      	str	r3, [r5, #20]
 800458a:	2300      	movs	r3, #0
 800458c:	9309      	str	r3, [sp, #36]	; 0x24
 800458e:	2320      	movs	r3, #32
 8004590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004594:	2330      	movs	r3, #48	; 0x30
 8004596:	f04f 0901 	mov.w	r9, #1
 800459a:	f8cd 800c 	str.w	r8, [sp, #12]
 800459e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004744 <_svfiprintf_r+0x1ec>
 80045a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045a6:	4623      	mov	r3, r4
 80045a8:	469a      	mov	sl, r3
 80045aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ae:	b10a      	cbz	r2, 80045b4 <_svfiprintf_r+0x5c>
 80045b0:	2a25      	cmp	r2, #37	; 0x25
 80045b2:	d1f9      	bne.n	80045a8 <_svfiprintf_r+0x50>
 80045b4:	ebba 0b04 	subs.w	fp, sl, r4
 80045b8:	d00b      	beq.n	80045d2 <_svfiprintf_r+0x7a>
 80045ba:	465b      	mov	r3, fp
 80045bc:	4622      	mov	r2, r4
 80045be:	4629      	mov	r1, r5
 80045c0:	4638      	mov	r0, r7
 80045c2:	f7ff ff6d 	bl	80044a0 <__ssputs_r>
 80045c6:	3001      	adds	r0, #1
 80045c8:	f000 80aa 	beq.w	8004720 <_svfiprintf_r+0x1c8>
 80045cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045ce:	445a      	add	r2, fp
 80045d0:	9209      	str	r2, [sp, #36]	; 0x24
 80045d2:	f89a 3000 	ldrb.w	r3, [sl]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80a2 	beq.w	8004720 <_svfiprintf_r+0x1c8>
 80045dc:	2300      	movs	r3, #0
 80045de:	f04f 32ff 	mov.w	r2, #4294967295
 80045e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045e6:	f10a 0a01 	add.w	sl, sl, #1
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	9307      	str	r3, [sp, #28]
 80045ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045f2:	931a      	str	r3, [sp, #104]	; 0x68
 80045f4:	4654      	mov	r4, sl
 80045f6:	2205      	movs	r2, #5
 80045f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045fc:	4851      	ldr	r0, [pc, #324]	; (8004744 <_svfiprintf_r+0x1ec>)
 80045fe:	f000 fa41 	bl	8004a84 <memchr>
 8004602:	9a04      	ldr	r2, [sp, #16]
 8004604:	b9d8      	cbnz	r0, 800463e <_svfiprintf_r+0xe6>
 8004606:	06d0      	lsls	r0, r2, #27
 8004608:	bf44      	itt	mi
 800460a:	2320      	movmi	r3, #32
 800460c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004610:	0711      	lsls	r1, r2, #28
 8004612:	bf44      	itt	mi
 8004614:	232b      	movmi	r3, #43	; 0x2b
 8004616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800461a:	f89a 3000 	ldrb.w	r3, [sl]
 800461e:	2b2a      	cmp	r3, #42	; 0x2a
 8004620:	d015      	beq.n	800464e <_svfiprintf_r+0xf6>
 8004622:	4654      	mov	r4, sl
 8004624:	2000      	movs	r0, #0
 8004626:	f04f 0c0a 	mov.w	ip, #10
 800462a:	9a07      	ldr	r2, [sp, #28]
 800462c:	4621      	mov	r1, r4
 800462e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004632:	3b30      	subs	r3, #48	; 0x30
 8004634:	2b09      	cmp	r3, #9
 8004636:	d94e      	bls.n	80046d6 <_svfiprintf_r+0x17e>
 8004638:	b1b0      	cbz	r0, 8004668 <_svfiprintf_r+0x110>
 800463a:	9207      	str	r2, [sp, #28]
 800463c:	e014      	b.n	8004668 <_svfiprintf_r+0x110>
 800463e:	eba0 0308 	sub.w	r3, r0, r8
 8004642:	fa09 f303 	lsl.w	r3, r9, r3
 8004646:	4313      	orrs	r3, r2
 8004648:	46a2      	mov	sl, r4
 800464a:	9304      	str	r3, [sp, #16]
 800464c:	e7d2      	b.n	80045f4 <_svfiprintf_r+0x9c>
 800464e:	9b03      	ldr	r3, [sp, #12]
 8004650:	1d19      	adds	r1, r3, #4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	9103      	str	r1, [sp, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	bfbb      	ittet	lt
 800465a:	425b      	neglt	r3, r3
 800465c:	f042 0202 	orrlt.w	r2, r2, #2
 8004660:	9307      	strge	r3, [sp, #28]
 8004662:	9307      	strlt	r3, [sp, #28]
 8004664:	bfb8      	it	lt
 8004666:	9204      	strlt	r2, [sp, #16]
 8004668:	7823      	ldrb	r3, [r4, #0]
 800466a:	2b2e      	cmp	r3, #46	; 0x2e
 800466c:	d10c      	bne.n	8004688 <_svfiprintf_r+0x130>
 800466e:	7863      	ldrb	r3, [r4, #1]
 8004670:	2b2a      	cmp	r3, #42	; 0x2a
 8004672:	d135      	bne.n	80046e0 <_svfiprintf_r+0x188>
 8004674:	9b03      	ldr	r3, [sp, #12]
 8004676:	3402      	adds	r4, #2
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	9203      	str	r2, [sp, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	bfb8      	it	lt
 8004682:	f04f 33ff 	movlt.w	r3, #4294967295
 8004686:	9305      	str	r3, [sp, #20]
 8004688:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004754 <_svfiprintf_r+0x1fc>
 800468c:	2203      	movs	r2, #3
 800468e:	4650      	mov	r0, sl
 8004690:	7821      	ldrb	r1, [r4, #0]
 8004692:	f000 f9f7 	bl	8004a84 <memchr>
 8004696:	b140      	cbz	r0, 80046aa <_svfiprintf_r+0x152>
 8004698:	2340      	movs	r3, #64	; 0x40
 800469a:	eba0 000a 	sub.w	r0, r0, sl
 800469e:	fa03 f000 	lsl.w	r0, r3, r0
 80046a2:	9b04      	ldr	r3, [sp, #16]
 80046a4:	3401      	adds	r4, #1
 80046a6:	4303      	orrs	r3, r0
 80046a8:	9304      	str	r3, [sp, #16]
 80046aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ae:	2206      	movs	r2, #6
 80046b0:	4825      	ldr	r0, [pc, #148]	; (8004748 <_svfiprintf_r+0x1f0>)
 80046b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046b6:	f000 f9e5 	bl	8004a84 <memchr>
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d038      	beq.n	8004730 <_svfiprintf_r+0x1d8>
 80046be:	4b23      	ldr	r3, [pc, #140]	; (800474c <_svfiprintf_r+0x1f4>)
 80046c0:	bb1b      	cbnz	r3, 800470a <_svfiprintf_r+0x1b2>
 80046c2:	9b03      	ldr	r3, [sp, #12]
 80046c4:	3307      	adds	r3, #7
 80046c6:	f023 0307 	bic.w	r3, r3, #7
 80046ca:	3308      	adds	r3, #8
 80046cc:	9303      	str	r3, [sp, #12]
 80046ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d0:	4433      	add	r3, r6
 80046d2:	9309      	str	r3, [sp, #36]	; 0x24
 80046d4:	e767      	b.n	80045a6 <_svfiprintf_r+0x4e>
 80046d6:	460c      	mov	r4, r1
 80046d8:	2001      	movs	r0, #1
 80046da:	fb0c 3202 	mla	r2, ip, r2, r3
 80046de:	e7a5      	b.n	800462c <_svfiprintf_r+0xd4>
 80046e0:	2300      	movs	r3, #0
 80046e2:	f04f 0c0a 	mov.w	ip, #10
 80046e6:	4619      	mov	r1, r3
 80046e8:	3401      	adds	r4, #1
 80046ea:	9305      	str	r3, [sp, #20]
 80046ec:	4620      	mov	r0, r4
 80046ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046f2:	3a30      	subs	r2, #48	; 0x30
 80046f4:	2a09      	cmp	r2, #9
 80046f6:	d903      	bls.n	8004700 <_svfiprintf_r+0x1a8>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0c5      	beq.n	8004688 <_svfiprintf_r+0x130>
 80046fc:	9105      	str	r1, [sp, #20]
 80046fe:	e7c3      	b.n	8004688 <_svfiprintf_r+0x130>
 8004700:	4604      	mov	r4, r0
 8004702:	2301      	movs	r3, #1
 8004704:	fb0c 2101 	mla	r1, ip, r1, r2
 8004708:	e7f0      	b.n	80046ec <_svfiprintf_r+0x194>
 800470a:	ab03      	add	r3, sp, #12
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	462a      	mov	r2, r5
 8004710:	4638      	mov	r0, r7
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <_svfiprintf_r+0x1f8>)
 8004714:	a904      	add	r1, sp, #16
 8004716:	f3af 8000 	nop.w
 800471a:	1c42      	adds	r2, r0, #1
 800471c:	4606      	mov	r6, r0
 800471e:	d1d6      	bne.n	80046ce <_svfiprintf_r+0x176>
 8004720:	89ab      	ldrh	r3, [r5, #12]
 8004722:	065b      	lsls	r3, r3, #25
 8004724:	f53f af2c 	bmi.w	8004580 <_svfiprintf_r+0x28>
 8004728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800472a:	b01d      	add	sp, #116	; 0x74
 800472c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004730:	ab03      	add	r3, sp, #12
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	462a      	mov	r2, r5
 8004736:	4638      	mov	r0, r7
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <_svfiprintf_r+0x1f8>)
 800473a:	a904      	add	r1, sp, #16
 800473c:	f000 f87c 	bl	8004838 <_printf_i>
 8004740:	e7eb      	b.n	800471a <_svfiprintf_r+0x1c2>
 8004742:	bf00      	nop
 8004744:	08004d84 	.word	0x08004d84
 8004748:	08004d8e 	.word	0x08004d8e
 800474c:	00000000 	.word	0x00000000
 8004750:	080044a1 	.word	0x080044a1
 8004754:	08004d8a 	.word	0x08004d8a

08004758 <_printf_common>:
 8004758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800475c:	4616      	mov	r6, r2
 800475e:	4699      	mov	r9, r3
 8004760:	688a      	ldr	r2, [r1, #8]
 8004762:	690b      	ldr	r3, [r1, #16]
 8004764:	4607      	mov	r7, r0
 8004766:	4293      	cmp	r3, r2
 8004768:	bfb8      	it	lt
 800476a:	4613      	movlt	r3, r2
 800476c:	6033      	str	r3, [r6, #0]
 800476e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004772:	460c      	mov	r4, r1
 8004774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004778:	b10a      	cbz	r2, 800477e <_printf_common+0x26>
 800477a:	3301      	adds	r3, #1
 800477c:	6033      	str	r3, [r6, #0]
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	0699      	lsls	r1, r3, #26
 8004782:	bf42      	ittt	mi
 8004784:	6833      	ldrmi	r3, [r6, #0]
 8004786:	3302      	addmi	r3, #2
 8004788:	6033      	strmi	r3, [r6, #0]
 800478a:	6825      	ldr	r5, [r4, #0]
 800478c:	f015 0506 	ands.w	r5, r5, #6
 8004790:	d106      	bne.n	80047a0 <_printf_common+0x48>
 8004792:	f104 0a19 	add.w	sl, r4, #25
 8004796:	68e3      	ldr	r3, [r4, #12]
 8004798:	6832      	ldr	r2, [r6, #0]
 800479a:	1a9b      	subs	r3, r3, r2
 800479c:	42ab      	cmp	r3, r5
 800479e:	dc28      	bgt.n	80047f2 <_printf_common+0x9a>
 80047a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047a4:	1e13      	subs	r3, r2, #0
 80047a6:	6822      	ldr	r2, [r4, #0]
 80047a8:	bf18      	it	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	0692      	lsls	r2, r2, #26
 80047ae:	d42d      	bmi.n	800480c <_printf_common+0xb4>
 80047b0:	4649      	mov	r1, r9
 80047b2:	4638      	mov	r0, r7
 80047b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047b8:	47c0      	blx	r8
 80047ba:	3001      	adds	r0, #1
 80047bc:	d020      	beq.n	8004800 <_printf_common+0xa8>
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	68e5      	ldr	r5, [r4, #12]
 80047c2:	f003 0306 	and.w	r3, r3, #6
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	bf18      	it	ne
 80047ca:	2500      	movne	r5, #0
 80047cc:	6832      	ldr	r2, [r6, #0]
 80047ce:	f04f 0600 	mov.w	r6, #0
 80047d2:	68a3      	ldr	r3, [r4, #8]
 80047d4:	bf08      	it	eq
 80047d6:	1aad      	subeq	r5, r5, r2
 80047d8:	6922      	ldr	r2, [r4, #16]
 80047da:	bf08      	it	eq
 80047dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047e0:	4293      	cmp	r3, r2
 80047e2:	bfc4      	itt	gt
 80047e4:	1a9b      	subgt	r3, r3, r2
 80047e6:	18ed      	addgt	r5, r5, r3
 80047e8:	341a      	adds	r4, #26
 80047ea:	42b5      	cmp	r5, r6
 80047ec:	d11a      	bne.n	8004824 <_printf_common+0xcc>
 80047ee:	2000      	movs	r0, #0
 80047f0:	e008      	b.n	8004804 <_printf_common+0xac>
 80047f2:	2301      	movs	r3, #1
 80047f4:	4652      	mov	r2, sl
 80047f6:	4649      	mov	r1, r9
 80047f8:	4638      	mov	r0, r7
 80047fa:	47c0      	blx	r8
 80047fc:	3001      	adds	r0, #1
 80047fe:	d103      	bne.n	8004808 <_printf_common+0xb0>
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004808:	3501      	adds	r5, #1
 800480a:	e7c4      	b.n	8004796 <_printf_common+0x3e>
 800480c:	2030      	movs	r0, #48	; 0x30
 800480e:	18e1      	adds	r1, r4, r3
 8004810:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800481a:	4422      	add	r2, r4
 800481c:	3302      	adds	r3, #2
 800481e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004822:	e7c5      	b.n	80047b0 <_printf_common+0x58>
 8004824:	2301      	movs	r3, #1
 8004826:	4622      	mov	r2, r4
 8004828:	4649      	mov	r1, r9
 800482a:	4638      	mov	r0, r7
 800482c:	47c0      	blx	r8
 800482e:	3001      	adds	r0, #1
 8004830:	d0e6      	beq.n	8004800 <_printf_common+0xa8>
 8004832:	3601      	adds	r6, #1
 8004834:	e7d9      	b.n	80047ea <_printf_common+0x92>
	...

08004838 <_printf_i>:
 8004838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800483c:	460c      	mov	r4, r1
 800483e:	7e27      	ldrb	r7, [r4, #24]
 8004840:	4691      	mov	r9, r2
 8004842:	2f78      	cmp	r7, #120	; 0x78
 8004844:	4680      	mov	r8, r0
 8004846:	469a      	mov	sl, r3
 8004848:	990c      	ldr	r1, [sp, #48]	; 0x30
 800484a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800484e:	d807      	bhi.n	8004860 <_printf_i+0x28>
 8004850:	2f62      	cmp	r7, #98	; 0x62
 8004852:	d80a      	bhi.n	800486a <_printf_i+0x32>
 8004854:	2f00      	cmp	r7, #0
 8004856:	f000 80d9 	beq.w	8004a0c <_printf_i+0x1d4>
 800485a:	2f58      	cmp	r7, #88	; 0x58
 800485c:	f000 80a4 	beq.w	80049a8 <_printf_i+0x170>
 8004860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004868:	e03a      	b.n	80048e0 <_printf_i+0xa8>
 800486a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800486e:	2b15      	cmp	r3, #21
 8004870:	d8f6      	bhi.n	8004860 <_printf_i+0x28>
 8004872:	a001      	add	r0, pc, #4	; (adr r0, 8004878 <_printf_i+0x40>)
 8004874:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004878:	080048d1 	.word	0x080048d1
 800487c:	080048e5 	.word	0x080048e5
 8004880:	08004861 	.word	0x08004861
 8004884:	08004861 	.word	0x08004861
 8004888:	08004861 	.word	0x08004861
 800488c:	08004861 	.word	0x08004861
 8004890:	080048e5 	.word	0x080048e5
 8004894:	08004861 	.word	0x08004861
 8004898:	08004861 	.word	0x08004861
 800489c:	08004861 	.word	0x08004861
 80048a0:	08004861 	.word	0x08004861
 80048a4:	080049f3 	.word	0x080049f3
 80048a8:	08004915 	.word	0x08004915
 80048ac:	080049d5 	.word	0x080049d5
 80048b0:	08004861 	.word	0x08004861
 80048b4:	08004861 	.word	0x08004861
 80048b8:	08004a15 	.word	0x08004a15
 80048bc:	08004861 	.word	0x08004861
 80048c0:	08004915 	.word	0x08004915
 80048c4:	08004861 	.word	0x08004861
 80048c8:	08004861 	.word	0x08004861
 80048cc:	080049dd 	.word	0x080049dd
 80048d0:	680b      	ldr	r3, [r1, #0]
 80048d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048d6:	1d1a      	adds	r2, r3, #4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	600a      	str	r2, [r1, #0]
 80048dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0a4      	b.n	8004a2e <_printf_i+0x1f6>
 80048e4:	6825      	ldr	r5, [r4, #0]
 80048e6:	6808      	ldr	r0, [r1, #0]
 80048e8:	062e      	lsls	r6, r5, #24
 80048ea:	f100 0304 	add.w	r3, r0, #4
 80048ee:	d50a      	bpl.n	8004906 <_printf_i+0xce>
 80048f0:	6805      	ldr	r5, [r0, #0]
 80048f2:	600b      	str	r3, [r1, #0]
 80048f4:	2d00      	cmp	r5, #0
 80048f6:	da03      	bge.n	8004900 <_printf_i+0xc8>
 80048f8:	232d      	movs	r3, #45	; 0x2d
 80048fa:	426d      	negs	r5, r5
 80048fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004900:	230a      	movs	r3, #10
 8004902:	485e      	ldr	r0, [pc, #376]	; (8004a7c <_printf_i+0x244>)
 8004904:	e019      	b.n	800493a <_printf_i+0x102>
 8004906:	f015 0f40 	tst.w	r5, #64	; 0x40
 800490a:	6805      	ldr	r5, [r0, #0]
 800490c:	600b      	str	r3, [r1, #0]
 800490e:	bf18      	it	ne
 8004910:	b22d      	sxthne	r5, r5
 8004912:	e7ef      	b.n	80048f4 <_printf_i+0xbc>
 8004914:	680b      	ldr	r3, [r1, #0]
 8004916:	6825      	ldr	r5, [r4, #0]
 8004918:	1d18      	adds	r0, r3, #4
 800491a:	6008      	str	r0, [r1, #0]
 800491c:	0628      	lsls	r0, r5, #24
 800491e:	d501      	bpl.n	8004924 <_printf_i+0xec>
 8004920:	681d      	ldr	r5, [r3, #0]
 8004922:	e002      	b.n	800492a <_printf_i+0xf2>
 8004924:	0669      	lsls	r1, r5, #25
 8004926:	d5fb      	bpl.n	8004920 <_printf_i+0xe8>
 8004928:	881d      	ldrh	r5, [r3, #0]
 800492a:	2f6f      	cmp	r7, #111	; 0x6f
 800492c:	bf0c      	ite	eq
 800492e:	2308      	moveq	r3, #8
 8004930:	230a      	movne	r3, #10
 8004932:	4852      	ldr	r0, [pc, #328]	; (8004a7c <_printf_i+0x244>)
 8004934:	2100      	movs	r1, #0
 8004936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800493a:	6866      	ldr	r6, [r4, #4]
 800493c:	2e00      	cmp	r6, #0
 800493e:	bfa8      	it	ge
 8004940:	6821      	ldrge	r1, [r4, #0]
 8004942:	60a6      	str	r6, [r4, #8]
 8004944:	bfa4      	itt	ge
 8004946:	f021 0104 	bicge.w	r1, r1, #4
 800494a:	6021      	strge	r1, [r4, #0]
 800494c:	b90d      	cbnz	r5, 8004952 <_printf_i+0x11a>
 800494e:	2e00      	cmp	r6, #0
 8004950:	d04d      	beq.n	80049ee <_printf_i+0x1b6>
 8004952:	4616      	mov	r6, r2
 8004954:	fbb5 f1f3 	udiv	r1, r5, r3
 8004958:	fb03 5711 	mls	r7, r3, r1, r5
 800495c:	5dc7      	ldrb	r7, [r0, r7]
 800495e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004962:	462f      	mov	r7, r5
 8004964:	42bb      	cmp	r3, r7
 8004966:	460d      	mov	r5, r1
 8004968:	d9f4      	bls.n	8004954 <_printf_i+0x11c>
 800496a:	2b08      	cmp	r3, #8
 800496c:	d10b      	bne.n	8004986 <_printf_i+0x14e>
 800496e:	6823      	ldr	r3, [r4, #0]
 8004970:	07df      	lsls	r7, r3, #31
 8004972:	d508      	bpl.n	8004986 <_printf_i+0x14e>
 8004974:	6923      	ldr	r3, [r4, #16]
 8004976:	6861      	ldr	r1, [r4, #4]
 8004978:	4299      	cmp	r1, r3
 800497a:	bfde      	ittt	le
 800497c:	2330      	movle	r3, #48	; 0x30
 800497e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004982:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004986:	1b92      	subs	r2, r2, r6
 8004988:	6122      	str	r2, [r4, #16]
 800498a:	464b      	mov	r3, r9
 800498c:	4621      	mov	r1, r4
 800498e:	4640      	mov	r0, r8
 8004990:	f8cd a000 	str.w	sl, [sp]
 8004994:	aa03      	add	r2, sp, #12
 8004996:	f7ff fedf 	bl	8004758 <_printf_common>
 800499a:	3001      	adds	r0, #1
 800499c:	d14c      	bne.n	8004a38 <_printf_i+0x200>
 800499e:	f04f 30ff 	mov.w	r0, #4294967295
 80049a2:	b004      	add	sp, #16
 80049a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a8:	4834      	ldr	r0, [pc, #208]	; (8004a7c <_printf_i+0x244>)
 80049aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049ae:	680e      	ldr	r6, [r1, #0]
 80049b0:	6823      	ldr	r3, [r4, #0]
 80049b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80049b6:	061f      	lsls	r7, r3, #24
 80049b8:	600e      	str	r6, [r1, #0]
 80049ba:	d514      	bpl.n	80049e6 <_printf_i+0x1ae>
 80049bc:	07d9      	lsls	r1, r3, #31
 80049be:	bf44      	itt	mi
 80049c0:	f043 0320 	orrmi.w	r3, r3, #32
 80049c4:	6023      	strmi	r3, [r4, #0]
 80049c6:	b91d      	cbnz	r5, 80049d0 <_printf_i+0x198>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	f023 0320 	bic.w	r3, r3, #32
 80049ce:	6023      	str	r3, [r4, #0]
 80049d0:	2310      	movs	r3, #16
 80049d2:	e7af      	b.n	8004934 <_printf_i+0xfc>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	f043 0320 	orr.w	r3, r3, #32
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	2378      	movs	r3, #120	; 0x78
 80049de:	4828      	ldr	r0, [pc, #160]	; (8004a80 <_printf_i+0x248>)
 80049e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049e4:	e7e3      	b.n	80049ae <_printf_i+0x176>
 80049e6:	065e      	lsls	r6, r3, #25
 80049e8:	bf48      	it	mi
 80049ea:	b2ad      	uxthmi	r5, r5
 80049ec:	e7e6      	b.n	80049bc <_printf_i+0x184>
 80049ee:	4616      	mov	r6, r2
 80049f0:	e7bb      	b.n	800496a <_printf_i+0x132>
 80049f2:	680b      	ldr	r3, [r1, #0]
 80049f4:	6826      	ldr	r6, [r4, #0]
 80049f6:	1d1d      	adds	r5, r3, #4
 80049f8:	6960      	ldr	r0, [r4, #20]
 80049fa:	600d      	str	r5, [r1, #0]
 80049fc:	0635      	lsls	r5, r6, #24
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	d501      	bpl.n	8004a06 <_printf_i+0x1ce>
 8004a02:	6018      	str	r0, [r3, #0]
 8004a04:	e002      	b.n	8004a0c <_printf_i+0x1d4>
 8004a06:	0671      	lsls	r1, r6, #25
 8004a08:	d5fb      	bpl.n	8004a02 <_printf_i+0x1ca>
 8004a0a:	8018      	strh	r0, [r3, #0]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4616      	mov	r6, r2
 8004a10:	6123      	str	r3, [r4, #16]
 8004a12:	e7ba      	b.n	800498a <_printf_i+0x152>
 8004a14:	680b      	ldr	r3, [r1, #0]
 8004a16:	1d1a      	adds	r2, r3, #4
 8004a18:	600a      	str	r2, [r1, #0]
 8004a1a:	681e      	ldr	r6, [r3, #0]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4630      	mov	r0, r6
 8004a20:	6862      	ldr	r2, [r4, #4]
 8004a22:	f000 f82f 	bl	8004a84 <memchr>
 8004a26:	b108      	cbz	r0, 8004a2c <_printf_i+0x1f4>
 8004a28:	1b80      	subs	r0, r0, r6
 8004a2a:	6060      	str	r0, [r4, #4]
 8004a2c:	6863      	ldr	r3, [r4, #4]
 8004a2e:	6123      	str	r3, [r4, #16]
 8004a30:	2300      	movs	r3, #0
 8004a32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a36:	e7a8      	b.n	800498a <_printf_i+0x152>
 8004a38:	4632      	mov	r2, r6
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	4640      	mov	r0, r8
 8004a3e:	6923      	ldr	r3, [r4, #16]
 8004a40:	47d0      	blx	sl
 8004a42:	3001      	adds	r0, #1
 8004a44:	d0ab      	beq.n	800499e <_printf_i+0x166>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	079b      	lsls	r3, r3, #30
 8004a4a:	d413      	bmi.n	8004a74 <_printf_i+0x23c>
 8004a4c:	68e0      	ldr	r0, [r4, #12]
 8004a4e:	9b03      	ldr	r3, [sp, #12]
 8004a50:	4298      	cmp	r0, r3
 8004a52:	bfb8      	it	lt
 8004a54:	4618      	movlt	r0, r3
 8004a56:	e7a4      	b.n	80049a2 <_printf_i+0x16a>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	4632      	mov	r2, r6
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	4640      	mov	r0, r8
 8004a60:	47d0      	blx	sl
 8004a62:	3001      	adds	r0, #1
 8004a64:	d09b      	beq.n	800499e <_printf_i+0x166>
 8004a66:	3501      	adds	r5, #1
 8004a68:	68e3      	ldr	r3, [r4, #12]
 8004a6a:	9903      	ldr	r1, [sp, #12]
 8004a6c:	1a5b      	subs	r3, r3, r1
 8004a6e:	42ab      	cmp	r3, r5
 8004a70:	dcf2      	bgt.n	8004a58 <_printf_i+0x220>
 8004a72:	e7eb      	b.n	8004a4c <_printf_i+0x214>
 8004a74:	2500      	movs	r5, #0
 8004a76:	f104 0619 	add.w	r6, r4, #25
 8004a7a:	e7f5      	b.n	8004a68 <_printf_i+0x230>
 8004a7c:	08004d95 	.word	0x08004d95
 8004a80:	08004da6 	.word	0x08004da6

08004a84 <memchr>:
 8004a84:	4603      	mov	r3, r0
 8004a86:	b510      	push	{r4, lr}
 8004a88:	b2c9      	uxtb	r1, r1
 8004a8a:	4402      	add	r2, r0
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	d101      	bne.n	8004a96 <memchr+0x12>
 8004a92:	2000      	movs	r0, #0
 8004a94:	e003      	b.n	8004a9e <memchr+0x1a>
 8004a96:	7804      	ldrb	r4, [r0, #0]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	428c      	cmp	r4, r1
 8004a9c:	d1f6      	bne.n	8004a8c <memchr+0x8>
 8004a9e:	bd10      	pop	{r4, pc}

08004aa0 <memcpy>:
 8004aa0:	440a      	add	r2, r1
 8004aa2:	4291      	cmp	r1, r2
 8004aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004aa8:	d100      	bne.n	8004aac <memcpy+0xc>
 8004aaa:	4770      	bx	lr
 8004aac:	b510      	push	{r4, lr}
 8004aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ab2:	4291      	cmp	r1, r2
 8004ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ab8:	d1f9      	bne.n	8004aae <memcpy+0xe>
 8004aba:	bd10      	pop	{r4, pc}

08004abc <memmove>:
 8004abc:	4288      	cmp	r0, r1
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	eb01 0402 	add.w	r4, r1, r2
 8004ac4:	d902      	bls.n	8004acc <memmove+0x10>
 8004ac6:	4284      	cmp	r4, r0
 8004ac8:	4623      	mov	r3, r4
 8004aca:	d807      	bhi.n	8004adc <memmove+0x20>
 8004acc:	1e43      	subs	r3, r0, #1
 8004ace:	42a1      	cmp	r1, r4
 8004ad0:	d008      	beq.n	8004ae4 <memmove+0x28>
 8004ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ada:	e7f8      	b.n	8004ace <memmove+0x12>
 8004adc:	4601      	mov	r1, r0
 8004ade:	4402      	add	r2, r0
 8004ae0:	428a      	cmp	r2, r1
 8004ae2:	d100      	bne.n	8004ae6 <memmove+0x2a>
 8004ae4:	bd10      	pop	{r4, pc}
 8004ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004aee:	e7f7      	b.n	8004ae0 <memmove+0x24>

08004af0 <_free_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4605      	mov	r5, r0
 8004af4:	2900      	cmp	r1, #0
 8004af6:	d043      	beq.n	8004b80 <_free_r+0x90>
 8004af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004afc:	1f0c      	subs	r4, r1, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bfb8      	it	lt
 8004b02:	18e4      	addlt	r4, r4, r3
 8004b04:	f000 f8d0 	bl	8004ca8 <__malloc_lock>
 8004b08:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <_free_r+0x94>)
 8004b0a:	6813      	ldr	r3, [r2, #0]
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	b933      	cbnz	r3, 8004b1e <_free_r+0x2e>
 8004b10:	6063      	str	r3, [r4, #4]
 8004b12:	6014      	str	r4, [r2, #0]
 8004b14:	4628      	mov	r0, r5
 8004b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b1a:	f000 b8cb 	b.w	8004cb4 <__malloc_unlock>
 8004b1e:	42a3      	cmp	r3, r4
 8004b20:	d90a      	bls.n	8004b38 <_free_r+0x48>
 8004b22:	6821      	ldr	r1, [r4, #0]
 8004b24:	1862      	adds	r2, r4, r1
 8004b26:	4293      	cmp	r3, r2
 8004b28:	bf01      	itttt	eq
 8004b2a:	681a      	ldreq	r2, [r3, #0]
 8004b2c:	685b      	ldreq	r3, [r3, #4]
 8004b2e:	1852      	addeq	r2, r2, r1
 8004b30:	6022      	streq	r2, [r4, #0]
 8004b32:	6063      	str	r3, [r4, #4]
 8004b34:	6004      	str	r4, [r0, #0]
 8004b36:	e7ed      	b.n	8004b14 <_free_r+0x24>
 8004b38:	461a      	mov	r2, r3
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	b10b      	cbz	r3, 8004b42 <_free_r+0x52>
 8004b3e:	42a3      	cmp	r3, r4
 8004b40:	d9fa      	bls.n	8004b38 <_free_r+0x48>
 8004b42:	6811      	ldr	r1, [r2, #0]
 8004b44:	1850      	adds	r0, r2, r1
 8004b46:	42a0      	cmp	r0, r4
 8004b48:	d10b      	bne.n	8004b62 <_free_r+0x72>
 8004b4a:	6820      	ldr	r0, [r4, #0]
 8004b4c:	4401      	add	r1, r0
 8004b4e:	1850      	adds	r0, r2, r1
 8004b50:	4283      	cmp	r3, r0
 8004b52:	6011      	str	r1, [r2, #0]
 8004b54:	d1de      	bne.n	8004b14 <_free_r+0x24>
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4401      	add	r1, r0
 8004b5c:	6011      	str	r1, [r2, #0]
 8004b5e:	6053      	str	r3, [r2, #4]
 8004b60:	e7d8      	b.n	8004b14 <_free_r+0x24>
 8004b62:	d902      	bls.n	8004b6a <_free_r+0x7a>
 8004b64:	230c      	movs	r3, #12
 8004b66:	602b      	str	r3, [r5, #0]
 8004b68:	e7d4      	b.n	8004b14 <_free_r+0x24>
 8004b6a:	6820      	ldr	r0, [r4, #0]
 8004b6c:	1821      	adds	r1, r4, r0
 8004b6e:	428b      	cmp	r3, r1
 8004b70:	bf01      	itttt	eq
 8004b72:	6819      	ldreq	r1, [r3, #0]
 8004b74:	685b      	ldreq	r3, [r3, #4]
 8004b76:	1809      	addeq	r1, r1, r0
 8004b78:	6021      	streq	r1, [r4, #0]
 8004b7a:	6063      	str	r3, [r4, #4]
 8004b7c:	6054      	str	r4, [r2, #4]
 8004b7e:	e7c9      	b.n	8004b14 <_free_r+0x24>
 8004b80:	bd38      	pop	{r3, r4, r5, pc}
 8004b82:	bf00      	nop
 8004b84:	20000220 	.word	0x20000220

08004b88 <_malloc_r>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	1ccd      	adds	r5, r1, #3
 8004b8c:	f025 0503 	bic.w	r5, r5, #3
 8004b90:	3508      	adds	r5, #8
 8004b92:	2d0c      	cmp	r5, #12
 8004b94:	bf38      	it	cc
 8004b96:	250c      	movcc	r5, #12
 8004b98:	2d00      	cmp	r5, #0
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	db01      	blt.n	8004ba2 <_malloc_r+0x1a>
 8004b9e:	42a9      	cmp	r1, r5
 8004ba0:	d903      	bls.n	8004baa <_malloc_r+0x22>
 8004ba2:	230c      	movs	r3, #12
 8004ba4:	6033      	str	r3, [r6, #0]
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004baa:	f000 f87d 	bl	8004ca8 <__malloc_lock>
 8004bae:	4921      	ldr	r1, [pc, #132]	; (8004c34 <_malloc_r+0xac>)
 8004bb0:	680a      	ldr	r2, [r1, #0]
 8004bb2:	4614      	mov	r4, r2
 8004bb4:	b99c      	cbnz	r4, 8004bde <_malloc_r+0x56>
 8004bb6:	4f20      	ldr	r7, [pc, #128]	; (8004c38 <_malloc_r+0xb0>)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	b923      	cbnz	r3, 8004bc6 <_malloc_r+0x3e>
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f000 f862 	bl	8004c88 <_sbrk_r>
 8004bc4:	6038      	str	r0, [r7, #0]
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f000 f85d 	bl	8004c88 <_sbrk_r>
 8004bce:	1c43      	adds	r3, r0, #1
 8004bd0:	d123      	bne.n	8004c1a <_malloc_r+0x92>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	6033      	str	r3, [r6, #0]
 8004bd8:	f000 f86c 	bl	8004cb4 <__malloc_unlock>
 8004bdc:	e7e3      	b.n	8004ba6 <_malloc_r+0x1e>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	1b5b      	subs	r3, r3, r5
 8004be2:	d417      	bmi.n	8004c14 <_malloc_r+0x8c>
 8004be4:	2b0b      	cmp	r3, #11
 8004be6:	d903      	bls.n	8004bf0 <_malloc_r+0x68>
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	441c      	add	r4, r3
 8004bec:	6025      	str	r5, [r4, #0]
 8004bee:	e004      	b.n	8004bfa <_malloc_r+0x72>
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	42a2      	cmp	r2, r4
 8004bf4:	bf0c      	ite	eq
 8004bf6:	600b      	streq	r3, [r1, #0]
 8004bf8:	6053      	strne	r3, [r2, #4]
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f000 f85a 	bl	8004cb4 <__malloc_unlock>
 8004c00:	f104 000b 	add.w	r0, r4, #11
 8004c04:	1d23      	adds	r3, r4, #4
 8004c06:	f020 0007 	bic.w	r0, r0, #7
 8004c0a:	1ac2      	subs	r2, r0, r3
 8004c0c:	d0cc      	beq.n	8004ba8 <_malloc_r+0x20>
 8004c0e:	1a1b      	subs	r3, r3, r0
 8004c10:	50a3      	str	r3, [r4, r2]
 8004c12:	e7c9      	b.n	8004ba8 <_malloc_r+0x20>
 8004c14:	4622      	mov	r2, r4
 8004c16:	6864      	ldr	r4, [r4, #4]
 8004c18:	e7cc      	b.n	8004bb4 <_malloc_r+0x2c>
 8004c1a:	1cc4      	adds	r4, r0, #3
 8004c1c:	f024 0403 	bic.w	r4, r4, #3
 8004c20:	42a0      	cmp	r0, r4
 8004c22:	d0e3      	beq.n	8004bec <_malloc_r+0x64>
 8004c24:	1a21      	subs	r1, r4, r0
 8004c26:	4630      	mov	r0, r6
 8004c28:	f000 f82e 	bl	8004c88 <_sbrk_r>
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d1dd      	bne.n	8004bec <_malloc_r+0x64>
 8004c30:	e7cf      	b.n	8004bd2 <_malloc_r+0x4a>
 8004c32:	bf00      	nop
 8004c34:	20000220 	.word	0x20000220
 8004c38:	20000224 	.word	0x20000224

08004c3c <_realloc_r>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	4607      	mov	r7, r0
 8004c40:	4614      	mov	r4, r2
 8004c42:	460e      	mov	r6, r1
 8004c44:	b921      	cbnz	r1, 8004c50 <_realloc_r+0x14>
 8004c46:	4611      	mov	r1, r2
 8004c48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c4c:	f7ff bf9c 	b.w	8004b88 <_malloc_r>
 8004c50:	b922      	cbnz	r2, 8004c5c <_realloc_r+0x20>
 8004c52:	f7ff ff4d 	bl	8004af0 <_free_r>
 8004c56:	4625      	mov	r5, r4
 8004c58:	4628      	mov	r0, r5
 8004c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c5c:	f000 f830 	bl	8004cc0 <_malloc_usable_size_r>
 8004c60:	42a0      	cmp	r0, r4
 8004c62:	d20f      	bcs.n	8004c84 <_realloc_r+0x48>
 8004c64:	4621      	mov	r1, r4
 8004c66:	4638      	mov	r0, r7
 8004c68:	f7ff ff8e 	bl	8004b88 <_malloc_r>
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	2800      	cmp	r0, #0
 8004c70:	d0f2      	beq.n	8004c58 <_realloc_r+0x1c>
 8004c72:	4631      	mov	r1, r6
 8004c74:	4622      	mov	r2, r4
 8004c76:	f7ff ff13 	bl	8004aa0 <memcpy>
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f7ff ff37 	bl	8004af0 <_free_r>
 8004c82:	e7e9      	b.n	8004c58 <_realloc_r+0x1c>
 8004c84:	4635      	mov	r5, r6
 8004c86:	e7e7      	b.n	8004c58 <_realloc_r+0x1c>

08004c88 <_sbrk_r>:
 8004c88:	b538      	push	{r3, r4, r5, lr}
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	4d05      	ldr	r5, [pc, #20]	; (8004ca4 <_sbrk_r+0x1c>)
 8004c8e:	4604      	mov	r4, r0
 8004c90:	4608      	mov	r0, r1
 8004c92:	602b      	str	r3, [r5, #0]
 8004c94:	f7fd f936 	bl	8001f04 <_sbrk>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_sbrk_r+0x1a>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_sbrk_r+0x1a>
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	200002b8 	.word	0x200002b8

08004ca8 <__malloc_lock>:
 8004ca8:	4801      	ldr	r0, [pc, #4]	; (8004cb0 <__malloc_lock+0x8>)
 8004caa:	f000 b811 	b.w	8004cd0 <__retarget_lock_acquire_recursive>
 8004cae:	bf00      	nop
 8004cb0:	200002c0 	.word	0x200002c0

08004cb4 <__malloc_unlock>:
 8004cb4:	4801      	ldr	r0, [pc, #4]	; (8004cbc <__malloc_unlock+0x8>)
 8004cb6:	f000 b80c 	b.w	8004cd2 <__retarget_lock_release_recursive>
 8004cba:	bf00      	nop
 8004cbc:	200002c0 	.word	0x200002c0

08004cc0 <_malloc_usable_size_r>:
 8004cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cc4:	1f18      	subs	r0, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bfbc      	itt	lt
 8004cca:	580b      	ldrlt	r3, [r1, r0]
 8004ccc:	18c0      	addlt	r0, r0, r3
 8004cce:	4770      	bx	lr

08004cd0 <__retarget_lock_acquire_recursive>:
 8004cd0:	4770      	bx	lr

08004cd2 <__retarget_lock_release_recursive>:
 8004cd2:	4770      	bx	lr

08004cd4 <_init>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr

08004ce0 <_fini>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	bf00      	nop
 8004ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce6:	bc08      	pop	{r3}
 8004ce8:	469e      	mov	lr, r3
 8004cea:	4770      	bx	lr
=======
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009a      	lsls	r2, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <UART_SetConfig+0x118>)
 800463a:	fba2 2303 	umull	r2, r3, r2, r3
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	0119      	lsls	r1, r3, #4
 8004642:	68fa      	ldr	r2, [r7, #12]
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009a      	lsls	r2, r3, #2
 800464c:	441a      	add	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	fbb2 f2f3 	udiv	r2, r2, r3
 8004658:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <UART_SetConfig+0x118>)
 800465a:	fba3 0302 	umull	r0, r3, r3, r2
 800465e:	095b      	lsrs	r3, r3, #5
 8004660:	2064      	movs	r0, #100	; 0x64
 8004662:	fb00 f303 	mul.w	r3, r0, r3
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	3332      	adds	r3, #50	; 0x32
 800466c:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <UART_SetConfig+0x118>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004678:	4419      	add	r1, r3
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	009a      	lsls	r2, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <UART_SetConfig+0x118>)
 8004692:	fba3 0302 	umull	r0, r3, r3, r2
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2064      	movs	r0, #100	; 0x64
 800469a:	fb00 f303 	mul.w	r3, r0, r3
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	3332      	adds	r3, #50	; 0x32
 80046a4:	4a07      	ldr	r2, [pc, #28]	; (80046c4 <UART_SetConfig+0x118>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	f003 020f 	and.w	r2, r3, #15
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	440a      	add	r2, r1
 80046b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40013800 	.word	0x40013800
 80046c4:	51eb851f 	.word	0x51eb851f

080046c8 <__libc_init_array>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	2600      	movs	r6, #0
 80046cc:	4d0c      	ldr	r5, [pc, #48]	; (8004700 <__libc_init_array+0x38>)
 80046ce:	4c0d      	ldr	r4, [pc, #52]	; (8004704 <__libc_init_array+0x3c>)
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	42a6      	cmp	r6, r4
 80046d6:	d109      	bne.n	80046ec <__libc_init_array+0x24>
 80046d8:	f000 f822 	bl	8004720 <_init>
 80046dc:	2600      	movs	r6, #0
 80046de:	4d0a      	ldr	r5, [pc, #40]	; (8004708 <__libc_init_array+0x40>)
 80046e0:	4c0a      	ldr	r4, [pc, #40]	; (800470c <__libc_init_array+0x44>)
 80046e2:	1b64      	subs	r4, r4, r5
 80046e4:	10a4      	asrs	r4, r4, #2
 80046e6:	42a6      	cmp	r6, r4
 80046e8:	d105      	bne.n	80046f6 <__libc_init_array+0x2e>
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f0:	4798      	blx	r3
 80046f2:	3601      	adds	r6, #1
 80046f4:	e7ee      	b.n	80046d4 <__libc_init_array+0xc>
 80046f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046fa:	4798      	blx	r3
 80046fc:	3601      	adds	r6, #1
 80046fe:	e7f2      	b.n	80046e6 <__libc_init_array+0x1e>
 8004700:	08004760 	.word	0x08004760
 8004704:	08004760 	.word	0x08004760
 8004708:	08004760 	.word	0x08004760
 800470c:	08004764 	.word	0x08004764

08004710 <memset>:
 8004710:	4603      	mov	r3, r0
 8004712:	4402      	add	r2, r0
 8004714:	4293      	cmp	r3, r2
 8004716:	d100      	bne.n	800471a <memset+0xa>
 8004718:	4770      	bx	lr
 800471a:	f803 1b01 	strb.w	r1, [r3], #1
 800471e:	e7f9      	b.n	8004714 <memset+0x4>

08004720 <_init>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr

0800472c <_fini>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	bf00      	nop
 8004730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004732:	bc08      	pop	{r3}
 8004734:	469e      	mov	lr, r3
 8004736:	4770      	bx	lr
>>>>>>> 906bd82a3581f7b670db585618f455e211a3e553
