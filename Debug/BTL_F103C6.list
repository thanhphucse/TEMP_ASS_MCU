
BTL_F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f14  08004f14  00020150  2**0
                  CONTENTS
  4 .ARM          00000000  08004f14  08004f14  00020150  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f14  08004f14  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08004f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000150  0800506c  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  0800506c  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001197a  00000000  00000000  00020179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000299b  00000000  00000000  00031af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00034490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  000353d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dec  00000000  00000000  00036178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011114  00000000  00000000  0004ef64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000898d0  00000000  00000000  00060078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9948  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea0  00000000  00000000  000e999c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000150 	.word	0x20000150
 8000128:	00000000 	.word	0x00000000
 800012c:	08004e30 	.word	0x08004e30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000154 	.word	0x20000154
 8000148:	08004e30 	.word	0x08004e30

0800014c <isButton_BUT1_Pressed>:
int button_BUT3_LongPressed_flag = 0;
int button_PEDES_LongPressed_flag = 0;


int isButton_BUT1_Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_BUT1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton_BUT1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton_BUT1_Pressed+0x16>
	{
		button_BUT1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton_BUT1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton_BUT1_Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000016c 	.word	0x2000016c

08000170 <isButton_BUT2_Pressed>:
int isButton_BUT2_Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_BUT2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton_BUT2_Pressed+0x16>
	{
		button_BUT2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton_BUT2_Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000170 	.word	0x20000170

08000194 <isButton_BUT3_Pressed>:
int isButton_BUT3_Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_BUT3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton_BUT3_Pressed+0x16>
	{
		button_BUT3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton_BUT3_Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000174 	.word	0x20000174

080001b8 <isButton_Pedes_Pressed>:
int isButton_Pedes_Pressed()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button_PEDES_flag == 1)
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton_Pedes_Pressed+0x16>
	{
		button_PEDES_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton_Pedes_Pressed+0x18>
	}
	else return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000178 	.word	0x20000178

080001dc <getKeyInput>:
	else return 0;
}


void getKeyInput()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e187      	b.n	80004f8 <getKeyInput+0x31c>
		// button debouncing
		keyReg0[i] = keyReg1[i];
 80001e8:	4a7f      	ldr	r2, [pc, #508]	; (80003e8 <getKeyInput+0x20c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	497e      	ldr	r1, [pc, #504]	; (80003ec <getKeyInput+0x210>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001f8:	4a7d      	ldr	r2, [pc, #500]	; (80003f0 <getKeyInput+0x214>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4979      	ldr	r1, [pc, #484]	; (80003e8 <getKeyInput+0x20c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//handle button 1
		if(i == 0){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d154      	bne.n	80002b8 <getKeyInput+0xdc>
			keyReg2[i] = HAL_GPIO_ReadPin(A1_BUTTON1_GPIO_Port, A1_BUTTON1_Pin);
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	4878      	ldr	r0, [pc, #480]	; (80003f4 <getKeyInput+0x218>)
 8000214:	f002 fc82 	bl	8002b1c <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	4619      	mov	r1, r3
 800021c:	4a74      	ldr	r2, [pc, #464]	; (80003f0 <getKeyInput+0x214>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000224:	4a71      	ldr	r2, [pc, #452]	; (80003ec <getKeyInput+0x210>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	496e      	ldr	r1, [pc, #440]	; (80003e8 <getKeyInput+0x20c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d13f      	bne.n	80002b8 <getKeyInput+0xdc>
 8000238:	4a6b      	ldr	r2, [pc, #428]	; (80003e8 <getKeyInput+0x20c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	496b      	ldr	r1, [pc, #428]	; (80003f0 <getKeyInput+0x214>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d135      	bne.n	80002b8 <getKeyInput+0xdc>
			{
				 //case short pressed
				if(keyReg3[i] != keyReg2[i])
 800024c:	4a6a      	ldr	r2, [pc, #424]	; (80003f8 <getKeyInput+0x21c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4966      	ldr	r1, [pc, #408]	; (80003f0 <getKeyInput+0x214>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d015      	beq.n	800028c <getKeyInput+0xb0>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 8000260:	4a63      	ldr	r2, [pc, #396]	; (80003f0 <getKeyInput+0x214>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	4963      	ldr	r1, [pc, #396]	; (80003f8 <getKeyInput+0x21c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000270:	4a5f      	ldr	r2, [pc, #380]	; (80003f0 <getKeyInput+0x214>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d11d      	bne.n	80002b8 <getKeyInput+0xdc>
					{
						//TODO
						button_BUT1_flag = 1;
 800027c:	4b5f      	ldr	r3, [pc, #380]	; (80003fc <getKeyInput+0x220>)
 800027e:	2201      	movs	r2, #1
 8000280:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000282:	4b5f      	ldr	r3, [pc, #380]	; (8000400 <getKeyInput+0x224>)
 8000284:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	e015      	b.n	80002b8 <getKeyInput+0xdc>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800028c:	4a58      	ldr	r2, [pc, #352]	; (80003f0 <getKeyInput+0x214>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10f      	bne.n	80002b8 <getKeyInput+0xdc>
						timerForKeyPress--;
 8000298:	4b59      	ldr	r3, [pc, #356]	; (8000400 <getKeyInput+0x224>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a58      	ldr	r2, [pc, #352]	; (8000400 <getKeyInput+0x224>)
 80002a0:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80002a2:	4b57      	ldr	r3, [pc, #348]	; (8000400 <getKeyInput+0x224>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d106      	bne.n	80002b8 <getKeyInput+0xdc>
						{
							//TODO
							button_BUT1_LongPressed_flag = 1;
 80002aa:	4b56      	ldr	r3, [pc, #344]	; (8000404 <getKeyInput+0x228>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80002b0:	4b53      	ldr	r3, [pc, #332]	; (8000400 <getKeyInput+0x224>)
 80002b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002b6:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 2
		if(i == 1){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d153      	bne.n	8000366 <getKeyInput+0x18a>
			keyReg2[i] = HAL_GPIO_ReadPin(A2_BUTTON2_GPIO_Port, A2_BUTTON2_Pin);
 80002be:	2120      	movs	r1, #32
 80002c0:	4851      	ldr	r0, [pc, #324]	; (8000408 <getKeyInput+0x22c>)
 80002c2:	f002 fc2b 	bl	8002b1c <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4619      	mov	r1, r3
 80002ca:	4a49      	ldr	r2, [pc, #292]	; (80003f0 <getKeyInput+0x214>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80002d2:	4a46      	ldr	r2, [pc, #280]	; (80003ec <getKeyInput+0x210>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002da:	4943      	ldr	r1, [pc, #268]	; (80003e8 <getKeyInput+0x20c>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d13f      	bne.n	8000366 <getKeyInput+0x18a>
 80002e6:	4a40      	ldr	r2, [pc, #256]	; (80003e8 <getKeyInput+0x20c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ee:	4940      	ldr	r1, [pc, #256]	; (80003f0 <getKeyInput+0x214>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d135      	bne.n	8000366 <getKeyInput+0x18a>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80002fa:	4a3f      	ldr	r2, [pc, #252]	; (80003f8 <getKeyInput+0x21c>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000302:	493b      	ldr	r1, [pc, #236]	; (80003f0 <getKeyInput+0x214>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800030a:	429a      	cmp	r2, r3
 800030c:	d015      	beq.n	800033a <getKeyInput+0x15e>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 800030e:	4a38      	ldr	r2, [pc, #224]	; (80003f0 <getKeyInput+0x214>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000316:	4938      	ldr	r1, [pc, #224]	; (80003f8 <getKeyInput+0x21c>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 800031e:	4a34      	ldr	r2, [pc, #208]	; (80003f0 <getKeyInput+0x214>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11d      	bne.n	8000366 <getKeyInput+0x18a>
					{
						//TODO
						button_BUT2_flag = 1;
 800032a:	4b38      	ldr	r3, [pc, #224]	; (800040c <getKeyInput+0x230>)
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000330:	4b33      	ldr	r3, [pc, #204]	; (8000400 <getKeyInput+0x224>)
 8000332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	e015      	b.n	8000366 <getKeyInput+0x18a>
					}
				}
				else// key long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800033a:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <getKeyInput+0x214>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10f      	bne.n	8000366 <getKeyInput+0x18a>
						timerForKeyPress--;
 8000346:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <getKeyInput+0x224>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a2c      	ldr	r2, [pc, #176]	; (8000400 <getKeyInput+0x224>)
 800034e:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <getKeyInput+0x224>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d106      	bne.n	8000366 <getKeyInput+0x18a>
						{
							//TODO
							button_BUT2_LongPressed_flag = 1;
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <getKeyInput+0x234>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <getKeyInput+0x224>)
 8000360:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000364:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 3
		if(i == 2){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d16b      	bne.n	8000444 <getKeyInput+0x268>
			keyReg2[i] = HAL_GPIO_ReadPin(A3_BUTTON3_GPIO_Port, A3_BUTTON3_Pin);
 800036c:	2101      	movs	r1, #1
 800036e:	4821      	ldr	r0, [pc, #132]	; (80003f4 <getKeyInput+0x218>)
 8000370:	f002 fbd4 	bl	8002b1c <HAL_GPIO_ReadPin>
 8000374:	4603      	mov	r3, r0
 8000376:	4619      	mov	r1, r3
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <getKeyInput+0x214>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000380:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <getKeyInput+0x210>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000388:	4917      	ldr	r1, [pc, #92]	; (80003e8 <getKeyInput+0x20c>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000390:	429a      	cmp	r2, r3
 8000392:	d157      	bne.n	8000444 <getKeyInput+0x268>
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <getKeyInput+0x20c>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <getKeyInput+0x214>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d14d      	bne.n	8000444 <getKeyInput+0x268>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <getKeyInput+0x21c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b0:	490f      	ldr	r1, [pc, #60]	; (80003f0 <getKeyInput+0x214>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d02d      	beq.n	8000418 <getKeyInput+0x23c>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <getKeyInput+0x214>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <getKeyInput+0x21c>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80003cc:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <getKeyInput+0x214>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d135      	bne.n	8000444 <getKeyInput+0x268>
					{
						//TODO
						button_BUT3_flag = 1;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <getKeyInput+0x238>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <getKeyInput+0x224>)
 80003e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e02d      	b.n	8000444 <getKeyInput+0x268>
 80003e8:	20000010 	.word	0x20000010
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000020 	.word	0x20000020
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	20000030 	.word	0x20000030
 80003fc:	2000016c 	.word	0x2000016c
 8000400:	20000040 	.word	0x20000040
 8000404:	2000017c 	.word	0x2000017c
 8000408:	40010800 	.word	0x40010800
 800040c:	20000170 	.word	0x20000170
 8000410:	20000180 	.word	0x20000180
 8000414:	20000174 	.word	0x20000174
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <getKeyInput+0x330>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10f      	bne.n	8000444 <getKeyInput+0x268>
						timerForKeyPress--;
 8000424:	4b3a      	ldr	r3, [pc, #232]	; (8000510 <getKeyInput+0x334>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	4a39      	ldr	r2, [pc, #228]	; (8000510 <getKeyInput+0x334>)
 800042c:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <getKeyInput+0x334>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d106      	bne.n	8000444 <getKeyInput+0x268>
						{
							//TODO
							button_BUT3_LongPressed_flag = 1;
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <getKeyInput+0x338>)
 8000438:	2201      	movs	r2, #1
 800043a:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <getKeyInput+0x334>)
 800043e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000442:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button pedestrian
		if(i == 3){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d153      	bne.n	80004f2 <getKeyInput+0x316>
			keyReg2[i] = HAL_GPIO_ReadPin(A0_PEDES_BUTTON_GPIO_Port, A0_PEDES_BUTTON_Pin);
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	4832      	ldr	r0, [pc, #200]	; (8000518 <getKeyInput+0x33c>)
 800044e:	f002 fb65 	bl	8002b1c <HAL_GPIO_ReadPin>
 8000452:	4603      	mov	r3, r0
 8000454:	4619      	mov	r1, r3
 8000456:	4a2d      	ldr	r2, [pc, #180]	; (800050c <getKeyInput+0x330>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 800045e:	4a2f      	ldr	r2, [pc, #188]	; (800051c <getKeyInput+0x340>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000466:	492e      	ldr	r1, [pc, #184]	; (8000520 <getKeyInput+0x344>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800046e:	429a      	cmp	r2, r3
 8000470:	d13f      	bne.n	80004f2 <getKeyInput+0x316>
 8000472:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <getKeyInput+0x344>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047a:	4924      	ldr	r1, [pc, #144]	; (800050c <getKeyInput+0x330>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000482:	429a      	cmp	r2, r3
 8000484:	d135      	bne.n	80004f2 <getKeyInput+0x316>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 8000486:	4a27      	ldr	r2, [pc, #156]	; (8000524 <getKeyInput+0x348>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	491f      	ldr	r1, [pc, #124]	; (800050c <getKeyInput+0x330>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000496:	429a      	cmp	r2, r3
 8000498:	d015      	beq.n	80004c6 <getKeyInput+0x2ea>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <getKeyInput+0x330>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a2:	4920      	ldr	r1, [pc, #128]	; (8000524 <getKeyInput+0x348>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80004aa:	4a18      	ldr	r2, [pc, #96]	; (800050c <getKeyInput+0x330>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d11d      	bne.n	80004f2 <getKeyInput+0x316>
					{
						//TODO
						button_PEDES_flag = 1;
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <getKeyInput+0x34c>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <getKeyInput+0x334>)
 80004be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	e015      	b.n	80004f2 <getKeyInput+0x316>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <getKeyInput+0x330>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d10f      	bne.n	80004f2 <getKeyInput+0x316>
						timerForKeyPress--;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <getKeyInput+0x334>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <getKeyInput+0x334>)
 80004da:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <getKeyInput+0x334>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d106      	bne.n	80004f2 <getKeyInput+0x316>
						{
							//TODO
							button_PEDES_LongPressed_flag = 1;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <getKeyInput+0x350>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <getKeyInput+0x334>)
 80004ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004f0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f77f ae74 	ble.w	80001e8 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000020 	.word	0x20000020
 8000510:	20000040 	.word	0x20000040
 8000514:	20000184 	.word	0x20000184
 8000518:	40010800 	.word	0x40010800
 800051c:	20000000 	.word	0x20000000
 8000520:	20000010 	.word	0x20000010
 8000524:	20000030 	.word	0x20000030
 8000528:	20000178 	.word	0x20000178
 800052c:	20000188 	.word	0x20000188

08000530 <FSM_Buzzer>:
//int FSM_Buzzer_State = OFF;
//int FSM_Buzzer_State = OFF;

TIM_HandleTypeDef htim2;

void FSM_Buzzer(){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	switch(FSM_Buzzer_State){
 8000534:	4b24      	ldr	r3, [pc, #144]	; (80005c8 <FSM_Buzzer+0x98>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b34      	cmp	r3, #52	; 0x34
 800053a:	d01f      	beq.n	800057c <FSM_Buzzer+0x4c>
 800053c:	2b34      	cmp	r3, #52	; 0x34
 800053e:	dc3d      	bgt.n	80005bc <FSM_Buzzer+0x8c>
 8000540:	2b32      	cmp	r3, #50	; 0x32
 8000542:	d002      	beq.n	800054a <FSM_Buzzer+0x1a>
 8000544:	2b33      	cmp	r3, #51	; 0x33
 8000546:	d007      	beq.n	8000558 <FSM_Buzzer+0x28>
			FSM_Buzzer_State = OFF;
			set_off_buzzer();
		}
		break;
	default:
		break;
 8000548:	e038      	b.n	80005bc <FSM_Buzzer+0x8c>
		set_off_buzzer();
 800054a:	f001 ff1b 	bl	8002384 <set_off_buzzer>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800054e:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <FSM_Buzzer+0x9c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2200      	movs	r2, #0
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8000556:	e034      	b.n	80005c2 <FSM_Buzzer+0x92>
		if(timer32_flag==1){  //end 1s
 8000558:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <FSM_Buzzer+0xa0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d105      	bne.n	800056c <FSM_Buzzer+0x3c>
			FSM_Buzzer_State = OFF;
 8000560:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <FSM_Buzzer+0x98>)
 8000562:	2232      	movs	r2, #50	; 0x32
 8000564:	601a      	str	r2, [r3, #0]
			set_off_buzzer();
 8000566:	f001 ff0d 	bl	8002384 <set_off_buzzer>
		break;
 800056a:	e02a      	b.n	80005c2 <FSM_Buzzer+0x92>
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 399);
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <FSM_Buzzer+0x9c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f240 128f 	movw	r2, #399	; 0x18f
 8000574:	635a      	str	r2, [r3, #52]	; 0x34
				set_on_buzzer();
 8000576:	f001 fef9 	bl	800236c <set_on_buzzer>
		break;
 800057a:	e022      	b.n	80005c2 <FSM_Buzzer+0x92>
		if(time_red_horizontal_temp < 4 ){
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <FSM_Buzzer+0xa4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b03      	cmp	r3, #3
 8000582:	dc15      	bgt.n	80005b0 <FSM_Buzzer+0x80>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,Increase_Duty_Cycle);
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <FSM_Buzzer+0xa8>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <FSM_Buzzer+0x9c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	635a      	str	r2, [r3, #52]	; 0x34
			set_on_buzzer();
 800058e:	f001 feed 	bl	800236c <set_on_buzzer>
			Increase_Duty_Cycle += 50;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <FSM_Buzzer+0xa8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3332      	adds	r3, #50	; 0x32
 8000598:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <FSM_Buzzer+0xa8>)
 800059a:	6013      	str	r3, [r2, #0]
			if(Increase_Duty_Cycle >= 999){
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <FSM_Buzzer+0xa8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f240 32e6 	movw	r2, #998	; 0x3e6
 80005a4:	4293      	cmp	r3, r2
 80005a6:	dd0b      	ble.n	80005c0 <FSM_Buzzer+0x90>
				Increase_Duty_Cycle = 99;
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <FSM_Buzzer+0xa8>)
 80005aa:	2263      	movs	r2, #99	; 0x63
 80005ac:	601a      	str	r2, [r3, #0]
		break;
 80005ae:	e007      	b.n	80005c0 <FSM_Buzzer+0x90>
			FSM_Buzzer_State = OFF;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <FSM_Buzzer+0x98>)
 80005b2:	2232      	movs	r2, #50	; 0x32
 80005b4:	601a      	str	r2, [r3, #0]
			set_off_buzzer();
 80005b6:	f001 fee5 	bl	8002384 <set_off_buzzer>
		break;
 80005ba:	e001      	b.n	80005c0 <FSM_Buzzer+0x90>
		break;
 80005bc:	bf00      	nop
 80005be:	e000      	b.n	80005c2 <FSM_Buzzer+0x92>
		break;
 80005c0:	bf00      	nop
	}
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000d4 	.word	0x200000d4
 80005cc:	2000024c 	.word	0x2000024c
 80005d0:	200001f8 	.word	0x200001f8
 80005d4:	200000b0 	.word	0x200000b0
 80005d8:	200000d8 	.word	0x200000d8

080005dc <fsm_7SEG_horizontal_run>:
#include "control_7SEG.h"

int status_7SEG_horizontal = display_countDown_horizontal;


void fsm_7SEG_horizontal_run(){
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	switch(status_7SEG_horizontal){
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <fsm_7SEG_horizontal_run+0x88>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	d837      	bhi.n	800065a <fsm_7SEG_horizontal_run+0x7e>
 80005ea:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <fsm_7SEG_horizontal_run+0x14>)
 80005ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f0:	0800065b 	.word	0x0800065b
 80005f4:	0800065b 	.word	0x0800065b
 80005f8:	0800065b 	.word	0x0800065b
 80005fc:	0800065b 	.word	0x0800065b
 8000600:	0800065b 	.word	0x0800065b
 8000604:	0800065b 	.word	0x0800065b
 8000608:	0800065b 	.word	0x0800065b
 800060c:	0800065b 	.word	0x0800065b
 8000610:	0800065b 	.word	0x0800065b
 8000614:	0800065b 	.word	0x0800065b
 8000618:	0800065b 	.word	0x0800065b
 800061c:	0800065b 	.word	0x0800065b
 8000620:	0800065b 	.word	0x0800065b
 8000624:	08000631 	.word	0x08000631
 8000628:	0800063f 	.word	0x0800063f
 800062c:	0800064d 	.word	0x0800064d
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
		case display_mode02:
			_7SEG_buffer_horizontal[0] = 0;
 8000630:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 2;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 8000638:	2202      	movs	r2, #2
 800063a:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 800063c:	e00e      	b.n	800065c <fsm_7SEG_horizontal_run+0x80>
		case display_mode03:
			_7SEG_buffer_horizontal[0] = 0;
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 3;
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 8000646:	2203      	movs	r2, #3
 8000648:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 800064a:	e007      	b.n	800065c <fsm_7SEG_horizontal_run+0x80>
		case display_mode04:
			_7SEG_buffer_horizontal[0] = 0;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 4;
 8000652:	4b05      	ldr	r3, [pc, #20]	; (8000668 <fsm_7SEG_horizontal_run+0x8c>)
 8000654:	2204      	movs	r2, #4
 8000656:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 8000658:	e000      	b.n	800065c <fsm_7SEG_horizontal_run+0x80>
		case off_horizontal:
//			off7SEG_horizontal();
			break;
		default:
			break;
 800065a:	bf00      	nop
	}
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	20000044 	.word	0x20000044
 8000668:	20000234 	.word	0x20000234

0800066c <fsm_7SEG_vertical_run>:

int status_7SEG_vertical = display_countDown_vertical;



void fsm_7SEG_vertical_run(){
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	switch(status_7SEG_vertical){
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <fsm_7SEG_vertical_run+0x2c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b10      	cmp	r3, #16
 8000676:	d006      	beq.n	8000686 <fsm_7SEG_vertical_run+0x1a>
 8000678:	2b10      	cmp	r3, #16
 800067a:	dc06      	bgt.n	800068a <fsm_7SEG_vertical_run+0x1e>
 800067c:	f113 0f02 	cmn.w	r3, #2
 8000680:	d005      	beq.n	800068e <fsm_7SEG_vertical_run+0x22>
 8000682:	2b0f      	cmp	r3, #15
			break;
		case off_vertical:
//			off7SEG_vertical();
			break;
		default:
			break;
 8000684:	e001      	b.n	800068a <fsm_7SEG_vertical_run+0x1e>
			break;
 8000686:	bf00      	nop
 8000688:	e002      	b.n	8000690 <fsm_7SEG_vertical_run+0x24>
			break;
 800068a:	bf00      	nop
 800068c:	e000      	b.n	8000690 <fsm_7SEG_vertical_run+0x24>
			break;
 800068e:	bf00      	nop
	}
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000048 	.word	0x20000048

0800069c <fsm_mannual_run>:
UART_HandleTypeDef huart2;
uint8_t str1[30] = " ";

status_mannual = mannual_init;

void fsm_mannual_run(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	switch(status_mannual){
 80006a0:	4b9d      	ldr	r3, [pc, #628]	; (8000918 <fsm_mannual_run+0x27c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3b3c      	subs	r3, #60	; 0x3c
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	f200 8133 	bhi.w	8000912 <fsm_mannual_run+0x276>
 80006ac:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <fsm_mannual_run+0x18>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d9 	.word	0x080006d9
 80006bc:	0800076f 	.word	0x0800076f
 80006c0:	08000805 	.word	0x08000805
 80006c4:	0800089b 	.word	0x0800089b
		case mannual_init:
			status_mannual = mannual_red_green;
 80006c8:	4b93      	ldr	r3, [pc, #588]	; (8000918 <fsm_mannual_run+0x27c>)
 80006ca:	223d      	movs	r2, #61	; 0x3d
 80006cc:	601a      	str	r2, [r3, #0]
			setTimer9(5000);
 80006ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80006d2:	f001 f9ed 	bl	8001ab0 <setTimer9>
			break;
 80006d6:	e11d      	b.n	8000914 <fsm_mannual_run+0x278>
		case mannual_red_green:
			if(timer9_flag == 1){
 80006d8:	4b90      	ldr	r3, [pc, #576]	; (800091c <fsm_mannual_run+0x280>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d10e      	bne.n	80006fe <fsm_mannual_run+0x62>
				status_system = INIT;
 80006e0:	4b8f      	ldr	r3, [pc, #572]	; (8000920 <fsm_mannual_run+0x284>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80006e6:	4b8c      	ldr	r3, [pc, #560]	; (8000918 <fsm_mannual_run+0x27c>)
 80006e8:	223c      	movs	r2, #60	; 0x3c
 80006ea:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 80006ec:	4b8d      	ldr	r3, [pc, #564]	; (8000924 <fsm_mannual_run+0x288>)
 80006ee:	2213      	movs	r2, #19
 80006f0:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80006f2:	4b8d      	ldr	r3, [pc, #564]	; (8000928 <fsm_mannual_run+0x28c>)
 80006f4:	2217      	movs	r2, #23
 80006f6:	601a      	str	r2, [r3, #0]

//				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 1 \r"), 1000);

				resetTimeTraffic();
 80006f8:	f001 fdc6 	bl	8002288 <resetTimeTraffic>
				break;
 80006fc:	e10a      	b.n	8000914 <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 80006fe:	f7ff fd37 	bl	8000170 <isButton_BUT2_Pressed>
 8000702:	4603      	mov	r3, r0
 8000704:	2b01      	cmp	r3, #1
 8000706:	d106      	bne.n	8000716 <fsm_mannual_run+0x7a>
				status_mannual = mannual_red_yellow;
 8000708:	4b83      	ldr	r3, [pc, #524]	; (8000918 <fsm_mannual_run+0x27c>)
 800070a:	223e      	movs	r2, #62	; 0x3e
 800070c:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 800070e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000712:	f001 f9cd 	bl	8001ab0 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000716:	f7ff fd19 	bl	800014c <isButton_BUT1_Pressed>
 800071a:	4603      	mov	r3, r0
 800071c:	2b01      	cmp	r3, #1
 800071e:	d121      	bne.n	8000764 <fsm_mannual_run+0xc8>
				status_mannual = mannual_init;
 8000720:	4b7d      	ldr	r3, [pc, #500]	; (8000918 <fsm_mannual_run+0x27c>)
 8000722:	223c      	movs	r2, #60	; 0x3c
 8000724:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 8000726:	4b7e      	ldr	r3, [pc, #504]	; (8000920 <fsm_mannual_run+0x284>)
 8000728:	2202      	movs	r2, #2
 800072a:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 800072c:	4a7f      	ldr	r2, [pc, #508]	; (800092c <fsm_mannual_run+0x290>)
 800072e:	4980      	ldr	r1, [pc, #512]	; (8000930 <fsm_mannual_run+0x294>)
 8000730:	4880      	ldr	r0, [pc, #512]	; (8000934 <fsm_mannual_run+0x298>)
 8000732:	f003 ff43 	bl	80045bc <siprintf>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	497d      	ldr	r1, [pc, #500]	; (8000934 <fsm_mannual_run+0x298>)
 8000740:	487d      	ldr	r0, [pc, #500]	; (8000938 <fsm_mannual_run+0x29c>)
 8000742:	f003 fa7e 	bl	8003c42 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%d \n", time_red_vertical), 1000);
 8000746:	4b7d      	ldr	r3, [pc, #500]	; (800093c <fsm_mannual_run+0x2a0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	497c      	ldr	r1, [pc, #496]	; (8000940 <fsm_mannual_run+0x2a4>)
 800074e:	4879      	ldr	r0, [pc, #484]	; (8000934 <fsm_mannual_run+0x298>)
 8000750:	f003 ff34 	bl	80045bc <siprintf>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075c:	4975      	ldr	r1, [pc, #468]	; (8000934 <fsm_mannual_run+0x298>)
 800075e:	4876      	ldr	r0, [pc, #472]	; (8000938 <fsm_mannual_run+0x29c>)
 8000760:	f003 fa6f 	bl	8003c42 <HAL_UART_Transmit>
			}
			setRed_horizontal();
 8000764:	f001 fca0 	bl	80020a8 <setRed_horizontal>
			setGreen_vertical();
 8000768:	f001 fcea 	bl	8002140 <setGreen_vertical>
			break;
 800076c:	e0d2      	b.n	8000914 <fsm_mannual_run+0x278>
		case mannual_red_yellow:
			if(timer9_flag == 1){
 800076e:	4b6b      	ldr	r3, [pc, #428]	; (800091c <fsm_mannual_run+0x280>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d10e      	bne.n	8000794 <fsm_mannual_run+0xf8>
				status_system = INIT;
 8000776:	4b6a      	ldr	r3, [pc, #424]	; (8000920 <fsm_mannual_run+0x284>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 800077c:	4b66      	ldr	r3, [pc, #408]	; (8000918 <fsm_mannual_run+0x27c>)
 800077e:	223c      	movs	r2, #60	; 0x3c
 8000780:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000782:	4b68      	ldr	r3, [pc, #416]	; (8000924 <fsm_mannual_run+0x288>)
 8000784:	2213      	movs	r2, #19
 8000786:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000788:	4b67      	ldr	r3, [pc, #412]	; (8000928 <fsm_mannual_run+0x28c>)
 800078a:	2217      	movs	r2, #23
 800078c:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 800078e:	f001 fd7b 	bl	8002288 <resetTimeTraffic>
				break;
 8000792:	e0bf      	b.n	8000914 <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 8000794:	f7ff fcec 	bl	8000170 <isButton_BUT2_Pressed>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d106      	bne.n	80007ac <fsm_mannual_run+0x110>
				status_mannual = mannual_green_red;
 800079e:	4b5e      	ldr	r3, [pc, #376]	; (8000918 <fsm_mannual_run+0x27c>)
 80007a0:	223f      	movs	r2, #63	; 0x3f
 80007a2:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80007a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80007a8:	f001 f982 	bl	8001ab0 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 80007ac:	f7ff fcce 	bl	800014c <isButton_BUT1_Pressed>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d121      	bne.n	80007fa <fsm_mannual_run+0x15e>
				status_mannual = mannual_init;
 80007b6:	4b58      	ldr	r3, [pc, #352]	; (8000918 <fsm_mannual_run+0x27c>)
 80007b8:	223c      	movs	r2, #60	; 0x3c
 80007ba:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 80007bc:	4b58      	ldr	r3, [pc, #352]	; (8000920 <fsm_mannual_run+0x284>)
 80007be:	2202      	movs	r2, #2
 80007c0:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 80007c2:	4a5a      	ldr	r2, [pc, #360]	; (800092c <fsm_mannual_run+0x290>)
 80007c4:	495a      	ldr	r1, [pc, #360]	; (8000930 <fsm_mannual_run+0x294>)
 80007c6:	485b      	ldr	r0, [pc, #364]	; (8000934 <fsm_mannual_run+0x298>)
 80007c8:	f003 fef8 	bl	80045bc <siprintf>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d4:	4957      	ldr	r1, [pc, #348]	; (8000934 <fsm_mannual_run+0x298>)
 80007d6:	4858      	ldr	r0, [pc, #352]	; (8000938 <fsm_mannual_run+0x29c>)
 80007d8:	f003 fa33 	bl	8003c42 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%d \n", time_red_vertical), 1000);
 80007dc:	4b57      	ldr	r3, [pc, #348]	; (800093c <fsm_mannual_run+0x2a0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4957      	ldr	r1, [pc, #348]	; (8000940 <fsm_mannual_run+0x2a4>)
 80007e4:	4853      	ldr	r0, [pc, #332]	; (8000934 <fsm_mannual_run+0x298>)
 80007e6:	f003 fee9 	bl	80045bc <siprintf>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	4950      	ldr	r1, [pc, #320]	; (8000934 <fsm_mannual_run+0x298>)
 80007f4:	4850      	ldr	r0, [pc, #320]	; (8000938 <fsm_mannual_run+0x29c>)
 80007f6:	f003 fa24 	bl	8003c42 <HAL_UART_Transmit>
			}
			setRed_horizontal();
 80007fa:	f001 fc55 	bl	80020a8 <setRed_horizontal>
			setYellow_vertical();
 80007fe:	f001 fcaf 	bl	8002160 <setYellow_vertical>
			break;
 8000802:	e087      	b.n	8000914 <fsm_mannual_run+0x278>
		case mannual_green_red:
			if(timer9_flag == 1){
 8000804:	4b45      	ldr	r3, [pc, #276]	; (800091c <fsm_mannual_run+0x280>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d10e      	bne.n	800082a <fsm_mannual_run+0x18e>
				status_system = INIT;
 800080c:	4b44      	ldr	r3, [pc, #272]	; (8000920 <fsm_mannual_run+0x284>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000812:	4b41      	ldr	r3, [pc, #260]	; (8000918 <fsm_mannual_run+0x27c>)
 8000814:	223c      	movs	r2, #60	; 0x3c
 8000816:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000818:	4b42      	ldr	r3, [pc, #264]	; (8000924 <fsm_mannual_run+0x288>)
 800081a:	2213      	movs	r2, #19
 800081c:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 800081e:	4b42      	ldr	r3, [pc, #264]	; (8000928 <fsm_mannual_run+0x28c>)
 8000820:	2217      	movs	r2, #23
 8000822:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 8000824:	f001 fd30 	bl	8002288 <resetTimeTraffic>
				break;
 8000828:	e074      	b.n	8000914 <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 800082a:	f7ff fca1 	bl	8000170 <isButton_BUT2_Pressed>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d106      	bne.n	8000842 <fsm_mannual_run+0x1a6>
				status_mannual = mannual_yellow_red;
 8000834:	4b38      	ldr	r3, [pc, #224]	; (8000918 <fsm_mannual_run+0x27c>)
 8000836:	2240      	movs	r2, #64	; 0x40
 8000838:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 800083a:	f241 3088 	movw	r0, #5000	; 0x1388
 800083e:	f001 f937 	bl	8001ab0 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000842:	f7ff fc83 	bl	800014c <isButton_BUT1_Pressed>
 8000846:	4603      	mov	r3, r0
 8000848:	2b01      	cmp	r3, #1
 800084a:	d121      	bne.n	8000890 <fsm_mannual_run+0x1f4>
				status_system = MODE2;
 800084c:	4b34      	ldr	r3, [pc, #208]	; (8000920 <fsm_mannual_run+0x284>)
 800084e:	2202      	movs	r2, #2
 8000850:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000852:	4b31      	ldr	r3, [pc, #196]	; (8000918 <fsm_mannual_run+0x27c>)
 8000854:	223c      	movs	r2, #60	; 0x3c
 8000856:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 8000858:	4a34      	ldr	r2, [pc, #208]	; (800092c <fsm_mannual_run+0x290>)
 800085a:	4935      	ldr	r1, [pc, #212]	; (8000930 <fsm_mannual_run+0x294>)
 800085c:	4835      	ldr	r0, [pc, #212]	; (8000934 <fsm_mannual_run+0x298>)
 800085e:	f003 fead 	bl	80045bc <siprintf>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	4932      	ldr	r1, [pc, #200]	; (8000934 <fsm_mannual_run+0x298>)
 800086c:	4832      	ldr	r0, [pc, #200]	; (8000938 <fsm_mannual_run+0x29c>)
 800086e:	f003 f9e8 	bl	8003c42 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%d \n", time_red_vertical), 1000);
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <fsm_mannual_run+0x2a0>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	4931      	ldr	r1, [pc, #196]	; (8000940 <fsm_mannual_run+0x2a4>)
 800087a:	482e      	ldr	r0, [pc, #184]	; (8000934 <fsm_mannual_run+0x298>)
 800087c:	f003 fe9e 	bl	80045bc <siprintf>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000888:	492a      	ldr	r1, [pc, #168]	; (8000934 <fsm_mannual_run+0x298>)
 800088a:	482b      	ldr	r0, [pc, #172]	; (8000938 <fsm_mannual_run+0x29c>)
 800088c:	f003 f9d9 	bl	8003c42 <HAL_UART_Transmit>
			}
			setGreen_horizontal();
 8000890:	f001 fc1e 	bl	80020d0 <setGreen_horizontal>
			setRed_vertical();
 8000894:	f001 fc44 	bl	8002120 <setRed_vertical>
			break;
 8000898:	e03c      	b.n	8000914 <fsm_mannual_run+0x278>
		case mannual_yellow_red:
			if(timer9_flag == 1){
 800089a:	4b20      	ldr	r3, [pc, #128]	; (800091c <fsm_mannual_run+0x280>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d10e      	bne.n	80008c0 <fsm_mannual_run+0x224>
				status_system = INIT;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <fsm_mannual_run+0x284>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <fsm_mannual_run+0x27c>)
 80008aa:	223c      	movs	r2, #60	; 0x3c
 80008ac:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <fsm_mannual_run+0x288>)
 80008b0:	2213      	movs	r2, #19
 80008b2:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <fsm_mannual_run+0x28c>)
 80008b6:	2217      	movs	r2, #23
 80008b8:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 80008ba:	f001 fce5 	bl	8002288 <resetTimeTraffic>
				break;
 80008be:	e029      	b.n	8000914 <fsm_mannual_run+0x278>
			}
			if(isButton_BUT2_Pressed() == 1){
 80008c0:	f7ff fc56 	bl	8000170 <isButton_BUT2_Pressed>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d106      	bne.n	80008d8 <fsm_mannual_run+0x23c>
				status_mannual = mannual_red_green;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <fsm_mannual_run+0x27c>)
 80008cc:	223d      	movs	r2, #61	; 0x3d
 80008ce:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80008d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80008d4:	f001 f8ec 	bl	8001ab0 <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 80008d8:	f7ff fc38 	bl	800014c <isButton_BUT1_Pressed>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d112      	bne.n	8000908 <fsm_mannual_run+0x26c>
				status_system = MODE2;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <fsm_mannual_run+0x284>)
 80008e4:	2202      	movs	r2, #2
 80008e6:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <fsm_mannual_run+0x27c>)
 80008ea:	223c      	movs	r2, #60	; 0x3c
 80008ec:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str1, sprintf(str1, "%s \n", "\rMODE 2 \r"), 1000);
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <fsm_mannual_run+0x290>)
 80008f0:	490f      	ldr	r1, [pc, #60]	; (8000930 <fsm_mannual_run+0x294>)
 80008f2:	4810      	ldr	r0, [pc, #64]	; (8000934 <fsm_mannual_run+0x298>)
 80008f4:	f003 fe62 	bl	80045bc <siprintf>
 80008f8:	4603      	mov	r3, r0
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <fsm_mannual_run+0x298>)
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <fsm_mannual_run+0x29c>)
 8000904:	f003 f99d 	bl	8003c42 <HAL_UART_Transmit>
			}
			setYellow_horizontal();
 8000908:	f001 fbf6 	bl	80020f8 <setYellow_horizontal>
			setRed_vertical();
 800090c:	f001 fc08 	bl	8002120 <setRed_vertical>
			break;
 8000910:	e000      	b.n	8000914 <fsm_mannual_run+0x278>
		default:
			break;
 8000912:	bf00      	nop
	}
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000006c 	.word	0x2000006c
 800091c:	200001d0 	.word	0x200001d0
 8000920:	2000018c 	.word	0x2000018c
 8000924:	20000094 	.word	0x20000094
 8000928:	20000098 	.word	0x20000098
 800092c:	08004e48 	.word	0x08004e48
 8000930:	08004e54 	.word	0x08004e54
 8000934:	2000004c 	.word	0x2000004c
 8000938:	20000294 	.word	0x20000294
 800093c:	200000c4 	.word	0x200000c4
 8000940:	08004e5c 	.word	0x08004e5c

08000944 <fsm_pedestrian_run>:
#include "button.h"


int status_pedestrian_light = pedes_off;

void fsm_pedestrian_run(){
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	switch(status_pedestrian_light){
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <fsm_pedestrian_run+0x80>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b84      	cmp	r3, #132	; 0x84
 800094e:	d01e      	beq.n	800098e <fsm_pedestrian_run+0x4a>
 8000950:	2b84      	cmp	r3, #132	; 0x84
 8000952:	dc31      	bgt.n	80009b8 <fsm_pedestrian_run+0x74>
 8000954:	2b82      	cmp	r3, #130	; 0x82
 8000956:	d002      	beq.n	800095e <fsm_pedestrian_run+0x1a>
 8000958:	2b83      	cmp	r3, #131	; 0x83
 800095a:	d003      	beq.n	8000964 <fsm_pedestrian_run+0x20>
				FSM_Buzzer_State = LOUDER_BIP;
			}

			break;
		default:
			break;
 800095c:	e02c      	b.n	80009b8 <fsm_pedestrian_run+0x74>
			set_off_pedes();
 800095e:	f001 fcc9 	bl	80022f4 <set_off_pedes>
			break;
 8000962:	e02c      	b.n	80009be <fsm_pedestrian_run+0x7a>
			set_red_pedes();
 8000964:	f001 fcda 	bl	800231c <set_red_pedes>
			if (timer30_flag == 1){
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <fsm_pedestrian_run+0x84>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d102      	bne.n	8000976 <fsm_pedestrian_run+0x32>
				status_pedestrian_light = pedes_off;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <fsm_pedestrian_run+0x80>)
 8000972:	2282      	movs	r2, #130	; 0x82
 8000974:	601a      	str	r2, [r3, #0]
			if (status_traffic_blink_horizontal == red_horizontal)
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <fsm_pedestrian_run+0x88>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b14      	cmp	r3, #20
 800097c:	d103      	bne.n	8000986 <fsm_pedestrian_run+0x42>
				status_pedestrian_light = pedes_green;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <fsm_pedestrian_run+0x80>)
 8000980:	2284      	movs	r2, #132	; 0x84
 8000982:	601a      	str	r2, [r3, #0]
			break;
 8000984:	e01b      	b.n	80009be <fsm_pedestrian_run+0x7a>
				status_pedestrian_light = pedes_red;
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <fsm_pedestrian_run+0x80>)
 8000988:	2283      	movs	r2, #131	; 0x83
 800098a:	601a      	str	r2, [r3, #0]
			break;
 800098c:	e017      	b.n	80009be <fsm_pedestrian_run+0x7a>
			set_green_pedes();
 800098e:	f001 fcd9 	bl	8002344 <set_green_pedes>
			if (status_traffic_blink_horizontal == red_horizontal){
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <fsm_pedestrian_run+0x88>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b14      	cmp	r3, #20
 8000998:	d103      	bne.n	80009a2 <fsm_pedestrian_run+0x5e>
				status_pedestrian_light = pedes_green;
 800099a:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <fsm_pedestrian_run+0x80>)
 800099c:	2284      	movs	r2, #132	; 0x84
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	e002      	b.n	80009a8 <fsm_pedestrian_run+0x64>
				status_pedestrian_light = pedes_red;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <fsm_pedestrian_run+0x80>)
 80009a4:	2283      	movs	r2, #131	; 0x83
 80009a6:	601a      	str	r2, [r3, #0]
			if (time_red_horizontal_temp < 4){ //buzzer bip louder + faster
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <fsm_pedestrian_run+0x8c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	dc05      	bgt.n	80009bc <fsm_pedestrian_run+0x78>
				FSM_Buzzer_State = LOUDER_BIP;
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <fsm_pedestrian_run+0x90>)
 80009b2:	2234      	movs	r2, #52	; 0x34
 80009b4:	601a      	str	r2, [r3, #0]
			break;
 80009b6:	e001      	b.n	80009bc <fsm_pedestrian_run+0x78>
			break;
 80009b8:	bf00      	nop
 80009ba:	e000      	b.n	80009be <fsm_pedestrian_run+0x7a>
			break;
 80009bc:	bf00      	nop
	}
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000070 	.word	0x20000070
 80009c8:	200001e8 	.word	0x200001e8
 80009cc:	20000094 	.word	0x20000094
 80009d0:	200000b0 	.word	0x200000b0
 80009d4:	200000d4 	.word	0x200000d4

080009d8 <fsm_system_run>:


UART_HandleTypeDef huart2;
uint8_t str[30] = " ";

fsm_system_run(){
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	switch(status_system){
 80009dc:	4b97      	ldr	r3, [pc, #604]	; (8000c3c <fsm_system_run+0x264>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	dc13      	bgt.n	8000a0c <fsm_system_run+0x34>
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f2c0 8239 	blt.w	8000e5c <fsm_system_run+0x484>
 80009ea:	2b04      	cmp	r3, #4
 80009ec:	f200 8236 	bhi.w	8000e5c <fsm_system_run+0x484>
 80009f0:	a201      	add	r2, pc, #4	; (adr r2, 80009f8 <fsm_system_run+0x20>)
 80009f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f6:	bf00      	nop
 80009f8:	08000a15 	.word	0x08000a15
 80009fc:	08000a37 	.word	0x08000a37
 8000a00:	08000b51 	.word	0x08000b51
 8000a04:	08000ca5 	.word	0x08000ca5
 8000a08:	08000d91 	.word	0x08000d91
 8000a0c:	2b5f      	cmp	r3, #95	; 0x5f
 8000a0e:	f000 808c 	beq.w	8000b2a <fsm_system_run+0x152>
				status_system = INIT;
//				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 1 \r"), 1000);
			}
			break;
	}
}
 8000a12:	e223      	b.n	8000e5c <fsm_system_run+0x484>
			status_system = MODE1;
 8000a14:	4b89      	ldr	r3, [pc, #548]	; (8000c3c <fsm_system_run+0x264>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 1 \r"), 1000);
 8000a1a:	4a89      	ldr	r2, [pc, #548]	; (8000c40 <fsm_system_run+0x268>)
 8000a1c:	4989      	ldr	r1, [pc, #548]	; (8000c44 <fsm_system_run+0x26c>)
 8000a1e:	488a      	ldr	r0, [pc, #552]	; (8000c48 <fsm_system_run+0x270>)
 8000a20:	f003 fdcc 	bl	80045bc <siprintf>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2c:	4986      	ldr	r1, [pc, #536]	; (8000c48 <fsm_system_run+0x270>)
 8000a2e:	4887      	ldr	r0, [pc, #540]	; (8000c4c <fsm_system_run+0x274>)
 8000a30:	f003 f907 	bl	8003c42 <HAL_UART_Transmit>
			break;
 8000a34:	e212      	b.n	8000e5c <fsm_system_run+0x484>
			status_traffic_horizontal = display_traffic_horizontal;
 8000a36:	4b86      	ldr	r3, [pc, #536]	; (8000c50 <fsm_system_run+0x278>)
 8000a38:	2205      	movs	r2, #5
 8000a3a:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = display_traffic_vertical;
 8000a3c:	4b85      	ldr	r3, [pc, #532]	; (8000c54 <fsm_system_run+0x27c>)
 8000a3e:	2209      	movs	r2, #9
 8000a40:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_countDown_horizontal;
 8000a42:	4b85      	ldr	r3, [pc, #532]	; (8000c58 <fsm_system_run+0x280>)
 8000a44:	220b      	movs	r2, #11
 8000a46:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_countDown_vertical;
 8000a48:	4b84      	ldr	r3, [pc, #528]	; (8000c5c <fsm_system_run+0x284>)
 8000a4a:	220f      	movs	r2, #15
 8000a4c:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000a4e:	f7ff fb7d 	bl	800014c <isButton_BUT1_Pressed>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d121      	bne.n	8000a9c <fsm_system_run+0xc4>
				status_system = MODE2;
 8000a58:	4b78      	ldr	r3, [pc, #480]	; (8000c3c <fsm_system_run+0x264>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 2 \r"), 1000);
 8000a5e:	4a80      	ldr	r2, [pc, #512]	; (8000c60 <fsm_system_run+0x288>)
 8000a60:	4978      	ldr	r1, [pc, #480]	; (8000c44 <fsm_system_run+0x26c>)
 8000a62:	4879      	ldr	r0, [pc, #484]	; (8000c48 <fsm_system_run+0x270>)
 8000a64:	f003 fdaa 	bl	80045bc <siprintf>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a70:	4975      	ldr	r1, [pc, #468]	; (8000c48 <fsm_system_run+0x270>)
 8000a72:	4876      	ldr	r0, [pc, #472]	; (8000c4c <fsm_system_run+0x274>)
 8000a74:	f003 f8e5 	bl	8003c42 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_red_vertical), 1000);
 8000a78:	4b7a      	ldr	r3, [pc, #488]	; (8000c64 <fsm_system_run+0x28c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	497a      	ldr	r1, [pc, #488]	; (8000c68 <fsm_system_run+0x290>)
 8000a80:	4871      	ldr	r0, [pc, #452]	; (8000c48 <fsm_system_run+0x270>)
 8000a82:	f003 fd9b 	bl	80045bc <siprintf>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	496e      	ldr	r1, [pc, #440]	; (8000c48 <fsm_system_run+0x270>)
 8000a90:	486e      	ldr	r0, [pc, #440]	; (8000c4c <fsm_system_run+0x274>)
 8000a92:	f003 f8d6 	bl	8003c42 <HAL_UART_Transmit>
				status_pedestrian_light = pedes_off;
 8000a96:	4b75      	ldr	r3, [pc, #468]	; (8000c6c <fsm_system_run+0x294>)
 8000a98:	2282      	movs	r2, #130	; 0x82
 8000a9a:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000a9c:	f7ff fb68 	bl	8000170 <isButton_BUT2_Pressed>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d112      	bne.n	8000acc <fsm_system_run+0xf4>
				status_system = MAN_MODE;
 8000aa6:	4b65      	ldr	r3, [pc, #404]	; (8000c3c <fsm_system_run+0x264>)
 8000aa8:	225f      	movs	r2, #95	; 0x5f
 8000aaa:	601a      	str	r2, [r3, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMAN MODE\r"), 1000);
 8000aac:	4a70      	ldr	r2, [pc, #448]	; (8000c70 <fsm_system_run+0x298>)
 8000aae:	4965      	ldr	r1, [pc, #404]	; (8000c44 <fsm_system_run+0x26c>)
 8000ab0:	4865      	ldr	r0, [pc, #404]	; (8000c48 <fsm_system_run+0x270>)
 8000ab2:	f003 fd83 	bl	80045bc <siprintf>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	4962      	ldr	r1, [pc, #392]	; (8000c48 <fsm_system_run+0x270>)
 8000ac0:	4862      	ldr	r0, [pc, #392]	; (8000c4c <fsm_system_run+0x274>)
 8000ac2:	f003 f8be 	bl	8003c42 <HAL_UART_Transmit>
				status_pedestrian_light = pedes_off;
 8000ac6:	4b69      	ldr	r3, [pc, #420]	; (8000c6c <fsm_system_run+0x294>)
 8000ac8:	2282      	movs	r2, #130	; 0x82
 8000aca:	601a      	str	r2, [r3, #0]
			if (isButton_Pedes_Pressed() == 1 ){
 8000acc:	f7ff fb74 	bl	80001b8 <isButton_Pedes_Pressed>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d120      	bne.n	8000b18 <fsm_system_run+0x140>
				FSM_Buzzer_State = ONE_BIP;
 8000ad6:	4b67      	ldr	r3, [pc, #412]	; (8000c74 <fsm_system_run+0x29c>)
 8000ad8:	2233      	movs	r2, #51	; 0x33
 8000ada:	601a      	str	r2, [r3, #0]
				setTimer32(1000);
 8000adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae0:	f001 f834 	bl	8001b4c <setTimer32>
				setTimer30(2000*(time_red_horizontal+time_green_horizontal+time_yellow_horizontal));
 8000ae4:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <fsm_system_run+0x2a0>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b64      	ldr	r3, [pc, #400]	; (8000c7c <fsm_system_run+0x2a4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	441a      	add	r2, r3
 8000aee:	4b64      	ldr	r3, [pc, #400]	; (8000c80 <fsm_system_run+0x2a8>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f001 f80b 	bl	8001b18 <setTimer30>
				if (status_traffic_blink_horizontal == red_horizontal){
 8000b02:	4b60      	ldr	r3, [pc, #384]	; (8000c84 <fsm_system_run+0x2ac>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b14      	cmp	r3, #20
 8000b08:	d103      	bne.n	8000b12 <fsm_system_run+0x13a>
					status_pedestrian_light = pedes_green;
 8000b0a:	4b58      	ldr	r3, [pc, #352]	; (8000c6c <fsm_system_run+0x294>)
 8000b0c:	2284      	movs	r2, #132	; 0x84
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	e002      	b.n	8000b18 <fsm_system_run+0x140>
					status_pedestrian_light = pedes_red;
 8000b12:	4b56      	ldr	r3, [pc, #344]	; (8000c6c <fsm_system_run+0x294>)
 8000b14:	2283      	movs	r2, #131	; 0x83
 8000b16:	601a      	str	r2, [r3, #0]
			if (timer30_flag == 1){
 8000b18:	4b5b      	ldr	r3, [pc, #364]	; (8000c88 <fsm_system_run+0x2b0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	f040 8196 	bne.w	8000e4e <fsm_system_run+0x476>
				status_pedestrian_light = pedes_off;
 8000b22:	4b52      	ldr	r3, [pc, #328]	; (8000c6c <fsm_system_run+0x294>)
 8000b24:	2282      	movs	r2, #130	; 0x82
 8000b26:	601a      	str	r2, [r3, #0]
			break;
 8000b28:	e191      	b.n	8000e4e <fsm_system_run+0x476>
			fsm_mannual_run();
 8000b2a:	f7ff fdb7 	bl	800069c <fsm_mannual_run>
			status_7SEG_horizontal = off_horizontal;
 8000b2e:	4b4a      	ldr	r3, [pc, #296]	; (8000c58 <fsm_system_run+0x280>)
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = off_vertical;
 8000b36:	4b49      	ldr	r3, [pc, #292]	; (8000c5c <fsm_system_run+0x284>)
 8000b38:	f06f 0201 	mvn.w	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
			status_traffic_horizontal = mannual_horizontal;
 8000b3e:	4b44      	ldr	r3, [pc, #272]	; (8000c50 <fsm_system_run+0x278>)
 8000b40:	f06f 0202 	mvn.w	r2, #2
 8000b44:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = mannual_vertical;
 8000b46:	4b43      	ldr	r3, [pc, #268]	; (8000c54 <fsm_system_run+0x27c>)
 8000b48:	f06f 0203 	mvn.w	r2, #3
 8000b4c:	601a      	str	r2, [r3, #0]
			break;
 8000b4e:	e185      	b.n	8000e5c <fsm_system_run+0x484>
			status_traffic_horizontal = modifying_led_red_horizontal;
 8000b50:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <fsm_system_run+0x278>)
 8000b52:	2206      	movs	r2, #6
 8000b54:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_red_vertical;
 8000b56:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <fsm_system_run+0x27c>)
 8000b58:	221e      	movs	r2, #30
 8000b5a:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode02;
 8000b5c:	4b3e      	ldr	r3, [pc, #248]	; (8000c58 <fsm_system_run+0x280>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000b62:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <fsm_system_run+0x284>)
 8000b64:	2210      	movs	r2, #16
 8000b66:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000b68:	f7ff fb02 	bl	8000170 <isButton_BUT2_Pressed>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d118      	bne.n	8000ba4 <fsm_system_run+0x1cc>
				time_red_horizontal++;
 8000b72:	4b41      	ldr	r3, [pc, #260]	; (8000c78 <fsm_system_run+0x2a0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a3f      	ldr	r2, [pc, #252]	; (8000c78 <fsm_system_run+0x2a0>)
 8000b7a:	6013      	str	r3, [r2, #0]
				time_red_vertical++;
 8000b7c:	4b39      	ldr	r3, [pc, #228]	; (8000c64 <fsm_system_run+0x28c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	4a38      	ldr	r2, [pc, #224]	; (8000c64 <fsm_system_run+0x28c>)
 8000b84:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n",time_red_vertical), 1000);
 8000b86:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <fsm_system_run+0x28c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4936      	ldr	r1, [pc, #216]	; (8000c68 <fsm_system_run+0x290>)
 8000b8e:	482e      	ldr	r0, [pc, #184]	; (8000c48 <fsm_system_run+0x270>)
 8000b90:	f003 fd14 	bl	80045bc <siprintf>
 8000b94:	4603      	mov	r3, r0
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9c:	492a      	ldr	r1, [pc, #168]	; (8000c48 <fsm_system_run+0x270>)
 8000b9e:	482b      	ldr	r0, [pc, #172]	; (8000c4c <fsm_system_run+0x274>)
 8000ba0:	f003 f84f 	bl	8003c42 <HAL_UART_Transmit>
			_7SEG_buffer_vertical[0] = time_red_vertical/10;
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <fsm_system_run+0x28c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a38      	ldr	r2, [pc, #224]	; (8000c8c <fsm_system_run+0x2b4>)
 8000baa:	fb82 1203 	smull	r1, r2, r2, r3
 8000bae:	1092      	asrs	r2, r2, #2
 8000bb0:	17db      	asrs	r3, r3, #31
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	4a36      	ldr	r2, [pc, #216]	; (8000c90 <fsm_system_run+0x2b8>)
 8000bb6:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical%10;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <fsm_system_run+0x28c>)
 8000bba:	6819      	ldr	r1, [r3, #0]
 8000bbc:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <fsm_system_run+0x2b4>)
 8000bbe:	fb83 2301 	smull	r2, r3, r3, r1
 8000bc2:	109a      	asrs	r2, r3, #2
 8000bc4:	17cb      	asrs	r3, r1, #31
 8000bc6:	1ad2      	subs	r2, r2, r3
 8000bc8:	4613      	mov	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	1aca      	subs	r2, r1, r3
 8000bd2:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <fsm_system_run+0x2b8>)
 8000bd4:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000bd6:	f7ff fadd 	bl	8000194 <isButton_BUT3_Pressed>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d107      	bne.n	8000bf0 <fsm_system_run+0x218>
				time_red_horizontal_temp= time_red_horizontal;
 8000be0:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <fsm_system_run+0x2a0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a2b      	ldr	r2, [pc, #172]	; (8000c94 <fsm_system_run+0x2bc>)
 8000be6:	6013      	str	r3, [r2, #0]
				time_red_vertical_temp= time_red_vertical;
 8000be8:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <fsm_system_run+0x28c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a2a      	ldr	r2, [pc, #168]	; (8000c98 <fsm_system_run+0x2c0>)
 8000bee:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000bf0:	f7ff faac 	bl	800014c <isButton_BUT1_Pressed>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	f040 812b 	bne.w	8000e52 <fsm_system_run+0x47a>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 3 \r"), 1000);
 8000bfc:	4a27      	ldr	r2, [pc, #156]	; (8000c9c <fsm_system_run+0x2c4>)
 8000bfe:	4911      	ldr	r1, [pc, #68]	; (8000c44 <fsm_system_run+0x26c>)
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <fsm_system_run+0x270>)
 8000c02:	f003 fcdb 	bl	80045bc <siprintf>
 8000c06:	4603      	mov	r3, r0
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	490e      	ldr	r1, [pc, #56]	; (8000c48 <fsm_system_run+0x270>)
 8000c10:	480e      	ldr	r0, [pc, #56]	; (8000c4c <fsm_system_run+0x274>)
 8000c12:	f003 f816 	bl	8003c42 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_yellow_vertical), 1000);
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <fsm_system_run+0x2c8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4912      	ldr	r1, [pc, #72]	; (8000c68 <fsm_system_run+0x290>)
 8000c1e:	480a      	ldr	r0, [pc, #40]	; (8000c48 <fsm_system_run+0x270>)
 8000c20:	f003 fccc 	bl	80045bc <siprintf>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2c:	4906      	ldr	r1, [pc, #24]	; (8000c48 <fsm_system_run+0x270>)
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <fsm_system_run+0x274>)
 8000c30:	f003 f807 	bl	8003c42 <HAL_UART_Transmit>
				status_system = MODE3;
 8000c34:	4b01      	ldr	r3, [pc, #4]	; (8000c3c <fsm_system_run+0x264>)
 8000c36:	2203      	movs	r2, #3
 8000c38:	601a      	str	r2, [r3, #0]
			break;
 8000c3a:	e10a      	b.n	8000e52 <fsm_system_run+0x47a>
 8000c3c:	2000018c 	.word	0x2000018c
 8000c40:	08004e64 	.word	0x08004e64
 8000c44:	08004e70 	.word	0x08004e70
 8000c48:	20000074 	.word	0x20000074
 8000c4c:	20000294 	.word	0x20000294
 8000c50:	2000009c 	.word	0x2000009c
 8000c54:	200000a0 	.word	0x200000a0
 8000c58:	20000044 	.word	0x20000044
 8000c5c:	20000048 	.word	0x20000048
 8000c60:	08004e78 	.word	0x08004e78
 8000c64:	200000c4 	.word	0x200000c4
 8000c68:	08004e84 	.word	0x08004e84
 8000c6c:	20000070 	.word	0x20000070
 8000c70:	08004e8c 	.word	0x08004e8c
 8000c74:	200000d4 	.word	0x200000d4
 8000c78:	200000a4 	.word	0x200000a4
 8000c7c:	200000a8 	.word	0x200000a8
 8000c80:	200000ac 	.word	0x200000ac
 8000c84:	20000094 	.word	0x20000094
 8000c88:	200001e8 	.word	0x200001e8
 8000c8c:	66666667 	.word	0x66666667
 8000c90:	2000023c 	.word	0x2000023c
 8000c94:	200000b0 	.word	0x200000b0
 8000c98:	200000d0 	.word	0x200000d0
 8000c9c:	08004e98 	.word	0x08004e98
 8000ca0:	200000c0 	.word	0x200000c0
			status_traffic_horizontal = modifying_led_yellow_horizontal;
 8000ca4:	4b6e      	ldr	r3, [pc, #440]	; (8000e60 <fsm_system_run+0x488>)
 8000ca6:	2208      	movs	r2, #8
 8000ca8:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_yellow_vertical;
 8000caa:	4b6e      	ldr	r3, [pc, #440]	; (8000e64 <fsm_system_run+0x48c>)
 8000cac:	2220      	movs	r2, #32
 8000cae:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode03;
 8000cb0:	4b6d      	ldr	r3, [pc, #436]	; (8000e68 <fsm_system_run+0x490>)
 8000cb2:	220d      	movs	r2, #13
 8000cb4:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000cb6:	4b6d      	ldr	r3, [pc, #436]	; (8000e6c <fsm_system_run+0x494>)
 8000cb8:	2210      	movs	r2, #16
 8000cba:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000cbc:	f7ff fa58 	bl	8000170 <isButton_BUT2_Pressed>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d118      	bne.n	8000cf8 <fsm_system_run+0x320>
				time_yellow_horizontal++;
 8000cc6:	4b6a      	ldr	r3, [pc, #424]	; (8000e70 <fsm_system_run+0x498>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a68      	ldr	r2, [pc, #416]	; (8000e70 <fsm_system_run+0x498>)
 8000cce:	6013      	str	r3, [r2, #0]
				time_yellow_vertical++;
 8000cd0:	4b68      	ldr	r3, [pc, #416]	; (8000e74 <fsm_system_run+0x49c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a67      	ldr	r2, [pc, #412]	; (8000e74 <fsm_system_run+0x49c>)
 8000cd8:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_yellow_vertical), 1000);
 8000cda:	4b66      	ldr	r3, [pc, #408]	; (8000e74 <fsm_system_run+0x49c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4965      	ldr	r1, [pc, #404]	; (8000e78 <fsm_system_run+0x4a0>)
 8000ce2:	4866      	ldr	r0, [pc, #408]	; (8000e7c <fsm_system_run+0x4a4>)
 8000ce4:	f003 fc6a 	bl	80045bc <siprintf>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf0:	4962      	ldr	r1, [pc, #392]	; (8000e7c <fsm_system_run+0x4a4>)
 8000cf2:	4863      	ldr	r0, [pc, #396]	; (8000e80 <fsm_system_run+0x4a8>)
 8000cf4:	f002 ffa5 	bl	8003c42 <HAL_UART_Transmit>
			_7SEG_buffer_vertical[0] = time_yellow_vertical/10;
 8000cf8:	4b5e      	ldr	r3, [pc, #376]	; (8000e74 <fsm_system_run+0x49c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a61      	ldr	r2, [pc, #388]	; (8000e84 <fsm_system_run+0x4ac>)
 8000cfe:	fb82 1203 	smull	r1, r2, r2, r3
 8000d02:	1092      	asrs	r2, r2, #2
 8000d04:	17db      	asrs	r3, r3, #31
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	4a5f      	ldr	r2, [pc, #380]	; (8000e88 <fsm_system_run+0x4b0>)
 8000d0a:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical%10;
 8000d0c:	4b59      	ldr	r3, [pc, #356]	; (8000e74 <fsm_system_run+0x49c>)
 8000d0e:	6819      	ldr	r1, [r3, #0]
 8000d10:	4b5c      	ldr	r3, [pc, #368]	; (8000e84 <fsm_system_run+0x4ac>)
 8000d12:	fb83 2301 	smull	r2, r3, r3, r1
 8000d16:	109a      	asrs	r2, r3, #2
 8000d18:	17cb      	asrs	r3, r1, #31
 8000d1a:	1ad2      	subs	r2, r2, r3
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	1aca      	subs	r2, r1, r3
 8000d26:	4b58      	ldr	r3, [pc, #352]	; (8000e88 <fsm_system_run+0x4b0>)
 8000d28:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000d2a:	f7ff fa33 	bl	8000194 <isButton_BUT3_Pressed>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d107      	bne.n	8000d44 <fsm_system_run+0x36c>
				time_yellow_horizontal_temp= time_yellow_horizontal;
 8000d34:	4b4e      	ldr	r3, [pc, #312]	; (8000e70 <fsm_system_run+0x498>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a54      	ldr	r2, [pc, #336]	; (8000e8c <fsm_system_run+0x4b4>)
 8000d3a:	6013      	str	r3, [r2, #0]
				time_yellow_vertical_temp= time_yellow_vertical;
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	; (8000e74 <fsm_system_run+0x49c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a53      	ldr	r2, [pc, #332]	; (8000e90 <fsm_system_run+0x4b8>)
 8000d42:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000d44:	f7ff fa02 	bl	800014c <isButton_BUT1_Pressed>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	f040 8083 	bne.w	8000e56 <fsm_system_run+0x47e>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%s \n", "\rMODE 4 \r"), 1000);
 8000d50:	4a50      	ldr	r2, [pc, #320]	; (8000e94 <fsm_system_run+0x4bc>)
 8000d52:	4951      	ldr	r1, [pc, #324]	; (8000e98 <fsm_system_run+0x4c0>)
 8000d54:	4849      	ldr	r0, [pc, #292]	; (8000e7c <fsm_system_run+0x4a4>)
 8000d56:	f003 fc31 	bl	80045bc <siprintf>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	b29a      	uxth	r2, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	4946      	ldr	r1, [pc, #280]	; (8000e7c <fsm_system_run+0x4a4>)
 8000d64:	4846      	ldr	r0, [pc, #280]	; (8000e80 <fsm_system_run+0x4a8>)
 8000d66:	f002 ff6c 	bl	8003c42 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_green_vertical), 1000);
 8000d6a:	4b4c      	ldr	r3, [pc, #304]	; (8000e9c <fsm_system_run+0x4c4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4941      	ldr	r1, [pc, #260]	; (8000e78 <fsm_system_run+0x4a0>)
 8000d72:	4842      	ldr	r0, [pc, #264]	; (8000e7c <fsm_system_run+0x4a4>)
 8000d74:	f003 fc22 	bl	80045bc <siprintf>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d80:	493e      	ldr	r1, [pc, #248]	; (8000e7c <fsm_system_run+0x4a4>)
 8000d82:	483f      	ldr	r0, [pc, #252]	; (8000e80 <fsm_system_run+0x4a8>)
 8000d84:	f002 ff5d 	bl	8003c42 <HAL_UART_Transmit>
				status_system = MODE4;
 8000d88:	4b45      	ldr	r3, [pc, #276]	; (8000ea0 <fsm_system_run+0x4c8>)
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	601a      	str	r2, [r3, #0]
			break;
 8000d8e:	e062      	b.n	8000e56 <fsm_system_run+0x47e>
			status_traffic_horizontal = modifying_led_green_horizontal;
 8000d90:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <fsm_system_run+0x488>)
 8000d92:	2207      	movs	r2, #7
 8000d94:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_green_vertical;
 8000d96:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <fsm_system_run+0x48c>)
 8000d98:	221f      	movs	r2, #31
 8000d9a:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode04;
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <fsm_system_run+0x490>)
 8000d9e:	220e      	movs	r2, #14
 8000da0:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000da2:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <fsm_system_run+0x494>)
 8000da4:	2210      	movs	r2, #16
 8000da6:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000da8:	f7ff f9e2 	bl	8000170 <isButton_BUT2_Pressed>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d118      	bne.n	8000de4 <fsm_system_run+0x40c>
				time_green_horizontal++;
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <fsm_system_run+0x4cc>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a3a      	ldr	r2, [pc, #232]	; (8000ea4 <fsm_system_run+0x4cc>)
 8000dba:	6013      	str	r3, [r2, #0]
				time_green_vertical++;
 8000dbc:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <fsm_system_run+0x4c4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a36      	ldr	r2, [pc, #216]	; (8000e9c <fsm_system_run+0x4c4>)
 8000dc4:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_green_vertical), 1000);
 8000dc6:	4b35      	ldr	r3, [pc, #212]	; (8000e9c <fsm_system_run+0x4c4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	492a      	ldr	r1, [pc, #168]	; (8000e78 <fsm_system_run+0x4a0>)
 8000dce:	482b      	ldr	r0, [pc, #172]	; (8000e7c <fsm_system_run+0x4a4>)
 8000dd0:	f003 fbf4 	bl	80045bc <siprintf>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ddc:	4927      	ldr	r1, [pc, #156]	; (8000e7c <fsm_system_run+0x4a4>)
 8000dde:	4828      	ldr	r0, [pc, #160]	; (8000e80 <fsm_system_run+0x4a8>)
 8000de0:	f002 ff2f 	bl	8003c42 <HAL_UART_Transmit>
			_7SEG_buffer_vertical[0] = time_green_vertical/10;
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <fsm_system_run+0x4c4>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <fsm_system_run+0x4ac>)
 8000dea:	fb82 1203 	smull	r1, r2, r2, r3
 8000dee:	1092      	asrs	r2, r2, #2
 8000df0:	17db      	asrs	r3, r3, #31
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	4a24      	ldr	r2, [pc, #144]	; (8000e88 <fsm_system_run+0x4b0>)
 8000df6:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical%10;
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <fsm_system_run+0x4c4>)
 8000dfa:	6819      	ldr	r1, [r3, #0]
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <fsm_system_run+0x4ac>)
 8000dfe:	fb83 2301 	smull	r2, r3, r3, r1
 8000e02:	109a      	asrs	r2, r3, #2
 8000e04:	17cb      	asrs	r3, r1, #31
 8000e06:	1ad2      	subs	r2, r2, r3
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	1aca      	subs	r2, r1, r3
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <fsm_system_run+0x4b0>)
 8000e14:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000e16:	f7ff f9bd 	bl	8000194 <isButton_BUT3_Pressed>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d107      	bne.n	8000e30 <fsm_system_run+0x458>
				time_green_horizontal_temp= time_green_horizontal;
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <fsm_system_run+0x4cc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <fsm_system_run+0x4d0>)
 8000e26:	6013      	str	r3, [r2, #0]
				time_green_vertical_temp= time_green_vertical;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <fsm_system_run+0x4c4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <fsm_system_run+0x4d4>)
 8000e2e:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000e30:	f7ff f98c 	bl	800014c <isButton_BUT1_Pressed>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d10f      	bne.n	8000e5a <fsm_system_run+0x482>
				status_traffic_blink_horizontal = init_horizontal;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <fsm_system_run+0x4d8>)
 8000e3c:	2213      	movs	r2, #19
 8000e3e:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <fsm_system_run+0x4dc>)
 8000e42:	2217      	movs	r2, #23
 8000e44:	601a      	str	r2, [r3, #0]
				status_system = INIT;
 8000e46:	4b16      	ldr	r3, [pc, #88]	; (8000ea0 <fsm_system_run+0x4c8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
			break;
 8000e4c:	e005      	b.n	8000e5a <fsm_system_run+0x482>
			break;
 8000e4e:	bf00      	nop
 8000e50:	e004      	b.n	8000e5c <fsm_system_run+0x484>
			break;
 8000e52:	bf00      	nop
 8000e54:	e002      	b.n	8000e5c <fsm_system_run+0x484>
			break;
 8000e56:	bf00      	nop
 8000e58:	e000      	b.n	8000e5c <fsm_system_run+0x484>
			break;
 8000e5a:	bf00      	nop
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2000009c 	.word	0x2000009c
 8000e64:	200000a0 	.word	0x200000a0
 8000e68:	20000044 	.word	0x20000044
 8000e6c:	20000048 	.word	0x20000048
 8000e70:	200000ac 	.word	0x200000ac
 8000e74:	200000c0 	.word	0x200000c0
 8000e78:	08004e84 	.word	0x08004e84
 8000e7c:	20000074 	.word	0x20000074
 8000e80:	20000294 	.word	0x20000294
 8000e84:	66666667 	.word	0x66666667
 8000e88:	2000023c 	.word	0x2000023c
 8000e8c:	200000b8 	.word	0x200000b8
 8000e90:	200000cc 	.word	0x200000cc
 8000e94:	08004ea4 	.word	0x08004ea4
 8000e98:	08004e70 	.word	0x08004e70
 8000e9c:	200000bc 	.word	0x200000bc
 8000ea0:	2000018c 	.word	0x2000018c
 8000ea4:	200000a8 	.word	0x200000a8
 8000ea8:	200000b4 	.word	0x200000b4
 8000eac:	200000c8 	.word	0x200000c8
 8000eb0:	20000094 	.word	0x20000094
 8000eb4:	20000098 	.word	0x20000098

08000eb8 <fsm_traffic_blink_horizontal_run>:
int status_traffic_blink_vertical = init_vertical;

uint8_t str[30];
UART_HandleTypeDef huart2;

void fsm_traffic_blink_horizontal_run(){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_horizontal){
 8000ebc:	4b86      	ldr	r3, [pc, #536]	; (80010d8 <fsm_traffic_blink_horizontal_run+0x220>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3b13      	subs	r3, #19
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	f200 8182 	bhi.w	80011cc <fsm_traffic_blink_horizontal_run+0x314>
 8000ec8:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <fsm_traffic_blink_horizontal_run+0x18>)
 8000eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ece:	bf00      	nop
 8000ed0:	08000ee1 	.word	0x08000ee1
 8000ed4:	08000f29 	.word	0x08000f29
 8000ed8:	08001001 	.word	0x08001001
 8000edc:	08001115 	.word	0x08001115
		case init_horizontal:
			status_traffic_blink_horizontal = red_horizontal;
 8000ee0:	4b7d      	ldr	r3, [pc, #500]	; (80010d8 <fsm_traffic_blink_horizontal_run+0x220>)
 8000ee2:	2214      	movs	r2, #20
 8000ee4:	601a      	str	r2, [r3, #0]
			traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000ee6:	4b7d      	ldr	r3, [pc, #500]	; (80010dc <fsm_traffic_blink_horizontal_run+0x224>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	4a7b      	ldr	r2, [pc, #492]	; (80010e0 <fsm_traffic_blink_horizontal_run+0x228>)
 8000ef4:	6013      	str	r3, [r2, #0]
			//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
			setTimer1(traffic_buffer_horizontal[0]);
 8000ef6:	4b7a      	ldr	r3, [pc, #488]	; (80010e0 <fsm_traffic_blink_horizontal_run+0x228>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fd08 	bl	8001910 <setTimer1>
			setTimer3(1000);// count down as a clock
 8000f00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f04:	f000 fd38 	bl	8001978 <setTimer3>
			HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_red_horizontal_temp), 1000);
 8000f08:	4b76      	ldr	r3, [pc, #472]	; (80010e4 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4976      	ldr	r1, [pc, #472]	; (80010e8 <fsm_traffic_blink_horizontal_run+0x230>)
 8000f10:	4876      	ldr	r0, [pc, #472]	; (80010ec <fsm_traffic_blink_horizontal_run+0x234>)
 8000f12:	f003 fb53 	bl	80045bc <siprintf>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	4973      	ldr	r1, [pc, #460]	; (80010ec <fsm_traffic_blink_horizontal_run+0x234>)
 8000f20:	4873      	ldr	r0, [pc, #460]	; (80010f0 <fsm_traffic_blink_horizontal_run+0x238>)
 8000f22:	f002 fe8e 	bl	8003c42 <HAL_UART_Transmit>
			break;
 8000f26:	e158      	b.n	80011da <fsm_traffic_blink_horizontal_run+0x322>
		case red_horizontal:
			setRed_horizontal();
 8000f28:	f001 f8be 	bl	80020a8 <setRed_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_red_horizontal_temp/10;
 8000f2c:	4b6d      	ldr	r3, [pc, #436]	; (80010e4 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a70      	ldr	r2, [pc, #448]	; (80010f4 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000f32:	fb82 1203 	smull	r1, r2, r2, r3
 8000f36:	1092      	asrs	r2, r2, #2
 8000f38:	17db      	asrs	r3, r3, #31
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	4a6e      	ldr	r2, [pc, #440]	; (80010f8 <fsm_traffic_blink_horizontal_run+0x240>)
 8000f3e:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_red_horizontal_temp%10;
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <fsm_traffic_blink_horizontal_run+0x23c>)
 8000f46:	fb83 2301 	smull	r2, r3, r3, r1
 8000f4a:	109a      	asrs	r2, r3, #2
 8000f4c:	17cb      	asrs	r3, r1, #31
 8000f4e:	1ad2      	subs	r2, r2, r3
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	1aca      	subs	r2, r1, r3
 8000f5a:	4b67      	ldr	r3, [pc, #412]	; (80010f8 <fsm_traffic_blink_horizontal_run+0x240>)
 8000f5c:	605a      	str	r2, [r3, #4]


			if(timer3_flag == 1){
 8000f5e:	4b67      	ldr	r3, [pc, #412]	; (80010fc <fsm_traffic_blink_horizontal_run+0x244>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d123      	bne.n	8000fae <fsm_traffic_blink_horizontal_run+0xf6>
				time_red_horizontal_temp--;
 8000f66:	4b5f      	ldr	r3, [pc, #380]	; (80010e4 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	4a5d      	ldr	r2, [pc, #372]	; (80010e4 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f6e:	6013      	str	r3, [r2, #0]
				if(time_red_horizontal_temp != 0)
 8000f70:	4b5c      	ldr	r3, [pc, #368]	; (80010e4 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00e      	beq.n	8000f96 <fsm_traffic_blink_horizontal_run+0xde>
					HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_red_horizontal_temp), 1000);
 8000f78:	4b5a      	ldr	r3, [pc, #360]	; (80010e4 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	495a      	ldr	r1, [pc, #360]	; (80010e8 <fsm_traffic_blink_horizontal_run+0x230>)
 8000f80:	485a      	ldr	r0, [pc, #360]	; (80010ec <fsm_traffic_blink_horizontal_run+0x234>)
 8000f82:	f003 fb1b 	bl	80045bc <siprintf>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	4957      	ldr	r1, [pc, #348]	; (80010ec <fsm_traffic_blink_horizontal_run+0x234>)
 8000f90:	4857      	ldr	r0, [pc, #348]	; (80010f0 <fsm_traffic_blink_horizontal_run+0x238>)
 8000f92:	f002 fe56 	bl	8003c42 <HAL_UART_Transmit>
				if(time_red_horizontal_temp == 0){
 8000f96:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d103      	bne.n	8000fa6 <fsm_traffic_blink_horizontal_run+0xee>
					time_red_horizontal_temp = time_red_horizontal;
 8000f9e:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <fsm_traffic_blink_horizontal_run+0x224>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a50      	ldr	r2, [pc, #320]	; (80010e4 <fsm_traffic_blink_horizontal_run+0x22c>)
 8000fa4:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000fa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000faa:	f000 fce5 	bl	8001978 <setTimer3>
			}

			if(timer1_flag == 1){
 8000fae:	4b54      	ldr	r3, [pc, #336]	; (8001100 <fsm_traffic_blink_horizontal_run+0x248>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	f040 810c 	bne.w	80011d0 <fsm_traffic_blink_horizontal_run+0x318>
				status_traffic_blink_horizontal = green_horizontal;
 8000fb8:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <fsm_traffic_blink_horizontal_run+0x220>)
 8000fba:	2215      	movs	r2, #21
 8000fbc:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[1] = time_green_horizontal*1000;
 8000fbe:	4b51      	ldr	r3, [pc, #324]	; (8001104 <fsm_traffic_blink_horizontal_run+0x24c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	4a45      	ldr	r2, [pc, #276]	; (80010e0 <fsm_traffic_blink_horizontal_run+0x228>)
 8000fcc:	6053      	str	r3, [r2, #4]
				//led green will turn on in traffic_buffer_horizontal[1]/1000 seconds
				setTimer1(traffic_buffer_horizontal[1]);
 8000fce:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <fsm_traffic_blink_horizontal_run+0x228>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fc9c 	bl	8001910 <setTimer1>
				setTimer3(1000);
 8000fd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fdc:	f000 fccc 	bl	8001978 <setTimer3>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_green_horizontal_temp), 1000);
 8000fe0:	4b49      	ldr	r3, [pc, #292]	; (8001108 <fsm_traffic_blink_horizontal_run+0x250>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4940      	ldr	r1, [pc, #256]	; (80010e8 <fsm_traffic_blink_horizontal_run+0x230>)
 8000fe8:	4840      	ldr	r0, [pc, #256]	; (80010ec <fsm_traffic_blink_horizontal_run+0x234>)
 8000fea:	f003 fae7 	bl	80045bc <siprintf>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	493d      	ldr	r1, [pc, #244]	; (80010ec <fsm_traffic_blink_horizontal_run+0x234>)
 8000ff8:	483d      	ldr	r0, [pc, #244]	; (80010f0 <fsm_traffic_blink_horizontal_run+0x238>)
 8000ffa:	f002 fe22 	bl	8003c42 <HAL_UART_Transmit>
			}
			break;
 8000ffe:	e0e7      	b.n	80011d0 <fsm_traffic_blink_horizontal_run+0x318>
		case green_horizontal:
			setGreen_horizontal();
 8001000:	f001 f866 	bl	80020d0 <setGreen_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_green_horizontal_temp/10;
 8001004:	4b40      	ldr	r3, [pc, #256]	; (8001108 <fsm_traffic_blink_horizontal_run+0x250>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a3a      	ldr	r2, [pc, #232]	; (80010f4 <fsm_traffic_blink_horizontal_run+0x23c>)
 800100a:	fb82 1203 	smull	r1, r2, r2, r3
 800100e:	1092      	asrs	r2, r2, #2
 8001010:	17db      	asrs	r3, r3, #31
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	4a38      	ldr	r2, [pc, #224]	; (80010f8 <fsm_traffic_blink_horizontal_run+0x240>)
 8001016:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_green_horizontal_temp%10;
 8001018:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <fsm_traffic_blink_horizontal_run+0x250>)
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	4b35      	ldr	r3, [pc, #212]	; (80010f4 <fsm_traffic_blink_horizontal_run+0x23c>)
 800101e:	fb83 2301 	smull	r2, r3, r3, r1
 8001022:	109a      	asrs	r2, r3, #2
 8001024:	17cb      	asrs	r3, r1, #31
 8001026:	1ad2      	subs	r2, r2, r3
 8001028:	4613      	mov	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	1aca      	subs	r2, r1, r3
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <fsm_traffic_blink_horizontal_run+0x240>)
 8001034:	605a      	str	r2, [r3, #4]


			if(timer3_flag == 1){
 8001036:	4b31      	ldr	r3, [pc, #196]	; (80010fc <fsm_traffic_blink_horizontal_run+0x244>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d123      	bne.n	8001086 <fsm_traffic_blink_horizontal_run+0x1ce>

				time_green_horizontal_temp--;
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <fsm_traffic_blink_horizontal_run+0x250>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3b01      	subs	r3, #1
 8001044:	4a30      	ldr	r2, [pc, #192]	; (8001108 <fsm_traffic_blink_horizontal_run+0x250>)
 8001046:	6013      	str	r3, [r2, #0]
				if(time_green_horizontal_temp != 0)
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <fsm_traffic_blink_horizontal_run+0x250>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00e      	beq.n	800106e <fsm_traffic_blink_horizontal_run+0x1b6>
					HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_green_horizontal_temp), 1000);
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <fsm_traffic_blink_horizontal_run+0x250>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4924      	ldr	r1, [pc, #144]	; (80010e8 <fsm_traffic_blink_horizontal_run+0x230>)
 8001058:	4824      	ldr	r0, [pc, #144]	; (80010ec <fsm_traffic_blink_horizontal_run+0x234>)
 800105a:	f003 faaf 	bl	80045bc <siprintf>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	4921      	ldr	r1, [pc, #132]	; (80010ec <fsm_traffic_blink_horizontal_run+0x234>)
 8001068:	4821      	ldr	r0, [pc, #132]	; (80010f0 <fsm_traffic_blink_horizontal_run+0x238>)
 800106a:	f002 fdea 	bl	8003c42 <HAL_UART_Transmit>
				if(time_green_horizontal_temp == 0){
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <fsm_traffic_blink_horizontal_run+0x250>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d103      	bne.n	800107e <fsm_traffic_blink_horizontal_run+0x1c6>
					time_green_horizontal_temp = time_green_horizontal;
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <fsm_traffic_blink_horizontal_run+0x24c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a23      	ldr	r2, [pc, #140]	; (8001108 <fsm_traffic_blink_horizontal_run+0x250>)
 800107c:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 800107e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001082:	f000 fc79 	bl	8001978 <setTimer3>
			}

			if(timer1_flag == 1){
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <fsm_traffic_blink_horizontal_run+0x248>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	f040 80a2 	bne.w	80011d4 <fsm_traffic_blink_horizontal_run+0x31c>
				status_traffic_blink_horizontal = yellow_horizontal;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <fsm_traffic_blink_horizontal_run+0x220>)
 8001092:	2216      	movs	r2, #22
 8001094:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[2] = time_yellow_horizontal*1000;
 8001096:	4b1d      	ldr	r3, [pc, #116]	; (800110c <fsm_traffic_blink_horizontal_run+0x254>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <fsm_traffic_blink_horizontal_run+0x228>)
 80010a4:	6093      	str	r3, [r2, #8]
				//led yellow will turn on in traffic_buffer_horizontal[2]/1000 seconds
				setTimer1(traffic_buffer_horizontal[2]);
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <fsm_traffic_blink_horizontal_run+0x228>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fc30 	bl	8001910 <setTimer1>
				setTimer3(1000);
 80010b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b4:	f000 fc60 	bl	8001978 <setTimer3>
				HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_yellow_horizontal_temp), 1000);
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <fsm_traffic_blink_horizontal_run+0x258>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	490a      	ldr	r1, [pc, #40]	; (80010e8 <fsm_traffic_blink_horizontal_run+0x230>)
 80010c0:	480a      	ldr	r0, [pc, #40]	; (80010ec <fsm_traffic_blink_horizontal_run+0x234>)
 80010c2:	f003 fa7b 	bl	80045bc <siprintf>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	4907      	ldr	r1, [pc, #28]	; (80010ec <fsm_traffic_blink_horizontal_run+0x234>)
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <fsm_traffic_blink_horizontal_run+0x238>)
 80010d2:	f002 fdb6 	bl	8003c42 <HAL_UART_Transmit>
			}
			break;
 80010d6:	e07d      	b.n	80011d4 <fsm_traffic_blink_horizontal_run+0x31c>
 80010d8:	20000094 	.word	0x20000094
 80010dc:	200000a4 	.word	0x200000a4
 80010e0:	2000021c 	.word	0x2000021c
 80010e4:	200000b0 	.word	0x200000b0
 80010e8:	08004eb0 	.word	0x08004eb0
 80010ec:	20000074 	.word	0x20000074
 80010f0:	20000294 	.word	0x20000294
 80010f4:	66666667 	.word	0x66666667
 80010f8:	20000234 	.word	0x20000234
 80010fc:	200001a0 	.word	0x200001a0
 8001100:	20000190 	.word	0x20000190
 8001104:	200000a8 	.word	0x200000a8
 8001108:	200000b4 	.word	0x200000b4
 800110c:	200000ac 	.word	0x200000ac
 8001110:	200000b8 	.word	0x200000b8
		case yellow_horizontal:
			setYellow_horizontal();
 8001114:	f000 fff0 	bl	80020f8 <setYellow_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_yellow_horizontal_temp/10;
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <fsm_traffic_blink_horizontal_run+0x328>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <fsm_traffic_blink_horizontal_run+0x32c>)
 800111e:	fb82 1203 	smull	r1, r2, r2, r3
 8001122:	1092      	asrs	r2, r2, #2
 8001124:	17db      	asrs	r3, r3, #31
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <fsm_traffic_blink_horizontal_run+0x330>)
 800112a:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_yellow_horizontal_temp%10;
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <fsm_traffic_blink_horizontal_run+0x328>)
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <fsm_traffic_blink_horizontal_run+0x32c>)
 8001132:	fb83 2301 	smull	r2, r3, r3, r1
 8001136:	109a      	asrs	r2, r3, #2
 8001138:	17cb      	asrs	r3, r1, #31
 800113a:	1ad2      	subs	r2, r2, r3
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	1aca      	subs	r2, r1, r3
 8001146:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <fsm_traffic_blink_horizontal_run+0x330>)
 8001148:	605a      	str	r2, [r3, #4]


			if(timer3_flag == 1){
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <fsm_traffic_blink_horizontal_run+0x334>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d123      	bne.n	800119a <fsm_traffic_blink_horizontal_run+0x2e2>

				time_yellow_horizontal_temp--;
 8001152:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <fsm_traffic_blink_horizontal_run+0x328>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	3b01      	subs	r3, #1
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <fsm_traffic_blink_horizontal_run+0x328>)
 800115a:	6013      	str	r3, [r2, #0]
				if(time_yellow_horizontal_temp != 0)
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <fsm_traffic_blink_horizontal_run+0x328>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00e      	beq.n	8001182 <fsm_traffic_blink_horizontal_run+0x2ca>
					HAL_UART_Transmit(&huart2, str, sprintf(str, "%d \n", time_yellow_horizontal_temp), 1000);
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <fsm_traffic_blink_horizontal_run+0x328>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	4921      	ldr	r1, [pc, #132]	; (80011f0 <fsm_traffic_blink_horizontal_run+0x338>)
 800116c:	4821      	ldr	r0, [pc, #132]	; (80011f4 <fsm_traffic_blink_horizontal_run+0x33c>)
 800116e:	f003 fa25 	bl	80045bc <siprintf>
 8001172:	4603      	mov	r3, r0
 8001174:	b29a      	uxth	r2, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	491e      	ldr	r1, [pc, #120]	; (80011f4 <fsm_traffic_blink_horizontal_run+0x33c>)
 800117c:	481e      	ldr	r0, [pc, #120]	; (80011f8 <fsm_traffic_blink_horizontal_run+0x340>)
 800117e:	f002 fd60 	bl	8003c42 <HAL_UART_Transmit>
				if(time_yellow_horizontal_temp == 0){
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <fsm_traffic_blink_horizontal_run+0x328>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d103      	bne.n	8001192 <fsm_traffic_blink_horizontal_run+0x2da>
					time_yellow_horizontal_temp = time_yellow_horizontal;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <fsm_traffic_blink_horizontal_run+0x344>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <fsm_traffic_blink_horizontal_run+0x328>)
 8001190:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8001192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001196:	f000 fbef 	bl	8001978 <setTimer3>
			}

			if(timer1_flag == 1){
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <fsm_traffic_blink_horizontal_run+0x348>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d11a      	bne.n	80011d8 <fsm_traffic_blink_horizontal_run+0x320>
				status_traffic_blink_horizontal = init_horizontal;
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <fsm_traffic_blink_horizontal_run+0x34c>)
 80011a4:	2213      	movs	r2, #19
 80011a6:	601a      	str	r2, [r3, #0]
				//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
				traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <fsm_traffic_blink_horizontal_run+0x350>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b0:	fb02 f303 	mul.w	r3, r2, r3
 80011b4:	4a15      	ldr	r2, [pc, #84]	; (800120c <fsm_traffic_blink_horizontal_run+0x354>)
 80011b6:	6013      	str	r3, [r2, #0]
				setTimer1(traffic_buffer_horizontal[0]);
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <fsm_traffic_blink_horizontal_run+0x354>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fba7 	bl	8001910 <setTimer1>
				setTimer3(1000);
 80011c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c6:	f000 fbd7 	bl	8001978 <setTimer3>
			}
			break;
 80011ca:	e005      	b.n	80011d8 <fsm_traffic_blink_horizontal_run+0x320>
		default:
			break;
 80011cc:	bf00      	nop
 80011ce:	e004      	b.n	80011da <fsm_traffic_blink_horizontal_run+0x322>
			break;
 80011d0:	bf00      	nop
 80011d2:	e002      	b.n	80011da <fsm_traffic_blink_horizontal_run+0x322>
			break;
 80011d4:	bf00      	nop
 80011d6:	e000      	b.n	80011da <fsm_traffic_blink_horizontal_run+0x322>
			break;
 80011d8:	bf00      	nop
	}
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000b8 	.word	0x200000b8
 80011e4:	66666667 	.word	0x66666667
 80011e8:	20000234 	.word	0x20000234
 80011ec:	200001a0 	.word	0x200001a0
 80011f0:	08004eb0 	.word	0x08004eb0
 80011f4:	20000074 	.word	0x20000074
 80011f8:	20000294 	.word	0x20000294
 80011fc:	200000ac 	.word	0x200000ac
 8001200:	20000190 	.word	0x20000190
 8001204:	20000094 	.word	0x20000094
 8001208:	200000a4 	.word	0x200000a4
 800120c:	2000021c 	.word	0x2000021c

08001210 <fsm_traffic_blink_vertical_run>:

void fsm_traffic_blink_vertical_run(){
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_vertical){
 8001214:	4b89      	ldr	r3, [pc, #548]	; (800143c <fsm_traffic_blink_vertical_run+0x22c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3b17      	subs	r3, #23
 800121a:	2b03      	cmp	r3, #3
 800121c:	f200 8105 	bhi.w	800142a <fsm_traffic_blink_vertical_run+0x21a>
 8001220:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <fsm_traffic_blink_vertical_run+0x18>)
 8001222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001226:	bf00      	nop
 8001228:	08001239 	.word	0x08001239
 800122c:	08001399 	.word	0x08001399
 8001230:	08001263 	.word	0x08001263
 8001234:	08001307 	.word	0x08001307
		case init_vertical:
			status_traffic_blink_vertical = green_vertical;
 8001238:	4b80      	ldr	r3, [pc, #512]	; (800143c <fsm_traffic_blink_vertical_run+0x22c>)
 800123a:	2219      	movs	r2, #25
 800123c:	601a      	str	r2, [r3, #0]
			traffic_buffer_vertical[0] = time_green_vertical*1000;
 800123e:	4b80      	ldr	r3, [pc, #512]	; (8001440 <fsm_traffic_blink_vertical_run+0x230>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001246:	fb02 f303 	mul.w	r3, r2, r3
 800124a:	4a7e      	ldr	r2, [pc, #504]	; (8001444 <fsm_traffic_blink_vertical_run+0x234>)
 800124c:	6013      	str	r3, [r2, #0]
			setTimer2(traffic_buffer_vertical[0]);
 800124e:	4b7d      	ldr	r3, [pc, #500]	; (8001444 <fsm_traffic_blink_vertical_run+0x234>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fb76 	bl	8001944 <setTimer2>
			setTimer5(1000);// count down as a clock
 8001258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800125c:	f000 fbc0 	bl	80019e0 <setTimer5>
			break;
 8001260:	e0ea      	b.n	8001438 <fsm_traffic_blink_vertical_run+0x228>
		case green_vertical:
			setGreen_vertical();
 8001262:	f000 ff6d 	bl	8002140 <setGreen_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_green_vertical_temp/10;
 8001266:	4b78      	ldr	r3, [pc, #480]	; (8001448 <fsm_traffic_blink_vertical_run+0x238>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a78      	ldr	r2, [pc, #480]	; (800144c <fsm_traffic_blink_vertical_run+0x23c>)
 800126c:	fb82 1203 	smull	r1, r2, r2, r3
 8001270:	1092      	asrs	r2, r2, #2
 8001272:	17db      	asrs	r3, r3, #31
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	4a76      	ldr	r2, [pc, #472]	; (8001450 <fsm_traffic_blink_vertical_run+0x240>)
 8001278:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical_temp%10;
 800127a:	4b73      	ldr	r3, [pc, #460]	; (8001448 <fsm_traffic_blink_vertical_run+0x238>)
 800127c:	6819      	ldr	r1, [r3, #0]
 800127e:	4b73      	ldr	r3, [pc, #460]	; (800144c <fsm_traffic_blink_vertical_run+0x23c>)
 8001280:	fb83 2301 	smull	r2, r3, r3, r1
 8001284:	109a      	asrs	r2, r3, #2
 8001286:	17cb      	asrs	r3, r1, #31
 8001288:	1ad2      	subs	r2, r2, r3
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	1aca      	subs	r2, r1, r3
 8001294:	4b6e      	ldr	r3, [pc, #440]	; (8001450 <fsm_traffic_blink_vertical_run+0x240>)
 8001296:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8001298:	4b6e      	ldr	r3, [pc, #440]	; (8001454 <fsm_traffic_blink_vertical_run+0x244>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d118      	bne.n	80012d2 <fsm_traffic_blink_vertical_run+0xc2>
				time_green_vertical_temp--;
 80012a0:	4b69      	ldr	r3, [pc, #420]	; (8001448 <fsm_traffic_blink_vertical_run+0x238>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	4a68      	ldr	r2, [pc, #416]	; (8001448 <fsm_traffic_blink_vertical_run+0x238>)
 80012a8:	6013      	str	r3, [r2, #0]
				if(time_green_vertical_temp != 0) setTimer5(1000);
 80012aa:	4b67      	ldr	r3, [pc, #412]	; (8001448 <fsm_traffic_blink_vertical_run+0x238>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <fsm_traffic_blink_vertical_run+0xaa>
 80012b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b6:	f000 fb93 	bl	80019e0 <setTimer5>
				if(time_green_vertical_temp == 0){
 80012ba:	4b63      	ldr	r3, [pc, #396]	; (8001448 <fsm_traffic_blink_vertical_run+0x238>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <fsm_traffic_blink_vertical_run+0xba>
					time_green_vertical_temp = time_green_vertical;
 80012c2:	4b5f      	ldr	r3, [pc, #380]	; (8001440 <fsm_traffic_blink_vertical_run+0x230>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a60      	ldr	r2, [pc, #384]	; (8001448 <fsm_traffic_blink_vertical_run+0x238>)
 80012c8:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 80012ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ce:	f000 fb87 	bl	80019e0 <setTimer5>
			}

			if(timer2_flag == 1){
 80012d2:	4b61      	ldr	r3, [pc, #388]	; (8001458 <fsm_traffic_blink_vertical_run+0x248>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	f040 80a9 	bne.w	800142e <fsm_traffic_blink_vertical_run+0x21e>
				status_traffic_blink_vertical = yellow_vertical;
 80012dc:	4b57      	ldr	r3, [pc, #348]	; (800143c <fsm_traffic_blink_vertical_run+0x22c>)
 80012de:	221a      	movs	r2, #26
 80012e0:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[1] = time_yellow_vertical*1000;
 80012e2:	4b5e      	ldr	r3, [pc, #376]	; (800145c <fsm_traffic_blink_vertical_run+0x24c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ea:	fb02 f303 	mul.w	r3, r2, r3
 80012ee:	4a55      	ldr	r2, [pc, #340]	; (8001444 <fsm_traffic_blink_vertical_run+0x234>)
 80012f0:	6053      	str	r3, [r2, #4]
				setTimer2(traffic_buffer_vertical[1]);
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <fsm_traffic_blink_vertical_run+0x234>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fb24 	bl	8001944 <setTimer2>
				setTimer5(1000);
 80012fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001300:	f000 fb6e 	bl	80019e0 <setTimer5>
			}
			break;
 8001304:	e093      	b.n	800142e <fsm_traffic_blink_vertical_run+0x21e>
		case yellow_vertical:
			setYellow_vertical();
 8001306:	f000 ff2b 	bl	8002160 <setYellow_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_yellow_vertical_temp/10;
 800130a:	4b55      	ldr	r3, [pc, #340]	; (8001460 <fsm_traffic_blink_vertical_run+0x250>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a4f      	ldr	r2, [pc, #316]	; (800144c <fsm_traffic_blink_vertical_run+0x23c>)
 8001310:	fb82 1203 	smull	r1, r2, r2, r3
 8001314:	1092      	asrs	r2, r2, #2
 8001316:	17db      	asrs	r3, r3, #31
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	4a4d      	ldr	r2, [pc, #308]	; (8001450 <fsm_traffic_blink_vertical_run+0x240>)
 800131c:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical_temp%10;
 800131e:	4b50      	ldr	r3, [pc, #320]	; (8001460 <fsm_traffic_blink_vertical_run+0x250>)
 8001320:	6819      	ldr	r1, [r3, #0]
 8001322:	4b4a      	ldr	r3, [pc, #296]	; (800144c <fsm_traffic_blink_vertical_run+0x23c>)
 8001324:	fb83 2301 	smull	r2, r3, r3, r1
 8001328:	109a      	asrs	r2, r3, #2
 800132a:	17cb      	asrs	r3, r1, #31
 800132c:	1ad2      	subs	r2, r2, r3
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	1aca      	subs	r2, r1, r3
 8001338:	4b45      	ldr	r3, [pc, #276]	; (8001450 <fsm_traffic_blink_vertical_run+0x240>)
 800133a:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 800133c:	4b45      	ldr	r3, [pc, #276]	; (8001454 <fsm_traffic_blink_vertical_run+0x244>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d110      	bne.n	8001366 <fsm_traffic_blink_vertical_run+0x156>
				time_yellow_vertical_temp--;
 8001344:	4b46      	ldr	r3, [pc, #280]	; (8001460 <fsm_traffic_blink_vertical_run+0x250>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	3b01      	subs	r3, #1
 800134a:	4a45      	ldr	r2, [pc, #276]	; (8001460 <fsm_traffic_blink_vertical_run+0x250>)
 800134c:	6013      	str	r3, [r2, #0]
				if(time_yellow_vertical_temp == 0){
 800134e:	4b44      	ldr	r3, [pc, #272]	; (8001460 <fsm_traffic_blink_vertical_run+0x250>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d103      	bne.n	800135e <fsm_traffic_blink_vertical_run+0x14e>
					time_yellow_vertical_temp = time_yellow_vertical;
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <fsm_traffic_blink_vertical_run+0x24c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a41      	ldr	r2, [pc, #260]	; (8001460 <fsm_traffic_blink_vertical_run+0x250>)
 800135c:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 800135e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001362:	f000 fb3d 	bl	80019e0 <setTimer5>
			}

			if(timer2_flag == 1){
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <fsm_traffic_blink_vertical_run+0x248>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d161      	bne.n	8001432 <fsm_traffic_blink_vertical_run+0x222>
				status_traffic_blink_vertical = red_vertical;
 800136e:	4b33      	ldr	r3, [pc, #204]	; (800143c <fsm_traffic_blink_vertical_run+0x22c>)
 8001370:	2218      	movs	r2, #24
 8001372:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[2] = time_red_vertical*1000;
 8001374:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <fsm_traffic_blink_vertical_run+0x254>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800137c:	fb02 f303 	mul.w	r3, r2, r3
 8001380:	4a30      	ldr	r2, [pc, #192]	; (8001444 <fsm_traffic_blink_vertical_run+0x234>)
 8001382:	6093      	str	r3, [r2, #8]
				setTimer2(traffic_buffer_vertical[2]);
 8001384:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <fsm_traffic_blink_vertical_run+0x234>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4618      	mov	r0, r3
 800138a:	f000 fadb 	bl	8001944 <setTimer2>
				setTimer5(1000);
 800138e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001392:	f000 fb25 	bl	80019e0 <setTimer5>
			}
			break;
 8001396:	e04c      	b.n	8001432 <fsm_traffic_blink_vertical_run+0x222>
		case red_vertical:
			setRed_vertical();
 8001398:	f000 fec2 	bl	8002120 <setRed_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_red_vertical_temp/10;
 800139c:	4b32      	ldr	r3, [pc, #200]	; (8001468 <fsm_traffic_blink_vertical_run+0x258>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2a      	ldr	r2, [pc, #168]	; (800144c <fsm_traffic_blink_vertical_run+0x23c>)
 80013a2:	fb82 1203 	smull	r1, r2, r2, r3
 80013a6:	1092      	asrs	r2, r2, #2
 80013a8:	17db      	asrs	r3, r3, #31
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	4a28      	ldr	r2, [pc, #160]	; (8001450 <fsm_traffic_blink_vertical_run+0x240>)
 80013ae:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical_temp%10;
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <fsm_traffic_blink_vertical_run+0x258>)
 80013b2:	6819      	ldr	r1, [r3, #0]
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <fsm_traffic_blink_vertical_run+0x23c>)
 80013b6:	fb83 2301 	smull	r2, r3, r3, r1
 80013ba:	109a      	asrs	r2, r3, #2
 80013bc:	17cb      	asrs	r3, r1, #31
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	1aca      	subs	r2, r1, r3
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <fsm_traffic_blink_vertical_run+0x240>)
 80013cc:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 80013ce:	4b21      	ldr	r3, [pc, #132]	; (8001454 <fsm_traffic_blink_vertical_run+0x244>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d110      	bne.n	80013f8 <fsm_traffic_blink_vertical_run+0x1e8>
				time_red_vertical_temp--;
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <fsm_traffic_blink_vertical_run+0x258>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3b01      	subs	r3, #1
 80013dc:	4a22      	ldr	r2, [pc, #136]	; (8001468 <fsm_traffic_blink_vertical_run+0x258>)
 80013de:	6013      	str	r3, [r2, #0]
				if(time_red_vertical_temp == 0){
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <fsm_traffic_blink_vertical_run+0x258>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d103      	bne.n	80013f0 <fsm_traffic_blink_vertical_run+0x1e0>
					time_red_vertical_temp = time_red_vertical;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <fsm_traffic_blink_vertical_run+0x254>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <fsm_traffic_blink_vertical_run+0x258>)
 80013ee:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 80013f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013f4:	f000 faf4 	bl	80019e0 <setTimer5>
			}

			if(timer2_flag == 1){
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <fsm_traffic_blink_vertical_run+0x248>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d11a      	bne.n	8001436 <fsm_traffic_blink_vertical_run+0x226>
				status_traffic_blink_vertical = green_vertical;
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <fsm_traffic_blink_vertical_run+0x22c>)
 8001402:	2219      	movs	r2, #25
 8001404:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[0] = time_green_vertical*1000;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <fsm_traffic_blink_vertical_run+0x230>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800140e:	fb02 f303 	mul.w	r3, r2, r3
 8001412:	4a0c      	ldr	r2, [pc, #48]	; (8001444 <fsm_traffic_blink_vertical_run+0x234>)
 8001414:	6013      	str	r3, [r2, #0]
				setTimer2(traffic_buffer_vertical[0]);
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <fsm_traffic_blink_vertical_run+0x234>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fa92 	bl	8001944 <setTimer2>
				setTimer5(1000);
 8001420:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001424:	f000 fadc 	bl	80019e0 <setTimer5>
			}
			break;
 8001428:	e005      	b.n	8001436 <fsm_traffic_blink_vertical_run+0x226>
		default:
			break;
 800142a:	bf00      	nop
 800142c:	e004      	b.n	8001438 <fsm_traffic_blink_vertical_run+0x228>
			break;
 800142e:	bf00      	nop
 8001430:	e002      	b.n	8001438 <fsm_traffic_blink_vertical_run+0x228>
			break;
 8001432:	bf00      	nop
 8001434:	e000      	b.n	8001438 <fsm_traffic_blink_vertical_run+0x228>
			break;
 8001436:	bf00      	nop
	}
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000098 	.word	0x20000098
 8001440:	200000bc 	.word	0x200000bc
 8001444:	20000228 	.word	0x20000228
 8001448:	200000c8 	.word	0x200000c8
 800144c:	66666667 	.word	0x66666667
 8001450:	2000023c 	.word	0x2000023c
 8001454:	200001b0 	.word	0x200001b0
 8001458:	20000198 	.word	0x20000198
 800145c:	200000c0 	.word	0x200000c0
 8001460:	200000cc 	.word	0x200000cc
 8001464:	200000c4 	.word	0x200000c4
 8001468:	200000d0 	.word	0x200000d0

0800146c <fsm_traffic_horizontal_run>:
#include "traffic.h"

int status_traffic_horizontal = display_traffic_horizontal;


void fsm_traffic_horizontal_run(){
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	switch(status_traffic_horizontal){
 8001470:	4b26      	ldr	r3, [pc, #152]	; (800150c <fsm_traffic_horizontal_run+0xa0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	3303      	adds	r3, #3
 8001476:	2b0b      	cmp	r3, #11
 8001478:	d83e      	bhi.n	80014f8 <fsm_traffic_horizontal_run+0x8c>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <fsm_traffic_horizontal_run+0x14>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	080014f9 	.word	0x080014f9
 8001484:	080014f9 	.word	0x080014f9
 8001488:	080014f9 	.word	0x080014f9
 800148c:	080014f9 	.word	0x080014f9
 8001490:	080014f9 	.word	0x080014f9
 8001494:	080014f9 	.word	0x080014f9
 8001498:	080014f9 	.word	0x080014f9
 800149c:	080014f9 	.word	0x080014f9
 80014a0:	080014b1 	.word	0x080014b1
 80014a4:	080014b7 	.word	0x080014b7
 80014a8:	080014e3 	.word	0x080014e3
 80014ac:	080014cd 	.word	0x080014cd
		case display_traffic_horizontal:
			fsm_traffic_blink_horizontal_run();
 80014b0:	f7ff fd02 	bl	8000eb8 <fsm_traffic_blink_horizontal_run>
			break;
 80014b4:	e027      	b.n	8001506 <fsm_traffic_horizontal_run+0x9a>
		case modifying_led_red_horizontal:
			// turn off led green and yellow
//			offGreenYellow_horizontal();
			if(timer8_flag == 1){
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <fsm_traffic_horizontal_run+0xa4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d11e      	bne.n	80014fc <fsm_traffic_horizontal_run+0x90>
				//toggle led red with frequency 2Hz

				toggleRed_horizontal();
 80014be:	f000 fe6b 	bl	8002198 <toggleRed_horizontal>
				setTimer8(500);
 80014c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c6:	f000 fad9 	bl	8001a7c <setTimer8>
			}
			break;
 80014ca:	e017      	b.n	80014fc <fsm_traffic_horizontal_run+0x90>
		case modifying_led_yellow_horizontal:
//			offGreenRed_horizontal();
//			offAllLed_horizontal();
			if(timer8_flag == 1){
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <fsm_traffic_horizontal_run+0xa4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d115      	bne.n	8001500 <fsm_traffic_horizontal_run+0x94>
				//toggle led yellow with frequency 2Hz
				toggleYellow_horizontal();
 80014d4:	f000 fe84 	bl	80021e0 <toggleYellow_horizontal>
				setTimer8(500);
 80014d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014dc:	f000 face 	bl	8001a7c <setTimer8>
			}
			break;
 80014e0:	e00e      	b.n	8001500 <fsm_traffic_horizontal_run+0x94>
		case modifying_led_green_horizontal:
//			offRedYellow_horizontal();
			if(timer8_flag == 1){
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <fsm_traffic_horizontal_run+0xa4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10c      	bne.n	8001504 <fsm_traffic_horizontal_run+0x98>
				//toggle led green with frequency 2Hz
				toggleGreen_horizontal();
 80014ea:	f000 fe67 	bl	80021bc <toggleGreen_horizontal>
				setTimer8(500);
 80014ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f2:	f000 fac3 	bl	8001a7c <setTimer8>
			}
			break;
 80014f6:	e005      	b.n	8001504 <fsm_traffic_horizontal_run+0x98>
		case mannual_horizontal:
			break;
		default:
			break;
 80014f8:	bf00      	nop
 80014fa:	e004      	b.n	8001506 <fsm_traffic_horizontal_run+0x9a>
			break;
 80014fc:	bf00      	nop
 80014fe:	e002      	b.n	8001506 <fsm_traffic_horizontal_run+0x9a>
			break;
 8001500:	bf00      	nop
 8001502:	e000      	b.n	8001506 <fsm_traffic_horizontal_run+0x9a>
			break;
 8001504:	bf00      	nop
	}
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000009c 	.word	0x2000009c
 8001510:	200001c8 	.word	0x200001c8

08001514 <fsm_traffic_vertical_run>:
#include "traffic.h"
#include "fsm_traffic_blink.h"

int status_traffic_vertical = display_traffic_vertical;

void fsm_traffic_vertical_run(){
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	switch(status_traffic_vertical){
 8001518:	4b3f      	ldr	r3, [pc, #252]	; (8001618 <fsm_traffic_vertical_run+0x104>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3304      	adds	r3, #4
 800151e:	2b24      	cmp	r3, #36	; 0x24
 8001520:	d870      	bhi.n	8001604 <fsm_traffic_vertical_run+0xf0>
 8001522:	a201      	add	r2, pc, #4	; (adr r2, 8001528 <fsm_traffic_vertical_run+0x14>)
 8001524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001528:	08001605 	.word	0x08001605
 800152c:	08001605 	.word	0x08001605
 8001530:	08001605 	.word	0x08001605
 8001534:	08001605 	.word	0x08001605
 8001538:	08001605 	.word	0x08001605
 800153c:	08001605 	.word	0x08001605
 8001540:	08001605 	.word	0x08001605
 8001544:	08001605 	.word	0x08001605
 8001548:	08001605 	.word	0x08001605
 800154c:	08001605 	.word	0x08001605
 8001550:	08001605 	.word	0x08001605
 8001554:	08001605 	.word	0x08001605
 8001558:	08001605 	.word	0x08001605
 800155c:	080015bd 	.word	0x080015bd
 8001560:	08001605 	.word	0x08001605
 8001564:	08001605 	.word	0x08001605
 8001568:	08001605 	.word	0x08001605
 800156c:	08001605 	.word	0x08001605
 8001570:	08001605 	.word	0x08001605
 8001574:	08001605 	.word	0x08001605
 8001578:	08001605 	.word	0x08001605
 800157c:	08001605 	.word	0x08001605
 8001580:	08001605 	.word	0x08001605
 8001584:	08001605 	.word	0x08001605
 8001588:	08001605 	.word	0x08001605
 800158c:	08001605 	.word	0x08001605
 8001590:	08001605 	.word	0x08001605
 8001594:	08001605 	.word	0x08001605
 8001598:	08001605 	.word	0x08001605
 800159c:	08001605 	.word	0x08001605
 80015a0:	08001605 	.word	0x08001605
 80015a4:	08001605 	.word	0x08001605
 80015a8:	08001605 	.word	0x08001605
 80015ac:	08001605 	.word	0x08001605
 80015b0:	080015c3 	.word	0x080015c3
 80015b4:	080015ef 	.word	0x080015ef
 80015b8:	080015d9 	.word	0x080015d9
		case display_traffic_vertical:
//			status_traffic_blink_vertical = init_vertical;
			fsm_traffic_blink_vertical_run();
 80015bc:	f7ff fe28 	bl	8001210 <fsm_traffic_blink_vertical_run>
			break;
 80015c0:	e027      	b.n	8001612 <fsm_traffic_vertical_run+0xfe>
		case modifying_led_red_vertical:
//			offGreenYellow_vertical();
			if(timer7_flag == 1){
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <fsm_traffic_vertical_run+0x108>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d11e      	bne.n	8001608 <fsm_traffic_vertical_run+0xf4>
				toggleRed_vertical();
 80015ca:	f000 fe25 	bl	8002218 <toggleRed_vertical>
				setTimer7(500);
 80015ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d2:	f000 fa39 	bl	8001a48 <setTimer7>
			}
			break;
 80015d6:	e017      	b.n	8001608 <fsm_traffic_vertical_run+0xf4>
		case modifying_led_yellow_vertical:
//			offGreenRed_vertical();
//			offAllLed_vertical();
			if(timer7_flag == 1){
 80015d8:	4b10      	ldr	r3, [pc, #64]	; (800161c <fsm_traffic_vertical_run+0x108>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d115      	bne.n	800160c <fsm_traffic_vertical_run+0xf8>
				toggleYellow_vertical();
 80015e0:	f000 fe3a 	bl	8002258 <toggleYellow_vertical>
				setTimer7(500);
 80015e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e8:	f000 fa2e 	bl	8001a48 <setTimer7>
			}
			break;
 80015ec:	e00e      	b.n	800160c <fsm_traffic_vertical_run+0xf8>
		case modifying_led_green_vertical:
			// turn off red and yellow led
//			offRedYellow_vertical();
			if(timer7_flag == 1){
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <fsm_traffic_vertical_run+0x108>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d10c      	bne.n	8001610 <fsm_traffic_vertical_run+0xfc>
				//toggle green led with frequency 2Hz
				toggleGreen_vertical();
 80015f6:	f000 fe1f 	bl	8002238 <toggleGreen_vertical>
				setTimer7(500);
 80015fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015fe:	f000 fa23 	bl	8001a48 <setTimer7>
			}
			break;
 8001602:	e005      	b.n	8001610 <fsm_traffic_vertical_run+0xfc>
		case mannual_vertical:
			break;
		default:
			break;
 8001604:	bf00      	nop
 8001606:	e004      	b.n	8001612 <fsm_traffic_vertical_run+0xfe>
			break;
 8001608:	bf00      	nop
 800160a:	e002      	b.n	8001612 <fsm_traffic_vertical_run+0xfe>
			break;
 800160c:	bf00      	nop
 800160e:	e000      	b.n	8001612 <fsm_traffic_vertical_run+0xfe>
			break;
 8001610:	bf00      	nop
	}
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200000a0 	.word	0x200000a0
 800161c:	200001c0 	.word	0x200001c0

08001620 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001624:	f000 fee0 	bl	80023e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001628:	f000 f83e 	bl	80016a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162c:	f000 f8ee 	bl	800180c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001630:	f000 f876 	bl	8001720 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001634:	f000 f8c0 	bl	80017b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001638:	4819      	ldr	r0, [pc, #100]	; (80016a0 <main+0x80>)
 800163a:	f001 ff21 	bl	8003480 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	setTimer4(10);
 800163e:	200a      	movs	r0, #10
 8001640:	f000 f9b4 	bl	80019ac <setTimer4>
    setTimer6(10);
 8001644:	200a      	movs	r0, #10
 8001646:	f000 f9e5 	bl	8001a14 <setTimer6>
    setTimer7(500);// toggle led-red/green/yellow vertical road 2Hz while modifying time of it
 800164a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800164e:	f000 f9fb 	bl	8001a48 <setTimer7>
    setTimer8(500);// toggle led-red/green/yellow horizontal road 2Hz while modifying time of it
 8001652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001656:	f000 fa11 	bl	8001a7c <setTimer8>
    setTimer10(500);// timer blink led-red for debugging
 800165a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800165e:	f000 fa41 	bl	8001ae4 <setTimer10>
    setTimer32(10);
 8001662:	200a      	movs	r0, #10
 8001664:	f000 fa72 	bl	8001b4c <setTimer32>
    setTimer34(10);
 8001668:	200a      	movs	r0, #10
 800166a:	f000 fa89 	bl	8001b80 <setTimer34>

    /* USER CODE BEGIN 3 */
  //	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,i);

  	  //blink led-red for debugging
  	  if(timer10_flag == 1){
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <main+0x84>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d105      	bne.n	8001682 <main+0x62>
  		  toggleLedRed();
 8001676:	f000 fd83 	bl	8002180 <toggleLedRed>
  		  setTimer10(1000);
 800167a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800167e:	f000 fa31 	bl	8001ae4 <setTimer10>
  	  }

  	  fsm_system_run();
 8001682:	f7ff f9a9 	bl	80009d8 <fsm_system_run>
  	  fsm_7SEG_horizontal_run();
 8001686:	f7fe ffa9 	bl	80005dc <fsm_7SEG_horizontal_run>
  	  fsm_7SEG_vertical_run();
 800168a:	f7fe ffef 	bl	800066c <fsm_7SEG_vertical_run>
  	  fsm_traffic_vertical_run();
 800168e:	f7ff ff41 	bl	8001514 <fsm_traffic_vertical_run>
  	  fsm_traffic_horizontal_run();
 8001692:	f7ff feeb 	bl	800146c <fsm_traffic_horizontal_run>
  	  ///add function
  	  fsm_pedestrian_run();
 8001696:	f7ff f955 	bl	8000944 <fsm_pedestrian_run>
  	  FSM_Buzzer();
 800169a:	f7fe ff49 	bl	8000530 <FSM_Buzzer>
  	  if(timer10_flag == 1){
 800169e:	e7e6      	b.n	800166e <main+0x4e>
 80016a0:	2000024c 	.word	0x2000024c
 80016a4:	200001d8 	.word	0x200001d8

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b090      	sub	sp, #64	; 0x40
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	2228      	movs	r2, #40	; 0x28
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 ff78 	bl	80045ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ce:	2301      	movs	r3, #1
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d2:	2310      	movs	r3, #16
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016da:	f107 0318 	add.w	r3, r7, #24
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 fa64 	bl	8002bac <HAL_RCC_OscConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80016ea:	f000 f90b 	bl	8001904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ee:	230f      	movs	r3, #15
 80016f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f001 fcd0 	bl	80030ac <HAL_RCC_ClockConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001712:	f000 f8f7 	bl	8001904 <Error_Handler>
  }
}
 8001716:	bf00      	nop
 8001718:	3740      	adds	r7, #64	; 0x40
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	463b      	mov	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <MX_TIM2_Init+0x94>)
 800173e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001742:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <MX_TIM2_Init+0x94>)
 8001746:	2207      	movs	r2, #7
 8001748:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174a:	4b1a      	ldr	r3, [pc, #104]	; (80017b4 <MX_TIM2_Init+0x94>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <MX_TIM2_Init+0x94>)
 8001752:	f242 720f 	movw	r2, #9999	; 0x270f
 8001756:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_TIM2_Init+0x94>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <MX_TIM2_Init+0x94>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001764:	4813      	ldr	r0, [pc, #76]	; (80017b4 <MX_TIM2_Init+0x94>)
 8001766:	f001 fe3b 	bl	80033e0 <HAL_TIM_Base_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001770:	f000 f8c8 	bl	8001904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001778:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	4619      	mov	r1, r3
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <MX_TIM2_Init+0x94>)
 8001782:	f001 ffd1 	bl	8003728 <HAL_TIM_ConfigClockSource>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800178c:	f000 f8ba 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001798:	463b      	mov	r3, r7
 800179a:	4619      	mov	r1, r3
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <MX_TIM2_Init+0x94>)
 800179e:	f002 f999 	bl	8003ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017a8:	f000 f8ac 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	2000024c 	.word	0x2000024c

080017b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <MX_USART2_UART_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_USART2_UART_Init+0x4c>)
 80017f0:	f002 f9da 	bl	8003ba8 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017fa:	f000 f883 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000294 	.word	0x20000294
 8001808:	40004400 	.word	0x40004400

0800180c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <MX_GPIO_Init+0xd4>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a2e      	ldr	r2, [pc, #184]	; (80018e0 <MX_GPIO_Init+0xd4>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b2c      	ldr	r3, [pc, #176]	; (80018e0 <MX_GPIO_Init+0xd4>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <MX_GPIO_Init+0xd4>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a28      	ldr	r2, [pc, #160]	; (80018e0 <MX_GPIO_Init+0xd4>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6193      	str	r3, [r2, #24]
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <MX_GPIO_Init+0xd4>)
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8001856:	4823      	ldr	r0, [pc, #140]	; (80018e4 <MX_GPIO_Init+0xd8>)
 8001858:	f001 f977 	bl	8002b4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 800185c:	2200      	movs	r2, #0
 800185e:	f242 013c 	movw	r1, #8252	; 0x203c
 8001862:	4821      	ldr	r0, [pc, #132]	; (80018e8 <MX_GPIO_Init+0xdc>)
 8001864:	f001 f971 	bl	8002b4a <HAL_GPIO_WritePin>
                          |D4_TRAFFIC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_BLUE_Pin D7_PEDES_LIGHT_Pin D2_TRAFFIC1_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin;
 8001868:	f44f 63a2 	mov.w	r3, #1296	; 0x510
 800186c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2302      	movs	r3, #2
 8001878:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	4619      	mov	r1, r3
 8001880:	4818      	ldr	r0, [pc, #96]	; (80018e4 <MX_GPIO_Init+0xd8>)
 8001882:	f000 ffd1 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : A2_BUTTON2_Pin A0_PEDES_BUTTON_Pin */
  GPIO_InitStruct.Pin = A2_BUTTON2_Pin|A0_PEDES_BUTTON_Pin;
 8001886:	2360      	movs	r3, #96	; 0x60
 8001888:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	2301      	movs	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001892:	f107 0308 	add.w	r3, r7, #8
 8001896:	4619      	mov	r1, r3
 8001898:	4812      	ldr	r0, [pc, #72]	; (80018e4 <MX_GPIO_Init+0xd8>)
 800189a:	f000 ffc5 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_BUTTON3_Pin A1_BUTTON1_Pin */
  GPIO_InitStruct.Pin = A3_BUTTON3_Pin|A1_BUTTON1_Pin;
 800189e:	f244 0301 	movw	r3, #16385	; 0x4001
 80018a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0308 	add.w	r3, r7, #8
 80018b0:	4619      	mov	r1, r3
 80018b2:	480d      	ldr	r0, [pc, #52]	; (80018e8 <MX_GPIO_Init+0xdc>)
 80018b4:	f000 ffb8 	bl	8002828 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDES_LIGHT_Pin LED_RED_Pin D3_TRAFFIC1_Pin D5_TRAFFIC2_Pin
                           D4_TRAFFIC2_Pin */
  GPIO_InitStruct.Pin = D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 80018b8:	f242 033c 	movw	r3, #8252	; 0x203c
 80018bc:	60bb      	str	r3, [r7, #8]
                          |D4_TRAFFIC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2302      	movs	r3, #2
 80018c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_GPIO_Init+0xdc>)
 80018d2:	f000 ffa9 	bl	8002828 <HAL_GPIO_Init>

}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010800 	.word	0x40010800
 80018e8:	40010c00 	.word	0x40010c00

080018ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	timerRun();
 80018f4:	f000 f95e 	bl	8001bb4 <timerRun>
	getKeyInput();
 80018f8:	f7fe fc70 	bl	80001dc <getKeyInput>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	e7fe      	b.n	800190c <Error_Handler+0x8>
	...

08001910 <setTimer1>:
int timer34_counter = 0;

int timer35_flag = 0;
int timer35_counter = 0;

void setTimer1(int duration){
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <setTimer1+0x28>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001922:	4a06      	ldr	r2, [pc, #24]	; (800193c <setTimer1+0x2c>)
 8001924:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <setTimer1+0x30>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	200000dc 	.word	0x200000dc
 800193c:	20000194 	.word	0x20000194
 8001940:	20000190 	.word	0x20000190

08001944 <setTimer2>:

void setTimer2(int duration){
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <setTimer2+0x28>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	fb92 f3f3 	sdiv	r3, r2, r3
 8001956:	4a06      	ldr	r2, [pc, #24]	; (8001970 <setTimer2+0x2c>)
 8001958:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <setTimer2+0x30>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	200000dc 	.word	0x200000dc
 8001970:	2000019c 	.word	0x2000019c
 8001974:	20000198 	.word	0x20000198

08001978 <setTimer3>:

void setTimer3(int duration){
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001980:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <setTimer3+0x28>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	fb92 f3f3 	sdiv	r3, r2, r3
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <setTimer3+0x2c>)
 800198c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <setTimer3+0x30>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	200000dc 	.word	0x200000dc
 80019a4:	200001a4 	.word	0x200001a4
 80019a8:	200001a0 	.word	0x200001a0

080019ac <setTimer4>:

void setTimer4(int duration){
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <setTimer4+0x28>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80019be:	4a06      	ldr	r2, [pc, #24]	; (80019d8 <setTimer4+0x2c>)
 80019c0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80019c2:	4b06      	ldr	r3, [pc, #24]	; (80019dc <setTimer4+0x30>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200000dc 	.word	0x200000dc
 80019d8:	200001ac 	.word	0x200001ac
 80019dc:	200001a8 	.word	0x200001a8

080019e0 <setTimer5>:

void setTimer5(int duration){
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <setTimer5+0x28>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80019f2:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <setTimer5+0x2c>)
 80019f4:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <setTimer5+0x30>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	200000dc 	.word	0x200000dc
 8001a0c:	200001b4 	.word	0x200001b4
 8001a10:	200001b0 	.word	0x200001b0

08001a14 <setTimer6>:

void setTimer6(int duration){
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <setTimer6+0x28>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a26:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <setTimer6+0x2c>)
 8001a28:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <setTimer6+0x30>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200000dc 	.word	0x200000dc
 8001a40:	200001bc 	.word	0x200001bc
 8001a44:	200001b8 	.word	0x200001b8

08001a48 <setTimer7>:

void setTimer7(int duration){
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <setTimer7+0x28>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a5a:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <setTimer7+0x2c>)
 8001a5c:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <setTimer7+0x30>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	200000dc 	.word	0x200000dc
 8001a74:	200001c4 	.word	0x200001c4
 8001a78:	200001c0 	.word	0x200001c0

08001a7c <setTimer8>:

void setTimer8(int duration){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <setTimer8+0x28>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a8e:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <setTimer8+0x2c>)
 8001a90:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <setTimer8+0x30>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200000dc 	.word	0x200000dc
 8001aa8:	200001cc 	.word	0x200001cc
 8001aac:	200001c8 	.word	0x200001c8

08001ab0 <setTimer9>:

void setTimer9(int duration){
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	timer9_counter = duration/TICK;
 8001ab8:	4b07      	ldr	r3, [pc, #28]	; (8001ad8 <setTimer9+0x28>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ac2:	4a06      	ldr	r2, [pc, #24]	; (8001adc <setTimer9+0x2c>)
 8001ac4:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <setTimer9+0x30>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200000dc 	.word	0x200000dc
 8001adc:	200001d4 	.word	0x200001d4
 8001ae0:	200001d0 	.word	0x200001d0

08001ae4 <setTimer10>:

void setTimer10(int duration){
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	timer10_counter = duration/TICK;
 8001aec:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <setTimer10+0x28>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <setTimer10+0x2c>)
 8001af8:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <setTimer10+0x30>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	200000dc 	.word	0x200000dc
 8001b10:	200001dc 	.word	0x200001dc
 8001b14:	200001d8 	.word	0x200001d8

08001b18 <setTimer30>:
void setTimer11(int duration){
	timer11_counter = duration/TICK;
	timer11_flag = 0;
}

void setTimer30(int duration){
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	timer30_counter = duration/TICK;
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <setTimer30+0x28>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b2a:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <setTimer30+0x2c>)
 8001b2c:	6013      	str	r3, [r2, #0]
	timer30_flag = 0;
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <setTimer30+0x30>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	200000dc 	.word	0x200000dc
 8001b44:	200001ec 	.word	0x200001ec
 8001b48:	200001e8 	.word	0x200001e8

08001b4c <setTimer32>:
void setTimer31(int duration){
	timer31_counter = duration/TICK;
	timer31_flag = 0;
}

void setTimer32(int duration){
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	timer32_counter = duration/TICK;
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <setTimer32+0x28>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b5e:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <setTimer32+0x2c>)
 8001b60:	6013      	str	r3, [r2, #0]
	timer32_flag = 0;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <setTimer32+0x30>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	200000dc 	.word	0x200000dc
 8001b78:	200001fc 	.word	0x200001fc
 8001b7c:	200001f8 	.word	0x200001f8

08001b80 <setTimer34>:
void setTimer33(int duration){
	timer33_counter = duration/TICK;
	timer33_flag = 0;
}

void setTimer34(int duration){
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	timer34_counter = duration/TICK;
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <setTimer34+0x28>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b92:	4a06      	ldr	r2, [pc, #24]	; (8001bac <setTimer34+0x2c>)
 8001b94:	6013      	str	r3, [r2, #0]
	timer34_flag = 0;
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <setTimer34+0x30>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200000dc 	.word	0x200000dc
 8001bac:	2000020c 	.word	0x2000020c
 8001bb0:	20000208 	.word	0x20000208

08001bb4 <timerRun>:
void setTimer35(int duration){
	timer35_counter = duration/TICK;
	timer35_flag = 0;
}

void timerRun(){
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 8001bb8:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <timerRun+0x22c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	dd04      	ble.n	8001bca <timerRun+0x16>
 8001bc0:	4b87      	ldr	r3, [pc, #540]	; (8001de0 <timerRun+0x22c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	4a86      	ldr	r2, [pc, #536]	; (8001de0 <timerRun+0x22c>)
 8001bc8:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 8001bca:	4b85      	ldr	r3, [pc, #532]	; (8001de0 <timerRun+0x22c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <timerRun+0x24>
		timer1_flag = 1;
 8001bd2:	4b84      	ldr	r3, [pc, #528]	; (8001de4 <timerRun+0x230>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 8001bd8:	4b83      	ldr	r3, [pc, #524]	; (8001de8 <timerRun+0x234>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	dd04      	ble.n	8001bea <timerRun+0x36>
 8001be0:	4b81      	ldr	r3, [pc, #516]	; (8001de8 <timerRun+0x234>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	4a80      	ldr	r2, [pc, #512]	; (8001de8 <timerRun+0x234>)
 8001be8:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 8001bea:	4b7f      	ldr	r3, [pc, #508]	; (8001de8 <timerRun+0x234>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d102      	bne.n	8001bf8 <timerRun+0x44>
		timer2_flag = 1;
 8001bf2:	4b7e      	ldr	r3, [pc, #504]	; (8001dec <timerRun+0x238>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 8001bf8:	4b7d      	ldr	r3, [pc, #500]	; (8001df0 <timerRun+0x23c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	dd04      	ble.n	8001c0a <timerRun+0x56>
 8001c00:	4b7b      	ldr	r3, [pc, #492]	; (8001df0 <timerRun+0x23c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	4a7a      	ldr	r2, [pc, #488]	; (8001df0 <timerRun+0x23c>)
 8001c08:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 8001c0a:	4b79      	ldr	r3, [pc, #484]	; (8001df0 <timerRun+0x23c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d102      	bne.n	8001c18 <timerRun+0x64>
		timer3_flag = 1;
 8001c12:	4b78      	ldr	r3, [pc, #480]	; (8001df4 <timerRun+0x240>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 8001c18:	4b77      	ldr	r3, [pc, #476]	; (8001df8 <timerRun+0x244>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	dd04      	ble.n	8001c2a <timerRun+0x76>
 8001c20:	4b75      	ldr	r3, [pc, #468]	; (8001df8 <timerRun+0x244>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	4a74      	ldr	r2, [pc, #464]	; (8001df8 <timerRun+0x244>)
 8001c28:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 8001c2a:	4b73      	ldr	r3, [pc, #460]	; (8001df8 <timerRun+0x244>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <timerRun+0x84>
		timer4_flag = 1;
 8001c32:	4b72      	ldr	r3, [pc, #456]	; (8001dfc <timerRun+0x248>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0) timer5_counter--;
 8001c38:	4b71      	ldr	r3, [pc, #452]	; (8001e00 <timerRun+0x24c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	dd04      	ble.n	8001c4a <timerRun+0x96>
 8001c40:	4b6f      	ldr	r3, [pc, #444]	; (8001e00 <timerRun+0x24c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	4a6e      	ldr	r2, [pc, #440]	; (8001e00 <timerRun+0x24c>)
 8001c48:	6013      	str	r3, [r2, #0]
	if(timer5_counter == 0){
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <timerRun+0x24c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <timerRun+0xa4>
		timer5_flag = 1;
 8001c52:	4b6c      	ldr	r3, [pc, #432]	; (8001e04 <timerRun+0x250>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0) timer6_counter--;
 8001c58:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <timerRun+0x254>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	dd04      	ble.n	8001c6a <timerRun+0xb6>
 8001c60:	4b69      	ldr	r3, [pc, #420]	; (8001e08 <timerRun+0x254>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	4a68      	ldr	r2, [pc, #416]	; (8001e08 <timerRun+0x254>)
 8001c68:	6013      	str	r3, [r2, #0]
	if(timer6_counter == 0){
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <timerRun+0x254>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <timerRun+0xc4>
		timer6_flag = 1;
 8001c72:	4b66      	ldr	r3, [pc, #408]	; (8001e0c <timerRun+0x258>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0) timer7_counter--;
 8001c78:	4b65      	ldr	r3, [pc, #404]	; (8001e10 <timerRun+0x25c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	dd04      	ble.n	8001c8a <timerRun+0xd6>
 8001c80:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <timerRun+0x25c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	4a62      	ldr	r2, [pc, #392]	; (8001e10 <timerRun+0x25c>)
 8001c88:	6013      	str	r3, [r2, #0]
	if(timer7_counter == 0){
 8001c8a:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <timerRun+0x25c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <timerRun+0xe4>
		timer7_flag = 1;
 8001c92:	4b60      	ldr	r3, [pc, #384]	; (8001e14 <timerRun+0x260>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0) timer8_counter--;
 8001c98:	4b5f      	ldr	r3, [pc, #380]	; (8001e18 <timerRun+0x264>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	dd04      	ble.n	8001caa <timerRun+0xf6>
 8001ca0:	4b5d      	ldr	r3, [pc, #372]	; (8001e18 <timerRun+0x264>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	4a5c      	ldr	r2, [pc, #368]	; (8001e18 <timerRun+0x264>)
 8001ca8:	6013      	str	r3, [r2, #0]
	if(timer8_counter == 0){
 8001caa:	4b5b      	ldr	r3, [pc, #364]	; (8001e18 <timerRun+0x264>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <timerRun+0x104>
		timer8_flag = 1;
 8001cb2:	4b5a      	ldr	r3, [pc, #360]	; (8001e1c <timerRun+0x268>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0) timer9_counter--;
 8001cb8:	4b59      	ldr	r3, [pc, #356]	; (8001e20 <timerRun+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	dd04      	ble.n	8001cca <timerRun+0x116>
 8001cc0:	4b57      	ldr	r3, [pc, #348]	; (8001e20 <timerRun+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4a56      	ldr	r2, [pc, #344]	; (8001e20 <timerRun+0x26c>)
 8001cc8:	6013      	str	r3, [r2, #0]
	if(timer9_counter == 0){
 8001cca:	4b55      	ldr	r3, [pc, #340]	; (8001e20 <timerRun+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d102      	bne.n	8001cd8 <timerRun+0x124>
		timer9_flag = 1;
 8001cd2:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <timerRun+0x270>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
	}

	if(timer10_counter > 0) timer10_counter--;
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <timerRun+0x274>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	dd04      	ble.n	8001cea <timerRun+0x136>
 8001ce0:	4b51      	ldr	r3, [pc, #324]	; (8001e28 <timerRun+0x274>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	4a50      	ldr	r2, [pc, #320]	; (8001e28 <timerRun+0x274>)
 8001ce8:	6013      	str	r3, [r2, #0]
	if(timer10_counter == 0){
 8001cea:	4b4f      	ldr	r3, [pc, #316]	; (8001e28 <timerRun+0x274>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d102      	bne.n	8001cf8 <timerRun+0x144>
		timer10_flag = 1;
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <timerRun+0x278>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
	}

	if(timer11_counter > 0) timer11_counter--;
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	; (8001e30 <timerRun+0x27c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	dd04      	ble.n	8001d0a <timerRun+0x156>
 8001d00:	4b4b      	ldr	r3, [pc, #300]	; (8001e30 <timerRun+0x27c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	4a4a      	ldr	r2, [pc, #296]	; (8001e30 <timerRun+0x27c>)
 8001d08:	6013      	str	r3, [r2, #0]
	if(timer11_counter == 0){
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <timerRun+0x27c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <timerRun+0x164>
		timer11_flag = 1;
 8001d12:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <timerRun+0x280>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
	}

	if(timer30_counter > 0) timer30_counter--;
 8001d18:	4b47      	ldr	r3, [pc, #284]	; (8001e38 <timerRun+0x284>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	dd04      	ble.n	8001d2a <timerRun+0x176>
 8001d20:	4b45      	ldr	r3, [pc, #276]	; (8001e38 <timerRun+0x284>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	4a44      	ldr	r2, [pc, #272]	; (8001e38 <timerRun+0x284>)
 8001d28:	6013      	str	r3, [r2, #0]
	if(timer30_counter == 0){
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <timerRun+0x284>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <timerRun+0x184>
		timer30_flag = 1;
 8001d32:	4b42      	ldr	r3, [pc, #264]	; (8001e3c <timerRun+0x288>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	601a      	str	r2, [r3, #0]
	}

	if(timer31_counter > 0) timer31_counter--;
 8001d38:	4b41      	ldr	r3, [pc, #260]	; (8001e40 <timerRun+0x28c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	dd04      	ble.n	8001d4a <timerRun+0x196>
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <timerRun+0x28c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	4a3e      	ldr	r2, [pc, #248]	; (8001e40 <timerRun+0x28c>)
 8001d48:	6013      	str	r3, [r2, #0]
	if(timer31_counter == 0){
 8001d4a:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <timerRun+0x28c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <timerRun+0x1a4>
		timer31_flag = 1;
 8001d52:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <timerRun+0x290>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
	}

	if(timer32_counter > 0) timer32_counter--;
 8001d58:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <timerRun+0x294>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	dd04      	ble.n	8001d6a <timerRun+0x1b6>
 8001d60:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <timerRun+0x294>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	4a38      	ldr	r2, [pc, #224]	; (8001e48 <timerRun+0x294>)
 8001d68:	6013      	str	r3, [r2, #0]
	if(timer32_counter == 0){
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <timerRun+0x294>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <timerRun+0x1c4>
		timer32_flag = 1;
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <timerRun+0x298>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
	}

	if(timer33_counter > 0) timer33_counter--;
 8001d78:	4b35      	ldr	r3, [pc, #212]	; (8001e50 <timerRun+0x29c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	dd04      	ble.n	8001d8a <timerRun+0x1d6>
 8001d80:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <timerRun+0x29c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	4a32      	ldr	r2, [pc, #200]	; (8001e50 <timerRun+0x29c>)
 8001d88:	6013      	str	r3, [r2, #0]
	if(timer33_counter == 0){
 8001d8a:	4b31      	ldr	r3, [pc, #196]	; (8001e50 <timerRun+0x29c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <timerRun+0x1e4>
		timer33_flag = 1;
 8001d92:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <timerRun+0x2a0>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
	}

	if(timer34_counter > 0) timer34_counter--;
 8001d98:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <timerRun+0x2a4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	dd04      	ble.n	8001daa <timerRun+0x1f6>
 8001da0:	4b2d      	ldr	r3, [pc, #180]	; (8001e58 <timerRun+0x2a4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	4a2c      	ldr	r2, [pc, #176]	; (8001e58 <timerRun+0x2a4>)
 8001da8:	6013      	str	r3, [r2, #0]
	if(timer34_counter == 0){
 8001daa:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <timerRun+0x2a4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <timerRun+0x204>
		timer34_flag = 1;
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <timerRun+0x2a8>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
	}
	if(timer35_counter > 0) timer35_counter--;
 8001db8:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <timerRun+0x2ac>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	dd04      	ble.n	8001dca <timerRun+0x216>
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <timerRun+0x2ac>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	4a26      	ldr	r2, [pc, #152]	; (8001e60 <timerRun+0x2ac>)
 8001dc8:	6013      	str	r3, [r2, #0]
	if(timer35_counter == 0){
 8001dca:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <timerRun+0x2ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <timerRun+0x224>
		timer35_flag = 1;
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <timerRun+0x2b0>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
	}
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	20000194 	.word	0x20000194
 8001de4:	20000190 	.word	0x20000190
 8001de8:	2000019c 	.word	0x2000019c
 8001dec:	20000198 	.word	0x20000198
 8001df0:	200001a4 	.word	0x200001a4
 8001df4:	200001a0 	.word	0x200001a0
 8001df8:	200001ac 	.word	0x200001ac
 8001dfc:	200001a8 	.word	0x200001a8
 8001e00:	200001b4 	.word	0x200001b4
 8001e04:	200001b0 	.word	0x200001b0
 8001e08:	200001bc 	.word	0x200001bc
 8001e0c:	200001b8 	.word	0x200001b8
 8001e10:	200001c4 	.word	0x200001c4
 8001e14:	200001c0 	.word	0x200001c0
 8001e18:	200001cc 	.word	0x200001cc
 8001e1c:	200001c8 	.word	0x200001c8
 8001e20:	200001d4 	.word	0x200001d4
 8001e24:	200001d0 	.word	0x200001d0
 8001e28:	200001dc 	.word	0x200001dc
 8001e2c:	200001d8 	.word	0x200001d8
 8001e30:	200001e4 	.word	0x200001e4
 8001e34:	200001e0 	.word	0x200001e0
 8001e38:	200001ec 	.word	0x200001ec
 8001e3c:	200001e8 	.word	0x200001e8
 8001e40:	200001f4 	.word	0x200001f4
 8001e44:	200001f0 	.word	0x200001f0
 8001e48:	200001fc 	.word	0x200001fc
 8001e4c:	200001f8 	.word	0x200001f8
 8001e50:	20000204 	.word	0x20000204
 8001e54:	20000200 	.word	0x20000200
 8001e58:	2000020c 	.word	0x2000020c
 8001e5c:	20000208 	.word	0x20000208
 8001e60:	20000214 	.word	0x20000214
 8001e64:	20000210 	.word	0x20000210

08001e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	4a14      	ldr	r2, [pc, #80]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6193      	str	r3, [r2, #24]
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <HAL_MspInit+0x5c>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_MspInit+0x60>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_MspInit+0x60>)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40010000 	.word	0x40010000

08001ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001edc:	d113      	bne.n	8001f06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_TIM_Base_MspInit+0x44>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <HAL_TIM_Base_MspInit+0x44>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	61d3      	str	r3, [r2, #28]
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_TIM_Base_MspInit+0x44>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	201c      	movs	r0, #28
 8001efc:	f000 fbad 	bl	800265a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f00:	201c      	movs	r0, #28
 8001f02:	f000 fbc6 	bl	8002692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 0310 	add.w	r3, r7, #16
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	; (8001fac <HAL_UART_MspInit+0x98>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d137      	bne.n	8001fa4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <HAL_UART_MspInit+0x9c>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	4a1d      	ldr	r2, [pc, #116]	; (8001fb0 <HAL_UART_MspInit+0x9c>)
 8001f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f3e:	61d3      	str	r3, [r2, #28]
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_UART_MspInit+0x9c>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_UART_MspInit+0x9c>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_UART_MspInit+0x9c>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_UART_MspInit+0x9c>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f64:	2304      	movs	r3, #4
 8001f66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 0310 	add.w	r3, r7, #16
 8001f74:	4619      	mov	r1, r3
 8001f76:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <HAL_UART_MspInit+0xa0>)
 8001f78:	f000 fc56 	bl	8002828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 0310 	add.w	r3, r7, #16
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <HAL_UART_MspInit+0xa0>)
 8001f90:	f000 fc4a 	bl	8002828 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	2026      	movs	r0, #38	; 0x26
 8001f9a:	f000 fb5e 	bl	800265a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f9e:	2026      	movs	r0, #38	; 0x26
 8001fa0:	f000 fb77 	bl	8002692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fa4:	bf00      	nop
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40004400 	.word	0x40004400
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40010800 	.word	0x40010800

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <NMI_Handler+0x4>

08001fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <HardFault_Handler+0x4>

08001fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <MemManage_Handler+0x4>

08001fca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bc80      	pop	{r7}
 8001fe0:	4770      	bx	lr

08001fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ffe:	f000 fa39 	bl	8002474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <TIM2_IRQHandler+0x10>)
 800200e:	f001 fa83 	bl	8003518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000024c 	.word	0x2000024c

0800201c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <USART2_IRQHandler+0x10>)
 8002022:	f001 fea1 	bl	8003d68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000294 	.word	0x20000294

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	; (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f002 fa7a 	bl	8004558 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20002800 	.word	0x20002800
 8002090:	00000400 	.word	0x00000400
 8002094:	20000218 	.word	0x20000218
 8002098:	200002f0 	.word	0x200002f0

0800209c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <setRed_horizontal>:
 */
#include "traffic.h"
#include "global.h"
#include "main.h"

void setRed_horizontal(){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 80020ac:	2201      	movs	r2, #1
 80020ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <setRed_horizontal+0x20>)
 80020b4:	f000 fd49 	bl	8002b4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2108      	movs	r1, #8
 80020bc:	4803      	ldr	r0, [pc, #12]	; (80020cc <setRed_horizontal+0x24>)
 80020be:	f000 fd44 	bl	8002b4a <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40010800 	.word	0x40010800
 80020cc:	40010c00 	.word	0x40010c00

080020d0 <setGreen_horizontal>:

void setGreen_horizontal(){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 80020d4:	2200      	movs	r2, #0
 80020d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <setGreen_horizontal+0x20>)
 80020dc:	f000 fd35 	bl	8002b4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	2108      	movs	r1, #8
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <setGreen_horizontal+0x24>)
 80020e6:	f000 fd30 	bl	8002b4a <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_SET);
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40010800 	.word	0x40010800
 80020f4:	40010c00 	.word	0x40010c00

080020f8 <setYellow_horizontal>:

void setYellow_horizontal(){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 80020fc:	2201      	movs	r2, #1
 80020fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <setYellow_horizontal+0x20>)
 8002104:	f000 fd21 	bl	8002b4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8002108:	2201      	movs	r2, #1
 800210a:	2108      	movs	r1, #8
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <setYellow_horizontal+0x24>)
 800210e:	f000 fd1c 	bl	8002b4a <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40010800 	.word	0x40010800
 800211c:	40010c00 	.word	0x40010c00

08002120 <setRed_vertical>:

void setRed_vertical(){
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8002124:	2201      	movs	r2, #1
 8002126:	2120      	movs	r1, #32
 8002128:	4804      	ldr	r0, [pc, #16]	; (800213c <setRed_vertical+0x1c>)
 800212a:	f000 fd0e 	bl	8002b4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	2110      	movs	r1, #16
 8002132:	4802      	ldr	r0, [pc, #8]	; (800213c <setRed_vertical+0x1c>)
 8002134:	f000 fd09 	bl	8002b4a <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40010c00 	.word	0x40010c00

08002140 <setGreen_vertical>:

void setGreen_vertical(){
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	2120      	movs	r1, #32
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <setGreen_vertical+0x1c>)
 800214a:	f000 fcfe 	bl	8002b4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 800214e:	2201      	movs	r2, #1
 8002150:	2110      	movs	r1, #16
 8002152:	4802      	ldr	r0, [pc, #8]	; (800215c <setGreen_vertical+0x1c>)
 8002154:	f000 fcf9 	bl	8002b4a <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_SET);
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40010c00 	.word	0x40010c00

08002160 <setYellow_vertical>:

void setYellow_vertical(){
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8002164:	2201      	movs	r2, #1
 8002166:	2120      	movs	r1, #32
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <setYellow_vertical+0x1c>)
 800216a:	f000 fcee 	bl	8002b4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 800216e:	2201      	movs	r2, #1
 8002170:	2110      	movs	r1, #16
 8002172:	4802      	ldr	r0, [pc, #8]	; (800217c <setYellow_vertical+0x1c>)
 8002174:	f000 fce9 	bl	8002b4a <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40010c00 	.word	0x40010c00

08002180 <toggleLedRed>:


void toggleLedRed(){
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8002184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <toggleLedRed+0x14>)
 800218a:	f000 fcf6 	bl	8002b7a <HAL_GPIO_TogglePin>
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40010c00 	.word	0x40010c00

08002198 <toggleRed_horizontal>:

void toggleRed_horizontal(){
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDA_GPIO_Port, REDA_Pin);
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 800219c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a0:	4804      	ldr	r0, [pc, #16]	; (80021b4 <toggleRed_horizontal+0x1c>)
 80021a2:	f000 fcea 	bl	8002b7a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2108      	movs	r1, #8
 80021aa:	4803      	ldr	r0, [pc, #12]	; (80021b8 <toggleRed_horizontal+0x20>)
 80021ac:	f000 fccd 	bl	8002b4a <HAL_GPIO_WritePin>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40010800 	.word	0x40010800
 80021b8:	40010c00 	.word	0x40010c00

080021bc <toggleGreen_horizontal>:

void toggleGreen_horizontal(){
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENA_GPIO_Port, GREENA_Pin);
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 80021c0:	2108      	movs	r1, #8
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <toggleGreen_horizontal+0x1c>)
 80021c4:	f000 fcd9 	bl	8002b7a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ce:	4803      	ldr	r0, [pc, #12]	; (80021dc <toggleGreen_horizontal+0x20>)
 80021d0:	f000 fcbb 	bl	8002b4a <HAL_GPIO_WritePin>
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40010c00 	.word	0x40010c00
 80021dc:	40010800 	.word	0x40010800

080021e0 <toggleYellow_horizontal>:

void toggleYellow_horizontal(){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWA_GPIO_Port, YELLOWA_Pin);
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, HAL_GPIO_ReadPin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin));
 80021e4:	2108      	movs	r1, #8
 80021e6:	480a      	ldr	r0, [pc, #40]	; (8002210 <toggleYellow_horizontal+0x30>)
 80021e8:	f000 fc98 	bl	8002b1c <HAL_GPIO_ReadPin>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f4:	4807      	ldr	r0, [pc, #28]	; (8002214 <toggleYellow_horizontal+0x34>)
 80021f6:	f000 fca8 	bl	8002b4a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 80021fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <toggleYellow_horizontal+0x34>)
 8002200:	f000 fcbb 	bl	8002b7a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8002204:	2108      	movs	r1, #8
 8002206:	4802      	ldr	r0, [pc, #8]	; (8002210 <toggleYellow_horizontal+0x30>)
 8002208:	f000 fcb7 	bl	8002b7a <HAL_GPIO_TogglePin>
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40010c00 	.word	0x40010c00
 8002214:	40010800 	.word	0x40010800

08002218 <toggleRed_vertical>:

void toggleRed_vertical(){
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDB_GPIO_Port, REDB_Pin);
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 800221c:	2120      	movs	r1, #32
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <toggleRed_vertical+0x1c>)
 8002220:	f000 fcab 	bl	8002b7a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	2110      	movs	r1, #16
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <toggleRed_vertical+0x1c>)
 800222a:	f000 fc8e 	bl	8002b4a <HAL_GPIO_WritePin>
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40010c00 	.word	0x40010c00

08002238 <toggleGreen_vertical>:

void toggleGreen_vertical(){
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENB_GPIO_Port, GREENB_Pin);
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 800223c:	2110      	movs	r1, #16
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <toggleGreen_vertical+0x1c>)
 8002240:	f000 fc9b 	bl	8002b7a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	2120      	movs	r1, #32
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <toggleGreen_vertical+0x1c>)
 800224a:	f000 fc7e 	bl	8002b4a <HAL_GPIO_WritePin>
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40010c00 	.word	0x40010c00

08002258 <toggleYellow_vertical>:

void toggleYellow_vertical(){
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWB_GPIO_Port, YELLOWB_Pin);
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, HAL_GPIO_ReadPin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin));
 800225c:	2110      	movs	r1, #16
 800225e:	4809      	ldr	r0, [pc, #36]	; (8002284 <toggleYellow_vertical+0x2c>)
 8002260:	f000 fc5c 	bl	8002b1c <HAL_GPIO_ReadPin>
 8002264:	4603      	mov	r3, r0
 8002266:	461a      	mov	r2, r3
 8002268:	2120      	movs	r1, #32
 800226a:	4806      	ldr	r0, [pc, #24]	; (8002284 <toggleYellow_vertical+0x2c>)
 800226c:	f000 fc6d 	bl	8002b4a <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8002270:	2120      	movs	r1, #32
 8002272:	4804      	ldr	r0, [pc, #16]	; (8002284 <toggleYellow_vertical+0x2c>)
 8002274:	f000 fc81 	bl	8002b7a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8002278:	2110      	movs	r1, #16
 800227a:	4802      	ldr	r0, [pc, #8]	; (8002284 <toggleYellow_vertical+0x2c>)
 800227c:	f000 fc7d 	bl	8002b7a <HAL_GPIO_TogglePin>
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40010c00 	.word	0x40010c00

08002288 <resetTimeTraffic>:
void offRedYellow_vertical(){
//	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
}

void resetTimeTraffic(){
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
	time_red_horizontal_temp = time_red_horizontal;
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <resetTimeTraffic+0x3c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <resetTimeTraffic+0x40>)
 8002292:	6013      	str	r3, [r2, #0]
	time_green_horizontal_temp = time_green_horizontal;
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <resetTimeTraffic+0x44>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <resetTimeTraffic+0x48>)
 800229a:	6013      	str	r3, [r2, #0]
	time_yellow_horizontal_temp = time_yellow_horizontal;
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <resetTimeTraffic+0x4c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <resetTimeTraffic+0x50>)
 80022a2:	6013      	str	r3, [r2, #0]

	time_red_vertical_temp = time_red_vertical;
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <resetTimeTraffic+0x54>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <resetTimeTraffic+0x58>)
 80022aa:	6013      	str	r3, [r2, #0]
	time_green_vertical_temp = time_green_vertical;
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <resetTimeTraffic+0x5c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a0d      	ldr	r2, [pc, #52]	; (80022e8 <resetTimeTraffic+0x60>)
 80022b2:	6013      	str	r3, [r2, #0]
	time_yellow_vertical_temp = time_yellow_vertical;
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <resetTimeTraffic+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <resetTimeTraffic+0x68>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr
 80022c4:	200000a4 	.word	0x200000a4
 80022c8:	200000b0 	.word	0x200000b0
 80022cc:	200000a8 	.word	0x200000a8
 80022d0:	200000b4 	.word	0x200000b4
 80022d4:	200000ac 	.word	0x200000ac
 80022d8:	200000b8 	.word	0x200000b8
 80022dc:	200000c4 	.word	0x200000c4
 80022e0:	200000d0 	.word	0x200000d0
 80022e4:	200000bc 	.word	0x200000bc
 80022e8:	200000c8 	.word	0x200000c8
 80022ec:	200000c0 	.word	0x200000c0
 80022f0:	200000cc 	.word	0x200000cc

080022f4 <set_off_pedes>:

void set_off_pedes(){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2104      	movs	r1, #4
 80022fc:	4805      	ldr	r0, [pc, #20]	; (8002314 <set_off_pedes+0x20>)
 80022fe:	f000 fc24 	bl	8002b4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002308:	4803      	ldr	r0, [pc, #12]	; (8002318 <set_off_pedes+0x24>)
 800230a:	f000 fc1e 	bl	8002b4a <HAL_GPIO_WritePin>
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40010c00 	.word	0x40010c00
 8002318:	40010800 	.word	0x40010800

0800231c <set_red_pedes>:
void set_red_pedes(){
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 8002320:	2201      	movs	r2, #1
 8002322:	2104      	movs	r1, #4
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <set_red_pedes+0x20>)
 8002326:	f000 fc10 	bl	8002b4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002330:	4803      	ldr	r0, [pc, #12]	; (8002340 <set_red_pedes+0x24>)
 8002332:	f000 fc0a 	bl	8002b4a <HAL_GPIO_WritePin>
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40010c00 	.word	0x40010c00
 8002340:	40010800 	.word	0x40010800

08002344 <set_green_pedes>:
void set_green_pedes(){
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8002348:	2200      	movs	r2, #0
 800234a:	2104      	movs	r1, #4
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <set_green_pedes+0x20>)
 800234e:	f000 fbfc 	bl	8002b4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 8002352:	2201      	movs	r2, #1
 8002354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <set_green_pedes+0x24>)
 800235a:	f000 fbf6 	bl	8002b4a <HAL_GPIO_WritePin>
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40010c00 	.word	0x40010c00
 8002368:	40010800 	.word	0x40010800

0800236c <set_on_buzzer>:

void set_on_buzzer(){
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8002370:	2201      	movs	r2, #1
 8002372:	2110      	movs	r1, #16
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <set_on_buzzer+0x14>)
 8002376:	f000 fbe8 	bl	8002b4a <HAL_GPIO_WritePin>
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40010800 	.word	0x40010800

08002384 <set_off_buzzer>:

void set_off_buzzer(){
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8002388:	2200      	movs	r2, #0
 800238a:	2110      	movs	r1, #16
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <set_off_buzzer+0x14>)
 800238e:	f000 fbdc 	bl	8002b4a <HAL_GPIO_WritePin>
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40010800 	.word	0x40010800

0800239c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800239c:	480c      	ldr	r0, [pc, #48]	; (80023d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800239e:	490d      	ldr	r1, [pc, #52]	; (80023d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a0:	4a0d      	ldr	r2, [pc, #52]	; (80023d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a4:	e002      	b.n	80023ac <LoopCopyDataInit>

080023a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023aa:	3304      	adds	r3, #4

080023ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b0:	d3f9      	bcc.n	80023a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023b4:	4c0a      	ldr	r4, [pc, #40]	; (80023e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b8:	e001      	b.n	80023be <LoopFillZerobss>

080023ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023bc:	3204      	adds	r2, #4

080023be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c0:	d3fb      	bcc.n	80023ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023c2:	f7ff fe6b 	bl	800209c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c6:	f002 f8cd 	bl	8004564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ca:	f7ff f929 	bl	8001620 <main>
  bx lr
 80023ce:	4770      	bx	lr
  ldr r0, =_sdata
 80023d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d4:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 80023d8:	08004f1c 	.word	0x08004f1c
  ldr r2, =_sbss
 80023dc:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 80023e0:	200002ec 	.word	0x200002ec

080023e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC1_2_IRQHandler>
	...

080023e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_Init+0x28>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_Init+0x28>)
 80023f2:	f043 0310 	orr.w	r3, r3, #16
 80023f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f8:	2003      	movs	r0, #3
 80023fa:	f000 f923 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023fe:	200f      	movs	r0, #15
 8002400:	f000 f808 	bl	8002414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002404:	f7ff fd30 	bl	8001e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40022000 	.word	0x40022000

08002414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_InitTick+0x54>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_InitTick+0x58>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242a:	fbb3 f3f1 	udiv	r3, r3, r1
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f93b 	bl	80026ae <HAL_SYSTICK_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e00e      	b.n	8002460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b0f      	cmp	r3, #15
 8002446:	d80a      	bhi.n	800245e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002448:	2200      	movs	r2, #0
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	f04f 30ff 	mov.w	r0, #4294967295
 8002450:	f000 f903 	bl	800265a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002454:	4a06      	ldr	r2, [pc, #24]	; (8002470 <HAL_InitTick+0x5c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	e000      	b.n	8002460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200000e0 	.word	0x200000e0
 800246c:	200000e8 	.word	0x200000e8
 8002470:	200000e4 	.word	0x200000e4

08002474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_IncTick+0x1c>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_IncTick+0x20>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4413      	add	r3, r2
 8002484:	4a03      	ldr	r2, [pc, #12]	; (8002494 <HAL_IncTick+0x20>)
 8002486:	6013      	str	r3, [r2, #0]
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	200000e8 	.word	0x200000e8
 8002494:	200002d8 	.word	0x200002d8

08002498 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return uwTick;
 800249c:	4b02      	ldr	r3, [pc, #8]	; (80024a8 <HAL_GetTick+0x10>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	200002d8 	.word	0x200002d8

080024ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024c8:	4013      	ands	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024de:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <__NVIC_SetPriorityGrouping+0x44>)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	60d3      	str	r3, [r2, #12]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <__NVIC_GetPriorityGrouping+0x18>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 0307 	and.w	r3, r3, #7
}
 8002502:	4618      	mov	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	2b00      	cmp	r3, #0
 8002520:	db0b      	blt.n	800253a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	f003 021f 	and.w	r2, r3, #31
 8002528:	4906      	ldr	r1, [pc, #24]	; (8002544 <__NVIC_EnableIRQ+0x34>)
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2001      	movs	r0, #1
 8002532:	fa00 f202 	lsl.w	r2, r0, r2
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	db0a      	blt.n	8002572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	490c      	ldr	r1, [pc, #48]	; (8002594 <__NVIC_SetPriority+0x4c>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	0112      	lsls	r2, r2, #4
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	440b      	add	r3, r1
 800256c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002570:	e00a      	b.n	8002588 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4908      	ldr	r1, [pc, #32]	; (8002598 <__NVIC_SetPriority+0x50>)
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	3b04      	subs	r3, #4
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	440b      	add	r3, r1
 8002586:	761a      	strb	r2, [r3, #24]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000e100 	.word	0xe000e100
 8002598:	e000ed00 	.word	0xe000ed00

0800259c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f1c3 0307 	rsb	r3, r3, #7
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	bf28      	it	cs
 80025ba:	2304      	movcs	r3, #4
 80025bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d902      	bls.n	80025cc <NVIC_EncodePriority+0x30>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3b03      	subs	r3, #3
 80025ca:	e000      	b.n	80025ce <NVIC_EncodePriority+0x32>
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	f04f 32ff 	mov.w	r2, #4294967295
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	401a      	ands	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e4:	f04f 31ff 	mov.w	r1, #4294967295
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	fa01 f303 	lsl.w	r3, r1, r3
 80025ee:	43d9      	mvns	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	4313      	orrs	r3, r2
         );
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002610:	d301      	bcc.n	8002616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002612:	2301      	movs	r3, #1
 8002614:	e00f      	b.n	8002636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <SysTick_Config+0x40>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261e:	210f      	movs	r1, #15
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	f7ff ff90 	bl	8002548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <SysTick_Config+0x40>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <SysTick_Config+0x40>)
 8002630:	2207      	movs	r2, #7
 8002632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	e000e010 	.word	0xe000e010

08002644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff2d 	bl	80024ac <__NVIC_SetPriorityGrouping>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800266c:	f7ff ff42 	bl	80024f4 <__NVIC_GetPriorityGrouping>
 8002670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	6978      	ldr	r0, [r7, #20]
 8002678:	f7ff ff90 	bl	800259c <NVIC_EncodePriority>
 800267c:	4602      	mov	r2, r0
 800267e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff5f 	bl	8002548 <__NVIC_SetPriority>
}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff ff35 	bl	8002510 <__NVIC_EnableIRQ>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ffa2 	bl	8002600 <SysTick_Config>
 80026bc:	4603      	mov	r3, r0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b085      	sub	sp, #20
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2204      	movs	r2, #4
 80026e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e020      	b.n	8002730 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 020e 	bic.w	r2, r2, #14
 80026fc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	2101      	movs	r1, #1
 8002718:	fa01 f202 	lsl.w	r2, r1, r2
 800271c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
	...

0800273c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800274e:	2b02      	cmp	r3, #2
 8002750:	d005      	beq.n	800275e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2204      	movs	r2, #4
 8002756:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	e051      	b.n	8002802 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 020e 	bic.w	r2, r2, #14
 800276c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a22      	ldr	r2, [pc, #136]	; (800280c <HAL_DMA_Abort_IT+0xd0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d029      	beq.n	80027dc <HAL_DMA_Abort_IT+0xa0>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a20      	ldr	r2, [pc, #128]	; (8002810 <HAL_DMA_Abort_IT+0xd4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d022      	beq.n	80027d8 <HAL_DMA_Abort_IT+0x9c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <HAL_DMA_Abort_IT+0xd8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d01a      	beq.n	80027d2 <HAL_DMA_Abort_IT+0x96>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_DMA_Abort_IT+0xdc>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d012      	beq.n	80027cc <HAL_DMA_Abort_IT+0x90>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1c      	ldr	r2, [pc, #112]	; (800281c <HAL_DMA_Abort_IT+0xe0>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00a      	beq.n	80027c6 <HAL_DMA_Abort_IT+0x8a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1a      	ldr	r2, [pc, #104]	; (8002820 <HAL_DMA_Abort_IT+0xe4>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d102      	bne.n	80027c0 <HAL_DMA_Abort_IT+0x84>
 80027ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027be:	e00e      	b.n	80027de <HAL_DMA_Abort_IT+0xa2>
 80027c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c4:	e00b      	b.n	80027de <HAL_DMA_Abort_IT+0xa2>
 80027c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ca:	e008      	b.n	80027de <HAL_DMA_Abort_IT+0xa2>
 80027cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d0:	e005      	b.n	80027de <HAL_DMA_Abort_IT+0xa2>
 80027d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027d6:	e002      	b.n	80027de <HAL_DMA_Abort_IT+0xa2>
 80027d8:	2310      	movs	r3, #16
 80027da:	e000      	b.n	80027de <HAL_DMA_Abort_IT+0xa2>
 80027dc:	2301      	movs	r3, #1
 80027de:	4a11      	ldr	r2, [pc, #68]	; (8002824 <HAL_DMA_Abort_IT+0xe8>)
 80027e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	4798      	blx	r3
    } 
  }
  return status;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40020008 	.word	0x40020008
 8002810:	4002001c 	.word	0x4002001c
 8002814:	40020030 	.word	0x40020030
 8002818:	40020044 	.word	0x40020044
 800281c:	40020058 	.word	0x40020058
 8002820:	4002006c 	.word	0x4002006c
 8002824:	40020000 	.word	0x40020000

08002828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002828:	b480      	push	{r7}
 800282a:	b08b      	sub	sp, #44	; 0x2c
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283a:	e148      	b.n	8002ace <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800283c:	2201      	movs	r2, #1
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	429a      	cmp	r2, r3
 8002856:	f040 8137 	bne.w	8002ac8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4aa3      	ldr	r2, [pc, #652]	; (8002aec <HAL_GPIO_Init+0x2c4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d05e      	beq.n	8002922 <HAL_GPIO_Init+0xfa>
 8002864:	4aa1      	ldr	r2, [pc, #644]	; (8002aec <HAL_GPIO_Init+0x2c4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d875      	bhi.n	8002956 <HAL_GPIO_Init+0x12e>
 800286a:	4aa1      	ldr	r2, [pc, #644]	; (8002af0 <HAL_GPIO_Init+0x2c8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d058      	beq.n	8002922 <HAL_GPIO_Init+0xfa>
 8002870:	4a9f      	ldr	r2, [pc, #636]	; (8002af0 <HAL_GPIO_Init+0x2c8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d86f      	bhi.n	8002956 <HAL_GPIO_Init+0x12e>
 8002876:	4a9f      	ldr	r2, [pc, #636]	; (8002af4 <HAL_GPIO_Init+0x2cc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d052      	beq.n	8002922 <HAL_GPIO_Init+0xfa>
 800287c:	4a9d      	ldr	r2, [pc, #628]	; (8002af4 <HAL_GPIO_Init+0x2cc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d869      	bhi.n	8002956 <HAL_GPIO_Init+0x12e>
 8002882:	4a9d      	ldr	r2, [pc, #628]	; (8002af8 <HAL_GPIO_Init+0x2d0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d04c      	beq.n	8002922 <HAL_GPIO_Init+0xfa>
 8002888:	4a9b      	ldr	r2, [pc, #620]	; (8002af8 <HAL_GPIO_Init+0x2d0>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d863      	bhi.n	8002956 <HAL_GPIO_Init+0x12e>
 800288e:	4a9b      	ldr	r2, [pc, #620]	; (8002afc <HAL_GPIO_Init+0x2d4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d046      	beq.n	8002922 <HAL_GPIO_Init+0xfa>
 8002894:	4a99      	ldr	r2, [pc, #612]	; (8002afc <HAL_GPIO_Init+0x2d4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d85d      	bhi.n	8002956 <HAL_GPIO_Init+0x12e>
 800289a:	2b12      	cmp	r3, #18
 800289c:	d82a      	bhi.n	80028f4 <HAL_GPIO_Init+0xcc>
 800289e:	2b12      	cmp	r3, #18
 80028a0:	d859      	bhi.n	8002956 <HAL_GPIO_Init+0x12e>
 80028a2:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <HAL_GPIO_Init+0x80>)
 80028a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a8:	08002923 	.word	0x08002923
 80028ac:	080028fd 	.word	0x080028fd
 80028b0:	0800290f 	.word	0x0800290f
 80028b4:	08002951 	.word	0x08002951
 80028b8:	08002957 	.word	0x08002957
 80028bc:	08002957 	.word	0x08002957
 80028c0:	08002957 	.word	0x08002957
 80028c4:	08002957 	.word	0x08002957
 80028c8:	08002957 	.word	0x08002957
 80028cc:	08002957 	.word	0x08002957
 80028d0:	08002957 	.word	0x08002957
 80028d4:	08002957 	.word	0x08002957
 80028d8:	08002957 	.word	0x08002957
 80028dc:	08002957 	.word	0x08002957
 80028e0:	08002957 	.word	0x08002957
 80028e4:	08002957 	.word	0x08002957
 80028e8:	08002957 	.word	0x08002957
 80028ec:	08002905 	.word	0x08002905
 80028f0:	08002919 	.word	0x08002919
 80028f4:	4a82      	ldr	r2, [pc, #520]	; (8002b00 <HAL_GPIO_Init+0x2d8>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d013      	beq.n	8002922 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028fa:	e02c      	b.n	8002956 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	623b      	str	r3, [r7, #32]
          break;
 8002902:	e029      	b.n	8002958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	3304      	adds	r3, #4
 800290a:	623b      	str	r3, [r7, #32]
          break;
 800290c:	e024      	b.n	8002958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	3308      	adds	r3, #8
 8002914:	623b      	str	r3, [r7, #32]
          break;
 8002916:	e01f      	b.n	8002958 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	330c      	adds	r3, #12
 800291e:	623b      	str	r3, [r7, #32]
          break;
 8002920:	e01a      	b.n	8002958 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d102      	bne.n	8002930 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800292a:	2304      	movs	r3, #4
 800292c:	623b      	str	r3, [r7, #32]
          break;
 800292e:	e013      	b.n	8002958 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002938:	2308      	movs	r3, #8
 800293a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69fa      	ldr	r2, [r7, #28]
 8002940:	611a      	str	r2, [r3, #16]
          break;
 8002942:	e009      	b.n	8002958 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002944:	2308      	movs	r3, #8
 8002946:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	615a      	str	r2, [r3, #20]
          break;
 800294e:	e003      	b.n	8002958 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002950:	2300      	movs	r3, #0
 8002952:	623b      	str	r3, [r7, #32]
          break;
 8002954:	e000      	b.n	8002958 <HAL_GPIO_Init+0x130>
          break;
 8002956:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2bff      	cmp	r3, #255	; 0xff
 800295c:	d801      	bhi.n	8002962 <HAL_GPIO_Init+0x13a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	e001      	b.n	8002966 <HAL_GPIO_Init+0x13e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2bff      	cmp	r3, #255	; 0xff
 800296c:	d802      	bhi.n	8002974 <HAL_GPIO_Init+0x14c>
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	e002      	b.n	800297a <HAL_GPIO_Init+0x152>
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	3b08      	subs	r3, #8
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	210f      	movs	r1, #15
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	6a39      	ldr	r1, [r7, #32]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	fa01 f303 	lsl.w	r3, r1, r3
 8002994:	431a      	orrs	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8090 	beq.w	8002ac8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029a8:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	4a55      	ldr	r2, [pc, #340]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6193      	str	r3, [r2, #24]
 80029b4:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_GPIO_Init+0x2dc>)
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_GPIO_Init+0x2e0>)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	089b      	lsrs	r3, r3, #2
 80029c6:	3302      	adds	r3, #2
 80029c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	220f      	movs	r2, #15
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4013      	ands	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a49      	ldr	r2, [pc, #292]	; (8002b0c <HAL_GPIO_Init+0x2e4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00d      	beq.n	8002a08 <HAL_GPIO_Init+0x1e0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a48      	ldr	r2, [pc, #288]	; (8002b10 <HAL_GPIO_Init+0x2e8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <HAL_GPIO_Init+0x1dc>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a47      	ldr	r2, [pc, #284]	; (8002b14 <HAL_GPIO_Init+0x2ec>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_GPIO_Init+0x1d8>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e004      	b.n	8002a0a <HAL_GPIO_Init+0x1e2>
 8002a00:	2303      	movs	r3, #3
 8002a02:	e002      	b.n	8002a0a <HAL_GPIO_Init+0x1e2>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_GPIO_Init+0x1e2>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	f002 0203 	and.w	r2, r2, #3
 8002a10:	0092      	lsls	r2, r2, #2
 8002a12:	4093      	lsls	r3, r2
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a1a:	493b      	ldr	r1, [pc, #236]	; (8002b08 <HAL_GPIO_Init+0x2e0>)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d006      	beq.n	8002a42 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a34:	4b38      	ldr	r3, [pc, #224]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4937      	ldr	r1, [pc, #220]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
 8002a40:	e006      	b.n	8002a50 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a42:	4b35      	ldr	r3, [pc, #212]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	4933      	ldr	r1, [pc, #204]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d006      	beq.n	8002a6a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	492d      	ldr	r1, [pc, #180]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	604b      	str	r3, [r1, #4]
 8002a68:	e006      	b.n	8002a78 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a6a:	4b2b      	ldr	r3, [pc, #172]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	4929      	ldr	r1, [pc, #164]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d006      	beq.n	8002a92 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	4923      	ldr	r1, [pc, #140]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	608b      	str	r3, [r1, #8]
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a92:	4b21      	ldr	r3, [pc, #132]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	491f      	ldr	r1, [pc, #124]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	4919      	ldr	r1, [pc, #100]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60cb      	str	r3, [r1, #12]
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aba:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	4915      	ldr	r1, [pc, #84]	; (8002b18 <HAL_GPIO_Init+0x2f0>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	3301      	adds	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f47f aeaf 	bne.w	800283c <HAL_GPIO_Init+0x14>
  }
}
 8002ade:	bf00      	nop
 8002ae0:	bf00      	nop
 8002ae2:	372c      	adds	r7, #44	; 0x2c
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	10320000 	.word	0x10320000
 8002af0:	10310000 	.word	0x10310000
 8002af4:	10220000 	.word	0x10220000
 8002af8:	10210000 	.word	0x10210000
 8002afc:	10120000 	.word	0x10120000
 8002b00:	10110000 	.word	0x10110000
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40010800 	.word	0x40010800
 8002b10:	40010c00 	.word	0x40010c00
 8002b14:	40011000 	.word	0x40011000
 8002b18:	40010400 	.word	0x40010400

08002b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	887b      	ldrh	r3, [r7, #2]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
 8002b38:	e001      	b.n	8002b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	807b      	strh	r3, [r7, #2]
 8002b56:	4613      	mov	r3, r2
 8002b58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b5a:	787b      	ldrb	r3, [r7, #1]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b60:	887a      	ldrh	r2, [r7, #2]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b66:	e003      	b.n	8002b70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	041a      	lsls	r2, r3, #16
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	611a      	str	r2, [r3, #16]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b8c:	887a      	ldrh	r2, [r7, #2]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4013      	ands	r3, r2
 8002b92:	041a      	lsls	r2, r3, #16
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	43d9      	mvns	r1, r3
 8002b98:	887b      	ldrh	r3, [r7, #2]
 8002b9a:	400b      	ands	r3, r1
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	611a      	str	r2, [r3, #16]
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e26c      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8087 	beq.w	8002cda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bcc:	4b92      	ldr	r3, [pc, #584]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bd8:	4b8f      	ldr	r3, [pc, #572]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d112      	bne.n	8002c0a <HAL_RCC_OscConfig+0x5e>
 8002be4:	4b8c      	ldr	r3, [pc, #560]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf2:	4b89      	ldr	r3, [pc, #548]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d06c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x12c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d168      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e246      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c12:	d106      	bne.n	8002c22 <HAL_RCC_OscConfig+0x76>
 8002c14:	4b80      	ldr	r3, [pc, #512]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a7f      	ldr	r2, [pc, #508]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e02e      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x98>
 8002c2a:	4b7b      	ldr	r3, [pc, #492]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7a      	ldr	r2, [pc, #488]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b78      	ldr	r3, [pc, #480]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a77      	ldr	r2, [pc, #476]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0xbc>
 8002c4e:	4b72      	ldr	r3, [pc, #456]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a71      	ldr	r2, [pc, #452]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b6f      	ldr	r3, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6e      	ldr	r2, [pc, #440]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xd4>
 8002c68:	4b6b      	ldr	r3, [pc, #428]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6a      	ldr	r2, [pc, #424]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b68      	ldr	r3, [pc, #416]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a67      	ldr	r2, [pc, #412]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7ff fc06 	bl	8002498 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff fc02 	bl	8002498 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1fa      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b5d      	ldr	r3, [pc, #372]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xe4>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fbf2 	bl	8002498 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7ff fbee 	bl	8002498 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1e6      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x10c>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ce6:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cf2:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x18c>
 8002cfe:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x176>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1ba      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b3d      	ldr	r3, [pc, #244]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4939      	ldr	r1, [pc, #228]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7ff fba7 	bl	8002498 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7ff fba3 	bl	8002498 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e19b      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b2d      	ldr	r3, [pc, #180]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4927      	ldr	r1, [pc, #156]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_RCC_OscConfig+0x270>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7ff fb86 	bl	8002498 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7ff fb82 	bl	8002498 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e17a      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d03a      	beq.n	8002e30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d019      	beq.n	8002df6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc8:	f7ff fb66 	bl	8002498 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7ff fb62 	bl	8002498 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e15a      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dee:	2001      	movs	r0, #1
 8002df0:	f000 fad8 	bl	80033a4 <RCC_Delay>
 8002df4:	e01c      	b.n	8002e30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_RCC_OscConfig+0x274>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfc:	f7ff fb4c 	bl	8002498 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e02:	e00f      	b.n	8002e24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e04:	f7ff fb48 	bl	8002498 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d908      	bls.n	8002e24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e140      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
 8002e16:	bf00      	nop
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	42420000 	.word	0x42420000
 8002e20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e24:	4b9e      	ldr	r3, [pc, #632]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e9      	bne.n	8002e04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80a6 	beq.w	8002f8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b97      	ldr	r3, [pc, #604]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4b94      	ldr	r3, [pc, #592]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a93      	ldr	r2, [pc, #588]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	61d3      	str	r3, [r2, #28]
 8002e5a:	4b91      	ldr	r3, [pc, #580]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e66:	2301      	movs	r3, #1
 8002e68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b8e      	ldr	r3, [pc, #568]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d118      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e76:	4b8b      	ldr	r3, [pc, #556]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a8a      	ldr	r2, [pc, #552]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e82:	f7ff fb09 	bl	8002498 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7ff fb05 	bl	8002498 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	; 0x64
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0fd      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b81      	ldr	r3, [pc, #516]	; (80030a4 <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x312>
 8002eb0:	4b7b      	ldr	r3, [pc, #492]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	4a7a      	ldr	r2, [pc, #488]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6213      	str	r3, [r2, #32]
 8002ebc:	e02d      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x334>
 8002ec6:	4b76      	ldr	r3, [pc, #472]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a75      	ldr	r2, [pc, #468]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	6213      	str	r3, [r2, #32]
 8002ed2:	4b73      	ldr	r3, [pc, #460]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	4a72      	ldr	r2, [pc, #456]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	f023 0304 	bic.w	r3, r3, #4
 8002edc:	6213      	str	r3, [r2, #32]
 8002ede:	e01c      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d10c      	bne.n	8002f02 <HAL_RCC_OscConfig+0x356>
 8002ee8:	4b6d      	ldr	r3, [pc, #436]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a6c      	ldr	r2, [pc, #432]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4a69      	ldr	r2, [pc, #420]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6213      	str	r3, [r2, #32]
 8002f00:	e00b      	b.n	8002f1a <HAL_RCC_OscConfig+0x36e>
 8002f02:	4b67      	ldr	r3, [pc, #412]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a66      	ldr	r2, [pc, #408]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6213      	str	r3, [r2, #32]
 8002f0e:	4b64      	ldr	r3, [pc, #400]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a63      	ldr	r2, [pc, #396]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d015      	beq.n	8002f4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7ff fab9 	bl	8002498 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7ff fab5 	bl	8002498 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0ab      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ee      	beq.n	8002f2a <HAL_RCC_OscConfig+0x37e>
 8002f4c:	e014      	b.n	8002f78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4e:	f7ff faa3 	bl	8002498 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7ff fa9f 	bl	8002498 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e095      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6c:	4b4c      	ldr	r3, [pc, #304]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	6a1b      	ldr	r3, [r3, #32]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ee      	bne.n	8002f56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d105      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7e:	4b48      	ldr	r3, [pc, #288]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8081 	beq.w	8003096 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f94:	4b42      	ldr	r3, [pc, #264]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d061      	beq.n	8003064 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d146      	bne.n	8003036 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <HAL_RCC_OscConfig+0x4fc>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7ff fa73 	bl	8002498 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7ff fa6f 	bl	8002498 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e067      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc8:	4b35      	ldr	r3, [pc, #212]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d108      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fde:	4b30      	ldr	r3, [pc, #192]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	492d      	ldr	r1, [pc, #180]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff0:	4b2b      	ldr	r3, [pc, #172]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a19      	ldr	r1, [r3, #32]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	430b      	orrs	r3, r1
 8003002:	4927      	ldr	r1, [pc, #156]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003008:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <HAL_RCC_OscConfig+0x4fc>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7ff fa43 	bl	8002498 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003016:	f7ff fa3f 	bl	8002498 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e037      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003028:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x46a>
 8003034:	e02f      	b.n	8003096 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b1c      	ldr	r3, [pc, #112]	; (80030a8 <HAL_RCC_OscConfig+0x4fc>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7ff fa2c 	bl	8002498 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7ff fa28 	bl	8002498 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e020      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x498>
 8003062:	e018      	b.n	8003096 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e013      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_OscConfig+0x4f4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	429a      	cmp	r2, r3
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40007000 	.word	0x40007000
 80030a8:	42420060 	.word	0x42420060

080030ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0d0      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b6a      	ldr	r3, [pc, #424]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d910      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b67      	ldr	r3, [pc, #412]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4965      	ldr	r1, [pc, #404]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0b8      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003108:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003112:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003126:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800312a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b50      	ldr	r3, [pc, #320]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	494d      	ldr	r1, [pc, #308]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	4313      	orrs	r3, r2
 800313c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d040      	beq.n	80031cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d115      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e07f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e073      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	4b3d      	ldr	r3, [pc, #244]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e06b      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318a:	4b39      	ldr	r3, [pc, #228]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4936      	ldr	r1, [pc, #216]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	4313      	orrs	r3, r2
 800319a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800319c:	f7ff f97c 	bl	8002498 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a4:	f7ff f978 	bl	8002498 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e053      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 020c 	and.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1eb      	bne.n	80031a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031cc:	4b27      	ldr	r3, [pc, #156]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d210      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b24      	ldr	r3, [pc, #144]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 0207 	bic.w	r2, r3, #7
 80031e2:	4922      	ldr	r1, [pc, #136]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e032      	b.n	8003262 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4916      	ldr	r1, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	490e      	ldr	r1, [pc, #56]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323a:	f000 f821 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1cc>)
 8003254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1d0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff f8da 	bl	8002414 <HAL_InitTick>

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40022000 	.word	0x40022000
 8003270:	40021000 	.word	0x40021000
 8003274:	08004ec8 	.word	0x08004ec8
 8003278:	200000e0 	.word	0x200000e0
 800327c:	200000e4 	.word	0x200000e4

08003280 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	b490      	push	{r4, r7}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003286:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003288:	1d3c      	adds	r4, r7, #4
 800328a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800328c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003290:	f240 2301 	movw	r3, #513	; 0x201
 8003294:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
 800329e:	2300      	movs	r3, #0
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x40>
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x46>
 80032be:	e02d      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032c0:	4b1d      	ldr	r3, [pc, #116]	; (8003338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032c2:	623b      	str	r3, [r7, #32]
      break;
 80032c4:	e02d      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	0c9b      	lsrs	r3, r3, #18
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032d2:	4413      	add	r3, r2
 80032d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032d8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <HAL_RCC_GetSysClockFreq+0xb4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	0c5b      	lsrs	r3, r3, #17
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032f2:	4413      	add	r3, r2
 80032f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032fe:	fb02 f203 	mul.w	r2, r2, r3
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
 800330a:	e004      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003310:	fb02 f303 	mul.w	r3, r2, r3
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	623b      	str	r3, [r7, #32]
      break;
 800331a:	e002      	b.n	8003322 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_RCC_GetSysClockFreq+0xb8>)
 800331e:	623b      	str	r3, [r7, #32]
      break;
 8003320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003322:	6a3b      	ldr	r3, [r7, #32]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3728      	adds	r7, #40	; 0x28
 8003328:	46bd      	mov	sp, r7
 800332a:	bc90      	pop	{r4, r7}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	08004eb8 	.word	0x08004eb8
 8003334:	40021000 	.word	0x40021000
 8003338:	007a1200 	.word	0x007a1200
 800333c:	003d0900 	.word	0x003d0900

08003340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003344:	4b02      	ldr	r3, [pc, #8]	; (8003350 <HAL_RCC_GetHCLKFreq+0x10>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr
 8003350:	200000e0 	.word	0x200000e0

08003354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003358:	f7ff fff2 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 800335c:	4602      	mov	r2, r0
 800335e:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	f003 0307 	and.w	r3, r3, #7
 8003368:	4903      	ldr	r1, [pc, #12]	; (8003378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800336a:	5ccb      	ldrb	r3, [r1, r3]
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40021000 	.word	0x40021000
 8003378:	08004ed8 	.word	0x08004ed8

0800337c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003380:	f7ff ffde 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	0adb      	lsrs	r3, r3, #11
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4903      	ldr	r1, [pc, #12]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	08004ed8 	.word	0x08004ed8

080033a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <RCC_Delay+0x34>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <RCC_Delay+0x38>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	0a5b      	lsrs	r3, r3, #9
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	fb02 f303 	mul.w	r3, r2, r3
 80033be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033c0:	bf00      	nop
  }
  while (Delay --);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	1e5a      	subs	r2, r3, #1
 80033c6:	60fa      	str	r2, [r7, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f9      	bne.n	80033c0 <RCC_Delay+0x1c>
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	200000e0 	.word	0x200000e0
 80033dc:	10624dd3 	.word	0x10624dd3

080033e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e041      	b.n	8003476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fe fd60 	bl	8001ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3304      	adds	r3, #4
 800341c:	4619      	mov	r1, r3
 800341e:	4610      	mov	r0, r2
 8003420:	f000 fa6a 	bl	80038f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d001      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e035      	b.n	8003504 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a16      	ldr	r2, [pc, #88]	; (8003510 <HAL_TIM_Base_Start_IT+0x90>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d009      	beq.n	80034ce <HAL_TIM_Base_Start_IT+0x4e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c2:	d004      	beq.n	80034ce <HAL_TIM_Base_Start_IT+0x4e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a12      	ldr	r2, [pc, #72]	; (8003514 <HAL_TIM_Base_Start_IT+0x94>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d111      	bne.n	80034f2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b06      	cmp	r3, #6
 80034de:	d010      	beq.n	8003502 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f0:	e007      	b.n	8003502 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40000400 	.word	0x40000400

08003518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d122      	bne.n	8003574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b02      	cmp	r3, #2
 800353a:	d11b      	bne.n	8003574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0202 	mvn.w	r2, #2
 8003544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f9b1 	bl	80038c2 <HAL_TIM_IC_CaptureCallback>
 8003560:	e005      	b.n	800356e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f9a4 	bl	80038b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f9b3 	bl	80038d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d122      	bne.n	80035c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0304 	and.w	r3, r3, #4
 800358c:	2b04      	cmp	r3, #4
 800358e:	d11b      	bne.n	80035c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0204 	mvn.w	r2, #4
 8003598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f987 	bl	80038c2 <HAL_TIM_IC_CaptureCallback>
 80035b4:	e005      	b.n	80035c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f97a 	bl	80038b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f989 	bl	80038d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d122      	bne.n	800361c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d11b      	bne.n	800361c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f06f 0208 	mvn.w	r2, #8
 80035ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2204      	movs	r2, #4
 80035f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f95d 	bl	80038c2 <HAL_TIM_IC_CaptureCallback>
 8003608:	e005      	b.n	8003616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f950 	bl	80038b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f95f 	bl	80038d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b10      	cmp	r3, #16
 8003628:	d122      	bne.n	8003670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b10      	cmp	r3, #16
 8003636:	d11b      	bne.n	8003670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0210 	mvn.w	r2, #16
 8003640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2208      	movs	r2, #8
 8003646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f933 	bl	80038c2 <HAL_TIM_IC_CaptureCallback>
 800365c:	e005      	b.n	800366a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f926 	bl	80038b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f935 	bl	80038d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d10e      	bne.n	800369c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d107      	bne.n	800369c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0201 	mvn.w	r2, #1
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe f928 	bl	80018ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	2b80      	cmp	r3, #128	; 0x80
 80036a8:	d10e      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b4:	2b80      	cmp	r3, #128	; 0x80
 80036b6:	d107      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fa67 	bl	8003b96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d10e      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d107      	bne.n	80036f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8f9 	bl	80038e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d10e      	bne.n	8003720 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	f003 0320 	and.w	r3, r3, #32
 800370c:	2b20      	cmp	r3, #32
 800370e:	d107      	bne.n	8003720 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0220 	mvn.w	r2, #32
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fa32 	bl	8003b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_TIM_ConfigClockSource+0x18>
 800373c:	2302      	movs	r3, #2
 800373e:	e0b3      	b.n	80038a8 <HAL_TIM_ConfigClockSource+0x180>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800375e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003766:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003778:	d03e      	beq.n	80037f8 <HAL_TIM_ConfigClockSource+0xd0>
 800377a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800377e:	f200 8087 	bhi.w	8003890 <HAL_TIM_ConfigClockSource+0x168>
 8003782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003786:	f000 8085 	beq.w	8003894 <HAL_TIM_ConfigClockSource+0x16c>
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378e:	d87f      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x168>
 8003790:	2b70      	cmp	r3, #112	; 0x70
 8003792:	d01a      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0xa2>
 8003794:	2b70      	cmp	r3, #112	; 0x70
 8003796:	d87b      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x168>
 8003798:	2b60      	cmp	r3, #96	; 0x60
 800379a:	d050      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x116>
 800379c:	2b60      	cmp	r3, #96	; 0x60
 800379e:	d877      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x168>
 80037a0:	2b50      	cmp	r3, #80	; 0x50
 80037a2:	d03c      	beq.n	800381e <HAL_TIM_ConfigClockSource+0xf6>
 80037a4:	2b50      	cmp	r3, #80	; 0x50
 80037a6:	d873      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x168>
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d058      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x136>
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d86f      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x168>
 80037b0:	2b30      	cmp	r3, #48	; 0x30
 80037b2:	d064      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x156>
 80037b4:	2b30      	cmp	r3, #48	; 0x30
 80037b6:	d86b      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x168>
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d060      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x156>
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d867      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x168>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d05c      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x156>
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d05a      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037c8:	e062      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f000 f95c 	bl	8003a96 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	609a      	str	r2, [r3, #8]
      break;
 80037f6:	e04e      	b.n	8003896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f000 f945 	bl	8003a96 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800381a:	609a      	str	r2, [r3, #8]
      break;
 800381c:	e03b      	b.n	8003896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	461a      	mov	r2, r3
 800382c:	f000 f8bc 	bl	80039a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2150      	movs	r1, #80	; 0x50
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f913 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 800383c:	e02b      	b.n	8003896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	461a      	mov	r2, r3
 800384c:	f000 f8da 	bl	8003a04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2160      	movs	r1, #96	; 0x60
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f903 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 800385c:	e01b      	b.n	8003896 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	461a      	mov	r2, r3
 800386c:	f000 f89c 	bl	80039a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2140      	movs	r1, #64	; 0x40
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f8f3 	bl	8003a62 <TIM_ITRx_SetConfig>
      break;
 800387c:	e00b      	b.n	8003896 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f000 f8ea 	bl	8003a62 <TIM_ITRx_SetConfig>
        break;
 800388e:	e002      	b.n	8003896 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003890:	bf00      	nop
 8003892:	e000      	b.n	8003896 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003894:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	bc80      	pop	{r7}
 80038c0:	4770      	bx	lr

080038c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ca:	bf00      	nop
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <TIM_Base_SetConfig+0xa8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d007      	beq.n	8003920 <TIM_Base_SetConfig+0x28>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003916:	d003      	beq.n	8003920 <TIM_Base_SetConfig+0x28>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a22      	ldr	r2, [pc, #136]	; (80039a4 <TIM_Base_SetConfig+0xac>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d108      	bne.n	8003932 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a1a      	ldr	r2, [pc, #104]	; (80039a0 <TIM_Base_SetConfig+0xa8>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <TIM_Base_SetConfig+0x52>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0x52>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <TIM_Base_SetConfig+0xac>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <TIM_Base_SetConfig+0xa8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	615a      	str	r2, [r3, #20]
}
 8003996:	bf00      	nop
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	40012c00 	.word	0x40012c00
 80039a4:	40000400 	.word	0x40000400

080039a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f023 030a 	bic.w	r3, r3, #10
 80039e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bc80      	pop	{r7}
 8003a02:	4770      	bx	lr

08003a04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f023 0210 	bic.w	r2, r3, #16
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	031b      	lsls	r3, r3, #12
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	621a      	str	r2, [r3, #32]
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr

08003a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f043 0307 	orr.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b087      	sub	sp, #28
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	021a      	lsls	r2, r3, #8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	609a      	str	r2, [r3, #8]
}
 8003aca:	bf00      	nop
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e041      	b.n	8003b70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b38:	d004      	beq.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a10      	ldr	r2, [pc, #64]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d10c      	bne.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40000400 	.word	0x40000400

08003b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e03f      	b.n	8003c3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fe f9a0 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fc25 	bl	800443c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b08a      	sub	sp, #40	; 0x28
 8003c46:	af02      	add	r7, sp, #8
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d17c      	bne.n	8003d5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <HAL_UART_Transmit+0x2c>
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e075      	b.n	8003d5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Transmit+0x3e>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e06e      	b.n	8003d5e <HAL_UART_Transmit+0x11c>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2221      	movs	r2, #33	; 0x21
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c96:	f7fe fbff 	bl	8002498 <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	88fa      	ldrh	r2, [r7, #6]
 8003ca6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	d108      	bne.n	8003cc4 <HAL_UART_Transmit+0x82>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	e003      	b.n	8003ccc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cd4:	e02a      	b.n	8003d2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2180      	movs	r1, #128	; 0x80
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fa11 	bl	8004108 <UART_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e036      	b.n	8003d5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	3302      	adds	r3, #2
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	e007      	b.n	8003d1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1cf      	bne.n	8003cd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f9e1 	bl	8004108 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e006      	b.n	8003d5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	; 0x28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	f003 030f 	and.w	r3, r3, #15
 8003d96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10d      	bne.n	8003dba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d008      	beq.n	8003dba <HAL_UART_IRQHandler+0x52>
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fa99 	bl	80042ea <UART_Receive_IT>
      return;
 8003db8:	e17b      	b.n	80040b2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80b1 	beq.w	8003f24 <HAL_UART_IRQHandler+0x1bc>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d105      	bne.n	8003dd8 <HAL_UART_IRQHandler+0x70>
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80a6 	beq.w	8003f24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_UART_IRQHandler+0x90>
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	f043 0201 	orr.w	r2, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_UART_IRQHandler+0xb0>
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	f043 0202 	orr.w	r2, r3, #2
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_UART_IRQHandler+0xd0>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f043 0204 	orr.w	r2, r3, #4
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00f      	beq.n	8003e62 <HAL_UART_IRQHandler+0xfa>
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f003 0320 	and.w	r3, r3, #32
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <HAL_UART_IRQHandler+0xee>
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f043 0208 	orr.w	r2, r3, #8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 811e 	beq.w	80040a8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <HAL_UART_IRQHandler+0x11e>
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fa32 	bl	80042ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf14      	ite	ne
 8003e94:	2301      	movne	r3, #1
 8003e96:	2300      	moveq	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <HAL_UART_IRQHandler+0x146>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d031      	beq.n	8003f12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f974 	bl	800419c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d023      	beq.n	8003f0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d013      	beq.n	8003f02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	4a76      	ldr	r2, [pc, #472]	; (80040b8 <HAL_UART_IRQHandler+0x350>)
 8003ee0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fc28 	bl	800273c <HAL_DMA_Abort_IT>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d016      	beq.n	8003f20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003efc:	4610      	mov	r0, r2
 8003efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	e00e      	b.n	8003f20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8ec 	bl	80040e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	e00a      	b.n	8003f20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8e8 	bl	80040e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	e006      	b.n	8003f20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f8e4 	bl	80040e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f1e:	e0c3      	b.n	80040a8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	bf00      	nop
    return;
 8003f22:	e0c1      	b.n	80040a8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	f040 80a1 	bne.w	8004070 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 809b 	beq.w	8004070 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8095 	beq.w	8004070 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d04e      	beq.n	8004008 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f74:	8a3b      	ldrh	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8098 	beq.w	80040ac <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f80:	8a3a      	ldrh	r2, [r7, #16]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	f080 8092 	bcs.w	80040ac <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8a3a      	ldrh	r2, [r7, #16]
 8003f8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d02b      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fa6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0210 	bic.w	r2, r2, #16
 8003fe4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe fb6b 	bl	80026c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	4619      	mov	r1, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f876 	bl	80040f2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004006:	e051      	b.n	80040ac <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004010:	b29b      	uxth	r3, r3
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d047      	beq.n	80040b0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004020:	8a7b      	ldrh	r3, [r7, #18]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d044      	beq.n	80040b0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004034:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695a      	ldr	r2, [r3, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0201 	bic.w	r2, r2, #1
 8004044:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0210 	bic.w	r2, r2, #16
 8004062:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004064:	8a7b      	ldrh	r3, [r7, #18]
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f842 	bl	80040f2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800406e:	e01f      	b.n	80040b0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <HAL_UART_IRQHandler+0x324>
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f8c9 	bl	800421c <UART_Transmit_IT>
    return;
 800408a:	e012      	b.n	80040b2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <HAL_UART_IRQHandler+0x34a>
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f90a 	bl	80042ba <UART_EndTransmit_IT>
    return;
 80040a6:	e004      	b.n	80040b2 <HAL_UART_IRQHandler+0x34a>
    return;
 80040a8:	bf00      	nop
 80040aa:	e002      	b.n	80040b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80040ac:	bf00      	nop
 80040ae:	e000      	b.n	80040b2 <HAL_UART_IRQHandler+0x34a>
      return;
 80040b0:	bf00      	nop
  }
}
 80040b2:	3728      	adds	r7, #40	; 0x28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	080041f5 	.word	0x080041f5

080040bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr

080040ce <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bc80      	pop	{r7}
 80040f0:	4770      	bx	lr

080040f2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004118:	e02c      	b.n	8004174 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d028      	beq.n	8004174 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <UART_WaitOnFlagUntilTimeout+0x30>
 8004128:	f7fe f9b6 	bl	8002498 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	429a      	cmp	r2, r3
 8004136:	d21d      	bcs.n	8004174 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004146:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e00f      	b.n	8004194 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	429a      	cmp	r2, r3
 8004190:	d0c3      	beq.n	800411a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041b2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d107      	bne.n	80041dc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0210 	bic.w	r2, r2, #16
 80041da:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2220      	movs	r2, #32
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr

080041f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff ff66 	bl	80040e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b21      	cmp	r3, #33	; 0x21
 800422e:	d13e      	bne.n	80042ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004238:	d114      	bne.n	8004264 <UART_Transmit_IT+0x48>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d110      	bne.n	8004264 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004256:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	1c9a      	adds	r2, r3, #2
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	621a      	str	r2, [r3, #32]
 8004262:	e008      	b.n	8004276 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	1c59      	adds	r1, r3, #1
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6211      	str	r1, [r2, #32]
 800426e:	781a      	ldrb	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29b      	uxth	r3, r3
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	4619      	mov	r1, r3
 8004284:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004298:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e000      	b.n	80042b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
  }
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff feee 	bl	80040bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b22      	cmp	r3, #34	; 0x22
 80042fc:	f040 8099 	bne.w	8004432 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004308:	d117      	bne.n	800433a <UART_Receive_IT+0x50>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d113      	bne.n	800433a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	b29b      	uxth	r3, r3
 8004324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004328:	b29a      	uxth	r2, r3
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	1c9a      	adds	r2, r3, #2
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
 8004338:	e026      	b.n	8004388 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800434c:	d007      	beq.n	800435e <UART_Receive_IT+0x74>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <UART_Receive_IT+0x82>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d106      	bne.n	800436c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	e008      	b.n	800437e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004378:	b2da      	uxtb	r2, r3
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29b      	uxth	r3, r3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4619      	mov	r1, r3
 8004396:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004398:	2b00      	cmp	r3, #0
 800439a:	d148      	bne.n	800442e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68da      	ldr	r2, [r3, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0220 	bic.w	r2, r2, #32
 80043aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d123      	bne.n	8004424 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0210 	bic.w	r2, r2, #16
 80043f0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b10      	cmp	r3, #16
 80043fe:	d10a      	bne.n	8004416 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff fe68 	bl	80040f2 <HAL_UARTEx_RxEventCallback>
 8004422:	e002      	b.n	800442a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff fe52 	bl	80040ce <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e002      	b.n	8004434 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	e000      	b.n	8004434 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004432:	2302      	movs	r3, #2
  }
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004476:	f023 030c 	bic.w	r3, r3, #12
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6812      	ldr	r2, [r2, #0]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	430b      	orrs	r3, r1
 8004482:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2c      	ldr	r2, [pc, #176]	; (8004550 <UART_SetConfig+0x114>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d103      	bne.n	80044ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044a4:	f7fe ff6a 	bl	800337c <HAL_RCC_GetPCLK2Freq>
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	e002      	b.n	80044b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fe ff52 	bl	8003354 <HAL_RCC_GetPCLK1Freq>
 80044b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009a      	lsls	r2, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	4a22      	ldr	r2, [pc, #136]	; (8004554 <UART_SetConfig+0x118>)
 80044ca:	fba2 2303 	umull	r2, r3, r2, r3
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	0119      	lsls	r1, r3, #4
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	009a      	lsls	r2, r3, #2
 80044dc:	441a      	add	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e8:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <UART_SetConfig+0x118>)
 80044ea:	fba3 0302 	umull	r0, r3, r3, r2
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	2064      	movs	r0, #100	; 0x64
 80044f2:	fb00 f303 	mul.w	r3, r0, r3
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	3332      	adds	r3, #50	; 0x32
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <UART_SetConfig+0x118>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004508:	4419      	add	r1, r3
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009a      	lsls	r2, r3, #2
 8004514:	441a      	add	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <UART_SetConfig+0x118>)
 8004522:	fba3 0302 	umull	r0, r3, r3, r2
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2064      	movs	r0, #100	; 0x64
 800452a:	fb00 f303 	mul.w	r3, r0, r3
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	3332      	adds	r3, #50	; 0x32
 8004534:	4a07      	ldr	r2, [pc, #28]	; (8004554 <UART_SetConfig+0x118>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	f003 020f 	and.w	r2, r3, #15
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	440a      	add	r2, r1
 8004546:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004548:	bf00      	nop
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40013800 	.word	0x40013800
 8004554:	51eb851f 	.word	0x51eb851f

08004558 <__errno>:
 8004558:	4b01      	ldr	r3, [pc, #4]	; (8004560 <__errno+0x8>)
 800455a:	6818      	ldr	r0, [r3, #0]
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	200000ec 	.word	0x200000ec

08004564 <__libc_init_array>:
 8004564:	b570      	push	{r4, r5, r6, lr}
 8004566:	2600      	movs	r6, #0
 8004568:	4d0c      	ldr	r5, [pc, #48]	; (800459c <__libc_init_array+0x38>)
 800456a:	4c0d      	ldr	r4, [pc, #52]	; (80045a0 <__libc_init_array+0x3c>)
 800456c:	1b64      	subs	r4, r4, r5
 800456e:	10a4      	asrs	r4, r4, #2
 8004570:	42a6      	cmp	r6, r4
 8004572:	d109      	bne.n	8004588 <__libc_init_array+0x24>
 8004574:	f000 fc5c 	bl	8004e30 <_init>
 8004578:	2600      	movs	r6, #0
 800457a:	4d0a      	ldr	r5, [pc, #40]	; (80045a4 <__libc_init_array+0x40>)
 800457c:	4c0a      	ldr	r4, [pc, #40]	; (80045a8 <__libc_init_array+0x44>)
 800457e:	1b64      	subs	r4, r4, r5
 8004580:	10a4      	asrs	r4, r4, #2
 8004582:	42a6      	cmp	r6, r4
 8004584:	d105      	bne.n	8004592 <__libc_init_array+0x2e>
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	f855 3b04 	ldr.w	r3, [r5], #4
 800458c:	4798      	blx	r3
 800458e:	3601      	adds	r6, #1
 8004590:	e7ee      	b.n	8004570 <__libc_init_array+0xc>
 8004592:	f855 3b04 	ldr.w	r3, [r5], #4
 8004596:	4798      	blx	r3
 8004598:	3601      	adds	r6, #1
 800459a:	e7f2      	b.n	8004582 <__libc_init_array+0x1e>
 800459c:	08004f14 	.word	0x08004f14
 80045a0:	08004f14 	.word	0x08004f14
 80045a4:	08004f14 	.word	0x08004f14
 80045a8:	08004f18 	.word	0x08004f18

080045ac <memset>:
 80045ac:	4603      	mov	r3, r0
 80045ae:	4402      	add	r2, r0
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d100      	bne.n	80045b6 <memset+0xa>
 80045b4:	4770      	bx	lr
 80045b6:	f803 1b01 	strb.w	r1, [r3], #1
 80045ba:	e7f9      	b.n	80045b0 <memset+0x4>

080045bc <siprintf>:
 80045bc:	b40e      	push	{r1, r2, r3}
 80045be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045c2:	b500      	push	{lr}
 80045c4:	b09c      	sub	sp, #112	; 0x70
 80045c6:	ab1d      	add	r3, sp, #116	; 0x74
 80045c8:	9002      	str	r0, [sp, #8]
 80045ca:	9006      	str	r0, [sp, #24]
 80045cc:	9107      	str	r1, [sp, #28]
 80045ce:	9104      	str	r1, [sp, #16]
 80045d0:	4808      	ldr	r0, [pc, #32]	; (80045f4 <siprintf+0x38>)
 80045d2:	4909      	ldr	r1, [pc, #36]	; (80045f8 <siprintf+0x3c>)
 80045d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80045d8:	9105      	str	r1, [sp, #20]
 80045da:	6800      	ldr	r0, [r0, #0]
 80045dc:	a902      	add	r1, sp, #8
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	f000 f868 	bl	80046b4 <_svfiprintf_r>
 80045e4:	2200      	movs	r2, #0
 80045e6:	9b02      	ldr	r3, [sp, #8]
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	b01c      	add	sp, #112	; 0x70
 80045ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80045f0:	b003      	add	sp, #12
 80045f2:	4770      	bx	lr
 80045f4:	200000ec 	.word	0x200000ec
 80045f8:	ffff0208 	.word	0xffff0208

080045fc <__ssputs_r>:
 80045fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004600:	688e      	ldr	r6, [r1, #8]
 8004602:	4682      	mov	sl, r0
 8004604:	429e      	cmp	r6, r3
 8004606:	460c      	mov	r4, r1
 8004608:	4690      	mov	r8, r2
 800460a:	461f      	mov	r7, r3
 800460c:	d838      	bhi.n	8004680 <__ssputs_r+0x84>
 800460e:	898a      	ldrh	r2, [r1, #12]
 8004610:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004614:	d032      	beq.n	800467c <__ssputs_r+0x80>
 8004616:	6825      	ldr	r5, [r4, #0]
 8004618:	6909      	ldr	r1, [r1, #16]
 800461a:	3301      	adds	r3, #1
 800461c:	eba5 0901 	sub.w	r9, r5, r1
 8004620:	6965      	ldr	r5, [r4, #20]
 8004622:	444b      	add	r3, r9
 8004624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004628:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800462c:	106d      	asrs	r5, r5, #1
 800462e:	429d      	cmp	r5, r3
 8004630:	bf38      	it	cc
 8004632:	461d      	movcc	r5, r3
 8004634:	0553      	lsls	r3, r2, #21
 8004636:	d531      	bpl.n	800469c <__ssputs_r+0xa0>
 8004638:	4629      	mov	r1, r5
 800463a:	f000 fb53 	bl	8004ce4 <_malloc_r>
 800463e:	4606      	mov	r6, r0
 8004640:	b950      	cbnz	r0, 8004658 <__ssputs_r+0x5c>
 8004642:	230c      	movs	r3, #12
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	f8ca 3000 	str.w	r3, [sl]
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004652:	81a3      	strh	r3, [r4, #12]
 8004654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004658:	464a      	mov	r2, r9
 800465a:	6921      	ldr	r1, [r4, #16]
 800465c:	f000 face 	bl	8004bfc <memcpy>
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466a:	81a3      	strh	r3, [r4, #12]
 800466c:	6126      	str	r6, [r4, #16]
 800466e:	444e      	add	r6, r9
 8004670:	6026      	str	r6, [r4, #0]
 8004672:	463e      	mov	r6, r7
 8004674:	6165      	str	r5, [r4, #20]
 8004676:	eba5 0509 	sub.w	r5, r5, r9
 800467a:	60a5      	str	r5, [r4, #8]
 800467c:	42be      	cmp	r6, r7
 800467e:	d900      	bls.n	8004682 <__ssputs_r+0x86>
 8004680:	463e      	mov	r6, r7
 8004682:	4632      	mov	r2, r6
 8004684:	4641      	mov	r1, r8
 8004686:	6820      	ldr	r0, [r4, #0]
 8004688:	f000 fac6 	bl	8004c18 <memmove>
 800468c:	68a3      	ldr	r3, [r4, #8]
 800468e:	6822      	ldr	r2, [r4, #0]
 8004690:	1b9b      	subs	r3, r3, r6
 8004692:	4432      	add	r2, r6
 8004694:	2000      	movs	r0, #0
 8004696:	60a3      	str	r3, [r4, #8]
 8004698:	6022      	str	r2, [r4, #0]
 800469a:	e7db      	b.n	8004654 <__ssputs_r+0x58>
 800469c:	462a      	mov	r2, r5
 800469e:	f000 fb7b 	bl	8004d98 <_realloc_r>
 80046a2:	4606      	mov	r6, r0
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d1e1      	bne.n	800466c <__ssputs_r+0x70>
 80046a8:	4650      	mov	r0, sl
 80046aa:	6921      	ldr	r1, [r4, #16]
 80046ac:	f000 face 	bl	8004c4c <_free_r>
 80046b0:	e7c7      	b.n	8004642 <__ssputs_r+0x46>
	...

080046b4 <_svfiprintf_r>:
 80046b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b8:	4698      	mov	r8, r3
 80046ba:	898b      	ldrh	r3, [r1, #12]
 80046bc:	4607      	mov	r7, r0
 80046be:	061b      	lsls	r3, r3, #24
 80046c0:	460d      	mov	r5, r1
 80046c2:	4614      	mov	r4, r2
 80046c4:	b09d      	sub	sp, #116	; 0x74
 80046c6:	d50e      	bpl.n	80046e6 <_svfiprintf_r+0x32>
 80046c8:	690b      	ldr	r3, [r1, #16]
 80046ca:	b963      	cbnz	r3, 80046e6 <_svfiprintf_r+0x32>
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	f000 fb09 	bl	8004ce4 <_malloc_r>
 80046d2:	6028      	str	r0, [r5, #0]
 80046d4:	6128      	str	r0, [r5, #16]
 80046d6:	b920      	cbnz	r0, 80046e2 <_svfiprintf_r+0x2e>
 80046d8:	230c      	movs	r3, #12
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	f04f 30ff 	mov.w	r0, #4294967295
 80046e0:	e0d1      	b.n	8004886 <_svfiprintf_r+0x1d2>
 80046e2:	2340      	movs	r3, #64	; 0x40
 80046e4:	616b      	str	r3, [r5, #20]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9309      	str	r3, [sp, #36]	; 0x24
 80046ea:	2320      	movs	r3, #32
 80046ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046f0:	2330      	movs	r3, #48	; 0x30
 80046f2:	f04f 0901 	mov.w	r9, #1
 80046f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80046fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048a0 <_svfiprintf_r+0x1ec>
 80046fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004702:	4623      	mov	r3, r4
 8004704:	469a      	mov	sl, r3
 8004706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800470a:	b10a      	cbz	r2, 8004710 <_svfiprintf_r+0x5c>
 800470c:	2a25      	cmp	r2, #37	; 0x25
 800470e:	d1f9      	bne.n	8004704 <_svfiprintf_r+0x50>
 8004710:	ebba 0b04 	subs.w	fp, sl, r4
 8004714:	d00b      	beq.n	800472e <_svfiprintf_r+0x7a>
 8004716:	465b      	mov	r3, fp
 8004718:	4622      	mov	r2, r4
 800471a:	4629      	mov	r1, r5
 800471c:	4638      	mov	r0, r7
 800471e:	f7ff ff6d 	bl	80045fc <__ssputs_r>
 8004722:	3001      	adds	r0, #1
 8004724:	f000 80aa 	beq.w	800487c <_svfiprintf_r+0x1c8>
 8004728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800472a:	445a      	add	r2, fp
 800472c:	9209      	str	r2, [sp, #36]	; 0x24
 800472e:	f89a 3000 	ldrb.w	r3, [sl]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80a2 	beq.w	800487c <_svfiprintf_r+0x1c8>
 8004738:	2300      	movs	r3, #0
 800473a:	f04f 32ff 	mov.w	r2, #4294967295
 800473e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004742:	f10a 0a01 	add.w	sl, sl, #1
 8004746:	9304      	str	r3, [sp, #16]
 8004748:	9307      	str	r3, [sp, #28]
 800474a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800474e:	931a      	str	r3, [sp, #104]	; 0x68
 8004750:	4654      	mov	r4, sl
 8004752:	2205      	movs	r2, #5
 8004754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004758:	4851      	ldr	r0, [pc, #324]	; (80048a0 <_svfiprintf_r+0x1ec>)
 800475a:	f000 fa41 	bl	8004be0 <memchr>
 800475e:	9a04      	ldr	r2, [sp, #16]
 8004760:	b9d8      	cbnz	r0, 800479a <_svfiprintf_r+0xe6>
 8004762:	06d0      	lsls	r0, r2, #27
 8004764:	bf44      	itt	mi
 8004766:	2320      	movmi	r3, #32
 8004768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800476c:	0711      	lsls	r1, r2, #28
 800476e:	bf44      	itt	mi
 8004770:	232b      	movmi	r3, #43	; 0x2b
 8004772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004776:	f89a 3000 	ldrb.w	r3, [sl]
 800477a:	2b2a      	cmp	r3, #42	; 0x2a
 800477c:	d015      	beq.n	80047aa <_svfiprintf_r+0xf6>
 800477e:	4654      	mov	r4, sl
 8004780:	2000      	movs	r0, #0
 8004782:	f04f 0c0a 	mov.w	ip, #10
 8004786:	9a07      	ldr	r2, [sp, #28]
 8004788:	4621      	mov	r1, r4
 800478a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800478e:	3b30      	subs	r3, #48	; 0x30
 8004790:	2b09      	cmp	r3, #9
 8004792:	d94e      	bls.n	8004832 <_svfiprintf_r+0x17e>
 8004794:	b1b0      	cbz	r0, 80047c4 <_svfiprintf_r+0x110>
 8004796:	9207      	str	r2, [sp, #28]
 8004798:	e014      	b.n	80047c4 <_svfiprintf_r+0x110>
 800479a:	eba0 0308 	sub.w	r3, r0, r8
 800479e:	fa09 f303 	lsl.w	r3, r9, r3
 80047a2:	4313      	orrs	r3, r2
 80047a4:	46a2      	mov	sl, r4
 80047a6:	9304      	str	r3, [sp, #16]
 80047a8:	e7d2      	b.n	8004750 <_svfiprintf_r+0x9c>
 80047aa:	9b03      	ldr	r3, [sp, #12]
 80047ac:	1d19      	adds	r1, r3, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	9103      	str	r1, [sp, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfbb      	ittet	lt
 80047b6:	425b      	neglt	r3, r3
 80047b8:	f042 0202 	orrlt.w	r2, r2, #2
 80047bc:	9307      	strge	r3, [sp, #28]
 80047be:	9307      	strlt	r3, [sp, #28]
 80047c0:	bfb8      	it	lt
 80047c2:	9204      	strlt	r2, [sp, #16]
 80047c4:	7823      	ldrb	r3, [r4, #0]
 80047c6:	2b2e      	cmp	r3, #46	; 0x2e
 80047c8:	d10c      	bne.n	80047e4 <_svfiprintf_r+0x130>
 80047ca:	7863      	ldrb	r3, [r4, #1]
 80047cc:	2b2a      	cmp	r3, #42	; 0x2a
 80047ce:	d135      	bne.n	800483c <_svfiprintf_r+0x188>
 80047d0:	9b03      	ldr	r3, [sp, #12]
 80047d2:	3402      	adds	r4, #2
 80047d4:	1d1a      	adds	r2, r3, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	9203      	str	r2, [sp, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	bfb8      	it	lt
 80047de:	f04f 33ff 	movlt.w	r3, #4294967295
 80047e2:	9305      	str	r3, [sp, #20]
 80047e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048b0 <_svfiprintf_r+0x1fc>
 80047e8:	2203      	movs	r2, #3
 80047ea:	4650      	mov	r0, sl
 80047ec:	7821      	ldrb	r1, [r4, #0]
 80047ee:	f000 f9f7 	bl	8004be0 <memchr>
 80047f2:	b140      	cbz	r0, 8004806 <_svfiprintf_r+0x152>
 80047f4:	2340      	movs	r3, #64	; 0x40
 80047f6:	eba0 000a 	sub.w	r0, r0, sl
 80047fa:	fa03 f000 	lsl.w	r0, r3, r0
 80047fe:	9b04      	ldr	r3, [sp, #16]
 8004800:	3401      	adds	r4, #1
 8004802:	4303      	orrs	r3, r0
 8004804:	9304      	str	r3, [sp, #16]
 8004806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480a:	2206      	movs	r2, #6
 800480c:	4825      	ldr	r0, [pc, #148]	; (80048a4 <_svfiprintf_r+0x1f0>)
 800480e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004812:	f000 f9e5 	bl	8004be0 <memchr>
 8004816:	2800      	cmp	r0, #0
 8004818:	d038      	beq.n	800488c <_svfiprintf_r+0x1d8>
 800481a:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <_svfiprintf_r+0x1f4>)
 800481c:	bb1b      	cbnz	r3, 8004866 <_svfiprintf_r+0x1b2>
 800481e:	9b03      	ldr	r3, [sp, #12]
 8004820:	3307      	adds	r3, #7
 8004822:	f023 0307 	bic.w	r3, r3, #7
 8004826:	3308      	adds	r3, #8
 8004828:	9303      	str	r3, [sp, #12]
 800482a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800482c:	4433      	add	r3, r6
 800482e:	9309      	str	r3, [sp, #36]	; 0x24
 8004830:	e767      	b.n	8004702 <_svfiprintf_r+0x4e>
 8004832:	460c      	mov	r4, r1
 8004834:	2001      	movs	r0, #1
 8004836:	fb0c 3202 	mla	r2, ip, r2, r3
 800483a:	e7a5      	b.n	8004788 <_svfiprintf_r+0xd4>
 800483c:	2300      	movs	r3, #0
 800483e:	f04f 0c0a 	mov.w	ip, #10
 8004842:	4619      	mov	r1, r3
 8004844:	3401      	adds	r4, #1
 8004846:	9305      	str	r3, [sp, #20]
 8004848:	4620      	mov	r0, r4
 800484a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800484e:	3a30      	subs	r2, #48	; 0x30
 8004850:	2a09      	cmp	r2, #9
 8004852:	d903      	bls.n	800485c <_svfiprintf_r+0x1a8>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0c5      	beq.n	80047e4 <_svfiprintf_r+0x130>
 8004858:	9105      	str	r1, [sp, #20]
 800485a:	e7c3      	b.n	80047e4 <_svfiprintf_r+0x130>
 800485c:	4604      	mov	r4, r0
 800485e:	2301      	movs	r3, #1
 8004860:	fb0c 2101 	mla	r1, ip, r1, r2
 8004864:	e7f0      	b.n	8004848 <_svfiprintf_r+0x194>
 8004866:	ab03      	add	r3, sp, #12
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	462a      	mov	r2, r5
 800486c:	4638      	mov	r0, r7
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <_svfiprintf_r+0x1f8>)
 8004870:	a904      	add	r1, sp, #16
 8004872:	f3af 8000 	nop.w
 8004876:	1c42      	adds	r2, r0, #1
 8004878:	4606      	mov	r6, r0
 800487a:	d1d6      	bne.n	800482a <_svfiprintf_r+0x176>
 800487c:	89ab      	ldrh	r3, [r5, #12]
 800487e:	065b      	lsls	r3, r3, #25
 8004880:	f53f af2c 	bmi.w	80046dc <_svfiprintf_r+0x28>
 8004884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004886:	b01d      	add	sp, #116	; 0x74
 8004888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488c:	ab03      	add	r3, sp, #12
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	462a      	mov	r2, r5
 8004892:	4638      	mov	r0, r7
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <_svfiprintf_r+0x1f8>)
 8004896:	a904      	add	r1, sp, #16
 8004898:	f000 f87c 	bl	8004994 <_printf_i>
 800489c:	e7eb      	b.n	8004876 <_svfiprintf_r+0x1c2>
 800489e:	bf00      	nop
 80048a0:	08004ee0 	.word	0x08004ee0
 80048a4:	08004eea 	.word	0x08004eea
 80048a8:	00000000 	.word	0x00000000
 80048ac:	080045fd 	.word	0x080045fd
 80048b0:	08004ee6 	.word	0x08004ee6

080048b4 <_printf_common>:
 80048b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b8:	4616      	mov	r6, r2
 80048ba:	4699      	mov	r9, r3
 80048bc:	688a      	ldr	r2, [r1, #8]
 80048be:	690b      	ldr	r3, [r1, #16]
 80048c0:	4607      	mov	r7, r0
 80048c2:	4293      	cmp	r3, r2
 80048c4:	bfb8      	it	lt
 80048c6:	4613      	movlt	r3, r2
 80048c8:	6033      	str	r3, [r6, #0]
 80048ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048ce:	460c      	mov	r4, r1
 80048d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048d4:	b10a      	cbz	r2, 80048da <_printf_common+0x26>
 80048d6:	3301      	adds	r3, #1
 80048d8:	6033      	str	r3, [r6, #0]
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	0699      	lsls	r1, r3, #26
 80048de:	bf42      	ittt	mi
 80048e0:	6833      	ldrmi	r3, [r6, #0]
 80048e2:	3302      	addmi	r3, #2
 80048e4:	6033      	strmi	r3, [r6, #0]
 80048e6:	6825      	ldr	r5, [r4, #0]
 80048e8:	f015 0506 	ands.w	r5, r5, #6
 80048ec:	d106      	bne.n	80048fc <_printf_common+0x48>
 80048ee:	f104 0a19 	add.w	sl, r4, #25
 80048f2:	68e3      	ldr	r3, [r4, #12]
 80048f4:	6832      	ldr	r2, [r6, #0]
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	42ab      	cmp	r3, r5
 80048fa:	dc28      	bgt.n	800494e <_printf_common+0x9a>
 80048fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004900:	1e13      	subs	r3, r2, #0
 8004902:	6822      	ldr	r2, [r4, #0]
 8004904:	bf18      	it	ne
 8004906:	2301      	movne	r3, #1
 8004908:	0692      	lsls	r2, r2, #26
 800490a:	d42d      	bmi.n	8004968 <_printf_common+0xb4>
 800490c:	4649      	mov	r1, r9
 800490e:	4638      	mov	r0, r7
 8004910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004914:	47c0      	blx	r8
 8004916:	3001      	adds	r0, #1
 8004918:	d020      	beq.n	800495c <_printf_common+0xa8>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	68e5      	ldr	r5, [r4, #12]
 800491e:	f003 0306 	and.w	r3, r3, #6
 8004922:	2b04      	cmp	r3, #4
 8004924:	bf18      	it	ne
 8004926:	2500      	movne	r5, #0
 8004928:	6832      	ldr	r2, [r6, #0]
 800492a:	f04f 0600 	mov.w	r6, #0
 800492e:	68a3      	ldr	r3, [r4, #8]
 8004930:	bf08      	it	eq
 8004932:	1aad      	subeq	r5, r5, r2
 8004934:	6922      	ldr	r2, [r4, #16]
 8004936:	bf08      	it	eq
 8004938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800493c:	4293      	cmp	r3, r2
 800493e:	bfc4      	itt	gt
 8004940:	1a9b      	subgt	r3, r3, r2
 8004942:	18ed      	addgt	r5, r5, r3
 8004944:	341a      	adds	r4, #26
 8004946:	42b5      	cmp	r5, r6
 8004948:	d11a      	bne.n	8004980 <_printf_common+0xcc>
 800494a:	2000      	movs	r0, #0
 800494c:	e008      	b.n	8004960 <_printf_common+0xac>
 800494e:	2301      	movs	r3, #1
 8004950:	4652      	mov	r2, sl
 8004952:	4649      	mov	r1, r9
 8004954:	4638      	mov	r0, r7
 8004956:	47c0      	blx	r8
 8004958:	3001      	adds	r0, #1
 800495a:	d103      	bne.n	8004964 <_printf_common+0xb0>
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004964:	3501      	adds	r5, #1
 8004966:	e7c4      	b.n	80048f2 <_printf_common+0x3e>
 8004968:	2030      	movs	r0, #48	; 0x30
 800496a:	18e1      	adds	r1, r4, r3
 800496c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004976:	4422      	add	r2, r4
 8004978:	3302      	adds	r3, #2
 800497a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800497e:	e7c5      	b.n	800490c <_printf_common+0x58>
 8004980:	2301      	movs	r3, #1
 8004982:	4622      	mov	r2, r4
 8004984:	4649      	mov	r1, r9
 8004986:	4638      	mov	r0, r7
 8004988:	47c0      	blx	r8
 800498a:	3001      	adds	r0, #1
 800498c:	d0e6      	beq.n	800495c <_printf_common+0xa8>
 800498e:	3601      	adds	r6, #1
 8004990:	e7d9      	b.n	8004946 <_printf_common+0x92>
	...

08004994 <_printf_i>:
 8004994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	460c      	mov	r4, r1
 800499a:	7e27      	ldrb	r7, [r4, #24]
 800499c:	4691      	mov	r9, r2
 800499e:	2f78      	cmp	r7, #120	; 0x78
 80049a0:	4680      	mov	r8, r0
 80049a2:	469a      	mov	sl, r3
 80049a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049aa:	d807      	bhi.n	80049bc <_printf_i+0x28>
 80049ac:	2f62      	cmp	r7, #98	; 0x62
 80049ae:	d80a      	bhi.n	80049c6 <_printf_i+0x32>
 80049b0:	2f00      	cmp	r7, #0
 80049b2:	f000 80d9 	beq.w	8004b68 <_printf_i+0x1d4>
 80049b6:	2f58      	cmp	r7, #88	; 0x58
 80049b8:	f000 80a4 	beq.w	8004b04 <_printf_i+0x170>
 80049bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049c4:	e03a      	b.n	8004a3c <_printf_i+0xa8>
 80049c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049ca:	2b15      	cmp	r3, #21
 80049cc:	d8f6      	bhi.n	80049bc <_printf_i+0x28>
 80049ce:	a001      	add	r0, pc, #4	; (adr r0, 80049d4 <_printf_i+0x40>)
 80049d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a41 	.word	0x08004a41
 80049dc:	080049bd 	.word	0x080049bd
 80049e0:	080049bd 	.word	0x080049bd
 80049e4:	080049bd 	.word	0x080049bd
 80049e8:	080049bd 	.word	0x080049bd
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	080049bd 	.word	0x080049bd
 80049f4:	080049bd 	.word	0x080049bd
 80049f8:	080049bd 	.word	0x080049bd
 80049fc:	080049bd 	.word	0x080049bd
 8004a00:	08004b4f 	.word	0x08004b4f
 8004a04:	08004a71 	.word	0x08004a71
 8004a08:	08004b31 	.word	0x08004b31
 8004a0c:	080049bd 	.word	0x080049bd
 8004a10:	080049bd 	.word	0x080049bd
 8004a14:	08004b71 	.word	0x08004b71
 8004a18:	080049bd 	.word	0x080049bd
 8004a1c:	08004a71 	.word	0x08004a71
 8004a20:	080049bd 	.word	0x080049bd
 8004a24:	080049bd 	.word	0x080049bd
 8004a28:	08004b39 	.word	0x08004b39
 8004a2c:	680b      	ldr	r3, [r1, #0]
 8004a2e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a32:	1d1a      	adds	r2, r3, #4
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	600a      	str	r2, [r1, #0]
 8004a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0a4      	b.n	8004b8a <_printf_i+0x1f6>
 8004a40:	6825      	ldr	r5, [r4, #0]
 8004a42:	6808      	ldr	r0, [r1, #0]
 8004a44:	062e      	lsls	r6, r5, #24
 8004a46:	f100 0304 	add.w	r3, r0, #4
 8004a4a:	d50a      	bpl.n	8004a62 <_printf_i+0xce>
 8004a4c:	6805      	ldr	r5, [r0, #0]
 8004a4e:	600b      	str	r3, [r1, #0]
 8004a50:	2d00      	cmp	r5, #0
 8004a52:	da03      	bge.n	8004a5c <_printf_i+0xc8>
 8004a54:	232d      	movs	r3, #45	; 0x2d
 8004a56:	426d      	negs	r5, r5
 8004a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a5c:	230a      	movs	r3, #10
 8004a5e:	485e      	ldr	r0, [pc, #376]	; (8004bd8 <_printf_i+0x244>)
 8004a60:	e019      	b.n	8004a96 <_printf_i+0x102>
 8004a62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a66:	6805      	ldr	r5, [r0, #0]
 8004a68:	600b      	str	r3, [r1, #0]
 8004a6a:	bf18      	it	ne
 8004a6c:	b22d      	sxthne	r5, r5
 8004a6e:	e7ef      	b.n	8004a50 <_printf_i+0xbc>
 8004a70:	680b      	ldr	r3, [r1, #0]
 8004a72:	6825      	ldr	r5, [r4, #0]
 8004a74:	1d18      	adds	r0, r3, #4
 8004a76:	6008      	str	r0, [r1, #0]
 8004a78:	0628      	lsls	r0, r5, #24
 8004a7a:	d501      	bpl.n	8004a80 <_printf_i+0xec>
 8004a7c:	681d      	ldr	r5, [r3, #0]
 8004a7e:	e002      	b.n	8004a86 <_printf_i+0xf2>
 8004a80:	0669      	lsls	r1, r5, #25
 8004a82:	d5fb      	bpl.n	8004a7c <_printf_i+0xe8>
 8004a84:	881d      	ldrh	r5, [r3, #0]
 8004a86:	2f6f      	cmp	r7, #111	; 0x6f
 8004a88:	bf0c      	ite	eq
 8004a8a:	2308      	moveq	r3, #8
 8004a8c:	230a      	movne	r3, #10
 8004a8e:	4852      	ldr	r0, [pc, #328]	; (8004bd8 <_printf_i+0x244>)
 8004a90:	2100      	movs	r1, #0
 8004a92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a96:	6866      	ldr	r6, [r4, #4]
 8004a98:	2e00      	cmp	r6, #0
 8004a9a:	bfa8      	it	ge
 8004a9c:	6821      	ldrge	r1, [r4, #0]
 8004a9e:	60a6      	str	r6, [r4, #8]
 8004aa0:	bfa4      	itt	ge
 8004aa2:	f021 0104 	bicge.w	r1, r1, #4
 8004aa6:	6021      	strge	r1, [r4, #0]
 8004aa8:	b90d      	cbnz	r5, 8004aae <_printf_i+0x11a>
 8004aaa:	2e00      	cmp	r6, #0
 8004aac:	d04d      	beq.n	8004b4a <_printf_i+0x1b6>
 8004aae:	4616      	mov	r6, r2
 8004ab0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ab4:	fb03 5711 	mls	r7, r3, r1, r5
 8004ab8:	5dc7      	ldrb	r7, [r0, r7]
 8004aba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004abe:	462f      	mov	r7, r5
 8004ac0:	42bb      	cmp	r3, r7
 8004ac2:	460d      	mov	r5, r1
 8004ac4:	d9f4      	bls.n	8004ab0 <_printf_i+0x11c>
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d10b      	bne.n	8004ae2 <_printf_i+0x14e>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	07df      	lsls	r7, r3, #31
 8004ace:	d508      	bpl.n	8004ae2 <_printf_i+0x14e>
 8004ad0:	6923      	ldr	r3, [r4, #16]
 8004ad2:	6861      	ldr	r1, [r4, #4]
 8004ad4:	4299      	cmp	r1, r3
 8004ad6:	bfde      	ittt	le
 8004ad8:	2330      	movle	r3, #48	; 0x30
 8004ada:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ade:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ae2:	1b92      	subs	r2, r2, r6
 8004ae4:	6122      	str	r2, [r4, #16]
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4640      	mov	r0, r8
 8004aec:	f8cd a000 	str.w	sl, [sp]
 8004af0:	aa03      	add	r2, sp, #12
 8004af2:	f7ff fedf 	bl	80048b4 <_printf_common>
 8004af6:	3001      	adds	r0, #1
 8004af8:	d14c      	bne.n	8004b94 <_printf_i+0x200>
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295
 8004afe:	b004      	add	sp, #16
 8004b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b04:	4834      	ldr	r0, [pc, #208]	; (8004bd8 <_printf_i+0x244>)
 8004b06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b0a:	680e      	ldr	r6, [r1, #0]
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b12:	061f      	lsls	r7, r3, #24
 8004b14:	600e      	str	r6, [r1, #0]
 8004b16:	d514      	bpl.n	8004b42 <_printf_i+0x1ae>
 8004b18:	07d9      	lsls	r1, r3, #31
 8004b1a:	bf44      	itt	mi
 8004b1c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b20:	6023      	strmi	r3, [r4, #0]
 8004b22:	b91d      	cbnz	r5, 8004b2c <_printf_i+0x198>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	f023 0320 	bic.w	r3, r3, #32
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	e7af      	b.n	8004a90 <_printf_i+0xfc>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	f043 0320 	orr.w	r3, r3, #32
 8004b36:	6023      	str	r3, [r4, #0]
 8004b38:	2378      	movs	r3, #120	; 0x78
 8004b3a:	4828      	ldr	r0, [pc, #160]	; (8004bdc <_printf_i+0x248>)
 8004b3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b40:	e7e3      	b.n	8004b0a <_printf_i+0x176>
 8004b42:	065e      	lsls	r6, r3, #25
 8004b44:	bf48      	it	mi
 8004b46:	b2ad      	uxthmi	r5, r5
 8004b48:	e7e6      	b.n	8004b18 <_printf_i+0x184>
 8004b4a:	4616      	mov	r6, r2
 8004b4c:	e7bb      	b.n	8004ac6 <_printf_i+0x132>
 8004b4e:	680b      	ldr	r3, [r1, #0]
 8004b50:	6826      	ldr	r6, [r4, #0]
 8004b52:	1d1d      	adds	r5, r3, #4
 8004b54:	6960      	ldr	r0, [r4, #20]
 8004b56:	600d      	str	r5, [r1, #0]
 8004b58:	0635      	lsls	r5, r6, #24
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	d501      	bpl.n	8004b62 <_printf_i+0x1ce>
 8004b5e:	6018      	str	r0, [r3, #0]
 8004b60:	e002      	b.n	8004b68 <_printf_i+0x1d4>
 8004b62:	0671      	lsls	r1, r6, #25
 8004b64:	d5fb      	bpl.n	8004b5e <_printf_i+0x1ca>
 8004b66:	8018      	strh	r0, [r3, #0]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	4616      	mov	r6, r2
 8004b6c:	6123      	str	r3, [r4, #16]
 8004b6e:	e7ba      	b.n	8004ae6 <_printf_i+0x152>
 8004b70:	680b      	ldr	r3, [r1, #0]
 8004b72:	1d1a      	adds	r2, r3, #4
 8004b74:	600a      	str	r2, [r1, #0]
 8004b76:	681e      	ldr	r6, [r3, #0]
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	6862      	ldr	r2, [r4, #4]
 8004b7e:	f000 f82f 	bl	8004be0 <memchr>
 8004b82:	b108      	cbz	r0, 8004b88 <_printf_i+0x1f4>
 8004b84:	1b80      	subs	r0, r0, r6
 8004b86:	6060      	str	r0, [r4, #4]
 8004b88:	6863      	ldr	r3, [r4, #4]
 8004b8a:	6123      	str	r3, [r4, #16]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b92:	e7a8      	b.n	8004ae6 <_printf_i+0x152>
 8004b94:	4632      	mov	r2, r6
 8004b96:	4649      	mov	r1, r9
 8004b98:	4640      	mov	r0, r8
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	47d0      	blx	sl
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d0ab      	beq.n	8004afa <_printf_i+0x166>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	079b      	lsls	r3, r3, #30
 8004ba6:	d413      	bmi.n	8004bd0 <_printf_i+0x23c>
 8004ba8:	68e0      	ldr	r0, [r4, #12]
 8004baa:	9b03      	ldr	r3, [sp, #12]
 8004bac:	4298      	cmp	r0, r3
 8004bae:	bfb8      	it	lt
 8004bb0:	4618      	movlt	r0, r3
 8004bb2:	e7a4      	b.n	8004afe <_printf_i+0x16a>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4632      	mov	r2, r6
 8004bb8:	4649      	mov	r1, r9
 8004bba:	4640      	mov	r0, r8
 8004bbc:	47d0      	blx	sl
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d09b      	beq.n	8004afa <_printf_i+0x166>
 8004bc2:	3501      	adds	r5, #1
 8004bc4:	68e3      	ldr	r3, [r4, #12]
 8004bc6:	9903      	ldr	r1, [sp, #12]
 8004bc8:	1a5b      	subs	r3, r3, r1
 8004bca:	42ab      	cmp	r3, r5
 8004bcc:	dcf2      	bgt.n	8004bb4 <_printf_i+0x220>
 8004bce:	e7eb      	b.n	8004ba8 <_printf_i+0x214>
 8004bd0:	2500      	movs	r5, #0
 8004bd2:	f104 0619 	add.w	r6, r4, #25
 8004bd6:	e7f5      	b.n	8004bc4 <_printf_i+0x230>
 8004bd8:	08004ef1 	.word	0x08004ef1
 8004bdc:	08004f02 	.word	0x08004f02

08004be0 <memchr>:
 8004be0:	4603      	mov	r3, r0
 8004be2:	b510      	push	{r4, lr}
 8004be4:	b2c9      	uxtb	r1, r1
 8004be6:	4402      	add	r2, r0
 8004be8:	4293      	cmp	r3, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	d101      	bne.n	8004bf2 <memchr+0x12>
 8004bee:	2000      	movs	r0, #0
 8004bf0:	e003      	b.n	8004bfa <memchr+0x1a>
 8004bf2:	7804      	ldrb	r4, [r0, #0]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	428c      	cmp	r4, r1
 8004bf8:	d1f6      	bne.n	8004be8 <memchr+0x8>
 8004bfa:	bd10      	pop	{r4, pc}

08004bfc <memcpy>:
 8004bfc:	440a      	add	r2, r1
 8004bfe:	4291      	cmp	r1, r2
 8004c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c04:	d100      	bne.n	8004c08 <memcpy+0xc>
 8004c06:	4770      	bx	lr
 8004c08:	b510      	push	{r4, lr}
 8004c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c0e:	4291      	cmp	r1, r2
 8004c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c14:	d1f9      	bne.n	8004c0a <memcpy+0xe>
 8004c16:	bd10      	pop	{r4, pc}

08004c18 <memmove>:
 8004c18:	4288      	cmp	r0, r1
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	eb01 0402 	add.w	r4, r1, r2
 8004c20:	d902      	bls.n	8004c28 <memmove+0x10>
 8004c22:	4284      	cmp	r4, r0
 8004c24:	4623      	mov	r3, r4
 8004c26:	d807      	bhi.n	8004c38 <memmove+0x20>
 8004c28:	1e43      	subs	r3, r0, #1
 8004c2a:	42a1      	cmp	r1, r4
 8004c2c:	d008      	beq.n	8004c40 <memmove+0x28>
 8004c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c36:	e7f8      	b.n	8004c2a <memmove+0x12>
 8004c38:	4601      	mov	r1, r0
 8004c3a:	4402      	add	r2, r0
 8004c3c:	428a      	cmp	r2, r1
 8004c3e:	d100      	bne.n	8004c42 <memmove+0x2a>
 8004c40:	bd10      	pop	{r4, pc}
 8004c42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c4a:	e7f7      	b.n	8004c3c <memmove+0x24>

08004c4c <_free_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4605      	mov	r5, r0
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d043      	beq.n	8004cdc <_free_r+0x90>
 8004c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c58:	1f0c      	subs	r4, r1, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bfb8      	it	lt
 8004c5e:	18e4      	addlt	r4, r4, r3
 8004c60:	f000 f8d0 	bl	8004e04 <__malloc_lock>
 8004c64:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <_free_r+0x94>)
 8004c66:	6813      	ldr	r3, [r2, #0]
 8004c68:	4610      	mov	r0, r2
 8004c6a:	b933      	cbnz	r3, 8004c7a <_free_r+0x2e>
 8004c6c:	6063      	str	r3, [r4, #4]
 8004c6e:	6014      	str	r4, [r2, #0]
 8004c70:	4628      	mov	r0, r5
 8004c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c76:	f000 b8cb 	b.w	8004e10 <__malloc_unlock>
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	d90a      	bls.n	8004c94 <_free_r+0x48>
 8004c7e:	6821      	ldr	r1, [r4, #0]
 8004c80:	1862      	adds	r2, r4, r1
 8004c82:	4293      	cmp	r3, r2
 8004c84:	bf01      	itttt	eq
 8004c86:	681a      	ldreq	r2, [r3, #0]
 8004c88:	685b      	ldreq	r3, [r3, #4]
 8004c8a:	1852      	addeq	r2, r2, r1
 8004c8c:	6022      	streq	r2, [r4, #0]
 8004c8e:	6063      	str	r3, [r4, #4]
 8004c90:	6004      	str	r4, [r0, #0]
 8004c92:	e7ed      	b.n	8004c70 <_free_r+0x24>
 8004c94:	461a      	mov	r2, r3
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	b10b      	cbz	r3, 8004c9e <_free_r+0x52>
 8004c9a:	42a3      	cmp	r3, r4
 8004c9c:	d9fa      	bls.n	8004c94 <_free_r+0x48>
 8004c9e:	6811      	ldr	r1, [r2, #0]
 8004ca0:	1850      	adds	r0, r2, r1
 8004ca2:	42a0      	cmp	r0, r4
 8004ca4:	d10b      	bne.n	8004cbe <_free_r+0x72>
 8004ca6:	6820      	ldr	r0, [r4, #0]
 8004ca8:	4401      	add	r1, r0
 8004caa:	1850      	adds	r0, r2, r1
 8004cac:	4283      	cmp	r3, r0
 8004cae:	6011      	str	r1, [r2, #0]
 8004cb0:	d1de      	bne.n	8004c70 <_free_r+0x24>
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4401      	add	r1, r0
 8004cb8:	6011      	str	r1, [r2, #0]
 8004cba:	6053      	str	r3, [r2, #4]
 8004cbc:	e7d8      	b.n	8004c70 <_free_r+0x24>
 8004cbe:	d902      	bls.n	8004cc6 <_free_r+0x7a>
 8004cc0:	230c      	movs	r3, #12
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	e7d4      	b.n	8004c70 <_free_r+0x24>
 8004cc6:	6820      	ldr	r0, [r4, #0]
 8004cc8:	1821      	adds	r1, r4, r0
 8004cca:	428b      	cmp	r3, r1
 8004ccc:	bf01      	itttt	eq
 8004cce:	6819      	ldreq	r1, [r3, #0]
 8004cd0:	685b      	ldreq	r3, [r3, #4]
 8004cd2:	1809      	addeq	r1, r1, r0
 8004cd4:	6021      	streq	r1, [r4, #0]
 8004cd6:	6063      	str	r3, [r4, #4]
 8004cd8:	6054      	str	r4, [r2, #4]
 8004cda:	e7c9      	b.n	8004c70 <_free_r+0x24>
 8004cdc:	bd38      	pop	{r3, r4, r5, pc}
 8004cde:	bf00      	nop
 8004ce0:	20000244 	.word	0x20000244

08004ce4 <_malloc_r>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	1ccd      	adds	r5, r1, #3
 8004ce8:	f025 0503 	bic.w	r5, r5, #3
 8004cec:	3508      	adds	r5, #8
 8004cee:	2d0c      	cmp	r5, #12
 8004cf0:	bf38      	it	cc
 8004cf2:	250c      	movcc	r5, #12
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	db01      	blt.n	8004cfe <_malloc_r+0x1a>
 8004cfa:	42a9      	cmp	r1, r5
 8004cfc:	d903      	bls.n	8004d06 <_malloc_r+0x22>
 8004cfe:	230c      	movs	r3, #12
 8004d00:	6033      	str	r3, [r6, #0]
 8004d02:	2000      	movs	r0, #0
 8004d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d06:	f000 f87d 	bl	8004e04 <__malloc_lock>
 8004d0a:	4921      	ldr	r1, [pc, #132]	; (8004d90 <_malloc_r+0xac>)
 8004d0c:	680a      	ldr	r2, [r1, #0]
 8004d0e:	4614      	mov	r4, r2
 8004d10:	b99c      	cbnz	r4, 8004d3a <_malloc_r+0x56>
 8004d12:	4f20      	ldr	r7, [pc, #128]	; (8004d94 <_malloc_r+0xb0>)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	b923      	cbnz	r3, 8004d22 <_malloc_r+0x3e>
 8004d18:	4621      	mov	r1, r4
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f000 f862 	bl	8004de4 <_sbrk_r>
 8004d20:	6038      	str	r0, [r7, #0]
 8004d22:	4629      	mov	r1, r5
 8004d24:	4630      	mov	r0, r6
 8004d26:	f000 f85d 	bl	8004de4 <_sbrk_r>
 8004d2a:	1c43      	adds	r3, r0, #1
 8004d2c:	d123      	bne.n	8004d76 <_malloc_r+0x92>
 8004d2e:	230c      	movs	r3, #12
 8004d30:	4630      	mov	r0, r6
 8004d32:	6033      	str	r3, [r6, #0]
 8004d34:	f000 f86c 	bl	8004e10 <__malloc_unlock>
 8004d38:	e7e3      	b.n	8004d02 <_malloc_r+0x1e>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	1b5b      	subs	r3, r3, r5
 8004d3e:	d417      	bmi.n	8004d70 <_malloc_r+0x8c>
 8004d40:	2b0b      	cmp	r3, #11
 8004d42:	d903      	bls.n	8004d4c <_malloc_r+0x68>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	441c      	add	r4, r3
 8004d48:	6025      	str	r5, [r4, #0]
 8004d4a:	e004      	b.n	8004d56 <_malloc_r+0x72>
 8004d4c:	6863      	ldr	r3, [r4, #4]
 8004d4e:	42a2      	cmp	r2, r4
 8004d50:	bf0c      	ite	eq
 8004d52:	600b      	streq	r3, [r1, #0]
 8004d54:	6053      	strne	r3, [r2, #4]
 8004d56:	4630      	mov	r0, r6
 8004d58:	f000 f85a 	bl	8004e10 <__malloc_unlock>
 8004d5c:	f104 000b 	add.w	r0, r4, #11
 8004d60:	1d23      	adds	r3, r4, #4
 8004d62:	f020 0007 	bic.w	r0, r0, #7
 8004d66:	1ac2      	subs	r2, r0, r3
 8004d68:	d0cc      	beq.n	8004d04 <_malloc_r+0x20>
 8004d6a:	1a1b      	subs	r3, r3, r0
 8004d6c:	50a3      	str	r3, [r4, r2]
 8004d6e:	e7c9      	b.n	8004d04 <_malloc_r+0x20>
 8004d70:	4622      	mov	r2, r4
 8004d72:	6864      	ldr	r4, [r4, #4]
 8004d74:	e7cc      	b.n	8004d10 <_malloc_r+0x2c>
 8004d76:	1cc4      	adds	r4, r0, #3
 8004d78:	f024 0403 	bic.w	r4, r4, #3
 8004d7c:	42a0      	cmp	r0, r4
 8004d7e:	d0e3      	beq.n	8004d48 <_malloc_r+0x64>
 8004d80:	1a21      	subs	r1, r4, r0
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 f82e 	bl	8004de4 <_sbrk_r>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d1dd      	bne.n	8004d48 <_malloc_r+0x64>
 8004d8c:	e7cf      	b.n	8004d2e <_malloc_r+0x4a>
 8004d8e:	bf00      	nop
 8004d90:	20000244 	.word	0x20000244
 8004d94:	20000248 	.word	0x20000248

08004d98 <_realloc_r>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	4607      	mov	r7, r0
 8004d9c:	4614      	mov	r4, r2
 8004d9e:	460e      	mov	r6, r1
 8004da0:	b921      	cbnz	r1, 8004dac <_realloc_r+0x14>
 8004da2:	4611      	mov	r1, r2
 8004da4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004da8:	f7ff bf9c 	b.w	8004ce4 <_malloc_r>
 8004dac:	b922      	cbnz	r2, 8004db8 <_realloc_r+0x20>
 8004dae:	f7ff ff4d 	bl	8004c4c <_free_r>
 8004db2:	4625      	mov	r5, r4
 8004db4:	4628      	mov	r0, r5
 8004db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004db8:	f000 f830 	bl	8004e1c <_malloc_usable_size_r>
 8004dbc:	42a0      	cmp	r0, r4
 8004dbe:	d20f      	bcs.n	8004de0 <_realloc_r+0x48>
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4638      	mov	r0, r7
 8004dc4:	f7ff ff8e 	bl	8004ce4 <_malloc_r>
 8004dc8:	4605      	mov	r5, r0
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d0f2      	beq.n	8004db4 <_realloc_r+0x1c>
 8004dce:	4631      	mov	r1, r6
 8004dd0:	4622      	mov	r2, r4
 8004dd2:	f7ff ff13 	bl	8004bfc <memcpy>
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4638      	mov	r0, r7
 8004dda:	f7ff ff37 	bl	8004c4c <_free_r>
 8004dde:	e7e9      	b.n	8004db4 <_realloc_r+0x1c>
 8004de0:	4635      	mov	r5, r6
 8004de2:	e7e7      	b.n	8004db4 <_realloc_r+0x1c>

08004de4 <_sbrk_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	2300      	movs	r3, #0
 8004de8:	4d05      	ldr	r5, [pc, #20]	; (8004e00 <_sbrk_r+0x1c>)
 8004dea:	4604      	mov	r4, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	602b      	str	r3, [r5, #0]
 8004df0:	f7fd f91e 	bl	8002030 <_sbrk>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d102      	bne.n	8004dfe <_sbrk_r+0x1a>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	b103      	cbz	r3, 8004dfe <_sbrk_r+0x1a>
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	200002dc 	.word	0x200002dc

08004e04 <__malloc_lock>:
 8004e04:	4801      	ldr	r0, [pc, #4]	; (8004e0c <__malloc_lock+0x8>)
 8004e06:	f000 b811 	b.w	8004e2c <__retarget_lock_acquire_recursive>
 8004e0a:	bf00      	nop
 8004e0c:	200002e4 	.word	0x200002e4

08004e10 <__malloc_unlock>:
 8004e10:	4801      	ldr	r0, [pc, #4]	; (8004e18 <__malloc_unlock+0x8>)
 8004e12:	f000 b80c 	b.w	8004e2e <__retarget_lock_release_recursive>
 8004e16:	bf00      	nop
 8004e18:	200002e4 	.word	0x200002e4

08004e1c <_malloc_usable_size_r>:
 8004e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e20:	1f18      	subs	r0, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bfbc      	itt	lt
 8004e26:	580b      	ldrlt	r3, [r1, r0]
 8004e28:	18c0      	addlt	r0, r0, r3
 8004e2a:	4770      	bx	lr

08004e2c <__retarget_lock_acquire_recursive>:
 8004e2c:	4770      	bx	lr

08004e2e <__retarget_lock_release_recursive>:
 8004e2e:	4770      	bx	lr

08004e30 <_init>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	bf00      	nop
 8004e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e36:	bc08      	pop	{r3}
 8004e38:	469e      	mov	lr, r3
 8004e3a:	4770      	bx	lr

08004e3c <_fini>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	bf00      	nop
 8004e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e42:	bc08      	pop	{r3}
 8004e44:	469e      	mov	lr, r3
 8004e46:	4770      	bx	lr
