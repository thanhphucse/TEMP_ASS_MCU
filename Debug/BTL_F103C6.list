
BTL_F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080047b0  080047b0  000147b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047d8  080047d8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080047d8  080047d8  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047d8  080047d8  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080047e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200000a8  08004888  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004888  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e473  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f5  00000000  00000000  0002e544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00030940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00031848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a4a  00000000  00000000  000325c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff60  00000000  00000000  0004a012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008532f  00000000  00000000  00059f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df2a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e4  00000000  00000000  000df2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004798 	.word	0x08004798

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08004798 	.word	0x08004798

0800014c <isButton_BUT1_Pressed>:
int button_BUT3_LongPressed_flag = 0;
int button_PEDES_LongPressed_flag = 0;


int isButton_BUT1_Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_BUT1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton_BUT1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton_BUT1_Pressed+0x16>
	{
		button_BUT1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton_BUT1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton_BUT1_Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000c4 	.word	0x200000c4

08000170 <isButton_BUT2_Pressed>:
int isButton_BUT2_Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_BUT2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton_BUT2_Pressed+0x16>
	{
		button_BUT2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton_BUT2_Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000c8 	.word	0x200000c8

08000194 <isButton_BUT3_Pressed>:
int isButton_BUT3_Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_BUT3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton_BUT3_Pressed+0x16>
	{
		button_BUT3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton_BUT3_Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000cc 	.word	0x200000cc

080001b8 <isButton_Pedes_Pressed>:
int isButton_Pedes_Pressed()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button_PEDES_flag == 1)
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton_Pedes_Pressed+0x16>
	{
		button_PEDES_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton_Pedes_Pressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton_Pedes_Pressed+0x18>
	}
	else return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	200000d0 	.word	0x200000d0

080001dc <getKeyInput>:
	else return 0;
}


void getKeyInput()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e187      	b.n	80004f8 <getKeyInput+0x31c>
		// button debouncing
		keyReg0[i] = keyReg1[i];
 80001e8:	4a7f      	ldr	r2, [pc, #508]	; (80003e8 <getKeyInput+0x20c>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	497e      	ldr	r1, [pc, #504]	; (80003ec <getKeyInput+0x210>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001f8:	4a7d      	ldr	r2, [pc, #500]	; (80003f0 <getKeyInput+0x214>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	4979      	ldr	r1, [pc, #484]	; (80003e8 <getKeyInput+0x20c>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//handle button 1
		if(i == 0){
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d154      	bne.n	80002b8 <getKeyInput+0xdc>
			keyReg2[i] = HAL_GPIO_ReadPin(A1_BUTTON1_GPIO_Port, A1_BUTTON1_Pin);
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	4878      	ldr	r0, [pc, #480]	; (80003f4 <getKeyInput+0x218>)
 8000214:	f002 faf4 	bl	8002800 <HAL_GPIO_ReadPin>
 8000218:	4603      	mov	r3, r0
 800021a:	4619      	mov	r1, r3
 800021c:	4a74      	ldr	r2, [pc, #464]	; (80003f0 <getKeyInput+0x214>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000224:	4a71      	ldr	r2, [pc, #452]	; (80003ec <getKeyInput+0x210>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	496e      	ldr	r1, [pc, #440]	; (80003e8 <getKeyInput+0x20c>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000234:	429a      	cmp	r2, r3
 8000236:	d13f      	bne.n	80002b8 <getKeyInput+0xdc>
 8000238:	4a6b      	ldr	r2, [pc, #428]	; (80003e8 <getKeyInput+0x20c>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000240:	496b      	ldr	r1, [pc, #428]	; (80003f0 <getKeyInput+0x214>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000248:	429a      	cmp	r2, r3
 800024a:	d135      	bne.n	80002b8 <getKeyInput+0xdc>
			{
				 //case short pressed
				if(keyReg3[i] != keyReg2[i])
 800024c:	4a6a      	ldr	r2, [pc, #424]	; (80003f8 <getKeyInput+0x21c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000254:	4966      	ldr	r1, [pc, #408]	; (80003f0 <getKeyInput+0x214>)
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800025c:	429a      	cmp	r2, r3
 800025e:	d015      	beq.n	800028c <getKeyInput+0xb0>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 8000260:	4a63      	ldr	r2, [pc, #396]	; (80003f0 <getKeyInput+0x214>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000268:	4963      	ldr	r1, [pc, #396]	; (80003f8 <getKeyInput+0x21c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000270:	4a5f      	ldr	r2, [pc, #380]	; (80003f0 <getKeyInput+0x214>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d11d      	bne.n	80002b8 <getKeyInput+0xdc>
					{
						//TODO
						button_BUT1_flag = 1;
 800027c:	4b5f      	ldr	r3, [pc, #380]	; (80003fc <getKeyInput+0x220>)
 800027e:	2201      	movs	r2, #1
 8000280:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000282:	4b5f      	ldr	r3, [pc, #380]	; (8000400 <getKeyInput+0x224>)
 8000284:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	e015      	b.n	80002b8 <getKeyInput+0xdc>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800028c:	4a58      	ldr	r2, [pc, #352]	; (80003f0 <getKeyInput+0x214>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d10f      	bne.n	80002b8 <getKeyInput+0xdc>
						timerForKeyPress--;
 8000298:	4b59      	ldr	r3, [pc, #356]	; (8000400 <getKeyInput+0x224>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	3b01      	subs	r3, #1
 800029e:	4a58      	ldr	r2, [pc, #352]	; (8000400 <getKeyInput+0x224>)
 80002a0:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80002a2:	4b57      	ldr	r3, [pc, #348]	; (8000400 <getKeyInput+0x224>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d106      	bne.n	80002b8 <getKeyInput+0xdc>
						{
							//TODO
							button_BUT1_LongPressed_flag = 1;
 80002aa:	4b56      	ldr	r3, [pc, #344]	; (8000404 <getKeyInput+0x228>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80002b0:	4b53      	ldr	r3, [pc, #332]	; (8000400 <getKeyInput+0x224>)
 80002b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002b6:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 2
		if(i == 1){
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d153      	bne.n	8000366 <getKeyInput+0x18a>
			keyReg2[i] = HAL_GPIO_ReadPin(A2_BUTTON2_GPIO_Port, A2_BUTTON2_Pin);
 80002be:	2120      	movs	r1, #32
 80002c0:	4851      	ldr	r0, [pc, #324]	; (8000408 <getKeyInput+0x22c>)
 80002c2:	f002 fa9d 	bl	8002800 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	4619      	mov	r1, r3
 80002ca:	4a49      	ldr	r2, [pc, #292]	; (80003f0 <getKeyInput+0x214>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80002d2:	4a46      	ldr	r2, [pc, #280]	; (80003ec <getKeyInput+0x210>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002da:	4943      	ldr	r1, [pc, #268]	; (80003e8 <getKeyInput+0x20c>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d13f      	bne.n	8000366 <getKeyInput+0x18a>
 80002e6:	4a40      	ldr	r2, [pc, #256]	; (80003e8 <getKeyInput+0x20c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ee:	4940      	ldr	r1, [pc, #256]	; (80003f0 <getKeyInput+0x214>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002f6:	429a      	cmp	r2, r3
 80002f8:	d135      	bne.n	8000366 <getKeyInput+0x18a>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80002fa:	4a3f      	ldr	r2, [pc, #252]	; (80003f8 <getKeyInput+0x21c>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000302:	493b      	ldr	r1, [pc, #236]	; (80003f0 <getKeyInput+0x214>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800030a:	429a      	cmp	r2, r3
 800030c:	d015      	beq.n	800033a <getKeyInput+0x15e>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 800030e:	4a38      	ldr	r2, [pc, #224]	; (80003f0 <getKeyInput+0x214>)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000316:	4938      	ldr	r1, [pc, #224]	; (80003f8 <getKeyInput+0x21c>)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 800031e:	4a34      	ldr	r2, [pc, #208]	; (80003f0 <getKeyInput+0x214>)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d11d      	bne.n	8000366 <getKeyInput+0x18a>
					{
						//TODO
						button_BUT2_flag = 1;
 800032a:	4b38      	ldr	r3, [pc, #224]	; (800040c <getKeyInput+0x230>)
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000330:	4b33      	ldr	r3, [pc, #204]	; (8000400 <getKeyInput+0x224>)
 8000332:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	e015      	b.n	8000366 <getKeyInput+0x18a>
					}
				}
				else// key long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 800033a:	4a2d      	ldr	r2, [pc, #180]	; (80003f0 <getKeyInput+0x214>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10f      	bne.n	8000366 <getKeyInput+0x18a>
						timerForKeyPress--;
 8000346:	4b2e      	ldr	r3, [pc, #184]	; (8000400 <getKeyInput+0x224>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a2c      	ldr	r2, [pc, #176]	; (8000400 <getKeyInput+0x224>)
 800034e:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <getKeyInput+0x224>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d106      	bne.n	8000366 <getKeyInput+0x18a>
						{
							//TODO
							button_BUT2_LongPressed_flag = 1;
 8000358:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <getKeyInput+0x234>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <getKeyInput+0x224>)
 8000360:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000364:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 3
		if(i == 2){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b02      	cmp	r3, #2
 800036a:	d16b      	bne.n	8000444 <getKeyInput+0x268>
			keyReg2[i] = HAL_GPIO_ReadPin(A3_BUTTON3_GPIO_Port, A3_BUTTON3_Pin);
 800036c:	2101      	movs	r1, #1
 800036e:	4821      	ldr	r0, [pc, #132]	; (80003f4 <getKeyInput+0x218>)
 8000370:	f002 fa46 	bl	8002800 <HAL_GPIO_ReadPin>
 8000374:	4603      	mov	r3, r0
 8000376:	4619      	mov	r1, r3
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <getKeyInput+0x214>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000380:	4a1a      	ldr	r2, [pc, #104]	; (80003ec <getKeyInput+0x210>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000388:	4917      	ldr	r1, [pc, #92]	; (80003e8 <getKeyInput+0x20c>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000390:	429a      	cmp	r2, r3
 8000392:	d157      	bne.n	8000444 <getKeyInput+0x268>
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <getKeyInput+0x20c>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800039c:	4914      	ldr	r1, [pc, #80]	; (80003f0 <getKeyInput+0x214>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d14d      	bne.n	8000444 <getKeyInput+0x268>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80003a8:	4a13      	ldr	r2, [pc, #76]	; (80003f8 <getKeyInput+0x21c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b0:	490f      	ldr	r1, [pc, #60]	; (80003f0 <getKeyInput+0x214>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d02d      	beq.n	8000418 <getKeyInput+0x23c>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <getKeyInput+0x214>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <getKeyInput+0x21c>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80003cc:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <getKeyInput+0x214>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d135      	bne.n	8000444 <getKeyInput+0x268>
					{
						//TODO
						button_BUT3_flag = 1;
 80003d8:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <getKeyInput+0x238>)
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <getKeyInput+0x224>)
 80003e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e02d      	b.n	8000444 <getKeyInput+0x268>
 80003e8:	20000010 	.word	0x20000010
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000020 	.word	0x20000020
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	20000030 	.word	0x20000030
 80003fc:	200000c4 	.word	0x200000c4
 8000400:	20000040 	.word	0x20000040
 8000404:	200000d4 	.word	0x200000d4
 8000408:	40010800 	.word	0x40010800
 800040c:	200000c8 	.word	0x200000c8
 8000410:	200000d8 	.word	0x200000d8
 8000414:	200000cc 	.word	0x200000cc
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <getKeyInput+0x330>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d10f      	bne.n	8000444 <getKeyInput+0x268>
						timerForKeyPress--;
 8000424:	4b3a      	ldr	r3, [pc, #232]	; (8000510 <getKeyInput+0x334>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3b01      	subs	r3, #1
 800042a:	4a39      	ldr	r2, [pc, #228]	; (8000510 <getKeyInput+0x334>)
 800042c:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800042e:	4b38      	ldr	r3, [pc, #224]	; (8000510 <getKeyInput+0x334>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d106      	bne.n	8000444 <getKeyInput+0x268>
						{
							//TODO
							button_BUT3_LongPressed_flag = 1;
 8000436:	4b37      	ldr	r3, [pc, #220]	; (8000514 <getKeyInput+0x338>)
 8000438:	2201      	movs	r2, #1
 800043a:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <getKeyInput+0x334>)
 800043e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000442:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button pedestrian
		if(i == 3){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d153      	bne.n	80004f2 <getKeyInput+0x316>
			keyReg2[i] = HAL_GPIO_ReadPin(A0_PEDES_BUTTON_GPIO_Port, A0_PEDES_BUTTON_Pin);
 800044a:	2140      	movs	r1, #64	; 0x40
 800044c:	4832      	ldr	r0, [pc, #200]	; (8000518 <getKeyInput+0x33c>)
 800044e:	f002 f9d7 	bl	8002800 <HAL_GPIO_ReadPin>
 8000452:	4603      	mov	r3, r0
 8000454:	4619      	mov	r1, r3
 8000456:	4a2d      	ldr	r2, [pc, #180]	; (800050c <getKeyInput+0x330>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 800045e:	4a2f      	ldr	r2, [pc, #188]	; (800051c <getKeyInput+0x340>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000466:	492e      	ldr	r1, [pc, #184]	; (8000520 <getKeyInput+0x344>)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800046e:	429a      	cmp	r2, r3
 8000470:	d13f      	bne.n	80004f2 <getKeyInput+0x316>
 8000472:	4a2b      	ldr	r2, [pc, #172]	; (8000520 <getKeyInput+0x344>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047a:	4924      	ldr	r1, [pc, #144]	; (800050c <getKeyInput+0x330>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000482:	429a      	cmp	r2, r3
 8000484:	d135      	bne.n	80004f2 <getKeyInput+0x316>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 8000486:	4a27      	ldr	r2, [pc, #156]	; (8000524 <getKeyInput+0x348>)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	491f      	ldr	r1, [pc, #124]	; (800050c <getKeyInput+0x330>)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000496:	429a      	cmp	r2, r3
 8000498:	d015      	beq.n	80004c6 <getKeyInput+0x2ea>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <getKeyInput+0x330>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a2:	4920      	ldr	r1, [pc, #128]	; (8000524 <getKeyInput+0x348>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80004aa:	4a18      	ldr	r2, [pc, #96]	; (800050c <getKeyInput+0x330>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d11d      	bne.n	80004f2 <getKeyInput+0x316>
					{
						//TODO
						button_PEDES_flag = 1;
 80004b6:	4b1c      	ldr	r3, [pc, #112]	; (8000528 <getKeyInput+0x34c>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <getKeyInput+0x334>)
 80004be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	e015      	b.n	80004f2 <getKeyInput+0x316>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <getKeyInput+0x330>)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d10f      	bne.n	80004f2 <getKeyInput+0x316>
						timerForKeyPress--;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <getKeyInput+0x334>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a0d      	ldr	r2, [pc, #52]	; (8000510 <getKeyInput+0x334>)
 80004da:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <getKeyInput+0x334>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d106      	bne.n	80004f2 <getKeyInput+0x316>
						{
							//TODO
							button_PEDES_LongPressed_flag = 1;
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <getKeyInput+0x350>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <getKeyInput+0x334>)
 80004ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80004f0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 4; i++){
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b03      	cmp	r3, #3
 80004fc:	f77f ae74 	ble.w	80001e8 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000020 	.word	0x20000020
 8000510:	20000040 	.word	0x20000040
 8000514:	200000dc 	.word	0x200000dc
 8000518:	40010800 	.word	0x40010800
 800051c:	20000000 	.word	0x20000000
 8000520:	20000010 	.word	0x20000010
 8000524:	20000030 	.word	0x20000030
 8000528:	200000d0 	.word	0x200000d0
 800052c:	200000e0 	.word	0x200000e0

08000530 <FSM_Buzzer>:

//int FSM_Buzzer_State = OFF;

TIM_HandleTypeDef htim2;

void FSM_Buzzer(){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	switch(FSM_Buzzer_State){
 8000534:	4b42      	ldr	r3, [pc, #264]	; (8000640 <FSM_Buzzer+0x110>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d002      	beq.n	8000542 <FSM_Buzzer+0x12>
 800053c:	2b01      	cmp	r3, #1
 800053e:	d00a      	beq.n	8000556 <FSM_Buzzer+0x26>
				FSM_Buzzer_State=OFF;
			}
		}
		break;
	default:
		break;
 8000540:	e07b      	b.n	800063a <FSM_Buzzer+0x10a>
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000542:	4b40      	ldr	r3, [pc, #256]	; (8000644 <FSM_Buzzer+0x114>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2200      	movs	r2, #0
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2110      	movs	r1, #16
 800054e:	483e      	ldr	r0, [pc, #248]	; (8000648 <FSM_Buzzer+0x118>)
 8000550:	f002 f96d 	bl	800282e <HAL_GPIO_WritePin>
		break;
 8000554:	e071      	b.n	800063a <FSM_Buzzer+0x10a>
		if(timer31_flag==1){
 8000556:	4b3d      	ldr	r3, [pc, #244]	; (800064c <FSM_Buzzer+0x11c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d10d      	bne.n	800057a <FSM_Buzzer+0x4a>
			setTimer32(1000); //set 1 second
 800055e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000562:	f001 f9ab 	bl	80018bc <setTimer32>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 399);
 8000566:	4b37      	ldr	r3, [pc, #220]	; (8000644 <FSM_Buzzer+0x114>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f240 128f 	movw	r2, #399	; 0x18f
 800056e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8000570:	2201      	movs	r2, #1
 8000572:	2110      	movs	r1, #16
 8000574:	4834      	ldr	r0, [pc, #208]	; (8000648 <FSM_Buzzer+0x118>)
 8000576:	f002 f95a 	bl	800282e <HAL_GPIO_WritePin>
		if(timer32_flag==1){  //end 1s
 800057a:	4b35      	ldr	r3, [pc, #212]	; (8000650 <FSM_Buzzer+0x120>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d106      	bne.n	8000590 <FSM_Buzzer+0x60>
			FSM_Buzzer_State=OFF;
 8000582:	4b2f      	ldr	r3, [pc, #188]	; (8000640 <FSM_Buzzer+0x110>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
			setTimer32(1000); //set 1 second
 8000588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058c:	f001 f996 	bl	80018bc <setTimer32>
		if(time_red_horizontal_temp<4){
 8000590:	4b30      	ldr	r3, [pc, #192]	; (8000654 <FSM_Buzzer+0x124>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b03      	cmp	r3, #3
 8000596:	dc1e      	bgt.n	80005d6 <FSM_Buzzer+0xa6>
			__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,Increase_Duty_Cycle);
 8000598:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <FSM_Buzzer+0x128>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <FSM_Buzzer+0x114>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin);
 80005a2:	2110      	movs	r1, #16
 80005a4:	4828      	ldr	r0, [pc, #160]	; (8000648 <FSM_Buzzer+0x118>)
 80005a6:	f002 f95a 	bl	800285e <HAL_GPIO_TogglePin>
			Increase_Duty_Cycle += 50;
 80005aa:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <FSM_Buzzer+0x128>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	3332      	adds	r3, #50	; 0x32
 80005b0:	4a29      	ldr	r2, [pc, #164]	; (8000658 <FSM_Buzzer+0x128>)
 80005b2:	6013      	str	r3, [r2, #0]
			if(Increase_Duty_Cycle >= 999){
 80005b4:	4b28      	ldr	r3, [pc, #160]	; (8000658 <FSM_Buzzer+0x128>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f240 32e6 	movw	r2, #998	; 0x3e6
 80005bc:	4293      	cmp	r3, r2
 80005be:	dd03      	ble.n	80005c8 <FSM_Buzzer+0x98>
				Increase_Duty_Cycle = 989;
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <FSM_Buzzer+0x128>)
 80005c2:	f240 32dd 	movw	r2, #989	; 0x3dd
 80005c6:	601a      	str	r2, [r3, #0]
			if(time_red_horizontal_temp==0){
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <FSM_Buzzer+0x124>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d102      	bne.n	80005d6 <FSM_Buzzer+0xa6>
				FSM_Buzzer_State=OFF;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <FSM_Buzzer+0x110>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
		if(timer31_flag==1 && status_pedestrian_light ==pedes_green ){
 80005d6:	4b1d      	ldr	r3, [pc, #116]	; (800064c <FSM_Buzzer+0x11c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d12c      	bne.n	8000638 <FSM_Buzzer+0x108>
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <FSM_Buzzer+0x12c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b84      	cmp	r3, #132	; 0x84
 80005e4:	d128      	bne.n	8000638 <FSM_Buzzer+0x108>
			setTimer33(2000); //set 2 seconds
 80005e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ea:	f001 f981 	bl	80018f0 <setTimer33>
			setTimer32(1000);
 80005ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f2:	f001 f963 	bl	80018bc <setTimer32>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 399);
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <FSM_Buzzer+0x114>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f240 128f 	movw	r2, #399	; 0x18f
 80005fe:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2110      	movs	r1, #16
 8000604:	4810      	ldr	r0, [pc, #64]	; (8000648 <FSM_Buzzer+0x118>)
 8000606:	f002 f912 	bl	800282e <HAL_GPIO_WritePin>
			if(timer32_flag=1){
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <FSM_Buzzer+0x120>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <FSM_Buzzer+0x114>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2110      	movs	r1, #16
 800061c:	480a      	ldr	r0, [pc, #40]	; (8000648 <FSM_Buzzer+0x118>)
 800061e:	f002 f906 	bl	800282e <HAL_GPIO_WritePin>
				setTimer32(1000);
 8000622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000626:	f001 f949 	bl	80018bc <setTimer32>
			if(timer33_flag==1){
 800062a:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <FSM_Buzzer+0x130>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d102      	bne.n	8000638 <FSM_Buzzer+0x108>
				FSM_Buzzer_State=OFF;
 8000632:	4b03      	ldr	r3, [pc, #12]	; (8000640 <FSM_Buzzer+0x110>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
		break;
 8000638:	bf00      	nop
	}
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	200000e8 	.word	0x200000e8
 8000644:	2000018c 	.word	0x2000018c
 8000648:	40010800 	.word	0x40010800
 800064c:	2000014c 	.word	0x2000014c
 8000650:	20000154 	.word	0x20000154
 8000654:	20000070 	.word	0x20000070
 8000658:	20000094 	.word	0x20000094
 800065c:	20000050 	.word	0x20000050
 8000660:	2000015c 	.word	0x2000015c

08000664 <fsm_7SEG_horizontal_run>:
#include "control_7SEG.h"

int status_7SEG_horizontal = display_countDown_horizontal;


void fsm_7SEG_horizontal_run(){
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	switch(status_7SEG_horizontal){
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <fsm_7SEG_horizontal_run+0x88>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	2b0f      	cmp	r3, #15
 8000670:	d837      	bhi.n	80006e2 <fsm_7SEG_horizontal_run+0x7e>
 8000672:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <fsm_7SEG_horizontal_run+0x14>)
 8000674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000678:	080006e3 	.word	0x080006e3
 800067c:	080006e3 	.word	0x080006e3
 8000680:	080006e3 	.word	0x080006e3
 8000684:	080006e3 	.word	0x080006e3
 8000688:	080006e3 	.word	0x080006e3
 800068c:	080006e3 	.word	0x080006e3
 8000690:	080006e3 	.word	0x080006e3
 8000694:	080006e3 	.word	0x080006e3
 8000698:	080006e3 	.word	0x080006e3
 800069c:	080006e3 	.word	0x080006e3
 80006a0:	080006e3 	.word	0x080006e3
 80006a4:	080006e3 	.word	0x080006e3
 80006a8:	080006e3 	.word	0x080006e3
 80006ac:	080006b9 	.word	0x080006b9
 80006b0:	080006c7 	.word	0x080006c7
 80006b4:	080006d5 	.word	0x080006d5
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
		case display_mode02:
			_7SEG_buffer_horizontal[0] = 0;
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <fsm_7SEG_horizontal_run+0x8c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 2;
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <fsm_7SEG_horizontal_run+0x8c>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 80006c4:	e00e      	b.n	80006e4 <fsm_7SEG_horizontal_run+0x80>
		case display_mode03:
			_7SEG_buffer_horizontal[0] = 0;
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <fsm_7SEG_horizontal_run+0x8c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 3;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <fsm_7SEG_horizontal_run+0x8c>)
 80006ce:	2203      	movs	r2, #3
 80006d0:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 80006d2:	e007      	b.n	80006e4 <fsm_7SEG_horizontal_run+0x80>
		case display_mode04:
			_7SEG_buffer_horizontal[0] = 0;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <fsm_7SEG_horizontal_run+0x8c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 4;
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <fsm_7SEG_horizontal_run+0x8c>)
 80006dc:	2204      	movs	r2, #4
 80006de:	605a      	str	r2, [r3, #4]
//			{
//				update7SEG_horizontal(index_horizontal++);
//				if(index_horizontal == 2) index_horizontal = 0;
//				setTimer4(200);
//			}
			break;
 80006e0:	e000      	b.n	80006e4 <fsm_7SEG_horizontal_run+0x80>
		case off_horizontal:
//			off7SEG_horizontal();
			break;
		default:
			break;
 80006e2:	bf00      	nop
	}
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20000044 	.word	0x20000044
 80006f0:	2000017c 	.word	0x2000017c

080006f4 <fsm_7SEG_vertical_run>:

int status_7SEG_vertical = display_countDown_vertical;



void fsm_7SEG_vertical_run(){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
	switch(status_7SEG_vertical){
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <fsm_7SEG_vertical_run+0x2c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b10      	cmp	r3, #16
 80006fe:	d006      	beq.n	800070e <fsm_7SEG_vertical_run+0x1a>
 8000700:	2b10      	cmp	r3, #16
 8000702:	dc06      	bgt.n	8000712 <fsm_7SEG_vertical_run+0x1e>
 8000704:	f113 0f02 	cmn.w	r3, #2
 8000708:	d005      	beq.n	8000716 <fsm_7SEG_vertical_run+0x22>
 800070a:	2b0f      	cmp	r3, #15
			break;
		case off_vertical:
//			off7SEG_vertical();
			break;
		default:
			break;
 800070c:	e001      	b.n	8000712 <fsm_7SEG_vertical_run+0x1e>
			break;
 800070e:	bf00      	nop
 8000710:	e002      	b.n	8000718 <fsm_7SEG_vertical_run+0x24>
			break;
 8000712:	bf00      	nop
 8000714:	e000      	b.n	8000718 <fsm_7SEG_vertical_run+0x24>
			break;
 8000716:	bf00      	nop
	}
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20000048 	.word	0x20000048

08000724 <fsm_mannual_run>:
#include "button.h"
#include "fsm_traffic_blink.h"

status_mannual = mannual_init;

void fsm_mannual_run(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	switch(status_mannual){
 8000728:	4b54      	ldr	r3, [pc, #336]	; (800087c <fsm_mannual_run+0x158>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3b3c      	subs	r3, #60	; 0x3c
 800072e:	2b03      	cmp	r3, #3
 8000730:	f200 80a1 	bhi.w	8000876 <fsm_mannual_run+0x152>
 8000734:	a201      	add	r2, pc, #4	; (adr r2, 800073c <fsm_mannual_run+0x18>)
 8000736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073a:	bf00      	nop
 800073c:	0800074d 	.word	0x0800074d
 8000740:	0800075d 	.word	0x0800075d
 8000744:	080007bb 	.word	0x080007bb
 8000748:	08000819 	.word	0x08000819
		case mannual_init:
			status_mannual = mannual_red;
 800074c:	4b4b      	ldr	r3, [pc, #300]	; (800087c <fsm_mannual_run+0x158>)
 800074e:	223d      	movs	r2, #61	; 0x3d
 8000750:	601a      	str	r2, [r3, #0]
			setTimer9(5000);
 8000752:	f241 3088 	movw	r0, #5000	; 0x1388
 8000756:	f001 f849 	bl	80017ec <setTimer9>
			break;
 800075a:	e08d      	b.n	8000878 <fsm_mannual_run+0x154>
		case mannual_red:
			if(timer9_flag == 1){
 800075c:	4b48      	ldr	r3, [pc, #288]	; (8000880 <fsm_mannual_run+0x15c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d10e      	bne.n	8000782 <fsm_mannual_run+0x5e>
				status_system = INIT;
 8000764:	4b47      	ldr	r3, [pc, #284]	; (8000884 <fsm_mannual_run+0x160>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 800076a:	4b44      	ldr	r3, [pc, #272]	; (800087c <fsm_mannual_run+0x158>)
 800076c:	223c      	movs	r2, #60	; 0x3c
 800076e:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000770:	4b45      	ldr	r3, [pc, #276]	; (8000888 <fsm_mannual_run+0x164>)
 8000772:	2213      	movs	r2, #19
 8000774:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <fsm_mannual_run+0x168>)
 8000778:	2217      	movs	r2, #23
 800077a:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 800077c:	f001 fc0e 	bl	8001f9c <resetTimeTraffic>
				break;
 8000780:	e07a      	b.n	8000878 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 8000782:	f7ff fcf5 	bl	8000170 <isButton_BUT2_Pressed>
 8000786:	4603      	mov	r3, r0
 8000788:	2b01      	cmp	r3, #1
 800078a:	d106      	bne.n	800079a <fsm_mannual_run+0x76>
				status_mannual = mannual_green;
 800078c:	4b3b      	ldr	r3, [pc, #236]	; (800087c <fsm_mannual_run+0x158>)
 800078e:	223e      	movs	r2, #62	; 0x3e
 8000790:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 8000792:	f241 3088 	movw	r0, #5000	; 0x1388
 8000796:	f001 f829 	bl	80017ec <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 800079a:	f7ff fcd7 	bl	800014c <isButton_BUT1_Pressed>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d105      	bne.n	80007b0 <fsm_mannual_run+0x8c>
				status_mannual = mannual_init;
 80007a4:	4b35      	ldr	r3, [pc, #212]	; (800087c <fsm_mannual_run+0x158>)
 80007a6:	223c      	movs	r2, #60	; 0x3c
 80007a8:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 80007aa:	4b36      	ldr	r3, [pc, #216]	; (8000884 <fsm_mannual_run+0x160>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	601a      	str	r2, [r3, #0]
			}
			setRed_horizontal();
 80007b0:	f001 fb04 	bl	8001dbc <setRed_horizontal>
			setGreen_vertical();
 80007b4:	f001 fb4e 	bl	8001e54 <setGreen_vertical>
			break;
 80007b8:	e05e      	b.n	8000878 <fsm_mannual_run+0x154>
		case mannual_green:
			if(timer9_flag == 1){
 80007ba:	4b31      	ldr	r3, [pc, #196]	; (8000880 <fsm_mannual_run+0x15c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10e      	bne.n	80007e0 <fsm_mannual_run+0xbc>
				status_system = INIT;
 80007c2:	4b30      	ldr	r3, [pc, #192]	; (8000884 <fsm_mannual_run+0x160>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <fsm_mannual_run+0x158>)
 80007ca:	223c      	movs	r2, #60	; 0x3c
 80007cc:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 80007ce:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <fsm_mannual_run+0x164>)
 80007d0:	2213      	movs	r2, #19
 80007d2:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 80007d4:	4b2d      	ldr	r3, [pc, #180]	; (800088c <fsm_mannual_run+0x168>)
 80007d6:	2217      	movs	r2, #23
 80007d8:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 80007da:	f001 fbdf 	bl	8001f9c <resetTimeTraffic>
				break;
 80007de:	e04b      	b.n	8000878 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 80007e0:	f7ff fcc6 	bl	8000170 <isButton_BUT2_Pressed>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d106      	bne.n	80007f8 <fsm_mannual_run+0xd4>
				status_mannual = mannual_yellow;
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <fsm_mannual_run+0x158>)
 80007ec:	223f      	movs	r2, #63	; 0x3f
 80007ee:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 80007f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80007f4:	f000 fffa 	bl	80017ec <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 80007f8:	f7ff fca8 	bl	800014c <isButton_BUT1_Pressed>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d105      	bne.n	800080e <fsm_mannual_run+0xea>
				status_mannual = mannual_init;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <fsm_mannual_run+0x158>)
 8000804:	223c      	movs	r2, #60	; 0x3c
 8000806:	601a      	str	r2, [r3, #0]
				status_system = MODE2;
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <fsm_mannual_run+0x160>)
 800080a:	2202      	movs	r2, #2
 800080c:	601a      	str	r2, [r3, #0]
			}
			setGreen_horizontal();
 800080e:	f001 fae9 	bl	8001de4 <setGreen_horizontal>
			setYellow_vertical();
 8000812:	f001 fb2f 	bl	8001e74 <setYellow_vertical>
			break;
 8000816:	e02f      	b.n	8000878 <fsm_mannual_run+0x154>
		case mannual_yellow:
			if(timer9_flag == 1){
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <fsm_mannual_run+0x15c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d10e      	bne.n	800083e <fsm_mannual_run+0x11a>
				status_system = INIT;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <fsm_mannual_run+0x160>)
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <fsm_mannual_run+0x158>)
 8000828:	223c      	movs	r2, #60	; 0x3c
 800082a:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <fsm_mannual_run+0x164>)
 800082e:	2213      	movs	r2, #19
 8000830:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <fsm_mannual_run+0x168>)
 8000834:	2217      	movs	r2, #23
 8000836:	601a      	str	r2, [r3, #0]

				resetTimeTraffic();
 8000838:	f001 fbb0 	bl	8001f9c <resetTimeTraffic>
				break;
 800083c:	e01c      	b.n	8000878 <fsm_mannual_run+0x154>
			}
			if(isButton_BUT2_Pressed() == 1){
 800083e:	f7ff fc97 	bl	8000170 <isButton_BUT2_Pressed>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d106      	bne.n	8000856 <fsm_mannual_run+0x132>
				status_mannual = mannual_red;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <fsm_mannual_run+0x158>)
 800084a:	223d      	movs	r2, #61	; 0x3d
 800084c:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 800084e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000852:	f000 ffcb 	bl	80017ec <setTimer9>
			}
			if(isButton_BUT1_Pressed() == 1){
 8000856:	f7ff fc79 	bl	800014c <isButton_BUT1_Pressed>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d105      	bne.n	800086c <fsm_mannual_run+0x148>
				status_system = MODE2;
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <fsm_mannual_run+0x160>)
 8000862:	2202      	movs	r2, #2
 8000864:	601a      	str	r2, [r3, #0]
				status_mannual = mannual_init;
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <fsm_mannual_run+0x158>)
 8000868:	223c      	movs	r2, #60	; 0x3c
 800086a:	601a      	str	r2, [r3, #0]
			}
			setYellow_horizontal();
 800086c:	f001 face 	bl	8001e0c <setYellow_horizontal>
			setRed_vertical();
 8000870:	f001 fae0 	bl	8001e34 <setRed_vertical>
			break;
 8000874:	e000      	b.n	8000878 <fsm_mannual_run+0x154>
		default:
			break;
 8000876:	bf00      	nop
	}
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000004c 	.word	0x2000004c
 8000880:	2000012c 	.word	0x2000012c
 8000884:	200000e4 	.word	0x200000e4
 8000888:	20000054 	.word	0x20000054
 800088c:	20000058 	.word	0x20000058

08000890 <fsm_pedestrian_run>:
#include "button.h"


int status_pedestrian_light = pedes_off;

void fsm_pedestrian_run(){
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	switch(status_pedestrian_light){
 8000894:	4b24      	ldr	r3, [pc, #144]	; (8000928 <fsm_pedestrian_run+0x98>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b84      	cmp	r3, #132	; 0x84
 800089a:	d01e      	beq.n	80008da <fsm_pedestrian_run+0x4a>
 800089c:	2b84      	cmp	r3, #132	; 0x84
 800089e:	dc3d      	bgt.n	800091c <fsm_pedestrian_run+0x8c>
 80008a0:	2b82      	cmp	r3, #130	; 0x82
 80008a2:	d002      	beq.n	80008aa <fsm_pedestrian_run+0x1a>
 80008a4:	2b83      	cmp	r3, #131	; 0x83
 80008a6:	d003      	beq.n	80008b0 <fsm_pedestrian_run+0x20>

			}

			break;
		default:
			break;
 80008a8:	e038      	b.n	800091c <fsm_pedestrian_run+0x8c>
			set_off_pedes();
 80008aa:	f001 fbad 	bl	8002008 <set_off_pedes>
			break;
 80008ae:	e038      	b.n	8000922 <fsm_pedestrian_run+0x92>
			set_red_pedes();
 80008b0:	f001 fbbe 	bl	8002030 <set_red_pedes>
			if (timer30_flag == 1){
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <fsm_pedestrian_run+0x9c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d102      	bne.n	80008c2 <fsm_pedestrian_run+0x32>
				status_pedestrian_light = pedes_off;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <fsm_pedestrian_run+0x98>)
 80008be:	2282      	movs	r2, #130	; 0x82
 80008c0:	601a      	str	r2, [r3, #0]
			if (status_traffic_blink_horizontal == red_horizontal)
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <fsm_pedestrian_run+0xa0>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b14      	cmp	r3, #20
 80008c8:	d103      	bne.n	80008d2 <fsm_pedestrian_run+0x42>
				status_pedestrian_light = pedes_green;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <fsm_pedestrian_run+0x98>)
 80008cc:	2284      	movs	r2, #132	; 0x84
 80008ce:	601a      	str	r2, [r3, #0]
			break;
 80008d0:	e027      	b.n	8000922 <fsm_pedestrian_run+0x92>
				status_pedestrian_light = pedes_red;
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <fsm_pedestrian_run+0x98>)
 80008d4:	2283      	movs	r2, #131	; 0x83
 80008d6:	601a      	str	r2, [r3, #0]
			break;
 80008d8:	e023      	b.n	8000922 <fsm_pedestrian_run+0x92>
			set_green_pedes();
 80008da:	f001 fbbd 	bl	8002058 <set_green_pedes>
			if (status_traffic_blink_horizontal == red_horizontal){
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <fsm_pedestrian_run+0xa0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b14      	cmp	r3, #20
 80008e4:	d103      	bne.n	80008ee <fsm_pedestrian_run+0x5e>
				status_pedestrian_light = pedes_green;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <fsm_pedestrian_run+0x98>)
 80008e8:	2284      	movs	r2, #132	; 0x84
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	e002      	b.n	80008f4 <fsm_pedestrian_run+0x64>
				status_pedestrian_light = pedes_red;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <fsm_pedestrian_run+0x98>)
 80008f0:	2283      	movs	r2, #131	; 0x83
 80008f2:	601a      	str	r2, [r3, #0]
			if (time_red_horizontal_temp < 4){ //buzzer bip louder + faster
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <fsm_pedestrian_run+0xa4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	dc11      	bgt.n	8000920 <fsm_pedestrian_run+0x90>
				FSM_Buzzer_State = ON;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <fsm_pedestrian_run+0xa8>)
 80008fe:	2201      	movs	r2, #1
 8000900:	601a      	str	r2, [r3, #0]
				setTimer31(TICK);
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <fsm_pedestrian_run+0xac>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 ffbe 	bl	8001888 <setTimer31>
				if (time_red_horizontal_temp == 0){
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <fsm_pedestrian_run+0xa4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d105      	bne.n	8000920 <fsm_pedestrian_run+0x90>
					FSM_Buzzer_State=OFF;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <fsm_pedestrian_run+0xa8>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
			break;
 800091a:	e001      	b.n	8000920 <fsm_pedestrian_run+0x90>
			break;
 800091c:	bf00      	nop
 800091e:	e000      	b.n	8000922 <fsm_pedestrian_run+0x92>
			break;
 8000920:	bf00      	nop
	}
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000050 	.word	0x20000050
 800092c:	20000144 	.word	0x20000144
 8000930:	20000054 	.word	0x20000054
 8000934:	20000070 	.word	0x20000070
 8000938:	200000e8 	.word	0x200000e8
 800093c:	20000098 	.word	0x20000098

08000940 <fsm_system_run>:
#include "fsm_traffic_blink.h"
#include "fsm_mannual.h"
#include "software_timer.h"


fsm_system_run(){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	switch(status_system){
 8000944:	4b8c      	ldr	r3, [pc, #560]	; (8000b78 <fsm_system_run+0x238>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b04      	cmp	r3, #4
 800094a:	dc13      	bgt.n	8000974 <fsm_system_run+0x34>
 800094c:	2b00      	cmp	r3, #0
 800094e:	f2c0 8192 	blt.w	8000c76 <fsm_system_run+0x336>
 8000952:	2b04      	cmp	r3, #4
 8000954:	f200 818f 	bhi.w	8000c76 <fsm_system_run+0x336>
 8000958:	a201      	add	r2, pc, #4	; (adr r2, 8000960 <fsm_system_run+0x20>)
 800095a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095e:	bf00      	nop
 8000960:	0800097b 	.word	0x0800097b
 8000964:	08000983 	.word	0x08000983
 8000968:	08000a4f 	.word	0x08000a4f
 800096c:	08000ae5 	.word	0x08000ae5
 8000970:	08000bc9 	.word	0x08000bc9
 8000974:	2b5f      	cmp	r3, #95	; 0x5f
 8000976:	d057      	beq.n	8000a28 <fsm_system_run+0xe8>
				status_traffic_blink_vertical = init_vertical;
				status_system = INIT;
			}
			break;
	}
}
 8000978:	e17d      	b.n	8000c76 <fsm_system_run+0x336>
			status_system = MODE1;
 800097a:	4b7f      	ldr	r3, [pc, #508]	; (8000b78 <fsm_system_run+0x238>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
			break;
 8000980:	e179      	b.n	8000c76 <fsm_system_run+0x336>
			status_traffic_horizontal = display_traffic_horizontal;
 8000982:	4b7e      	ldr	r3, [pc, #504]	; (8000b7c <fsm_system_run+0x23c>)
 8000984:	2205      	movs	r2, #5
 8000986:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = display_traffic_vertical;
 8000988:	4b7d      	ldr	r3, [pc, #500]	; (8000b80 <fsm_system_run+0x240>)
 800098a:	2209      	movs	r2, #9
 800098c:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_countDown_horizontal;
 800098e:	4b7d      	ldr	r3, [pc, #500]	; (8000b84 <fsm_system_run+0x244>)
 8000990:	220b      	movs	r2, #11
 8000992:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_countDown_vertical;
 8000994:	4b7c      	ldr	r3, [pc, #496]	; (8000b88 <fsm_system_run+0x248>)
 8000996:	220f      	movs	r2, #15
 8000998:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 800099a:	f7ff fbd7 	bl	800014c <isButton_BUT1_Pressed>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d105      	bne.n	80009b0 <fsm_system_run+0x70>
				status_system = MODE2;
 80009a4:	4b74      	ldr	r3, [pc, #464]	; (8000b78 <fsm_system_run+0x238>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	601a      	str	r2, [r3, #0]
				status_pedestrian_light = pedes_off;
 80009aa:	4b78      	ldr	r3, [pc, #480]	; (8000b8c <fsm_system_run+0x24c>)
 80009ac:	2282      	movs	r2, #130	; 0x82
 80009ae:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 80009b0:	f7ff fbde 	bl	8000170 <isButton_BUT2_Pressed>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d105      	bne.n	80009c6 <fsm_system_run+0x86>
				status_system = MAN_MODE;
 80009ba:	4b6f      	ldr	r3, [pc, #444]	; (8000b78 <fsm_system_run+0x238>)
 80009bc:	225f      	movs	r2, #95	; 0x5f
 80009be:	601a      	str	r2, [r3, #0]
				status_pedestrian_light = pedes_off;
 80009c0:	4b72      	ldr	r3, [pc, #456]	; (8000b8c <fsm_system_run+0x24c>)
 80009c2:	2282      	movs	r2, #130	; 0x82
 80009c4:	601a      	str	r2, [r3, #0]
			if (isButton_Pedes_Pressed() == 1 ){
 80009c6:	f7ff fbf7 	bl	80001b8 <isButton_Pedes_Pressed>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d11f      	bne.n	8000a10 <fsm_system_run+0xd0>
				FSM_Buzzer_State = ON;
 80009d0:	4b6f      	ldr	r3, [pc, #444]	; (8000b90 <fsm_system_run+0x250>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
				setTimer31(1);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f000 ff56 	bl	8001888 <setTimer31>
				setTimer30(2000*(time_red_horizontal+time_green_horizontal+time_yellow_horizontal));
 80009dc:	4b6d      	ldr	r3, [pc, #436]	; (8000b94 <fsm_system_run+0x254>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b6d      	ldr	r3, [pc, #436]	; (8000b98 <fsm_system_run+0x258>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	441a      	add	r2, r3
 80009e6:	4b6d      	ldr	r3, [pc, #436]	; (8000b9c <fsm_system_run+0x25c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009f0:	fb02 f303 	mul.w	r3, r2, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 ff2d 	bl	8001854 <setTimer30>
				if (status_traffic_blink_horizontal == red_horizontal){
 80009fa:	4b69      	ldr	r3, [pc, #420]	; (8000ba0 <fsm_system_run+0x260>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b14      	cmp	r3, #20
 8000a00:	d103      	bne.n	8000a0a <fsm_system_run+0xca>
					status_pedestrian_light = pedes_green;
 8000a02:	4b62      	ldr	r3, [pc, #392]	; (8000b8c <fsm_system_run+0x24c>)
 8000a04:	2284      	movs	r2, #132	; 0x84
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	e002      	b.n	8000a10 <fsm_system_run+0xd0>
					status_pedestrian_light = pedes_red;
 8000a0a:	4b60      	ldr	r3, [pc, #384]	; (8000b8c <fsm_system_run+0x24c>)
 8000a0c:	2283      	movs	r2, #131	; 0x83
 8000a0e:	601a      	str	r2, [r3, #0]
			if (timer30_flag == 1){
 8000a10:	4b64      	ldr	r3, [pc, #400]	; (8000ba4 <fsm_system_run+0x264>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	f040 8127 	bne.w	8000c68 <fsm_system_run+0x328>
				status_pedestrian_light = pedes_off;
 8000a1a:	4b5c      	ldr	r3, [pc, #368]	; (8000b8c <fsm_system_run+0x24c>)
 8000a1c:	2282      	movs	r2, #130	; 0x82
 8000a1e:	601a      	str	r2, [r3, #0]
				FSM_Buzzer_State = OFF;
 8000a20:	4b5b      	ldr	r3, [pc, #364]	; (8000b90 <fsm_system_run+0x250>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
			break;
 8000a26:	e11f      	b.n	8000c68 <fsm_system_run+0x328>
			fsm_mannual_run();
 8000a28:	f7ff fe7c 	bl	8000724 <fsm_mannual_run>
			status_7SEG_horizontal = off_horizontal;
 8000a2c:	4b55      	ldr	r3, [pc, #340]	; (8000b84 <fsm_system_run+0x244>)
 8000a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a32:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = off_vertical;
 8000a34:	4b54      	ldr	r3, [pc, #336]	; (8000b88 <fsm_system_run+0x248>)
 8000a36:	f06f 0201 	mvn.w	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
			status_traffic_horizontal = mannual_horizontal;
 8000a3c:	4b4f      	ldr	r3, [pc, #316]	; (8000b7c <fsm_system_run+0x23c>)
 8000a3e:	f06f 0202 	mvn.w	r2, #2
 8000a42:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = mannual_vertical;
 8000a44:	4b4e      	ldr	r3, [pc, #312]	; (8000b80 <fsm_system_run+0x240>)
 8000a46:	f06f 0203 	mvn.w	r2, #3
 8000a4a:	601a      	str	r2, [r3, #0]
			break;
 8000a4c:	e113      	b.n	8000c76 <fsm_system_run+0x336>
			status_traffic_horizontal = modifying_led_red_horizontal;
 8000a4e:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <fsm_system_run+0x23c>)
 8000a50:	2206      	movs	r2, #6
 8000a52:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_red_vertical;
 8000a54:	4b4a      	ldr	r3, [pc, #296]	; (8000b80 <fsm_system_run+0x240>)
 8000a56:	221e      	movs	r2, #30
 8000a58:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode02;
 8000a5a:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <fsm_system_run+0x244>)
 8000a5c:	220c      	movs	r2, #12
 8000a5e:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000a60:	4b49      	ldr	r3, [pc, #292]	; (8000b88 <fsm_system_run+0x248>)
 8000a62:	2210      	movs	r2, #16
 8000a64:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000a66:	f7ff fb83 	bl	8000170 <isButton_BUT2_Pressed>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d109      	bne.n	8000a84 <fsm_system_run+0x144>
				time_red_horizontal++;
 8000a70:	4b48      	ldr	r3, [pc, #288]	; (8000b94 <fsm_system_run+0x254>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a47      	ldr	r2, [pc, #284]	; (8000b94 <fsm_system_run+0x254>)
 8000a78:	6013      	str	r3, [r2, #0]
				time_red_vertical++;
 8000a7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ba8 <fsm_system_run+0x268>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	4a49      	ldr	r2, [pc, #292]	; (8000ba8 <fsm_system_run+0x268>)
 8000a82:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_red_vertical/10;
 8000a84:	4b48      	ldr	r3, [pc, #288]	; (8000ba8 <fsm_system_run+0x268>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a48      	ldr	r2, [pc, #288]	; (8000bac <fsm_system_run+0x26c>)
 8000a8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8e:	1092      	asrs	r2, r2, #2
 8000a90:	17db      	asrs	r3, r3, #31
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	4a46      	ldr	r2, [pc, #280]	; (8000bb0 <fsm_system_run+0x270>)
 8000a96:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical%10;
 8000a98:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <fsm_system_run+0x268>)
 8000a9a:	6819      	ldr	r1, [r3, #0]
 8000a9c:	4b43      	ldr	r3, [pc, #268]	; (8000bac <fsm_system_run+0x26c>)
 8000a9e:	fb83 2301 	smull	r2, r3, r3, r1
 8000aa2:	109a      	asrs	r2, r3, #2
 8000aa4:	17cb      	asrs	r3, r1, #31
 8000aa6:	1ad2      	subs	r2, r2, r3
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	4413      	add	r3, r2
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	1aca      	subs	r2, r1, r3
 8000ab2:	4b3f      	ldr	r3, [pc, #252]	; (8000bb0 <fsm_system_run+0x270>)
 8000ab4:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000ab6:	f7ff fb6d 	bl	8000194 <isButton_BUT3_Pressed>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d107      	bne.n	8000ad0 <fsm_system_run+0x190>
				time_red_horizontal_temp= time_red_horizontal;
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <fsm_system_run+0x254>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a3b      	ldr	r2, [pc, #236]	; (8000bb4 <fsm_system_run+0x274>)
 8000ac6:	6013      	str	r3, [r2, #0]
				time_red_vertical_temp= time_red_vertical;
 8000ac8:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <fsm_system_run+0x268>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a3a      	ldr	r2, [pc, #232]	; (8000bb8 <fsm_system_run+0x278>)
 8000ace:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000ad0:	f7ff fb3c 	bl	800014c <isButton_BUT1_Pressed>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	f040 80c8 	bne.w	8000c6c <fsm_system_run+0x32c>
				status_system = MODE3;
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <fsm_system_run+0x238>)
 8000ade:	2203      	movs	r2, #3
 8000ae0:	601a      	str	r2, [r3, #0]
			break;
 8000ae2:	e0c3      	b.n	8000c6c <fsm_system_run+0x32c>
			status_traffic_horizontal = modifying_led_yellow_horizontal;
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <fsm_system_run+0x23c>)
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_yellow_vertical;
 8000aea:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <fsm_system_run+0x240>)
 8000aec:	2220      	movs	r2, #32
 8000aee:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode03;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <fsm_system_run+0x244>)
 8000af2:	220d      	movs	r2, #13
 8000af4:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000af6:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <fsm_system_run+0x248>)
 8000af8:	2210      	movs	r2, #16
 8000afa:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000afc:	f7ff fb38 	bl	8000170 <isButton_BUT2_Pressed>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d109      	bne.n	8000b1a <fsm_system_run+0x1da>
				time_yellow_horizontal++;
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <fsm_system_run+0x25c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a23      	ldr	r2, [pc, #140]	; (8000b9c <fsm_system_run+0x25c>)
 8000b0e:	6013      	str	r3, [r2, #0]
				time_yellow_vertical++;
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <fsm_system_run+0x27c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4a29      	ldr	r2, [pc, #164]	; (8000bbc <fsm_system_run+0x27c>)
 8000b18:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_yellow_vertical/10;
 8000b1a:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <fsm_system_run+0x27c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a23      	ldr	r2, [pc, #140]	; (8000bac <fsm_system_run+0x26c>)
 8000b20:	fb82 1203 	smull	r1, r2, r2, r3
 8000b24:	1092      	asrs	r2, r2, #2
 8000b26:	17db      	asrs	r3, r3, #31
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	4a21      	ldr	r2, [pc, #132]	; (8000bb0 <fsm_system_run+0x270>)
 8000b2c:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical%10;
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <fsm_system_run+0x27c>)
 8000b30:	6819      	ldr	r1, [r3, #0]
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <fsm_system_run+0x26c>)
 8000b34:	fb83 2301 	smull	r2, r3, r3, r1
 8000b38:	109a      	asrs	r2, r3, #2
 8000b3a:	17cb      	asrs	r3, r1, #31
 8000b3c:	1ad2      	subs	r2, r2, r3
 8000b3e:	4613      	mov	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4413      	add	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	1aca      	subs	r2, r1, r3
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <fsm_system_run+0x270>)
 8000b4a:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000b4c:	f7ff fb22 	bl	8000194 <isButton_BUT3_Pressed>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d107      	bne.n	8000b66 <fsm_system_run+0x226>
				time_yellow_horizontal_temp= time_yellow_horizontal;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <fsm_system_run+0x25c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <fsm_system_run+0x280>)
 8000b5c:	6013      	str	r3, [r2, #0]
				time_yellow_vertical_temp= time_yellow_vertical;
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <fsm_system_run+0x27c>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <fsm_system_run+0x284>)
 8000b64:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000b66:	f7ff faf1 	bl	800014c <isButton_BUT1_Pressed>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d17f      	bne.n	8000c70 <fsm_system_run+0x330>
				status_system = MODE4;
 8000b70:	4b01      	ldr	r3, [pc, #4]	; (8000b78 <fsm_system_run+0x238>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	601a      	str	r2, [r3, #0]
			break;
 8000b76:	e07b      	b.n	8000c70 <fsm_system_run+0x330>
 8000b78:	200000e4 	.word	0x200000e4
 8000b7c:	2000005c 	.word	0x2000005c
 8000b80:	20000060 	.word	0x20000060
 8000b84:	20000044 	.word	0x20000044
 8000b88:	20000048 	.word	0x20000048
 8000b8c:	20000050 	.word	0x20000050
 8000b90:	200000e8 	.word	0x200000e8
 8000b94:	20000064 	.word	0x20000064
 8000b98:	20000068 	.word	0x20000068
 8000b9c:	2000006c 	.word	0x2000006c
 8000ba0:	20000054 	.word	0x20000054
 8000ba4:	20000144 	.word	0x20000144
 8000ba8:	20000084 	.word	0x20000084
 8000bac:	66666667 	.word	0x66666667
 8000bb0:	20000184 	.word	0x20000184
 8000bb4:	20000070 	.word	0x20000070
 8000bb8:	20000090 	.word	0x20000090
 8000bbc:	20000080 	.word	0x20000080
 8000bc0:	20000078 	.word	0x20000078
 8000bc4:	2000008c 	.word	0x2000008c
			status_traffic_horizontal = modifying_led_green_horizontal;
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <fsm_system_run+0x33c>)
 8000bca:	2207      	movs	r2, #7
 8000bcc:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_green_vertical;
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <fsm_system_run+0x340>)
 8000bd0:	221f      	movs	r2, #31
 8000bd2:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode04;
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <fsm_system_run+0x344>)
 8000bd6:	220e      	movs	r2, #14
 8000bd8:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000bda:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <fsm_system_run+0x348>)
 8000bdc:	2210      	movs	r2, #16
 8000bde:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000be0:	f7ff fac6 	bl	8000170 <isButton_BUT2_Pressed>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d109      	bne.n	8000bfe <fsm_system_run+0x2be>
				time_green_horizontal++;
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <fsm_system_run+0x34c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <fsm_system_run+0x34c>)
 8000bf2:	6013      	str	r3, [r2, #0]
				time_green_vertical++;
 8000bf4:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <fsm_system_run+0x350>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	4a25      	ldr	r2, [pc, #148]	; (8000c90 <fsm_system_run+0x350>)
 8000bfc:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_green_vertical/10;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <fsm_system_run+0x350>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a24      	ldr	r2, [pc, #144]	; (8000c94 <fsm_system_run+0x354>)
 8000c04:	fb82 1203 	smull	r1, r2, r2, r3
 8000c08:	1092      	asrs	r2, r2, #2
 8000c0a:	17db      	asrs	r3, r3, #31
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	4a22      	ldr	r2, [pc, #136]	; (8000c98 <fsm_system_run+0x358>)
 8000c10:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical%10;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <fsm_system_run+0x350>)
 8000c14:	6819      	ldr	r1, [r3, #0]
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <fsm_system_run+0x354>)
 8000c18:	fb83 2301 	smull	r2, r3, r3, r1
 8000c1c:	109a      	asrs	r2, r3, #2
 8000c1e:	17cb      	asrs	r3, r1, #31
 8000c20:	1ad2      	subs	r2, r2, r3
 8000c22:	4613      	mov	r3, r2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	1aca      	subs	r2, r1, r3
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <fsm_system_run+0x358>)
 8000c2e:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000c30:	f7ff fab0 	bl	8000194 <isButton_BUT3_Pressed>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d107      	bne.n	8000c4a <fsm_system_run+0x30a>
				time_green_horizontal_temp= time_green_horizontal;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <fsm_system_run+0x34c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <fsm_system_run+0x35c>)
 8000c40:	6013      	str	r3, [r2, #0]
				time_green_vertical_temp= time_green_vertical;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <fsm_system_run+0x350>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <fsm_system_run+0x360>)
 8000c48:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000c4a:	f7ff fa7f 	bl	800014c <isButton_BUT1_Pressed>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d10f      	bne.n	8000c74 <fsm_system_run+0x334>
				status_traffic_blink_horizontal = init_horizontal;
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <fsm_system_run+0x364>)
 8000c56:	2213      	movs	r2, #19
 8000c58:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000c5a:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <fsm_system_run+0x368>)
 8000c5c:	2217      	movs	r2, #23
 8000c5e:	601a      	str	r2, [r3, #0]
				status_system = INIT;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <fsm_system_run+0x36c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
			break;
 8000c66:	e005      	b.n	8000c74 <fsm_system_run+0x334>
			break;
 8000c68:	bf00      	nop
 8000c6a:	e004      	b.n	8000c76 <fsm_system_run+0x336>
			break;
 8000c6c:	bf00      	nop
 8000c6e:	e002      	b.n	8000c76 <fsm_system_run+0x336>
			break;
 8000c70:	bf00      	nop
 8000c72:	e000      	b.n	8000c76 <fsm_system_run+0x336>
			break;
 8000c74:	bf00      	nop
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000005c 	.word	0x2000005c
 8000c80:	20000060 	.word	0x20000060
 8000c84:	20000044 	.word	0x20000044
 8000c88:	20000048 	.word	0x20000048
 8000c8c:	20000068 	.word	0x20000068
 8000c90:	2000007c 	.word	0x2000007c
 8000c94:	66666667 	.word	0x66666667
 8000c98:	20000184 	.word	0x20000184
 8000c9c:	20000074 	.word	0x20000074
 8000ca0:	20000088 	.word	0x20000088
 8000ca4:	20000054 	.word	0x20000054
 8000ca8:	20000058 	.word	0x20000058
 8000cac:	200000e4 	.word	0x200000e4

08000cb0 <fsm_traffic_blink_horizontal_run>:
#include "control_7SEG.h"

int status_traffic_blink_horizontal = init_horizontal;
int status_traffic_blink_vertical = init_vertical;

void fsm_traffic_blink_horizontal_run(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_horizontal){
 8000cb4:	4b85      	ldr	r3, [pc, #532]	; (8000ecc <fsm_traffic_blink_horizontal_run+0x21c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3b13      	subs	r3, #19
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	f200 80fd 	bhi.w	8000eba <fsm_traffic_blink_horizontal_run+0x20a>
 8000cc0:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <fsm_traffic_blink_horizontal_run+0x18>)
 8000cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc6:	bf00      	nop
 8000cc8:	08000cd9 	.word	0x08000cd9
 8000ccc:	08000d03 	.word	0x08000d03
 8000cd0:	08000d97 	.word	0x08000d97
 8000cd4:	08000e29 	.word	0x08000e29
		case init_horizontal:
			status_traffic_blink_horizontal = red_horizontal;
 8000cd8:	4b7c      	ldr	r3, [pc, #496]	; (8000ecc <fsm_traffic_blink_horizontal_run+0x21c>)
 8000cda:	2214      	movs	r2, #20
 8000cdc:	601a      	str	r2, [r3, #0]
			traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000cde:	4b7c      	ldr	r3, [pc, #496]	; (8000ed0 <fsm_traffic_blink_horizontal_run+0x220>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	4a7a      	ldr	r2, [pc, #488]	; (8000ed4 <fsm_traffic_blink_horizontal_run+0x224>)
 8000cec:	6013      	str	r3, [r2, #0]
			//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
			setTimer1(traffic_buffer_horizontal[0]);
 8000cee:	4b79      	ldr	r3, [pc, #484]	; (8000ed4 <fsm_traffic_blink_horizontal_run+0x224>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 fcaa 	bl	800164c <setTimer1>
			setTimer3(1000);// count down as a clock
 8000cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfc:	f000 fcda 	bl	80016b4 <setTimer3>
			break;
 8000d00:	e0e2      	b.n	8000ec8 <fsm_traffic_blink_horizontal_run+0x218>
		case red_horizontal:
			setRed_horizontal();
 8000d02:	f001 f85b 	bl	8001dbc <setRed_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_red_horizontal_temp/10;
 8000d06:	4b74      	ldr	r3, [pc, #464]	; (8000ed8 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a74      	ldr	r2, [pc, #464]	; (8000edc <fsm_traffic_blink_horizontal_run+0x22c>)
 8000d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d10:	1092      	asrs	r2, r2, #2
 8000d12:	17db      	asrs	r3, r3, #31
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	4a72      	ldr	r2, [pc, #456]	; (8000ee0 <fsm_traffic_blink_horizontal_run+0x230>)
 8000d18:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_red_horizontal_temp%10;
 8000d1a:	4b6f      	ldr	r3, [pc, #444]	; (8000ed8 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d1c:	6819      	ldr	r1, [r3, #0]
 8000d1e:	4b6f      	ldr	r3, [pc, #444]	; (8000edc <fsm_traffic_blink_horizontal_run+0x22c>)
 8000d20:	fb83 2301 	smull	r2, r3, r3, r1
 8000d24:	109a      	asrs	r2, r3, #2
 8000d26:	17cb      	asrs	r3, r1, #31
 8000d28:	1ad2      	subs	r2, r2, r3
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	4413      	add	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	1aca      	subs	r2, r1, r3
 8000d34:	4b6a      	ldr	r3, [pc, #424]	; (8000ee0 <fsm_traffic_blink_horizontal_run+0x230>)
 8000d36:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000d38:	4b6a      	ldr	r3, [pc, #424]	; (8000ee4 <fsm_traffic_blink_horizontal_run+0x234>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d110      	bne.n	8000d62 <fsm_traffic_blink_horizontal_run+0xb2>
				time_red_horizontal_temp--;
 8000d40:	4b65      	ldr	r3, [pc, #404]	; (8000ed8 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a64      	ldr	r2, [pc, #400]	; (8000ed8 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d48:	6013      	str	r3, [r2, #0]
				if(time_red_horizontal_temp == 0){
 8000d4a:	4b63      	ldr	r3, [pc, #396]	; (8000ed8 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <fsm_traffic_blink_horizontal_run+0xaa>
					time_red_horizontal_temp = time_red_horizontal;
 8000d52:	4b5f      	ldr	r3, [pc, #380]	; (8000ed0 <fsm_traffic_blink_horizontal_run+0x220>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a60      	ldr	r2, [pc, #384]	; (8000ed8 <fsm_traffic_blink_horizontal_run+0x228>)
 8000d58:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5e:	f000 fca9 	bl	80016b4 <setTimer3>
			}

			if(timer1_flag == 1){
 8000d62:	4b61      	ldr	r3, [pc, #388]	; (8000ee8 <fsm_traffic_blink_horizontal_run+0x238>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	f040 80a9 	bne.w	8000ebe <fsm_traffic_blink_horizontal_run+0x20e>
				status_traffic_blink_horizontal = green_horizontal;
 8000d6c:	4b57      	ldr	r3, [pc, #348]	; (8000ecc <fsm_traffic_blink_horizontal_run+0x21c>)
 8000d6e:	2215      	movs	r2, #21
 8000d70:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[1] = time_green_horizontal*1000;
 8000d72:	4b5e      	ldr	r3, [pc, #376]	; (8000eec <fsm_traffic_blink_horizontal_run+0x23c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d7a:	fb02 f303 	mul.w	r3, r2, r3
 8000d7e:	4a55      	ldr	r2, [pc, #340]	; (8000ed4 <fsm_traffic_blink_horizontal_run+0x224>)
 8000d80:	6053      	str	r3, [r2, #4]
				//led green will turn on in traffic_buffer_horizontal[1]/1000 seconds
				setTimer1(traffic_buffer_horizontal[1]);
 8000d82:	4b54      	ldr	r3, [pc, #336]	; (8000ed4 <fsm_traffic_blink_horizontal_run+0x224>)
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 fc60 	bl	800164c <setTimer1>
				setTimer3(1000);
 8000d8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d90:	f000 fc90 	bl	80016b4 <setTimer3>
			}
			break;
 8000d94:	e093      	b.n	8000ebe <fsm_traffic_blink_horizontal_run+0x20e>
		case green_horizontal:
			setGreen_horizontal();
 8000d96:	f001 f825 	bl	8001de4 <setGreen_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_green_horizontal_temp/10;
 8000d9a:	4b55      	ldr	r3, [pc, #340]	; (8000ef0 <fsm_traffic_blink_horizontal_run+0x240>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a4f      	ldr	r2, [pc, #316]	; (8000edc <fsm_traffic_blink_horizontal_run+0x22c>)
 8000da0:	fb82 1203 	smull	r1, r2, r2, r3
 8000da4:	1092      	asrs	r2, r2, #2
 8000da6:	17db      	asrs	r3, r3, #31
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <fsm_traffic_blink_horizontal_run+0x230>)
 8000dac:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_green_horizontal_temp%10;
 8000dae:	4b50      	ldr	r3, [pc, #320]	; (8000ef0 <fsm_traffic_blink_horizontal_run+0x240>)
 8000db0:	6819      	ldr	r1, [r3, #0]
 8000db2:	4b4a      	ldr	r3, [pc, #296]	; (8000edc <fsm_traffic_blink_horizontal_run+0x22c>)
 8000db4:	fb83 2301 	smull	r2, r3, r3, r1
 8000db8:	109a      	asrs	r2, r3, #2
 8000dba:	17cb      	asrs	r3, r1, #31
 8000dbc:	1ad2      	subs	r2, r2, r3
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	1aca      	subs	r2, r1, r3
 8000dc8:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <fsm_traffic_blink_horizontal_run+0x230>)
 8000dca:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000dcc:	4b45      	ldr	r3, [pc, #276]	; (8000ee4 <fsm_traffic_blink_horizontal_run+0x234>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d110      	bne.n	8000df6 <fsm_traffic_blink_horizontal_run+0x146>
				time_green_horizontal_temp--;
 8000dd4:	4b46      	ldr	r3, [pc, #280]	; (8000ef0 <fsm_traffic_blink_horizontal_run+0x240>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	4a45      	ldr	r2, [pc, #276]	; (8000ef0 <fsm_traffic_blink_horizontal_run+0x240>)
 8000ddc:	6013      	str	r3, [r2, #0]
				if(time_green_horizontal_temp == 0){
 8000dde:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <fsm_traffic_blink_horizontal_run+0x240>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d103      	bne.n	8000dee <fsm_traffic_blink_horizontal_run+0x13e>
					time_green_horizontal_temp = time_green_horizontal;
 8000de6:	4b41      	ldr	r3, [pc, #260]	; (8000eec <fsm_traffic_blink_horizontal_run+0x23c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a41      	ldr	r2, [pc, #260]	; (8000ef0 <fsm_traffic_blink_horizontal_run+0x240>)
 8000dec:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000dee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df2:	f000 fc5f 	bl	80016b4 <setTimer3>
			}

			if(timer1_flag == 1){
 8000df6:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <fsm_traffic_blink_horizontal_run+0x238>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d161      	bne.n	8000ec2 <fsm_traffic_blink_horizontal_run+0x212>
				status_traffic_blink_horizontal = yellow_horizontal;
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <fsm_traffic_blink_horizontal_run+0x21c>)
 8000e00:	2216      	movs	r2, #22
 8000e02:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[2] = time_yellow_horizontal*1000;
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <fsm_traffic_blink_horizontal_run+0x244>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	4a30      	ldr	r2, [pc, #192]	; (8000ed4 <fsm_traffic_blink_horizontal_run+0x224>)
 8000e12:	6093      	str	r3, [r2, #8]
				//led yellow will turn on in traffic_buffer_horizontal[2]/1000 seconds
				setTimer1(traffic_buffer_horizontal[2]);
 8000e14:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <fsm_traffic_blink_horizontal_run+0x224>)
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fc17 	bl	800164c <setTimer1>
				setTimer3(1000);
 8000e1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e22:	f000 fc47 	bl	80016b4 <setTimer3>
			}
			break;
 8000e26:	e04c      	b.n	8000ec2 <fsm_traffic_blink_horizontal_run+0x212>
		case yellow_horizontal:
			setYellow_horizontal();
 8000e28:	f000 fff0 	bl	8001e0c <setYellow_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_yellow_horizontal_temp/10;
 8000e2c:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <fsm_traffic_blink_horizontal_run+0x248>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a2a      	ldr	r2, [pc, #168]	; (8000edc <fsm_traffic_blink_horizontal_run+0x22c>)
 8000e32:	fb82 1203 	smull	r1, r2, r2, r3
 8000e36:	1092      	asrs	r2, r2, #2
 8000e38:	17db      	asrs	r3, r3, #31
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <fsm_traffic_blink_horizontal_run+0x230>)
 8000e3e:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_yellow_horizontal_temp%10;
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <fsm_traffic_blink_horizontal_run+0x248>)
 8000e42:	6819      	ldr	r1, [r3, #0]
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <fsm_traffic_blink_horizontal_run+0x22c>)
 8000e46:	fb83 2301 	smull	r2, r3, r3, r1
 8000e4a:	109a      	asrs	r2, r3, #2
 8000e4c:	17cb      	asrs	r3, r1, #31
 8000e4e:	1ad2      	subs	r2, r2, r3
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	1aca      	subs	r2, r1, r3
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <fsm_traffic_blink_horizontal_run+0x230>)
 8000e5c:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <fsm_traffic_blink_horizontal_run+0x234>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d110      	bne.n	8000e88 <fsm_traffic_blink_horizontal_run+0x1d8>
				time_yellow_horizontal_temp--;
 8000e66:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <fsm_traffic_blink_horizontal_run+0x248>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <fsm_traffic_blink_horizontal_run+0x248>)
 8000e6e:	6013      	str	r3, [r2, #0]
				if(time_yellow_horizontal_temp == 0){
 8000e70:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <fsm_traffic_blink_horizontal_run+0x248>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d103      	bne.n	8000e80 <fsm_traffic_blink_horizontal_run+0x1d0>
					time_yellow_horizontal_temp = time_yellow_horizontal;
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <fsm_traffic_blink_horizontal_run+0x244>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <fsm_traffic_blink_horizontal_run+0x248>)
 8000e7e:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8000e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e84:	f000 fc16 	bl	80016b4 <setTimer3>
			}

			if(timer1_flag == 1){
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <fsm_traffic_blink_horizontal_run+0x238>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d11a      	bne.n	8000ec6 <fsm_traffic_blink_horizontal_run+0x216>
				status_traffic_blink_horizontal = red_horizontal;
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <fsm_traffic_blink_horizontal_run+0x21c>)
 8000e92:	2214      	movs	r2, #20
 8000e94:	601a      	str	r2, [r3, #0]
				//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
				traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <fsm_traffic_blink_horizontal_run+0x220>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <fsm_traffic_blink_horizontal_run+0x224>)
 8000ea4:	6013      	str	r3, [r2, #0]
				setTimer1(traffic_buffer_horizontal[0]);
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <fsm_traffic_blink_horizontal_run+0x224>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fbce 	bl	800164c <setTimer1>
				setTimer3(1000);
 8000eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb4:	f000 fbfe 	bl	80016b4 <setTimer3>
			}
			break;
 8000eb8:	e005      	b.n	8000ec6 <fsm_traffic_blink_horizontal_run+0x216>
		default:
			break;
 8000eba:	bf00      	nop
 8000ebc:	e004      	b.n	8000ec8 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000ebe:	bf00      	nop
 8000ec0:	e002      	b.n	8000ec8 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000ec2:	bf00      	nop
 8000ec4:	e000      	b.n	8000ec8 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 8000ec6:	bf00      	nop
	}
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000054 	.word	0x20000054
 8000ed0:	20000064 	.word	0x20000064
 8000ed4:	20000164 	.word	0x20000164
 8000ed8:	20000070 	.word	0x20000070
 8000edc:	66666667 	.word	0x66666667
 8000ee0:	2000017c 	.word	0x2000017c
 8000ee4:	200000fc 	.word	0x200000fc
 8000ee8:	200000ec 	.word	0x200000ec
 8000eec:	20000068 	.word	0x20000068
 8000ef0:	20000074 	.word	0x20000074
 8000ef4:	2000006c 	.word	0x2000006c
 8000ef8:	20000078 	.word	0x20000078

08000efc <fsm_traffic_blink_vertical_run>:

void fsm_traffic_blink_vertical_run(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_vertical){
 8000f00:	4b89      	ldr	r3, [pc, #548]	; (8001128 <fsm_traffic_blink_vertical_run+0x22c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3b17      	subs	r3, #23
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	f200 8105 	bhi.w	8001116 <fsm_traffic_blink_vertical_run+0x21a>
 8000f0c:	a201      	add	r2, pc, #4	; (adr r2, 8000f14 <fsm_traffic_blink_vertical_run+0x18>)
 8000f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f12:	bf00      	nop
 8000f14:	08000f25 	.word	0x08000f25
 8000f18:	08001085 	.word	0x08001085
 8000f1c:	08000f4f 	.word	0x08000f4f
 8000f20:	08000ff3 	.word	0x08000ff3
		case init_vertical:
			status_traffic_blink_vertical = green_vertical;
 8000f24:	4b80      	ldr	r3, [pc, #512]	; (8001128 <fsm_traffic_blink_vertical_run+0x22c>)
 8000f26:	2219      	movs	r2, #25
 8000f28:	601a      	str	r2, [r3, #0]
			traffic_buffer_vertical[0] = time_green_vertical*1000;
 8000f2a:	4b80      	ldr	r3, [pc, #512]	; (800112c <fsm_traffic_blink_vertical_run+0x230>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	4a7e      	ldr	r2, [pc, #504]	; (8001130 <fsm_traffic_blink_vertical_run+0x234>)
 8000f38:	6013      	str	r3, [r2, #0]
			setTimer2(traffic_buffer_vertical[0]);
 8000f3a:	4b7d      	ldr	r3, [pc, #500]	; (8001130 <fsm_traffic_blink_vertical_run+0x234>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fb9e 	bl	8001680 <setTimer2>
			setTimer5(1000);// count down as a clock
 8000f44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f48:	f000 fbe8 	bl	800171c <setTimer5>
			break;
 8000f4c:	e0ea      	b.n	8001124 <fsm_traffic_blink_vertical_run+0x228>
		case green_vertical:
			setGreen_vertical();
 8000f4e:	f000 ff81 	bl	8001e54 <setGreen_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_green_vertical_temp/10;
 8000f52:	4b78      	ldr	r3, [pc, #480]	; (8001134 <fsm_traffic_blink_vertical_run+0x238>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a78      	ldr	r2, [pc, #480]	; (8001138 <fsm_traffic_blink_vertical_run+0x23c>)
 8000f58:	fb82 1203 	smull	r1, r2, r2, r3
 8000f5c:	1092      	asrs	r2, r2, #2
 8000f5e:	17db      	asrs	r3, r3, #31
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	4a76      	ldr	r2, [pc, #472]	; (800113c <fsm_traffic_blink_vertical_run+0x240>)
 8000f64:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical_temp%10;
 8000f66:	4b73      	ldr	r3, [pc, #460]	; (8001134 <fsm_traffic_blink_vertical_run+0x238>)
 8000f68:	6819      	ldr	r1, [r3, #0]
 8000f6a:	4b73      	ldr	r3, [pc, #460]	; (8001138 <fsm_traffic_blink_vertical_run+0x23c>)
 8000f6c:	fb83 2301 	smull	r2, r3, r3, r1
 8000f70:	109a      	asrs	r2, r3, #2
 8000f72:	17cb      	asrs	r3, r1, #31
 8000f74:	1ad2      	subs	r2, r2, r3
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	1aca      	subs	r2, r1, r3
 8000f80:	4b6e      	ldr	r3, [pc, #440]	; (800113c <fsm_traffic_blink_vertical_run+0x240>)
 8000f82:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8000f84:	4b6e      	ldr	r3, [pc, #440]	; (8001140 <fsm_traffic_blink_vertical_run+0x244>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d118      	bne.n	8000fbe <fsm_traffic_blink_vertical_run+0xc2>
				time_green_vertical_temp--;
 8000f8c:	4b69      	ldr	r3, [pc, #420]	; (8001134 <fsm_traffic_blink_vertical_run+0x238>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	4a68      	ldr	r2, [pc, #416]	; (8001134 <fsm_traffic_blink_vertical_run+0x238>)
 8000f94:	6013      	str	r3, [r2, #0]
				if(time_green_vertical_temp != 0) setTimer5(1000);
 8000f96:	4b67      	ldr	r3, [pc, #412]	; (8001134 <fsm_traffic_blink_vertical_run+0x238>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <fsm_traffic_blink_vertical_run+0xaa>
 8000f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa2:	f000 fbbb 	bl	800171c <setTimer5>
				if(time_green_vertical_temp == 0){
 8000fa6:	4b63      	ldr	r3, [pc, #396]	; (8001134 <fsm_traffic_blink_vertical_run+0x238>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d103      	bne.n	8000fb6 <fsm_traffic_blink_vertical_run+0xba>
					time_green_vertical_temp = time_green_vertical;
 8000fae:	4b5f      	ldr	r3, [pc, #380]	; (800112c <fsm_traffic_blink_vertical_run+0x230>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a60      	ldr	r2, [pc, #384]	; (8001134 <fsm_traffic_blink_vertical_run+0x238>)
 8000fb4:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 8000fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fba:	f000 fbaf 	bl	800171c <setTimer5>
			}

			if(timer2_flag == 1){
 8000fbe:	4b61      	ldr	r3, [pc, #388]	; (8001144 <fsm_traffic_blink_vertical_run+0x248>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	f040 80a9 	bne.w	800111a <fsm_traffic_blink_vertical_run+0x21e>
				status_traffic_blink_vertical = yellow_vertical;
 8000fc8:	4b57      	ldr	r3, [pc, #348]	; (8001128 <fsm_traffic_blink_vertical_run+0x22c>)
 8000fca:	221a      	movs	r2, #26
 8000fcc:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[1] = time_yellow_vertical*1000;
 8000fce:	4b5e      	ldr	r3, [pc, #376]	; (8001148 <fsm_traffic_blink_vertical_run+0x24c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fd6:	fb02 f303 	mul.w	r3, r2, r3
 8000fda:	4a55      	ldr	r2, [pc, #340]	; (8001130 <fsm_traffic_blink_vertical_run+0x234>)
 8000fdc:	6053      	str	r3, [r2, #4]
				setTimer2(traffic_buffer_vertical[1]);
 8000fde:	4b54      	ldr	r3, [pc, #336]	; (8001130 <fsm_traffic_blink_vertical_run+0x234>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fb4c 	bl	8001680 <setTimer2>
				setTimer5(1000);
 8000fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fec:	f000 fb96 	bl	800171c <setTimer5>
			}
			break;
 8000ff0:	e093      	b.n	800111a <fsm_traffic_blink_vertical_run+0x21e>
		case yellow_vertical:
			setYellow_vertical();
 8000ff2:	f000 ff3f 	bl	8001e74 <setYellow_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_yellow_vertical_temp/10;
 8000ff6:	4b55      	ldr	r3, [pc, #340]	; (800114c <fsm_traffic_blink_vertical_run+0x250>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a4f      	ldr	r2, [pc, #316]	; (8001138 <fsm_traffic_blink_vertical_run+0x23c>)
 8000ffc:	fb82 1203 	smull	r1, r2, r2, r3
 8001000:	1092      	asrs	r2, r2, #2
 8001002:	17db      	asrs	r3, r3, #31
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	4a4d      	ldr	r2, [pc, #308]	; (800113c <fsm_traffic_blink_vertical_run+0x240>)
 8001008:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical_temp%10;
 800100a:	4b50      	ldr	r3, [pc, #320]	; (800114c <fsm_traffic_blink_vertical_run+0x250>)
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <fsm_traffic_blink_vertical_run+0x23c>)
 8001010:	fb83 2301 	smull	r2, r3, r3, r1
 8001014:	109a      	asrs	r2, r3, #2
 8001016:	17cb      	asrs	r3, r1, #31
 8001018:	1ad2      	subs	r2, r2, r3
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	1aca      	subs	r2, r1, r3
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <fsm_traffic_blink_vertical_run+0x240>)
 8001026:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8001028:	4b45      	ldr	r3, [pc, #276]	; (8001140 <fsm_traffic_blink_vertical_run+0x244>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d110      	bne.n	8001052 <fsm_traffic_blink_vertical_run+0x156>
				time_yellow_vertical_temp--;
 8001030:	4b46      	ldr	r3, [pc, #280]	; (800114c <fsm_traffic_blink_vertical_run+0x250>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	3b01      	subs	r3, #1
 8001036:	4a45      	ldr	r2, [pc, #276]	; (800114c <fsm_traffic_blink_vertical_run+0x250>)
 8001038:	6013      	str	r3, [r2, #0]
				if(time_yellow_vertical_temp == 0){
 800103a:	4b44      	ldr	r3, [pc, #272]	; (800114c <fsm_traffic_blink_vertical_run+0x250>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d103      	bne.n	800104a <fsm_traffic_blink_vertical_run+0x14e>
					time_yellow_vertical_temp = time_yellow_vertical;
 8001042:	4b41      	ldr	r3, [pc, #260]	; (8001148 <fsm_traffic_blink_vertical_run+0x24c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a41      	ldr	r2, [pc, #260]	; (800114c <fsm_traffic_blink_vertical_run+0x250>)
 8001048:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 800104a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104e:	f000 fb65 	bl	800171c <setTimer5>
			}

			if(timer2_flag == 1){
 8001052:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <fsm_traffic_blink_vertical_run+0x248>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d161      	bne.n	800111e <fsm_traffic_blink_vertical_run+0x222>
				status_traffic_blink_vertical = red_vertical;
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <fsm_traffic_blink_vertical_run+0x22c>)
 800105c:	2218      	movs	r2, #24
 800105e:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[2] = time_red_vertical*1000;
 8001060:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <fsm_traffic_blink_vertical_run+0x254>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	4a30      	ldr	r2, [pc, #192]	; (8001130 <fsm_traffic_blink_vertical_run+0x234>)
 800106e:	6093      	str	r3, [r2, #8]
				setTimer2(traffic_buffer_vertical[2]);
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <fsm_traffic_blink_vertical_run+0x234>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fb03 	bl	8001680 <setTimer2>
				setTimer5(1000);
 800107a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107e:	f000 fb4d 	bl	800171c <setTimer5>
			}
			break;
 8001082:	e04c      	b.n	800111e <fsm_traffic_blink_vertical_run+0x222>
		case red_vertical:
			setRed_vertical();
 8001084:	f000 fed6 	bl	8001e34 <setRed_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_red_vertical_temp/10;
 8001088:	4b32      	ldr	r3, [pc, #200]	; (8001154 <fsm_traffic_blink_vertical_run+0x258>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a2a      	ldr	r2, [pc, #168]	; (8001138 <fsm_traffic_blink_vertical_run+0x23c>)
 800108e:	fb82 1203 	smull	r1, r2, r2, r3
 8001092:	1092      	asrs	r2, r2, #2
 8001094:	17db      	asrs	r3, r3, #31
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	4a28      	ldr	r2, [pc, #160]	; (800113c <fsm_traffic_blink_vertical_run+0x240>)
 800109a:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical_temp%10;
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <fsm_traffic_blink_vertical_run+0x258>)
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <fsm_traffic_blink_vertical_run+0x23c>)
 80010a2:	fb83 2301 	smull	r2, r3, r3, r1
 80010a6:	109a      	asrs	r2, r3, #2
 80010a8:	17cb      	asrs	r3, r1, #31
 80010aa:	1ad2      	subs	r2, r2, r3
 80010ac:	4613      	mov	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	1aca      	subs	r2, r1, r3
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <fsm_traffic_blink_vertical_run+0x240>)
 80010b8:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 80010ba:	4b21      	ldr	r3, [pc, #132]	; (8001140 <fsm_traffic_blink_vertical_run+0x244>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d110      	bne.n	80010e4 <fsm_traffic_blink_vertical_run+0x1e8>
				time_red_vertical_temp--;
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <fsm_traffic_blink_vertical_run+0x258>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	4a22      	ldr	r2, [pc, #136]	; (8001154 <fsm_traffic_blink_vertical_run+0x258>)
 80010ca:	6013      	str	r3, [r2, #0]
				if(time_red_vertical_temp == 0){
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <fsm_traffic_blink_vertical_run+0x258>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d103      	bne.n	80010dc <fsm_traffic_blink_vertical_run+0x1e0>
					time_red_vertical_temp = time_red_vertical;
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <fsm_traffic_blink_vertical_run+0x254>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <fsm_traffic_blink_vertical_run+0x258>)
 80010da:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 80010dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010e0:	f000 fb1c 	bl	800171c <setTimer5>
			}

			if(timer2_flag == 1){
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <fsm_traffic_blink_vertical_run+0x248>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d11a      	bne.n	8001122 <fsm_traffic_blink_vertical_run+0x226>
				status_traffic_blink_vertical = green_vertical;
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <fsm_traffic_blink_vertical_run+0x22c>)
 80010ee:	2219      	movs	r2, #25
 80010f0:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[0] = time_green_vertical*1000;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <fsm_traffic_blink_vertical_run+0x230>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	4a0c      	ldr	r2, [pc, #48]	; (8001130 <fsm_traffic_blink_vertical_run+0x234>)
 8001100:	6013      	str	r3, [r2, #0]
				setTimer2(traffic_buffer_vertical[0]);
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <fsm_traffic_blink_vertical_run+0x234>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f000 faba 	bl	8001680 <setTimer2>
				setTimer5(1000);
 800110c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001110:	f000 fb04 	bl	800171c <setTimer5>
			}
			break;
 8001114:	e005      	b.n	8001122 <fsm_traffic_blink_vertical_run+0x226>
		default:
			break;
 8001116:	bf00      	nop
 8001118:	e004      	b.n	8001124 <fsm_traffic_blink_vertical_run+0x228>
			break;
 800111a:	bf00      	nop
 800111c:	e002      	b.n	8001124 <fsm_traffic_blink_vertical_run+0x228>
			break;
 800111e:	bf00      	nop
 8001120:	e000      	b.n	8001124 <fsm_traffic_blink_vertical_run+0x228>
			break;
 8001122:	bf00      	nop
	}
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000058 	.word	0x20000058
 800112c:	2000007c 	.word	0x2000007c
 8001130:	20000170 	.word	0x20000170
 8001134:	20000088 	.word	0x20000088
 8001138:	66666667 	.word	0x66666667
 800113c:	20000184 	.word	0x20000184
 8001140:	2000010c 	.word	0x2000010c
 8001144:	200000f4 	.word	0x200000f4
 8001148:	20000080 	.word	0x20000080
 800114c:	2000008c 	.word	0x2000008c
 8001150:	20000084 	.word	0x20000084
 8001154:	20000090 	.word	0x20000090

08001158 <fsm_traffic_horizontal_run>:
#include "traffic.h"

int status_traffic_horizontal = display_traffic_horizontal;


void fsm_traffic_horizontal_run(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	switch(status_traffic_horizontal){
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <fsm_traffic_horizontal_run+0xa0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3303      	adds	r3, #3
 8001162:	2b0b      	cmp	r3, #11
 8001164:	d83e      	bhi.n	80011e4 <fsm_traffic_horizontal_run+0x8c>
 8001166:	a201      	add	r2, pc, #4	; (adr r2, 800116c <fsm_traffic_horizontal_run+0x14>)
 8001168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116c:	080011e5 	.word	0x080011e5
 8001170:	080011e5 	.word	0x080011e5
 8001174:	080011e5 	.word	0x080011e5
 8001178:	080011e5 	.word	0x080011e5
 800117c:	080011e5 	.word	0x080011e5
 8001180:	080011e5 	.word	0x080011e5
 8001184:	080011e5 	.word	0x080011e5
 8001188:	080011e5 	.word	0x080011e5
 800118c:	0800119d 	.word	0x0800119d
 8001190:	080011a3 	.word	0x080011a3
 8001194:	080011cf 	.word	0x080011cf
 8001198:	080011b9 	.word	0x080011b9
		case display_traffic_horizontal:
			fsm_traffic_blink_horizontal_run();
 800119c:	f7ff fd88 	bl	8000cb0 <fsm_traffic_blink_horizontal_run>
			break;
 80011a0:	e027      	b.n	80011f2 <fsm_traffic_horizontal_run+0x9a>
		case modifying_led_red_horizontal:
			// turn off led green and yellow
//			offGreenYellow_horizontal();
			if(timer8_flag == 1){
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <fsm_traffic_horizontal_run+0xa4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d11e      	bne.n	80011e8 <fsm_traffic_horizontal_run+0x90>
				//toggle led red with frequency 2Hz
				toggleRed_horizontal();
 80011aa:	f000 fe7f 	bl	8001eac <toggleRed_horizontal>
				setTimer8(500);
 80011ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011b2:	f000 fb01 	bl	80017b8 <setTimer8>
			}
			break;
 80011b6:	e017      	b.n	80011e8 <fsm_traffic_horizontal_run+0x90>
		case modifying_led_yellow_horizontal:
//			offGreenRed_horizontal();
//			offAllLed_horizontal();
			if(timer8_flag == 1){
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <fsm_traffic_horizontal_run+0xa4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d115      	bne.n	80011ec <fsm_traffic_horizontal_run+0x94>
				//toggle led yellow with frequency 2Hz
				toggleYellow_horizontal();
 80011c0:	f000 fe98 	bl	8001ef4 <toggleYellow_horizontal>
				setTimer8(500);
 80011c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c8:	f000 faf6 	bl	80017b8 <setTimer8>
			}
			break;
 80011cc:	e00e      	b.n	80011ec <fsm_traffic_horizontal_run+0x94>
		case modifying_led_green_horizontal:
//			offRedYellow_horizontal();
			if(timer8_flag == 1){
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <fsm_traffic_horizontal_run+0xa4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d10c      	bne.n	80011f0 <fsm_traffic_horizontal_run+0x98>
				//toggle led green with frequency 2Hz
				toggleGreen_horizontal();
 80011d6:	f000 fe7b 	bl	8001ed0 <toggleGreen_horizontal>
				setTimer8(500);
 80011da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011de:	f000 faeb 	bl	80017b8 <setTimer8>
			}
			break;
 80011e2:	e005      	b.n	80011f0 <fsm_traffic_horizontal_run+0x98>
		case mannual_horizontal:
			break;
		default:
			break;
 80011e4:	bf00      	nop
 80011e6:	e004      	b.n	80011f2 <fsm_traffic_horizontal_run+0x9a>
			break;
 80011e8:	bf00      	nop
 80011ea:	e002      	b.n	80011f2 <fsm_traffic_horizontal_run+0x9a>
			break;
 80011ec:	bf00      	nop
 80011ee:	e000      	b.n	80011f2 <fsm_traffic_horizontal_run+0x9a>
			break;
 80011f0:	bf00      	nop
	}
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000005c 	.word	0x2000005c
 80011fc:	20000124 	.word	0x20000124

08001200 <fsm_traffic_vertical_run>:
#include "traffic.h"
#include "fsm_traffic_blink.h"

int status_traffic_vertical = display_traffic_vertical;

void fsm_traffic_vertical_run(){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	switch(status_traffic_vertical){
 8001204:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <fsm_traffic_vertical_run+0x104>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	3304      	adds	r3, #4
 800120a:	2b24      	cmp	r3, #36	; 0x24
 800120c:	d870      	bhi.n	80012f0 <fsm_traffic_vertical_run+0xf0>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <fsm_traffic_vertical_run+0x14>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	080012f1 	.word	0x080012f1
 8001218:	080012f1 	.word	0x080012f1
 800121c:	080012f1 	.word	0x080012f1
 8001220:	080012f1 	.word	0x080012f1
 8001224:	080012f1 	.word	0x080012f1
 8001228:	080012f1 	.word	0x080012f1
 800122c:	080012f1 	.word	0x080012f1
 8001230:	080012f1 	.word	0x080012f1
 8001234:	080012f1 	.word	0x080012f1
 8001238:	080012f1 	.word	0x080012f1
 800123c:	080012f1 	.word	0x080012f1
 8001240:	080012f1 	.word	0x080012f1
 8001244:	080012f1 	.word	0x080012f1
 8001248:	080012a9 	.word	0x080012a9
 800124c:	080012f1 	.word	0x080012f1
 8001250:	080012f1 	.word	0x080012f1
 8001254:	080012f1 	.word	0x080012f1
 8001258:	080012f1 	.word	0x080012f1
 800125c:	080012f1 	.word	0x080012f1
 8001260:	080012f1 	.word	0x080012f1
 8001264:	080012f1 	.word	0x080012f1
 8001268:	080012f1 	.word	0x080012f1
 800126c:	080012f1 	.word	0x080012f1
 8001270:	080012f1 	.word	0x080012f1
 8001274:	080012f1 	.word	0x080012f1
 8001278:	080012f1 	.word	0x080012f1
 800127c:	080012f1 	.word	0x080012f1
 8001280:	080012f1 	.word	0x080012f1
 8001284:	080012f1 	.word	0x080012f1
 8001288:	080012f1 	.word	0x080012f1
 800128c:	080012f1 	.word	0x080012f1
 8001290:	080012f1 	.word	0x080012f1
 8001294:	080012f1 	.word	0x080012f1
 8001298:	080012f1 	.word	0x080012f1
 800129c:	080012af 	.word	0x080012af
 80012a0:	080012db 	.word	0x080012db
 80012a4:	080012c5 	.word	0x080012c5
		case display_traffic_vertical:
//			status_traffic_blink_vertical = init_vertical;
			fsm_traffic_blink_vertical_run();
 80012a8:	f7ff fe28 	bl	8000efc <fsm_traffic_blink_vertical_run>
			break;
 80012ac:	e027      	b.n	80012fe <fsm_traffic_vertical_run+0xfe>
		case modifying_led_red_vertical:
//			offGreenYellow_vertical();
			if(timer7_flag == 1){
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <fsm_traffic_vertical_run+0x108>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d11e      	bne.n	80012f4 <fsm_traffic_vertical_run+0xf4>
				toggleRed_vertical();
 80012b6:	f000 fe39 	bl	8001f2c <toggleRed_vertical>
				setTimer7(500);
 80012ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012be:	f000 fa61 	bl	8001784 <setTimer7>
			}
			break;
 80012c2:	e017      	b.n	80012f4 <fsm_traffic_vertical_run+0xf4>
		case modifying_led_yellow_vertical:
//			offGreenRed_vertical();
//			offAllLed_vertical();
			if(timer7_flag == 1){
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <fsm_traffic_vertical_run+0x108>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d115      	bne.n	80012f8 <fsm_traffic_vertical_run+0xf8>
				toggleYellow_vertical();
 80012cc:	f000 fe4e 	bl	8001f6c <toggleYellow_vertical>
				setTimer7(500);
 80012d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d4:	f000 fa56 	bl	8001784 <setTimer7>
			}
			break;
 80012d8:	e00e      	b.n	80012f8 <fsm_traffic_vertical_run+0xf8>
		case modifying_led_green_vertical:
			// turn off red and yellow led
//			offRedYellow_vertical();
			if(timer7_flag == 1){
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <fsm_traffic_vertical_run+0x108>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d10c      	bne.n	80012fc <fsm_traffic_vertical_run+0xfc>
				//toggle green led with frequency 2Hz
				toggleGreen_vertical();
 80012e2:	f000 fe33 	bl	8001f4c <toggleGreen_vertical>
				setTimer7(500);
 80012e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012ea:	f000 fa4b 	bl	8001784 <setTimer7>
			}
			break;
 80012ee:	e005      	b.n	80012fc <fsm_traffic_vertical_run+0xfc>
		case mannual_vertical:
			break;
		default:
			break;
 80012f0:	bf00      	nop
 80012f2:	e004      	b.n	80012fe <fsm_traffic_vertical_run+0xfe>
			break;
 80012f4:	bf00      	nop
 80012f6:	e002      	b.n	80012fe <fsm_traffic_vertical_run+0xfe>
			break;
 80012f8:	bf00      	nop
 80012fa:	e000      	b.n	80012fe <fsm_traffic_vertical_run+0xfe>
			break;
 80012fc:	bf00      	nop
	}
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000060 	.word	0x20000060
 8001308:	2000011c 	.word	0x2000011c

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f000 fedc 	bl	80020cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 f83c 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001318:	f000 f916 	bl	8001548 <MX_GPIO_Init>
  MX_TIM2_Init();
 800131c:	f000 f874 	bl	8001408 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001320:	f000 f8e8 	bl	80014f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001324:	4818      	ldr	r0, [pc, #96]	; (8001388 <main+0x7c>)
 8001326:	f001 ff1d 	bl	8003164 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800132a:	2100      	movs	r1, #0
 800132c:	4816      	ldr	r0, [pc, #88]	; (8001388 <main+0x7c>)
 800132e:	f001 ffbd 	bl	80032ac <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	setTimer4(10);
 8001332:	200a      	movs	r0, #10
 8001334:	f000 f9d8 	bl	80016e8 <setTimer4>
    setTimer6(10);
 8001338:	200a      	movs	r0, #10
 800133a:	f000 fa09 	bl	8001750 <setTimer6>
    setTimer7(500);// toggle led-red/green/yellow vertical road 2Hz while modifying time of it
 800133e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001342:	f000 fa1f 	bl	8001784 <setTimer7>
    setTimer8(500);// toggle led-red/green/yellow horizontal road 2Hz while modifying time of it
 8001346:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800134a:	f000 fa35 	bl	80017b8 <setTimer8>
    setTimer10(500);// timer blink led-red for debugging
 800134e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001352:	f000 fa65 	bl	8001820 <setTimer10>

    /* USER CODE BEGIN 3 */
  //	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_3,i);

  	  //blink led-red for debugging
  	  if(timer10_flag == 1){
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <main+0x80>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d105      	bne.n	800136a <main+0x5e>
  		  toggleLedRed();
 800135e:	f000 fd99 	bl	8001e94 <toggleLedRed>
  		  setTimer10(1000);
 8001362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001366:	f000 fa5b 	bl	8001820 <setTimer10>
  	  }

  	  fsm_system_run();
 800136a:	f7ff fae9 	bl	8000940 <fsm_system_run>
  	  fsm_7SEG_horizontal_run();
 800136e:	f7ff f979 	bl	8000664 <fsm_7SEG_horizontal_run>
  	  fsm_7SEG_vertical_run();
 8001372:	f7ff f9bf 	bl	80006f4 <fsm_7SEG_vertical_run>
  	  fsm_traffic_vertical_run();
 8001376:	f7ff ff43 	bl	8001200 <fsm_traffic_vertical_run>
  	  fsm_traffic_horizontal_run();
 800137a:	f7ff feed 	bl	8001158 <fsm_traffic_horizontal_run>
  	  ///add function
  	  fsm_pedestrian_run();
 800137e:	f7ff fa87 	bl	8000890 <fsm_pedestrian_run>
  	  FSM_Buzzer();
 8001382:	f7ff f8d5 	bl	8000530 <FSM_Buzzer>
  	  if(timer10_flag == 1){
 8001386:	e7e6      	b.n	8001356 <main+0x4a>
 8001388:	2000018c 	.word	0x2000018c
 800138c:	20000134 	.word	0x20000134

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b090      	sub	sp, #64	; 0x40
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	2228      	movs	r2, #40	; 0x28
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 f9f2 	bl	8004788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b6:	2301      	movs	r3, #1
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ba:	2310      	movs	r3, #16
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013be:	2300      	movs	r3, #0
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 fa62 	bl	8002890 <HAL_RCC_OscConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80013d2:	f000 f935 	bl	8001640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d6:	230f      	movs	r3, #15
 80013d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 fcce 	bl	8002d90 <HAL_RCC_ClockConfig>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80013fa:	f000 f921 	bl	8001640 <Error_Handler>
  }
}
 80013fe:	bf00      	nop
 8001400:	3740      	adds	r7, #64	; 0x40
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_TIM2_Init+0xe8>)
 800143a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800143e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_TIM2_Init+0xe8>)
 8001442:	2207      	movs	r2, #7
 8001444:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_TIM2_Init+0xe8>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_TIM2_Init+0xe8>)
 800144e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001452:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_TIM2_Init+0xe8>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_TIM2_Init+0xe8>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001460:	4823      	ldr	r0, [pc, #140]	; (80014f0 <MX_TIM2_Init+0xe8>)
 8001462:	f001 fe2f 	bl	80030c4 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800146c:	f000 f8e8 	bl	8001640 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147a:	4619      	mov	r1, r3
 800147c:	481c      	ldr	r0, [pc, #112]	; (80014f0 <MX_TIM2_Init+0xe8>)
 800147e:	f002 f977 	bl	8003770 <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001488:	f000 f8da 	bl	8001640 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <MX_TIM2_Init+0xe8>)
 800148e:	f001 feb5 	bl	80031fc <HAL_TIM_PWM_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001498:	f000 f8d2 	bl	8001640 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a4:	f107 0320 	add.w	r3, r7, #32
 80014a8:	4619      	mov	r1, r3
 80014aa:	4811      	ldr	r0, [pc, #68]	; (80014f0 <MX_TIM2_Init+0xe8>)
 80014ac:	f002 fce2 	bl	8003e74 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014b6:	f000 f8c3 	bl	8001640 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ba:	2360      	movs	r3, #96	; 0x60
 80014bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2200      	movs	r2, #0
 80014ce:	4619      	mov	r1, r3
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <MX_TIM2_Init+0xe8>)
 80014d2:	f002 f88f 	bl	80035f4 <HAL_TIM_PWM_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014dc:	f000 f8b0 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <MX_TIM2_Init+0xe8>)
 80014e2:	f000 fba7 	bl	8001c34 <HAL_TIM_MspPostInit>

}
 80014e6:	bf00      	nop
 80014e8:	3738      	adds	r7, #56	; 0x38
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	2000018c 	.word	0x2000018c

080014f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_USART2_UART_Init+0x50>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 800152c:	f002 fd0c 	bl	8003f48 <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001536:	f000 f883 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200001d4 	.word	0x200001d4
 8001544:	40004400 	.word	0x40004400

08001548 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	4b2f      	ldr	r3, [pc, #188]	; (800161c <MX_GPIO_Init+0xd4>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a2e      	ldr	r2, [pc, #184]	; (800161c <MX_GPIO_Init+0xd4>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b2c      	ldr	r3, [pc, #176]	; (800161c <MX_GPIO_Init+0xd4>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <MX_GPIO_Init+0xd4>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a28      	ldr	r2, [pc, #160]	; (800161c <MX_GPIO_Init+0xd4>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <MX_GPIO_Init+0xd4>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8001592:	4823      	ldr	r0, [pc, #140]	; (8001620 <MX_GPIO_Init+0xd8>)
 8001594:	f001 f94b 	bl	800282e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 8001598:	2200      	movs	r2, #0
 800159a:	f242 013c 	movw	r1, #8252	; 0x203c
 800159e:	4821      	ldr	r0, [pc, #132]	; (8001624 <MX_GPIO_Init+0xdc>)
 80015a0:	f001 f945 	bl	800282e <HAL_GPIO_WritePin>
                          |D4_TRAFFIC2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_BLUE_Pin D7_PEDES_LIGHT_Pin D2_TRAFFIC1_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|D7_PEDES_LIGHT_Pin|D2_TRAFFIC1_Pin;
 80015a4:	f44f 63a2 	mov.w	r3, #1296	; 0x510
 80015a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2302      	movs	r3, #2
 80015b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	4818      	ldr	r0, [pc, #96]	; (8001620 <MX_GPIO_Init+0xd8>)
 80015be:	f000 ffa5 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : A2_BUTTON2_Pin A0_PEDES_BUTTON_Pin */
  GPIO_InitStruct.Pin = A2_BUTTON2_Pin|A0_PEDES_BUTTON_Pin;
 80015c2:	2360      	movs	r3, #96	; 0x60
 80015c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	4619      	mov	r1, r3
 80015d4:	4812      	ldr	r0, [pc, #72]	; (8001620 <MX_GPIO_Init+0xd8>)
 80015d6:	f000 ff99 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_BUTTON3_Pin A1_BUTTON1_Pin */
  GPIO_InitStruct.Pin = A3_BUTTON3_Pin|A1_BUTTON1_Pin;
 80015da:	f244 0301 	movw	r3, #16385	; 0x4001
 80015de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	4619      	mov	r1, r3
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <MX_GPIO_Init+0xdc>)
 80015f0:	f000 ff8c 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_PEDES_LIGHT_Pin LED_RED_Pin D3_TRAFFIC1_Pin D5_TRAFFIC2_Pin
                           D4_TRAFFIC2_Pin */
  GPIO_InitStruct.Pin = D6_PEDES_LIGHT_Pin|LED_RED_Pin|D3_TRAFFIC1_Pin|D5_TRAFFIC2_Pin
 80015f4:	f242 033c 	movw	r3, #8252	; 0x203c
 80015f8:	60bb      	str	r3, [r7, #8]
                          |D4_TRAFFIC2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2302      	movs	r3, #2
 8001604:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_GPIO_Init+0xdc>)
 800160e:	f000 ff7d 	bl	800250c <HAL_GPIO_Init>

}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	40010800 	.word	0x40010800
 8001624:	40010c00 	.word	0x40010c00

08001628 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	timerRun();
 8001630:	f000 f978 	bl	8001924 <timerRun>
	getKeyInput();
 8001634:	f7fe fdd2 	bl	80001dc <getKeyInput>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001644:	b672      	cpsid	i
}
 8001646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001648:	e7fe      	b.n	8001648 <Error_Handler+0x8>
	...

0800164c <setTimer1>:

//timer for 2 beep
int timer33_flag = 0;
int timer33_counter = 0;

void setTimer1(int duration){
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <setTimer1+0x28>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	fb92 f3f3 	sdiv	r3, r2, r3
 800165e:	4a06      	ldr	r2, [pc, #24]	; (8001678 <setTimer1+0x2c>)
 8001660:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001662:	4b06      	ldr	r3, [pc, #24]	; (800167c <setTimer1+0x30>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000098 	.word	0x20000098
 8001678:	200000f0 	.word	0x200000f0
 800167c:	200000ec 	.word	0x200000ec

08001680 <setTimer2>:

void setTimer2(int duration){
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <setTimer2+0x28>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001692:	4a06      	ldr	r2, [pc, #24]	; (80016ac <setTimer2+0x2c>)
 8001694:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <setTimer2+0x30>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000098 	.word	0x20000098
 80016ac:	200000f8 	.word	0x200000f8
 80016b0:	200000f4 	.word	0x200000f4

080016b4 <setTimer3>:

void setTimer3(int duration){
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <setTimer3+0x28>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80016c6:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <setTimer3+0x2c>)
 80016c8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <setTimer3+0x30>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000098 	.word	0x20000098
 80016e0:	20000100 	.word	0x20000100
 80016e4:	200000fc 	.word	0x200000fc

080016e8 <setTimer4>:

void setTimer4(int duration){
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <setTimer4+0x28>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fa:	4a06      	ldr	r2, [pc, #24]	; (8001714 <setTimer4+0x2c>)
 80016fc:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <setTimer4+0x30>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000098 	.word	0x20000098
 8001714:	20000108 	.word	0x20000108
 8001718:	20000104 	.word	0x20000104

0800171c <setTimer5>:

void setTimer5(int duration){
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <setTimer5+0x28>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	fb92 f3f3 	sdiv	r3, r2, r3
 800172e:	4a06      	ldr	r2, [pc, #24]	; (8001748 <setTimer5+0x2c>)
 8001730:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <setTimer5+0x30>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000098 	.word	0x20000098
 8001748:	20000110 	.word	0x20000110
 800174c:	2000010c 	.word	0x2000010c

08001750 <setTimer6>:

void setTimer6(int duration){
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <setTimer6+0x28>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001762:	4a06      	ldr	r2, [pc, #24]	; (800177c <setTimer6+0x2c>)
 8001764:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <setTimer6+0x30>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000098 	.word	0x20000098
 800177c:	20000118 	.word	0x20000118
 8001780:	20000114 	.word	0x20000114

08001784 <setTimer7>:

void setTimer7(int duration){
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <setTimer7+0x28>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	fb92 f3f3 	sdiv	r3, r2, r3
 8001796:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <setTimer7+0x2c>)
 8001798:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <setTimer7+0x30>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000098 	.word	0x20000098
 80017b0:	20000120 	.word	0x20000120
 80017b4:	2000011c 	.word	0x2000011c

080017b8 <setTimer8>:

void setTimer8(int duration){
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <setTimer8+0x28>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ca:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <setTimer8+0x2c>)
 80017cc:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <setTimer8+0x30>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000098 	.word	0x20000098
 80017e4:	20000128 	.word	0x20000128
 80017e8:	20000124 	.word	0x20000124

080017ec <setTimer9>:

void setTimer9(int duration){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	timer9_counter = duration/TICK;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <setTimer9+0x28>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80017fe:	4a06      	ldr	r2, [pc, #24]	; (8001818 <setTimer9+0x2c>)
 8001800:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <setTimer9+0x30>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000098 	.word	0x20000098
 8001818:	20000130 	.word	0x20000130
 800181c:	2000012c 	.word	0x2000012c

08001820 <setTimer10>:

void setTimer10(int duration){
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	timer10_counter = duration/TICK;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <setTimer10+0x28>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001832:	4a06      	ldr	r2, [pc, #24]	; (800184c <setTimer10+0x2c>)
 8001834:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <setTimer10+0x30>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000098 	.word	0x20000098
 800184c:	20000138 	.word	0x20000138
 8001850:	20000134 	.word	0x20000134

08001854 <setTimer30>:
void setTimer11(int duration){
	timer11_counter = duration/TICK;
	timer11_flag = 0;
}

void setTimer30(int duration){
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	timer30_counter = duration/TICK;
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <setTimer30+0x28>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	fb92 f3f3 	sdiv	r3, r2, r3
 8001866:	4a06      	ldr	r2, [pc, #24]	; (8001880 <setTimer30+0x2c>)
 8001868:	6013      	str	r3, [r2, #0]
	timer30_flag = 0;
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <setTimer30+0x30>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000098 	.word	0x20000098
 8001880:	20000148 	.word	0x20000148
 8001884:	20000144 	.word	0x20000144

08001888 <setTimer31>:

void setTimer31(int duration){
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	timer31_counter = duration/TICK;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <setTimer31+0x28>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	fb92 f3f3 	sdiv	r3, r2, r3
 800189a:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <setTimer31+0x2c>)
 800189c:	6013      	str	r3, [r2, #0]
	timer31_flag = 0;
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <setTimer31+0x30>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000098 	.word	0x20000098
 80018b4:	20000150 	.word	0x20000150
 80018b8:	2000014c 	.word	0x2000014c

080018bc <setTimer32>:

void setTimer32(int duration){
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	timer32_counter = duration/TICK;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <setTimer32+0x28>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ce:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <setTimer32+0x2c>)
 80018d0:	6013      	str	r3, [r2, #0]
	timer32_flag = 0;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <setTimer32+0x30>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000098 	.word	0x20000098
 80018e8:	20000158 	.word	0x20000158
 80018ec:	20000154 	.word	0x20000154

080018f0 <setTimer33>:

void setTimer33(int duration){
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	timer32_counter = duration/TICK;
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <setTimer33+0x28>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001902:	4a06      	ldr	r2, [pc, #24]	; (800191c <setTimer33+0x2c>)
 8001904:	6013      	str	r3, [r2, #0]
	timer32_flag = 0;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <setTimer33+0x30>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000098 	.word	0x20000098
 800191c:	20000158 	.word	0x20000158
 8001920:	20000154 	.word	0x20000154

08001924 <timerRun>:

void timerRun(){
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 8001928:	4b79      	ldr	r3, [pc, #484]	; (8001b10 <timerRun+0x1ec>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	dd04      	ble.n	800193a <timerRun+0x16>
 8001930:	4b77      	ldr	r3, [pc, #476]	; (8001b10 <timerRun+0x1ec>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	4a76      	ldr	r2, [pc, #472]	; (8001b10 <timerRun+0x1ec>)
 8001938:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 800193a:	4b75      	ldr	r3, [pc, #468]	; (8001b10 <timerRun+0x1ec>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <timerRun+0x24>
		timer1_flag = 1;
 8001942:	4b74      	ldr	r3, [pc, #464]	; (8001b14 <timerRun+0x1f0>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 8001948:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <timerRun+0x1f4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	dd04      	ble.n	800195a <timerRun+0x36>
 8001950:	4b71      	ldr	r3, [pc, #452]	; (8001b18 <timerRun+0x1f4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3b01      	subs	r3, #1
 8001956:	4a70      	ldr	r2, [pc, #448]	; (8001b18 <timerRun+0x1f4>)
 8001958:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 800195a:	4b6f      	ldr	r3, [pc, #444]	; (8001b18 <timerRun+0x1f4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <timerRun+0x44>
		timer2_flag = 1;
 8001962:	4b6e      	ldr	r3, [pc, #440]	; (8001b1c <timerRun+0x1f8>)
 8001964:	2201      	movs	r2, #1
 8001966:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 8001968:	4b6d      	ldr	r3, [pc, #436]	; (8001b20 <timerRun+0x1fc>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	dd04      	ble.n	800197a <timerRun+0x56>
 8001970:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <timerRun+0x1fc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3b01      	subs	r3, #1
 8001976:	4a6a      	ldr	r2, [pc, #424]	; (8001b20 <timerRun+0x1fc>)
 8001978:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 800197a:	4b69      	ldr	r3, [pc, #420]	; (8001b20 <timerRun+0x1fc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <timerRun+0x64>
		timer3_flag = 1;
 8001982:	4b68      	ldr	r3, [pc, #416]	; (8001b24 <timerRun+0x200>)
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 8001988:	4b67      	ldr	r3, [pc, #412]	; (8001b28 <timerRun+0x204>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	dd04      	ble.n	800199a <timerRun+0x76>
 8001990:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <timerRun+0x204>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3b01      	subs	r3, #1
 8001996:	4a64      	ldr	r2, [pc, #400]	; (8001b28 <timerRun+0x204>)
 8001998:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 800199a:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <timerRun+0x204>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <timerRun+0x84>
		timer4_flag = 1;
 80019a2:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <timerRun+0x208>)
 80019a4:	2201      	movs	r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0) timer5_counter--;
 80019a8:	4b61      	ldr	r3, [pc, #388]	; (8001b30 <timerRun+0x20c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	dd04      	ble.n	80019ba <timerRun+0x96>
 80019b0:	4b5f      	ldr	r3, [pc, #380]	; (8001b30 <timerRun+0x20c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	4a5e      	ldr	r2, [pc, #376]	; (8001b30 <timerRun+0x20c>)
 80019b8:	6013      	str	r3, [r2, #0]
	if(timer5_counter == 0){
 80019ba:	4b5d      	ldr	r3, [pc, #372]	; (8001b30 <timerRun+0x20c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <timerRun+0xa4>
		timer5_flag = 1;
 80019c2:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <timerRun+0x210>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0) timer6_counter--;
 80019c8:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <timerRun+0x214>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	dd04      	ble.n	80019da <timerRun+0xb6>
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <timerRun+0x214>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <timerRun+0x214>)
 80019d8:	6013      	str	r3, [r2, #0]
	if(timer6_counter == 0){
 80019da:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <timerRun+0x214>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d102      	bne.n	80019e8 <timerRun+0xc4>
		timer6_flag = 1;
 80019e2:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <timerRun+0x218>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0) timer7_counter--;
 80019e8:	4b55      	ldr	r3, [pc, #340]	; (8001b40 <timerRun+0x21c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	dd04      	ble.n	80019fa <timerRun+0xd6>
 80019f0:	4b53      	ldr	r3, [pc, #332]	; (8001b40 <timerRun+0x21c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	4a52      	ldr	r2, [pc, #328]	; (8001b40 <timerRun+0x21c>)
 80019f8:	6013      	str	r3, [r2, #0]
	if(timer7_counter == 0){
 80019fa:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <timerRun+0x21c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <timerRun+0xe4>
		timer7_flag = 1;
 8001a02:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <timerRun+0x220>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0) timer8_counter--;
 8001a08:	4b4f      	ldr	r3, [pc, #316]	; (8001b48 <timerRun+0x224>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dd04      	ble.n	8001a1a <timerRun+0xf6>
 8001a10:	4b4d      	ldr	r3, [pc, #308]	; (8001b48 <timerRun+0x224>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	4a4c      	ldr	r2, [pc, #304]	; (8001b48 <timerRun+0x224>)
 8001a18:	6013      	str	r3, [r2, #0]
	if(timer8_counter == 0){
 8001a1a:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <timerRun+0x224>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <timerRun+0x104>
		timer8_flag = 1;
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <timerRun+0x228>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0) timer9_counter--;
 8001a28:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <timerRun+0x22c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	dd04      	ble.n	8001a3a <timerRun+0x116>
 8001a30:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <timerRun+0x22c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	4a46      	ldr	r2, [pc, #280]	; (8001b50 <timerRun+0x22c>)
 8001a38:	6013      	str	r3, [r2, #0]
	if(timer9_counter == 0){
 8001a3a:	4b45      	ldr	r3, [pc, #276]	; (8001b50 <timerRun+0x22c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <timerRun+0x124>
		timer9_flag = 1;
 8001a42:	4b44      	ldr	r3, [pc, #272]	; (8001b54 <timerRun+0x230>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
	}

	if(timer10_counter > 0) timer10_counter--;
 8001a48:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <timerRun+0x234>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	dd04      	ble.n	8001a5a <timerRun+0x136>
 8001a50:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <timerRun+0x234>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	4a40      	ldr	r2, [pc, #256]	; (8001b58 <timerRun+0x234>)
 8001a58:	6013      	str	r3, [r2, #0]
	if(timer10_counter == 0){
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	; (8001b58 <timerRun+0x234>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d102      	bne.n	8001a68 <timerRun+0x144>
		timer10_flag = 1;
 8001a62:	4b3e      	ldr	r3, [pc, #248]	; (8001b5c <timerRun+0x238>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
	}

	if(timer11_counter > 0) timer11_counter--;
 8001a68:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <timerRun+0x23c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dd04      	ble.n	8001a7a <timerRun+0x156>
 8001a70:	4b3b      	ldr	r3, [pc, #236]	; (8001b60 <timerRun+0x23c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	4a3a      	ldr	r2, [pc, #232]	; (8001b60 <timerRun+0x23c>)
 8001a78:	6013      	str	r3, [r2, #0]
	if(timer11_counter == 0){
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <timerRun+0x23c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <timerRun+0x164>
		timer11_flag = 1;
 8001a82:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <timerRun+0x240>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
	}

	if(timer30_counter > 0) timer30_counter--;
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <timerRun+0x244>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	dd04      	ble.n	8001a9a <timerRun+0x176>
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <timerRun+0x244>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	4a34      	ldr	r2, [pc, #208]	; (8001b68 <timerRun+0x244>)
 8001a98:	6013      	str	r3, [r2, #0]
	if(timer30_counter == 0){
 8001a9a:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <timerRun+0x244>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <timerRun+0x184>
		timer30_flag = 1;
 8001aa2:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <timerRun+0x248>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
	}

	if(timer31_counter > 0) timer31_counter--;
 8001aa8:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <timerRun+0x24c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	dd04      	ble.n	8001aba <timerRun+0x196>
 8001ab0:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <timerRun+0x24c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	4a2e      	ldr	r2, [pc, #184]	; (8001b70 <timerRun+0x24c>)
 8001ab8:	6013      	str	r3, [r2, #0]
	if(timer31_counter == 0){
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <timerRun+0x24c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <timerRun+0x1a4>
		timer31_flag = 1;
 8001ac2:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <timerRun+0x250>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
	}

	if(timer32_counter > 0) timer32_counter--;
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <timerRun+0x254>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dd04      	ble.n	8001ada <timerRun+0x1b6>
 8001ad0:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <timerRun+0x254>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <timerRun+0x254>)
 8001ad8:	6013      	str	r3, [r2, #0]
	if(timer32_counter == 0){
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <timerRun+0x254>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d102      	bne.n	8001ae8 <timerRun+0x1c4>
		timer32_flag = 1;
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <timerRun+0x258>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
	}

	if(timer33_counter > 0) timer33_counter--;
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <timerRun+0x25c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	dd04      	ble.n	8001afa <timerRun+0x1d6>
 8001af0:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <timerRun+0x25c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3b01      	subs	r3, #1
 8001af6:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <timerRun+0x25c>)
 8001af8:	6013      	str	r3, [r2, #0]
	if(timer33_counter == 0){
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <timerRun+0x25c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <timerRun+0x1e4>
		timer33_flag = 1;
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <timerRun+0x260>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
	}
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	200000f0 	.word	0x200000f0
 8001b14:	200000ec 	.word	0x200000ec
 8001b18:	200000f8 	.word	0x200000f8
 8001b1c:	200000f4 	.word	0x200000f4
 8001b20:	20000100 	.word	0x20000100
 8001b24:	200000fc 	.word	0x200000fc
 8001b28:	20000108 	.word	0x20000108
 8001b2c:	20000104 	.word	0x20000104
 8001b30:	20000110 	.word	0x20000110
 8001b34:	2000010c 	.word	0x2000010c
 8001b38:	20000118 	.word	0x20000118
 8001b3c:	20000114 	.word	0x20000114
 8001b40:	20000120 	.word	0x20000120
 8001b44:	2000011c 	.word	0x2000011c
 8001b48:	20000128 	.word	0x20000128
 8001b4c:	20000124 	.word	0x20000124
 8001b50:	20000130 	.word	0x20000130
 8001b54:	2000012c 	.word	0x2000012c
 8001b58:	20000138 	.word	0x20000138
 8001b5c:	20000134 	.word	0x20000134
 8001b60:	20000140 	.word	0x20000140
 8001b64:	2000013c 	.word	0x2000013c
 8001b68:	20000148 	.word	0x20000148
 8001b6c:	20000144 	.word	0x20000144
 8001b70:	20000150 	.word	0x20000150
 8001b74:	2000014c 	.word	0x2000014c
 8001b78:	20000158 	.word	0x20000158
 8001b7c:	20000154 	.word	0x20000154
 8001b80:	20000160 	.word	0x20000160
 8001b84:	2000015c 	.word	0x2000015c

08001b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_MspInit+0x5c>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_MspInit+0x5c>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6193      	str	r3, [r2, #24]
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_MspInit+0x5c>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_MspInit+0x5c>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_MspInit+0x5c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_MspInit+0x5c>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_MspInit+0x60>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4a04      	ldr	r2, [pc, #16]	; (8001be8 <HAL_MspInit+0x60>)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d113      	bne.n	8001c26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_TIM_Base_MspInit+0x44>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <HAL_TIM_Base_MspInit+0x44>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	61d3      	str	r3, [r2, #28]
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_TIM_Base_MspInit+0x44>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	201c      	movs	r0, #28
 8001c1c:	f000 fb8f 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c20:	201c      	movs	r0, #28
 8001c22:	f000 fba8 	bl	8002376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000

08001c34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c52:	d117      	bne.n	8001c84 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_TIM_MspPostInit+0x58>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <HAL_TIM_MspPostInit+0x58>)
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_TIM_MspPostInit+0x58>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4804      	ldr	r0, [pc, #16]	; (8001c90 <HAL_TIM_MspPostInit+0x5c>)
 8001c80:	f000 fc44 	bl	800250c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c84:	bf00      	nop
 8001c86:	3720      	adds	r7, #32
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40010800 	.word	0x40010800

08001c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HAL_UART_MspInit+0x98>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d137      	bne.n	8001d24 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_UART_MspInit+0x9c>)
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	4a1d      	ldr	r2, [pc, #116]	; (8001d30 <HAL_UART_MspInit+0x9c>)
 8001cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbe:	61d3      	str	r3, [r2, #28]
 8001cc0:	4b1b      	ldr	r3, [pc, #108]	; (8001d30 <HAL_UART_MspInit+0x9c>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_UART_MspInit+0x9c>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_UART_MspInit+0x9c>)
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_UART_MspInit+0x9c>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cec:	2303      	movs	r3, #3
 8001cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480f      	ldr	r0, [pc, #60]	; (8001d34 <HAL_UART_MspInit+0xa0>)
 8001cf8:	f000 fc08 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4809      	ldr	r0, [pc, #36]	; (8001d34 <HAL_UART_MspInit+0xa0>)
 8001d10:	f000 fbfc 	bl	800250c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	2026      	movs	r0, #38	; 0x26
 8001d1a:	f000 fb10 	bl	800233e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d1e:	2026      	movs	r0, #38	; 0x26
 8001d20:	f000 fb29 	bl	8002376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d24:	bf00      	nop
 8001d26:	3720      	adds	r7, #32
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40004400 	.word	0x40004400
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010800 	.word	0x40010800

08001d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <NMI_Handler+0x4>

08001d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d42:	e7fe      	b.n	8001d42 <HardFault_Handler+0x4>

08001d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <MemManage_Handler+0x4>

08001d4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <BusFault_Handler+0x4>

08001d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <UsageFault_Handler+0x4>

08001d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d7e:	f000 f9eb 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <TIM2_IRQHandler+0x10>)
 8001d8e:	f001 fb29 	bl	80033e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000018c 	.word	0x2000018c

08001d9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <USART2_IRQHandler+0x10>)
 8001da2:	f002 f91f 	bl	8003fe4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	200001d4 	.word	0x200001d4

08001db0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <setRed_horizontal>:
 */
#include "traffic.h"
#include "global.h"
#include "main.h"

void setRed_horizontal(){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <setRed_horizontal+0x20>)
 8001dc8:	f000 fd31 	bl	800282e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2108      	movs	r1, #8
 8001dd0:	4803      	ldr	r0, [pc, #12]	; (8001de0 <setRed_horizontal+0x24>)
 8001dd2:	f000 fd2c 	bl	800282e <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	40010c00 	.word	0x40010c00

08001de4 <setGreen_horizontal>:

void setGreen_horizontal(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <setGreen_horizontal+0x20>)
 8001df0:	f000 fd1d 	bl	800282e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001df4:	2201      	movs	r2, #1
 8001df6:	2108      	movs	r1, #8
 8001df8:	4803      	ldr	r0, [pc, #12]	; (8001e08 <setGreen_horizontal+0x24>)
 8001dfa:	f000 fd18 	bl	800282e <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_SET);
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40010800 	.word	0x40010800
 8001e08:	40010c00 	.word	0x40010c00

08001e0c <setYellow_horizontal>:

void setYellow_horizontal(){
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <setYellow_horizontal+0x20>)
 8001e18:	f000 fd09 	bl	800282e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_SET);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2108      	movs	r1, #8
 8001e20:	4803      	ldr	r0, [pc, #12]	; (8001e30 <setYellow_horizontal+0x24>)
 8001e22:	f000 fd04 	bl	800282e <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40010800 	.word	0x40010800
 8001e30:	40010c00 	.word	0x40010c00

08001e34 <setRed_vertical>:

void setRed_vertical(){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2120      	movs	r1, #32
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <setRed_vertical+0x1c>)
 8001e3e:	f000 fcf6 	bl	800282e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2110      	movs	r1, #16
 8001e46:	4802      	ldr	r0, [pc, #8]	; (8001e50 <setRed_vertical+0x1c>)
 8001e48:	f000 fcf1 	bl	800282e <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40010c00 	.word	0x40010c00

08001e54 <setGreen_vertical>:

void setGreen_vertical(){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2120      	movs	r1, #32
 8001e5c:	4804      	ldr	r0, [pc, #16]	; (8001e70 <setGreen_vertical+0x1c>)
 8001e5e:	f000 fce6 	bl	800282e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001e62:	2201      	movs	r2, #1
 8001e64:	2110      	movs	r1, #16
 8001e66:	4802      	ldr	r0, [pc, #8]	; (8001e70 <setGreen_vertical+0x1c>)
 8001e68:	f000 fce1 	bl	800282e <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_SET);
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40010c00 	.word	0x40010c00

08001e74 <setYellow_vertical>:

void setYellow_vertical(){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2120      	movs	r1, #32
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <setYellow_vertical+0x1c>)
 8001e7e:	f000 fcd6 	bl	800282e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_SET);
 8001e82:	2201      	movs	r2, #1
 8001e84:	2110      	movs	r1, #16
 8001e86:	4802      	ldr	r0, [pc, #8]	; (8001e90 <setYellow_vertical+0x1c>)
 8001e88:	f000 fcd1 	bl	800282e <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40010c00 	.word	0x40010c00

08001e94 <toggleLedRed>:


void toggleLedRed(){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <toggleLedRed+0x14>)
 8001e9e:	f000 fcde 	bl	800285e <HAL_GPIO_TogglePin>
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40010c00 	.word	0x40010c00

08001eac <toggleRed_horizontal>:

void toggleRed_horizontal(){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDA_GPIO_Port, REDA_Pin);
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8001eb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <toggleRed_horizontal+0x1c>)
 8001eb6:	f000 fcd2 	bl	800285e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2108      	movs	r1, #8
 8001ebe:	4803      	ldr	r0, [pc, #12]	; (8001ecc <toggleRed_horizontal+0x20>)
 8001ec0:	f000 fcb5 	bl	800282e <HAL_GPIO_WritePin>
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40010800 	.word	0x40010800
 8001ecc:	40010c00 	.word	0x40010c00

08001ed0 <toggleGreen_horizontal>:

void toggleGreen_horizontal(){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENA_GPIO_Port, GREENA_Pin);
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8001ed4:	2108      	movs	r1, #8
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <toggleGreen_horizontal+0x1c>)
 8001ed8:	f000 fcc1 	bl	800285e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, GPIO_PIN_RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee2:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <toggleGreen_horizontal+0x20>)
 8001ee4:	f000 fca3 	bl	800282e <HAL_GPIO_WritePin>
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40010c00 	.word	0x40010c00
 8001ef0:	40010800 	.word	0x40010800

08001ef4 <toggleYellow_horizontal>:

void toggleYellow_horizontal(){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWA_GPIO_Port, YELLOWA_Pin);
	HAL_GPIO_WritePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin, HAL_GPIO_ReadPin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin));
 8001ef8:	2108      	movs	r1, #8
 8001efa:	480a      	ldr	r0, [pc, #40]	; (8001f24 <toggleYellow_horizontal+0x30>)
 8001efc:	f000 fc80 	bl	8002800 <HAL_GPIO_ReadPin>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f08:	4807      	ldr	r0, [pc, #28]	; (8001f28 <toggleYellow_horizontal+0x34>)
 8001f0a:	f000 fc90 	bl	800282e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D2_TRAFFIC1_GPIO_Port, D2_TRAFFIC1_Pin);
 8001f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f12:	4805      	ldr	r0, [pc, #20]	; (8001f28 <toggleYellow_horizontal+0x34>)
 8001f14:	f000 fca3 	bl	800285e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D3_TRAFFIC1_GPIO_Port, D3_TRAFFIC1_Pin);
 8001f18:	2108      	movs	r1, #8
 8001f1a:	4802      	ldr	r0, [pc, #8]	; (8001f24 <toggleYellow_horizontal+0x30>)
 8001f1c:	f000 fc9f 	bl	800285e <HAL_GPIO_TogglePin>
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40010c00 	.word	0x40010c00
 8001f28:	40010800 	.word	0x40010800

08001f2c <toggleRed_vertical>:

void toggleRed_vertical(){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(REDB_GPIO_Port, REDB_Pin);
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8001f30:	2120      	movs	r1, #32
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <toggleRed_vertical+0x1c>)
 8001f34:	f000 fc93 	bl	800285e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2110      	movs	r1, #16
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <toggleRed_vertical+0x1c>)
 8001f3e:	f000 fc76 	bl	800282e <HAL_GPIO_WritePin>
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40010c00 	.word	0x40010c00

08001f4c <toggleGreen_vertical>:

void toggleGreen_vertical(){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(GREENB_GPIO_Port, GREENB_Pin);
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8001f50:	2110      	movs	r1, #16
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <toggleGreen_vertical+0x1c>)
 8001f54:	f000 fc83 	bl	800285e <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2120      	movs	r1, #32
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <toggleGreen_vertical+0x1c>)
 8001f5e:	f000 fc66 	bl	800282e <HAL_GPIO_WritePin>
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40010c00 	.word	0x40010c00

08001f6c <toggleYellow_vertical>:

void toggleYellow_vertical(){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
//	HAL_GPIO_TogglePin(YELLOWB_GPIO_Port, YELLOWB_Pin);
	HAL_GPIO_WritePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin, HAL_GPIO_ReadPin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin));
 8001f70:	2110      	movs	r1, #16
 8001f72:	4809      	ldr	r0, [pc, #36]	; (8001f98 <toggleYellow_vertical+0x2c>)
 8001f74:	f000 fc44 	bl	8002800 <HAL_GPIO_ReadPin>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2120      	movs	r1, #32
 8001f7e:	4806      	ldr	r0, [pc, #24]	; (8001f98 <toggleYellow_vertical+0x2c>)
 8001f80:	f000 fc55 	bl	800282e <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(D4_TRAFFIC2_GPIO_Port, D4_TRAFFIC2_Pin);
 8001f84:	2120      	movs	r1, #32
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <toggleYellow_vertical+0x2c>)
 8001f88:	f000 fc69 	bl	800285e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_TRAFFIC2_GPIO_Port, D5_TRAFFIC2_Pin);
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	4802      	ldr	r0, [pc, #8]	; (8001f98 <toggleYellow_vertical+0x2c>)
 8001f90:	f000 fc65 	bl	800285e <HAL_GPIO_TogglePin>
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40010c00 	.word	0x40010c00

08001f9c <resetTimeTraffic>:
void offRedYellow_vertical(){
//	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
}

void resetTimeTraffic(){
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
	time_red_horizontal_temp = time_red_horizontal;
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <resetTimeTraffic+0x3c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <resetTimeTraffic+0x40>)
 8001fa6:	6013      	str	r3, [r2, #0]
	time_green_horizontal_temp = time_green_horizontal;
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <resetTimeTraffic+0x44>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <resetTimeTraffic+0x48>)
 8001fae:	6013      	str	r3, [r2, #0]
	time_yellow_horizontal_temp = time_yellow_horizontal;
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <resetTimeTraffic+0x4c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <resetTimeTraffic+0x50>)
 8001fb6:	6013      	str	r3, [r2, #0]

	time_red_vertical_temp = time_red_vertical;
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <resetTimeTraffic+0x54>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <resetTimeTraffic+0x58>)
 8001fbe:	6013      	str	r3, [r2, #0]
	time_green_vertical_temp = time_green_vertical;
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <resetTimeTraffic+0x5c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <resetTimeTraffic+0x60>)
 8001fc6:	6013      	str	r3, [r2, #0]
	time_yellow_vertical_temp = time_yellow_vertical;
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <resetTimeTraffic+0x64>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <resetTimeTraffic+0x68>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	20000064 	.word	0x20000064
 8001fdc:	20000070 	.word	0x20000070
 8001fe0:	20000068 	.word	0x20000068
 8001fe4:	20000074 	.word	0x20000074
 8001fe8:	2000006c 	.word	0x2000006c
 8001fec:	20000078 	.word	0x20000078
 8001ff0:	20000084 	.word	0x20000084
 8001ff4:	20000090 	.word	0x20000090
 8001ff8:	2000007c 	.word	0x2000007c
 8001ffc:	20000088 	.word	0x20000088
 8002000:	20000080 	.word	0x20000080
 8002004:	2000008c 	.word	0x2000008c

08002008 <set_off_pedes>:

void set_off_pedes(){
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 800200c:	2200      	movs	r2, #0
 800200e:	2104      	movs	r1, #4
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <set_off_pedes+0x20>)
 8002012:	f000 fc0c 	bl	800282e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 7180 	mov.w	r1, #256	; 0x100
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <set_off_pedes+0x24>)
 800201e:	f000 fc06 	bl	800282e <HAL_GPIO_WritePin>
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40010c00 	.word	0x40010c00
 800202c:	40010800 	.word	0x40010800

08002030 <set_red_pedes>:
void set_red_pedes(){
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 8002034:	2201      	movs	r2, #1
 8002036:	2104      	movs	r1, #4
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <set_red_pedes+0x20>)
 800203a:	f000 fbf8 	bl	800282e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002044:	4803      	ldr	r0, [pc, #12]	; (8002054 <set_red_pedes+0x24>)
 8002046:	f000 fbf2 	bl	800282e <HAL_GPIO_WritePin>
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40010c00 	.word	0x40010c00
 8002054:	40010800 	.word	0x40010800

08002058 <set_green_pedes>:
void set_green_pedes(){
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D6_PEDES_LIGHT_GPIO_Port, D6_PEDES_LIGHT_Pin, GPIO_PIN_RESET);
 800205c:	2200      	movs	r2, #0
 800205e:	2104      	movs	r1, #4
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <set_green_pedes+0x20>)
 8002062:	f000 fbe4 	bl	800282e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D7_PEDES_LIGHT_GPIO_Port, D7_PEDES_LIGHT_Pin, GPIO_PIN_SET);
 8002066:	2201      	movs	r2, #1
 8002068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800206c:	4803      	ldr	r0, [pc, #12]	; (800207c <set_green_pedes+0x24>)
 800206e:	f000 fbde 	bl	800282e <HAL_GPIO_WritePin>
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40010c00 	.word	0x40010c00
 800207c:	40010800 	.word	0x40010800

08002080 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002080:	480c      	ldr	r0, [pc, #48]	; (80020b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002082:	490d      	ldr	r1, [pc, #52]	; (80020b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800208c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002098:	4c0a      	ldr	r4, [pc, #40]	; (80020c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800209a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020a6:	f7ff fe83 	bl	8001db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020aa:	f002 fb49 	bl	8004740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ae:	f7ff f92d 	bl	800130c <main>
  bx lr
 80020b2:	4770      	bx	lr
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80020bc:	080047e0 	.word	0x080047e0
  ldr r2, =_sbss
 80020c0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80020c4:	2000021c 	.word	0x2000021c

080020c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC1_2_IRQHandler>
	...

080020cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_Init+0x28>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <HAL_Init+0x28>)
 80020d6:	f043 0310 	orr.w	r3, r3, #16
 80020da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020dc:	2003      	movs	r0, #3
 80020de:	f000 f923 	bl	8002328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e2:	200f      	movs	r0, #15
 80020e4:	f000 f808 	bl	80020f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e8:	f7ff fd4e 	bl	8001b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40022000 	.word	0x40022000

080020f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_InitTick+0x54>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <HAL_InitTick+0x58>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f93b 	bl	8002392 <HAL_SYSTICK_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00e      	b.n	8002144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b0f      	cmp	r3, #15
 800212a:	d80a      	bhi.n	8002142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212c:	2200      	movs	r2, #0
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f000 f903 	bl	800233e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <HAL_InitTick+0x5c>)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000009c 	.word	0x2000009c
 8002150:	200000a4 	.word	0x200000a4
 8002154:	200000a0 	.word	0x200000a0

08002158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_IncTick+0x1c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_IncTick+0x20>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4413      	add	r3, r2
 8002168:	4a03      	ldr	r2, [pc, #12]	; (8002178 <HAL_IncTick+0x20>)
 800216a:	6013      	str	r3, [r2, #0]
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	200000a4 	.word	0x200000a4
 8002178:	20000218 	.word	0x20000218

0800217c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <HAL_GetTick+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	20000218 	.word	0x20000218

08002190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ac:	4013      	ands	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <__NVIC_SetPriorityGrouping+0x44>)
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	60d3      	str	r3, [r2, #12]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <__NVIC_GetPriorityGrouping+0x18>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	f003 0307 	and.w	r3, r3, #7
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	2b00      	cmp	r3, #0
 8002204:	db0b      	blt.n	800221e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	f003 021f 	and.w	r2, r3, #31
 800220c:	4906      	ldr	r1, [pc, #24]	; (8002228 <__NVIC_EnableIRQ+0x34>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	2001      	movs	r0, #1
 8002216:	fa00 f202 	lsl.w	r2, r0, r2
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	e000e100 	.word	0xe000e100

0800222c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	6039      	str	r1, [r7, #0]
 8002236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	db0a      	blt.n	8002256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	490c      	ldr	r1, [pc, #48]	; (8002278 <__NVIC_SetPriority+0x4c>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	0112      	lsls	r2, r2, #4
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	440b      	add	r3, r1
 8002250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002254:	e00a      	b.n	800226c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4908      	ldr	r1, [pc, #32]	; (800227c <__NVIC_SetPriority+0x50>)
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3b04      	subs	r3, #4
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	440b      	add	r3, r1
 800226a:	761a      	strb	r2, [r3, #24]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000e100 	.word	0xe000e100
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f1c3 0307 	rsb	r3, r3, #7
 800229a:	2b04      	cmp	r3, #4
 800229c:	bf28      	it	cs
 800229e:	2304      	movcs	r3, #4
 80022a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3304      	adds	r3, #4
 80022a6:	2b06      	cmp	r3, #6
 80022a8:	d902      	bls.n	80022b0 <NVIC_EncodePriority+0x30>
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3b03      	subs	r3, #3
 80022ae:	e000      	b.n	80022b2 <NVIC_EncodePriority+0x32>
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	f04f 32ff 	mov.w	r2, #4294967295
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	401a      	ands	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c8:	f04f 31ff 	mov.w	r1, #4294967295
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	4313      	orrs	r3, r2
         );
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3724      	adds	r7, #36	; 0x24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f4:	d301      	bcc.n	80022fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00f      	b.n	800231a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <SysTick_Config+0x40>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	3b01      	subs	r3, #1
 8002300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002302:	210f      	movs	r1, #15
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f7ff ff90 	bl	800222c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <SysTick_Config+0x40>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <SysTick_Config+0x40>)
 8002314:	2207      	movs	r2, #7
 8002316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	e000e010 	.word	0xe000e010

08002328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7ff ff2d 	bl	8002190 <__NVIC_SetPriorityGrouping>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	4603      	mov	r3, r0
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002350:	f7ff ff42 	bl	80021d8 <__NVIC_GetPriorityGrouping>
 8002354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	6978      	ldr	r0, [r7, #20]
 800235c:	f7ff ff90 	bl	8002280 <NVIC_EncodePriority>
 8002360:	4602      	mov	r2, r0
 8002362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff5f 	bl	800222c <__NVIC_SetPriority>
}
 800236e:	bf00      	nop
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff35 	bl	80021f4 <__NVIC_EnableIRQ>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ffa2 	bl	80022e4 <SysTick_Config>
 80023a0:	4603      	mov	r3, r0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b085      	sub	sp, #20
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d008      	beq.n	80023d2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2204      	movs	r2, #4
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e020      	b.n	8002414 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 020e 	bic.w	r2, r2, #14
 80023e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0201 	bic.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fa:	2101      	movs	r1, #1
 80023fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002400:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002412:	7bfb      	ldrb	r3, [r7, #15]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
	...

08002420 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002432:	2b02      	cmp	r3, #2
 8002434:	d005      	beq.n	8002442 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2204      	movs	r2, #4
 800243a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e051      	b.n	80024e6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 020e 	bic.w	r2, r2, #14
 8002450:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 0201 	bic.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a22      	ldr	r2, [pc, #136]	; (80024f0 <HAL_DMA_Abort_IT+0xd0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d029      	beq.n	80024c0 <HAL_DMA_Abort_IT+0xa0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a20      	ldr	r2, [pc, #128]	; (80024f4 <HAL_DMA_Abort_IT+0xd4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d022      	beq.n	80024bc <HAL_DMA_Abort_IT+0x9c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <HAL_DMA_Abort_IT+0xd8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d01a      	beq.n	80024b6 <HAL_DMA_Abort_IT+0x96>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <HAL_DMA_Abort_IT+0xdc>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d012      	beq.n	80024b0 <HAL_DMA_Abort_IT+0x90>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1c      	ldr	r2, [pc, #112]	; (8002500 <HAL_DMA_Abort_IT+0xe0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00a      	beq.n	80024aa <HAL_DMA_Abort_IT+0x8a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <HAL_DMA_Abort_IT+0xe4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d102      	bne.n	80024a4 <HAL_DMA_Abort_IT+0x84>
 800249e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024a2:	e00e      	b.n	80024c2 <HAL_DMA_Abort_IT+0xa2>
 80024a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024a8:	e00b      	b.n	80024c2 <HAL_DMA_Abort_IT+0xa2>
 80024aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ae:	e008      	b.n	80024c2 <HAL_DMA_Abort_IT+0xa2>
 80024b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b4:	e005      	b.n	80024c2 <HAL_DMA_Abort_IT+0xa2>
 80024b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ba:	e002      	b.n	80024c2 <HAL_DMA_Abort_IT+0xa2>
 80024bc:	2310      	movs	r3, #16
 80024be:	e000      	b.n	80024c2 <HAL_DMA_Abort_IT+0xa2>
 80024c0:	2301      	movs	r3, #1
 80024c2:	4a11      	ldr	r2, [pc, #68]	; (8002508 <HAL_DMA_Abort_IT+0xe8>)
 80024c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4798      	blx	r3
    } 
  }
  return status;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40020008 	.word	0x40020008
 80024f4:	4002001c 	.word	0x4002001c
 80024f8:	40020030 	.word	0x40020030
 80024fc:	40020044 	.word	0x40020044
 8002500:	40020058 	.word	0x40020058
 8002504:	4002006c 	.word	0x4002006c
 8002508:	40020000 	.word	0x40020000

0800250c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800250c:	b480      	push	{r7}
 800250e:	b08b      	sub	sp, #44	; 0x2c
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251e:	e148      	b.n	80027b2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002520:	2201      	movs	r2, #1
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	429a      	cmp	r2, r3
 800253a:	f040 8137 	bne.w	80027ac <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4aa3      	ldr	r2, [pc, #652]	; (80027d0 <HAL_GPIO_Init+0x2c4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d05e      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002548:	4aa1      	ldr	r2, [pc, #644]	; (80027d0 <HAL_GPIO_Init+0x2c4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d875      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 800254e:	4aa1      	ldr	r2, [pc, #644]	; (80027d4 <HAL_GPIO_Init+0x2c8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d058      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002554:	4a9f      	ldr	r2, [pc, #636]	; (80027d4 <HAL_GPIO_Init+0x2c8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d86f      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 800255a:	4a9f      	ldr	r2, [pc, #636]	; (80027d8 <HAL_GPIO_Init+0x2cc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d052      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002560:	4a9d      	ldr	r2, [pc, #628]	; (80027d8 <HAL_GPIO_Init+0x2cc>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d869      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 8002566:	4a9d      	ldr	r2, [pc, #628]	; (80027dc <HAL_GPIO_Init+0x2d0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d04c      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 800256c:	4a9b      	ldr	r2, [pc, #620]	; (80027dc <HAL_GPIO_Init+0x2d0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d863      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 8002572:	4a9b      	ldr	r2, [pc, #620]	; (80027e0 <HAL_GPIO_Init+0x2d4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d046      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002578:	4a99      	ldr	r2, [pc, #612]	; (80027e0 <HAL_GPIO_Init+0x2d4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d85d      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 800257e:	2b12      	cmp	r3, #18
 8002580:	d82a      	bhi.n	80025d8 <HAL_GPIO_Init+0xcc>
 8002582:	2b12      	cmp	r3, #18
 8002584:	d859      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <HAL_GPIO_Init+0x80>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	08002607 	.word	0x08002607
 8002590:	080025e1 	.word	0x080025e1
 8002594:	080025f3 	.word	0x080025f3
 8002598:	08002635 	.word	0x08002635
 800259c:	0800263b 	.word	0x0800263b
 80025a0:	0800263b 	.word	0x0800263b
 80025a4:	0800263b 	.word	0x0800263b
 80025a8:	0800263b 	.word	0x0800263b
 80025ac:	0800263b 	.word	0x0800263b
 80025b0:	0800263b 	.word	0x0800263b
 80025b4:	0800263b 	.word	0x0800263b
 80025b8:	0800263b 	.word	0x0800263b
 80025bc:	0800263b 	.word	0x0800263b
 80025c0:	0800263b 	.word	0x0800263b
 80025c4:	0800263b 	.word	0x0800263b
 80025c8:	0800263b 	.word	0x0800263b
 80025cc:	0800263b 	.word	0x0800263b
 80025d0:	080025e9 	.word	0x080025e9
 80025d4:	080025fd 	.word	0x080025fd
 80025d8:	4a82      	ldr	r2, [pc, #520]	; (80027e4 <HAL_GPIO_Init+0x2d8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025de:	e02c      	b.n	800263a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	623b      	str	r3, [r7, #32]
          break;
 80025e6:	e029      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	3304      	adds	r3, #4
 80025ee:	623b      	str	r3, [r7, #32]
          break;
 80025f0:	e024      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	3308      	adds	r3, #8
 80025f8:	623b      	str	r3, [r7, #32]
          break;
 80025fa:	e01f      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	330c      	adds	r3, #12
 8002602:	623b      	str	r3, [r7, #32]
          break;
 8002604:	e01a      	b.n	800263c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800260e:	2304      	movs	r3, #4
 8002610:	623b      	str	r3, [r7, #32]
          break;
 8002612:	e013      	b.n	800263c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800261c:	2308      	movs	r3, #8
 800261e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	611a      	str	r2, [r3, #16]
          break;
 8002626:	e009      	b.n	800263c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002628:	2308      	movs	r3, #8
 800262a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	615a      	str	r2, [r3, #20]
          break;
 8002632:	e003      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002634:	2300      	movs	r3, #0
 8002636:	623b      	str	r3, [r7, #32]
          break;
 8002638:	e000      	b.n	800263c <HAL_GPIO_Init+0x130>
          break;
 800263a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2bff      	cmp	r3, #255	; 0xff
 8002640:	d801      	bhi.n	8002646 <HAL_GPIO_Init+0x13a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	e001      	b.n	800264a <HAL_GPIO_Init+0x13e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2bff      	cmp	r3, #255	; 0xff
 8002650:	d802      	bhi.n	8002658 <HAL_GPIO_Init+0x14c>
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	e002      	b.n	800265e <HAL_GPIO_Init+0x152>
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	3b08      	subs	r3, #8
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	210f      	movs	r1, #15
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	401a      	ands	r2, r3
 8002670:	6a39      	ldr	r1, [r7, #32]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	fa01 f303 	lsl.w	r3, r1, r3
 8002678:	431a      	orrs	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8090 	beq.w	80027ac <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800268c:	4b56      	ldr	r3, [pc, #344]	; (80027e8 <HAL_GPIO_Init+0x2dc>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a55      	ldr	r2, [pc, #340]	; (80027e8 <HAL_GPIO_Init+0x2dc>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <HAL_GPIO_Init+0x2dc>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026a4:	4a51      	ldr	r2, [pc, #324]	; (80027ec <HAL_GPIO_Init+0x2e0>)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a49      	ldr	r2, [pc, #292]	; (80027f0 <HAL_GPIO_Init+0x2e4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00d      	beq.n	80026ec <HAL_GPIO_Init+0x1e0>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a48      	ldr	r2, [pc, #288]	; (80027f4 <HAL_GPIO_Init+0x2e8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d007      	beq.n	80026e8 <HAL_GPIO_Init+0x1dc>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a47      	ldr	r2, [pc, #284]	; (80027f8 <HAL_GPIO_Init+0x2ec>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d101      	bne.n	80026e4 <HAL_GPIO_Init+0x1d8>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e004      	b.n	80026ee <HAL_GPIO_Init+0x1e2>
 80026e4:	2303      	movs	r3, #3
 80026e6:	e002      	b.n	80026ee <HAL_GPIO_Init+0x1e2>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_GPIO_Init+0x1e2>
 80026ec:	2300      	movs	r3, #0
 80026ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f0:	f002 0203 	and.w	r2, r2, #3
 80026f4:	0092      	lsls	r2, r2, #2
 80026f6:	4093      	lsls	r3, r2
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026fe:	493b      	ldr	r1, [pc, #236]	; (80027ec <HAL_GPIO_Init+0x2e0>)
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002718:	4b38      	ldr	r3, [pc, #224]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4937      	ldr	r1, [pc, #220]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]
 8002724:	e006      	b.n	8002734 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002726:	4b35      	ldr	r3, [pc, #212]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	43db      	mvns	r3, r3
 800272e:	4933      	ldr	r1, [pc, #204]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002730:	4013      	ands	r3, r2
 8002732:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002740:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	492d      	ldr	r1, [pc, #180]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800274e:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	43db      	mvns	r3, r3
 8002756:	4929      	ldr	r1, [pc, #164]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002758:	4013      	ands	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d006      	beq.n	8002776 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	4923      	ldr	r1, [pc, #140]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	608b      	str	r3, [r1, #8]
 8002774:	e006      	b.n	8002784 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	43db      	mvns	r3, r3
 800277e:	491f      	ldr	r1, [pc, #124]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002780:	4013      	ands	r3, r2
 8002782:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d006      	beq.n	800279e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002790:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	4919      	ldr	r1, [pc, #100]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	60cb      	str	r3, [r1, #12]
 800279c:	e006      	b.n	80027ac <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	4915      	ldr	r1, [pc, #84]	; (80027fc <HAL_GPIO_Init+0x2f0>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	3301      	adds	r3, #1
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	fa22 f303 	lsr.w	r3, r2, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f47f aeaf 	bne.w	8002520 <HAL_GPIO_Init+0x14>
  }
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	372c      	adds	r7, #44	; 0x2c
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	10320000 	.word	0x10320000
 80027d4:	10310000 	.word	0x10310000
 80027d8:	10220000 	.word	0x10220000
 80027dc:	10210000 	.word	0x10210000
 80027e0:	10120000 	.word	0x10120000
 80027e4:	10110000 	.word	0x10110000
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40010000 	.word	0x40010000
 80027f0:	40010800 	.word	0x40010800
 80027f4:	40010c00 	.word	0x40010c00
 80027f8:	40011000 	.word	0x40011000
 80027fc:	40010400 	.word	0x40010400

08002800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	4013      	ands	r3, r2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d002      	beq.n	800281e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
 800281c:	e001      	b.n	8002822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002822:	7bfb      	ldrb	r3, [r7, #15]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr

0800282e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	807b      	strh	r3, [r7, #2]
 800283a:	4613      	mov	r3, r2
 800283c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800283e:	787b      	ldrb	r3, [r7, #1]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002844:	887a      	ldrh	r2, [r7, #2]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800284a:	e003      	b.n	8002854 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	041a      	lsls	r2, r3, #16
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	611a      	str	r2, [r3, #16]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002870:	887a      	ldrh	r2, [r7, #2]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4013      	ands	r3, r2
 8002876:	041a      	lsls	r2, r3, #16
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	43d9      	mvns	r1, r3
 800287c:	887b      	ldrh	r3, [r7, #2]
 800287e:	400b      	ands	r3, r1
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	611a      	str	r2, [r3, #16]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e26c      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8087 	beq.w	80029be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b0:	4b92      	ldr	r3, [pc, #584]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d00c      	beq.n	80028d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028bc:	4b8f      	ldr	r3, [pc, #572]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d112      	bne.n	80028ee <HAL_RCC_OscConfig+0x5e>
 80028c8:	4b8c      	ldr	r3, [pc, #560]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d4:	d10b      	bne.n	80028ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d6:	4b89      	ldr	r3, [pc, #548]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d06c      	beq.n	80029bc <HAL_RCC_OscConfig+0x12c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d168      	bne.n	80029bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e246      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x76>
 80028f8:	4b80      	ldr	r3, [pc, #512]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a7f      	ldr	r2, [pc, #508]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e02e      	b.n	8002964 <HAL_RCC_OscConfig+0xd4>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x98>
 800290e:	4b7b      	ldr	r3, [pc, #492]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7a      	ldr	r2, [pc, #488]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b78      	ldr	r3, [pc, #480]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a77      	ldr	r2, [pc, #476]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e01d      	b.n	8002964 <HAL_RCC_OscConfig+0xd4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0xbc>
 8002932:	4b72      	ldr	r3, [pc, #456]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a71      	ldr	r2, [pc, #452]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a6e      	ldr	r2, [pc, #440]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e00b      	b.n	8002964 <HAL_RCC_OscConfig+0xd4>
 800294c:	4b6b      	ldr	r3, [pc, #428]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a6a      	ldr	r2, [pc, #424]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a67      	ldr	r2, [pc, #412]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800295e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7ff fc06 	bl	800217c <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002974:	f7ff fc02 	bl	800217c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1fa      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0xe4>
 8002992:	e014      	b.n	80029be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7ff fbf2 	bl	800217c <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800299c:	f7ff fbee 	bl	800217c <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e1e6      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x10c>
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d063      	beq.n	8002a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ca:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029d6:	4b49      	ldr	r3, [pc, #292]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d11c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x18c>
 80029e2:	4b46      	ldr	r3, [pc, #280]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d116      	bne.n	8002a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_RCC_OscConfig+0x176>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d001      	beq.n	8002a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e1ba      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a06:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4939      	ldr	r1, [pc, #228]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	e03a      	b.n	8002a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7ff fba7 	bl	800217c <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a32:	f7ff fba3 	bl	800217c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e19b      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a50:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4927      	ldr	r1, [pc, #156]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]
 8002a64:	e015      	b.n	8002a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff fb86 	bl	800217c <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a74:	f7ff fb82 	bl	800217c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e17a      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d03a      	beq.n	8002b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d019      	beq.n	8002ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa6:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aac:	f7ff fb66 	bl	800217c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab4:	f7ff fb62 	bl	800217c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e15a      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f000 fad8 	bl	8003088 <RCC_Delay>
 8002ad8:	e01c      	b.n	8002b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae0:	f7ff fb4c 	bl	800217c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae6:	e00f      	b.n	8002b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7ff fb48 	bl	800217c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d908      	bls.n	8002b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e140      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	42420000 	.word	0x42420000
 8002b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	4b9e      	ldr	r3, [pc, #632]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e9      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a6 	beq.w	8002c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b26:	4b97      	ldr	r3, [pc, #604]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10d      	bne.n	8002b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	4b94      	ldr	r3, [pc, #592]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4a93      	ldr	r2, [pc, #588]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	61d3      	str	r3, [r2, #28]
 8002b3e:	4b91      	ldr	r3, [pc, #580]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	4b8e      	ldr	r3, [pc, #568]	; (8002d88 <HAL_RCC_OscConfig+0x4f8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d118      	bne.n	8002b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5a:	4b8b      	ldr	r3, [pc, #556]	; (8002d88 <HAL_RCC_OscConfig+0x4f8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a8a      	ldr	r2, [pc, #552]	; (8002d88 <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b66:	f7ff fb09 	bl	800217c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6e:	f7ff fb05 	bl	800217c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b64      	cmp	r3, #100	; 0x64
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e0fd      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	4b81      	ldr	r3, [pc, #516]	; (8002d88 <HAL_RCC_OscConfig+0x4f8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x312>
 8002b94:	4b7b      	ldr	r3, [pc, #492]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4a7a      	ldr	r2, [pc, #488]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6213      	str	r3, [r2, #32]
 8002ba0:	e02d      	b.n	8002bfe <HAL_RCC_OscConfig+0x36e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x334>
 8002baa:	4b76      	ldr	r3, [pc, #472]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a75      	ldr	r2, [pc, #468]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	4b73      	ldr	r3, [pc, #460]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4a72      	ldr	r2, [pc, #456]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	f023 0304 	bic.w	r3, r3, #4
 8002bc0:	6213      	str	r3, [r2, #32]
 8002bc2:	e01c      	b.n	8002bfe <HAL_RCC_OscConfig+0x36e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d10c      	bne.n	8002be6 <HAL_RCC_OscConfig+0x356>
 8002bcc:	4b6d      	ldr	r3, [pc, #436]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4a6c      	ldr	r2, [pc, #432]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	4b6a      	ldr	r3, [pc, #424]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a69      	ldr	r2, [pc, #420]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	6213      	str	r3, [r2, #32]
 8002be4:	e00b      	b.n	8002bfe <HAL_RCC_OscConfig+0x36e>
 8002be6:	4b67      	ldr	r3, [pc, #412]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a66      	ldr	r2, [pc, #408]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6213      	str	r3, [r2, #32]
 8002bf2:	4b64      	ldr	r3, [pc, #400]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a63      	ldr	r2, [pc, #396]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d015      	beq.n	8002c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7ff fab9 	bl	800217c <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7ff fab5 	bl	800217c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e0ab      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ee      	beq.n	8002c0e <HAL_RCC_OscConfig+0x37e>
 8002c30:	e014      	b.n	8002c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c32:	f7ff faa3 	bl	800217c <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7ff fa9f 	bl	800217c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e095      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c50:	4b4c      	ldr	r3, [pc, #304]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ee      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d105      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c62:	4b48      	ldr	r3, [pc, #288]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4a47      	ldr	r2, [pc, #284]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 8081 	beq.w	8002d7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c78:	4b42      	ldr	r3, [pc, #264]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d061      	beq.n	8002d48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d146      	bne.n	8002d1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8c:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCC_OscConfig+0x4fc>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c92:	f7ff fa73 	bl	800217c <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9a:	f7ff fa6f 	bl	800217c <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e067      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cac:	4b35      	ldr	r3, [pc, #212]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1f0      	bne.n	8002c9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc0:	d108      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cc2:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	492d      	ldr	r1, [pc, #180]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a19      	ldr	r1, [r3, #32]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	4927      	ldr	r1, [pc, #156]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <HAL_RCC_OscConfig+0x4fc>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7ff fa43 	bl	800217c <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7ff fa3f 	bl	800217c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e037      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x46a>
 8002d18:	e02f      	b.n	8002d7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <HAL_RCC_OscConfig+0x4fc>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7ff fa2c 	bl	800217c <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d28:	f7ff fa28 	bl	800217c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e020      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x498>
 8002d46:	e018      	b.n	8002d7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e013      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d001      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	42420060 	.word	0x42420060

08002d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0d0      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d910      	bls.n	8002dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b67      	ldr	r3, [pc, #412]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 0207 	bic.w	r2, r3, #7
 8002dba:	4965      	ldr	r1, [pc, #404]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0b8      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dec:	4b59      	ldr	r3, [pc, #356]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4a58      	ldr	r2, [pc, #352]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e04:	4b53      	ldr	r3, [pc, #332]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a52      	ldr	r2, [pc, #328]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e10:	4b50      	ldr	r3, [pc, #320]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	494d      	ldr	r1, [pc, #308]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d040      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e36:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d115      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e07f      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4e:	4b41      	ldr	r3, [pc, #260]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e073      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5e:	4b3d      	ldr	r3, [pc, #244]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e06b      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e6e:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f023 0203 	bic.w	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4936      	ldr	r1, [pc, #216]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e80:	f7ff f97c 	bl	800217c <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e88:	f7ff f978 	bl	800217c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e053      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f003 020c 	and.w	r2, r3, #12
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d1eb      	bne.n	8002e88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d210      	bcs.n	8002ee0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 0207 	bic.w	r2, r3, #7
 8002ec6:	4922      	ldr	r1, [pc, #136]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e032      	b.n	8002f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4916      	ldr	r1, [pc, #88]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d009      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f0a:	4b12      	ldr	r3, [pc, #72]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f1e:	f000 f821 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	490a      	ldr	r1, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002f30:	5ccb      	ldrb	r3, [r1, r3]
 8002f32:	fa22 f303 	lsr.w	r3, r2, r3
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_RCC_ClockConfig+0x1cc>)
 8002f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x1d0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff f8da 	bl	80020f8 <HAL_InitTick>

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40022000 	.word	0x40022000
 8002f54:	40021000 	.word	0x40021000
 8002f58:	080047c0 	.word	0x080047c0
 8002f5c:	2000009c 	.word	0x2000009c
 8002f60:	200000a0 	.word	0x200000a0

08002f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	b490      	push	{r4, r7}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f6a:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f6c:	1d3c      	adds	r4, r7, #4
 8002f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f74:	f240 2301 	movw	r3, #513	; 0x201
 8002f78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f8e:	4b22      	ldr	r3, [pc, #136]	; (8003018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d002      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d003      	beq.n	8002faa <HAL_RCC_GetSysClockFreq+0x46>
 8002fa2:	e02d      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fa4:	4b1d      	ldr	r3, [pc, #116]	; (800301c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fa6:	623b      	str	r3, [r7, #32]
      break;
 8002fa8:	e02d      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	0c9b      	lsrs	r3, r3, #18
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	0c5b      	lsrs	r3, r3, #17
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	4a0e      	ldr	r2, [pc, #56]	; (800301c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe2:	fb02 f203 	mul.w	r2, r2, r3
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
 8002fee:	e004      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ff4:	fb02 f303 	mul.w	r3, r2, r3
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	623b      	str	r3, [r7, #32]
      break;
 8002ffe:	e002      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003002:	623b      	str	r3, [r7, #32]
      break;
 8003004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003006:	6a3b      	ldr	r3, [r7, #32]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bc90      	pop	{r4, r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	080047b0 	.word	0x080047b0
 8003018:	40021000 	.word	0x40021000
 800301c:	007a1200 	.word	0x007a1200
 8003020:	003d0900 	.word	0x003d0900

08003024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003028:	4b02      	ldr	r3, [pc, #8]	; (8003034 <HAL_RCC_GetHCLKFreq+0x10>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr
 8003034:	2000009c 	.word	0x2000009c

08003038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800303c:	f7ff fff2 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	0a1b      	lsrs	r3, r3, #8
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	4903      	ldr	r1, [pc, #12]	; (800305c <HAL_RCC_GetPCLK1Freq+0x24>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000
 800305c:	080047d0 	.word	0x080047d0

08003060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003064:	f7ff ffde 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	0adb      	lsrs	r3, r3, #11
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4903      	ldr	r1, [pc, #12]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800307c:	4618      	mov	r0, r3
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	080047d0 	.word	0x080047d0

08003088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003090:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <RCC_Delay+0x34>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <RCC_Delay+0x38>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	0a5b      	lsrs	r3, r3, #9
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030a4:	bf00      	nop
  }
  while (Delay --);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1e5a      	subs	r2, r3, #1
 80030aa:	60fa      	str	r2, [r7, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f9      	bne.n	80030a4 <RCC_Delay+0x1c>
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr
 80030bc:	2000009c 	.word	0x2000009c
 80030c0:	10624dd3 	.word	0x10624dd3

080030c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e041      	b.n	800315a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe fd7e 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	4619      	mov	r1, r3
 8003102:	4610      	mov	r0, r2
 8003104:	f000 fc1c 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
	...

08003164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d001      	beq.n	800317c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e035      	b.n	80031e8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a16      	ldr	r2, [pc, #88]	; (80031f4 <HAL_TIM_Base_Start_IT+0x90>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_TIM_Base_Start_IT+0x4e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a6:	d004      	beq.n	80031b2 <HAL_TIM_Base_Start_IT+0x4e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <HAL_TIM_Base_Start_IT+0x94>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d111      	bne.n	80031d6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b06      	cmp	r3, #6
 80031c2:	d010      	beq.n	80031e6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d4:	e007      	b.n	80031e6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40000400 	.word	0x40000400

080031fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e041      	b.n	8003292 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f839 	bl	800329a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f000 fb80 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr

080032ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <HAL_TIM_PWM_Start+0x24>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e022      	b.n	8003316 <HAL_TIM_PWM_Start+0x6a>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	2b04      	cmp	r3, #4
 80032d4:	d109      	bne.n	80032ea <HAL_TIM_PWM_Start+0x3e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e015      	b.n	8003316 <HAL_TIM_PWM_Start+0x6a>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d109      	bne.n	8003304 <HAL_TIM_PWM_Start+0x58>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e008      	b.n	8003316 <HAL_TIM_PWM_Start+0x6a>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e059      	b.n	80033d2 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_TIM_PWM_Start+0x82>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800332c:	e013      	b.n	8003356 <HAL_TIM_PWM_Start+0xaa>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b04      	cmp	r3, #4
 8003332:	d104      	bne.n	800333e <HAL_TIM_PWM_Start+0x92>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800333c:	e00b      	b.n	8003356 <HAL_TIM_PWM_Start+0xaa>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0xa2>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800334c:	e003      	b.n	8003356 <HAL_TIM_PWM_Start+0xaa>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2201      	movs	r2, #1
 800335c:	6839      	ldr	r1, [r7, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fd64 	bl	8003e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <HAL_TIM_PWM_Start+0x130>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d107      	bne.n	800337e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800337c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a16      	ldr	r2, [pc, #88]	; (80033dc <HAL_TIM_PWM_Start+0x130>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_TIM_PWM_Start+0xf0>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003390:	d004      	beq.n	800339c <HAL_TIM_PWM_Start+0xf0>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <HAL_TIM_PWM_Start+0x134>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d111      	bne.n	80033c0 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d010      	beq.n	80033d0 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0201 	orr.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033be:	e007      	b.n	80033d0 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40000400 	.word	0x40000400

080033e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b02      	cmp	r3, #2
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0202 	mvn.w	r2, #2
 8003410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fa6f 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fa62 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa71 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d122      	bne.n	8003494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d11b      	bne.n	8003494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0204 	mvn.w	r2, #4
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2202      	movs	r2, #2
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fa45 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fa38 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fa47 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d122      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0208 	mvn.w	r2, #8
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2204      	movs	r2, #4
 80034be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa1b 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa0e 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fa1d 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d122      	bne.n	800353c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b10      	cmp	r3, #16
 8003502:	d11b      	bne.n	800353c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0210 	mvn.w	r2, #16
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2208      	movs	r2, #8
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f9f1 	bl	800390a <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f9e4 	bl	80038f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f9f3 	bl	800391c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b01      	cmp	r3, #1
 8003548:	d10e      	bne.n	8003568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d107      	bne.n	8003568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0201 	mvn.w	r2, #1
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fe f860 	bl	8001628 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003572:	2b80      	cmp	r3, #128	; 0x80
 8003574:	d10e      	bne.n	8003594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b80      	cmp	r3, #128	; 0x80
 8003582:	d107      	bne.n	8003594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800358c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fcd1 	bl	8003f36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d10e      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ac:	2b40      	cmp	r3, #64	; 0x40
 80035ae:	d107      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9b7 	bl	800392e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	d10e      	bne.n	80035ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d107      	bne.n	80035ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0220 	mvn.w	r2, #32
 80035e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fc9c 	bl	8003f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800360a:	2302      	movs	r3, #2
 800360c:	e0ac      	b.n	8003768 <HAL_TIM_PWM_ConfigChannel+0x174>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b0c      	cmp	r3, #12
 800361a:	f200 809f 	bhi.w	800375c <HAL_TIM_PWM_ConfigChannel+0x168>
 800361e:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003624:	08003659 	.word	0x08003659
 8003628:	0800375d 	.word	0x0800375d
 800362c:	0800375d 	.word	0x0800375d
 8003630:	0800375d 	.word	0x0800375d
 8003634:	08003699 	.word	0x08003699
 8003638:	0800375d 	.word	0x0800375d
 800363c:	0800375d 	.word	0x0800375d
 8003640:	0800375d 	.word	0x0800375d
 8003644:	080036db 	.word	0x080036db
 8003648:	0800375d 	.word	0x0800375d
 800364c:	0800375d 	.word	0x0800375d
 8003650:	0800375d 	.word	0x0800375d
 8003654:	0800371b 	.word	0x0800371b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f9c6 	bl	80039f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0208 	orr.w	r2, r2, #8
 8003672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0204 	bic.w	r2, r2, #4
 8003682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6999      	ldr	r1, [r3, #24]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	619a      	str	r2, [r3, #24]
      break;
 8003696:	e062      	b.n	800375e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fa0c 	bl	8003abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6999      	ldr	r1, [r3, #24]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	619a      	str	r2, [r3, #24]
      break;
 80036d8:	e041      	b.n	800375e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fa55 	bl	8003b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0208 	orr.w	r2, r2, #8
 80036f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0204 	bic.w	r2, r2, #4
 8003704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69d9      	ldr	r1, [r3, #28]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	61da      	str	r2, [r3, #28]
      break;
 8003718:	e021      	b.n	800375e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fa9f 	bl	8003c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69da      	ldr	r2, [r3, #28]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69d9      	ldr	r1, [r3, #28]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	021a      	lsls	r2, r3, #8
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	61da      	str	r2, [r3, #28]
      break;
 800375a:	e000      	b.n	800375e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800375c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_TIM_ConfigClockSource+0x18>
 8003784:	2302      	movs	r3, #2
 8003786:	e0b3      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x180>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c0:	d03e      	beq.n	8003840 <HAL_TIM_ConfigClockSource+0xd0>
 80037c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c6:	f200 8087 	bhi.w	80038d8 <HAL_TIM_ConfigClockSource+0x168>
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	f000 8085 	beq.w	80038dc <HAL_TIM_ConfigClockSource+0x16c>
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d6:	d87f      	bhi.n	80038d8 <HAL_TIM_ConfigClockSource+0x168>
 80037d8:	2b70      	cmp	r3, #112	; 0x70
 80037da:	d01a      	beq.n	8003812 <HAL_TIM_ConfigClockSource+0xa2>
 80037dc:	2b70      	cmp	r3, #112	; 0x70
 80037de:	d87b      	bhi.n	80038d8 <HAL_TIM_ConfigClockSource+0x168>
 80037e0:	2b60      	cmp	r3, #96	; 0x60
 80037e2:	d050      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x116>
 80037e4:	2b60      	cmp	r3, #96	; 0x60
 80037e6:	d877      	bhi.n	80038d8 <HAL_TIM_ConfigClockSource+0x168>
 80037e8:	2b50      	cmp	r3, #80	; 0x50
 80037ea:	d03c      	beq.n	8003866 <HAL_TIM_ConfigClockSource+0xf6>
 80037ec:	2b50      	cmp	r3, #80	; 0x50
 80037ee:	d873      	bhi.n	80038d8 <HAL_TIM_ConfigClockSource+0x168>
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d058      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0x136>
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d86f      	bhi.n	80038d8 <HAL_TIM_ConfigClockSource+0x168>
 80037f8:	2b30      	cmp	r3, #48	; 0x30
 80037fa:	d064      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0x156>
 80037fc:	2b30      	cmp	r3, #48	; 0x30
 80037fe:	d86b      	bhi.n	80038d8 <HAL_TIM_ConfigClockSource+0x168>
 8003800:	2b20      	cmp	r3, #32
 8003802:	d060      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0x156>
 8003804:	2b20      	cmp	r3, #32
 8003806:	d867      	bhi.n	80038d8 <HAL_TIM_ConfigClockSource+0x168>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d05c      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0x156>
 800380c:	2b10      	cmp	r3, #16
 800380e:	d05a      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003810:	e062      	b.n	80038d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	6899      	ldr	r1, [r3, #8]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f000 fae4 	bl	8003dee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003834:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	609a      	str	r2, [r3, #8]
      break;
 800383e:	e04e      	b.n	80038de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	6899      	ldr	r1, [r3, #8]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f000 facd 	bl	8003dee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003862:	609a      	str	r2, [r3, #8]
      break;
 8003864:	e03b      	b.n	80038de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6859      	ldr	r1, [r3, #4]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	461a      	mov	r2, r3
 8003874:	f000 fa44 	bl	8003d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2150      	movs	r1, #80	; 0x50
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fa9b 	bl	8003dba <TIM_ITRx_SetConfig>
      break;
 8003884:	e02b      	b.n	80038de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	461a      	mov	r2, r3
 8003894:	f000 fa62 	bl	8003d5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2160      	movs	r1, #96	; 0x60
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fa8b 	bl	8003dba <TIM_ITRx_SetConfig>
      break;
 80038a4:	e01b      	b.n	80038de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6859      	ldr	r1, [r3, #4]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f000 fa24 	bl	8003d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2140      	movs	r1, #64	; 0x40
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fa7b 	bl	8003dba <TIM_ITRx_SetConfig>
      break;
 80038c4:	e00b      	b.n	80038de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f000 fa72 	bl	8003dba <TIM_ITRx_SetConfig>
        break;
 80038d6:	e002      	b.n	80038de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038d8:	bf00      	nop
 80038da:	e000      	b.n	80038de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr

0800390a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a25      	ldr	r2, [pc, #148]	; (80039e8 <TIM_Base_SetConfig+0xa8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d007      	beq.n	8003968 <TIM_Base_SetConfig+0x28>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d003      	beq.n	8003968 <TIM_Base_SetConfig+0x28>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a22      	ldr	r2, [pc, #136]	; (80039ec <TIM_Base_SetConfig+0xac>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d108      	bne.n	800397a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <TIM_Base_SetConfig+0xa8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d007      	beq.n	8003992 <TIM_Base_SetConfig+0x52>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003988:	d003      	beq.n	8003992 <TIM_Base_SetConfig+0x52>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a17      	ldr	r2, [pc, #92]	; (80039ec <TIM_Base_SetConfig+0xac>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d108      	bne.n	80039a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a07      	ldr	r2, [pc, #28]	; (80039e8 <TIM_Base_SetConfig+0xa8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d103      	bne.n	80039d8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	615a      	str	r2, [r3, #20]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40000400 	.word	0x40000400

080039f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 0302 	bic.w	r3, r3, #2
 8003a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <TIM_OC1_SetConfig+0xc8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d10c      	bne.n	8003a66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f023 0308 	bic.w	r3, r3, #8
 8003a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 0304 	bic.w	r3, r3, #4
 8003a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a13      	ldr	r2, [pc, #76]	; (8003ab8 <TIM_OC1_SetConfig+0xc8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d111      	bne.n	8003a92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	621a      	str	r2, [r3, #32]
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40012c00 	.word	0x40012c00

08003abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f023 0210 	bic.w	r2, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f023 0320 	bic.w	r3, r3, #32
 8003b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a1d      	ldr	r2, [pc, #116]	; (8003b8c <TIM_OC2_SetConfig+0xd0>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d10d      	bne.n	8003b38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <TIM_OC2_SetConfig+0xd0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d113      	bne.n	8003b68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	40012c00 	.word	0x40012c00

08003b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <TIM_OC3_SetConfig+0xd0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d10d      	bne.n	8003c0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <TIM_OC3_SetConfig+0xd0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d113      	bne.n	8003c3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	621a      	str	r2, [r3, #32]
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40012c00 	.word	0x40012c00

08003c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	031b      	lsls	r3, r3, #12
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a0f      	ldr	r2, [pc, #60]	; (8003cfc <TIM_OC4_SetConfig+0x98>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d109      	bne.n	8003cd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	019b      	lsls	r3, r3, #6
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00

08003d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	f023 0201 	bic.w	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f023 030a 	bic.w	r3, r3, #10
 8003d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	621a      	str	r2, [r3, #32]
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f023 0210 	bic.w	r2, r3, #16
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	031b      	lsls	r3, r3, #12
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	621a      	str	r2, [r3, #32]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr

08003dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f043 0307 	orr.w	r3, r3, #7
 8003ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b087      	sub	sp, #28
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	607a      	str	r2, [r7, #4]
 8003dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	021a      	lsls	r2, r3, #8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	609a      	str	r2, [r3, #8]
}
 8003e22:	bf00      	nop
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2201      	movs	r2, #1
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1a      	ldr	r2, [r3, #32]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	401a      	ands	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1a      	ldr	r2, [r3, #32]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	431a      	orrs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e041      	b.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a14      	ldr	r2, [pc, #80]	; (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d009      	beq.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed8:	d004      	beq.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a10      	ldr	r2, [pc, #64]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d10c      	bne.n	8003efe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	40000400 	.word	0x40000400

08003f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr

08003f36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e03f      	b.n	8003fda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd fe90 	bl	8001c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2224      	movs	r2, #36	; 0x24
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fb49 	bl	8004624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fa0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004004:	2300      	movs	r3, #0
 8004006:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10d      	bne.n	8004036 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_UART_IRQHandler+0x52>
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f003 0320 	and.w	r3, r3, #32
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa4f 	bl	80044d2 <UART_Receive_IT>
      return;
 8004034:	e17b      	b.n	800432e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 80b1 	beq.w	80041a0 <HAL_UART_IRQHandler+0x1bc>
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <HAL_UART_IRQHandler+0x70>
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800404e:	2b00      	cmp	r3, #0
 8004050:	f000 80a6 	beq.w	80041a0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_UART_IRQHandler+0x90>
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	f043 0201 	orr.w	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <HAL_UART_IRQHandler+0xb0>
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408c:	f043 0202 	orr.w	r2, r3, #2
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_UART_IRQHandler+0xd0>
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d005      	beq.n	80040b4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f043 0204 	orr.w	r2, r3, #4
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00f      	beq.n	80040de <HAL_UART_IRQHandler+0xfa>
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <HAL_UART_IRQHandler+0xee>
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f043 0208 	orr.w	r2, r3, #8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 811e 	beq.w	8004324 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d007      	beq.n	8004102 <HAL_UART_IRQHandler+0x11e>
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f9e8 	bl	80044d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf14      	ite	ne
 8004110:	2301      	movne	r3, #1
 8004112:	2300      	moveq	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <HAL_UART_IRQHandler+0x146>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d031      	beq.n	800418e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f92a 	bl	8004384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d023      	beq.n	8004186 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695a      	ldr	r2, [r3, #20]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800414c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	2b00      	cmp	r3, #0
 8004154:	d013      	beq.n	800417e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	4a76      	ldr	r2, [pc, #472]	; (8004334 <HAL_UART_IRQHandler+0x350>)
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe f95c 	bl	8002420 <HAL_DMA_Abort_IT>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d016      	beq.n	800419c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004178:	4610      	mov	r0, r2
 800417a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800417c:	e00e      	b.n	800419c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f8ec 	bl	800435c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	e00a      	b.n	800419c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8e8 	bl	800435c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418c:	e006      	b.n	800419c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f8e4 	bl	800435c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800419a:	e0c3      	b.n	8004324 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	bf00      	nop
    return;
 800419e:	e0c1      	b.n	8004324 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	f040 80a1 	bne.w	80042ec <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 809b 	beq.w	80042ec <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8095 	beq.w	80042ec <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d04e      	beq.n	8004284 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80041f0:	8a3b      	ldrh	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 8098 	beq.w	8004328 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041fc:	8a3a      	ldrh	r2, [r7, #16]
 80041fe:	429a      	cmp	r2, r3
 8004200:	f080 8092 	bcs.w	8004328 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8a3a      	ldrh	r2, [r7, #16]
 8004208:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b20      	cmp	r3, #32
 8004212:	d02b      	beq.n	800426c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004222:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004242:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0210 	bic.w	r2, r2, #16
 8004260:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe f89f 	bl	80023aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004274:	b29b      	uxth	r3, r3
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	b29b      	uxth	r3, r3
 800427a:	4619      	mov	r1, r3
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f876 	bl	800436e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004282:	e051      	b.n	8004328 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800428c:	b29b      	uxth	r3, r3
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d047      	beq.n	800432c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800429c:	8a7b      	ldrh	r3, [r7, #18]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d044      	beq.n	800432c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80042b0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0210 	bic.w	r2, r2, #16
 80042de:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042e0:	8a7b      	ldrh	r3, [r7, #18]
 80042e2:	4619      	mov	r1, r3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f842 	bl	800436e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80042ea:	e01f      	b.n	800432c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <HAL_UART_IRQHandler+0x324>
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f87f 	bl	8004404 <UART_Transmit_IT>
    return;
 8004306:	e012      	b.n	800432e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00d      	beq.n	800432e <HAL_UART_IRQHandler+0x34a>
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8c0 	bl	80044a2 <UART_EndTransmit_IT>
    return;
 8004322:	e004      	b.n	800432e <HAL_UART_IRQHandler+0x34a>
    return;
 8004324:	bf00      	nop
 8004326:	e002      	b.n	800432e <HAL_UART_IRQHandler+0x34a>
      return;
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <HAL_UART_IRQHandler+0x34a>
      return;
 800432c:	bf00      	nop
  }
}
 800432e:	3728      	adds	r7, #40	; 0x28
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	080043dd 	.word	0x080043dd

08004338 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr

08004384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800439a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d107      	bne.n	80043c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0210 	bic.w	r2, r2, #16
 80043c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7ff ffb0 	bl	800435c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b21      	cmp	r3, #33	; 0x21
 8004416:	d13e      	bne.n	8004496 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004420:	d114      	bne.n	800444c <UART_Transmit_IT+0x48>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d110      	bne.n	800444c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800443e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	1c9a      	adds	r2, r3, #2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	621a      	str	r2, [r3, #32]
 800444a:	e008      	b.n	800445e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	1c59      	adds	r1, r3, #1
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6211      	str	r1, [r2, #32]
 8004456:	781a      	ldrb	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29b      	uxth	r3, r3
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	4619      	mov	r1, r3
 800446c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10f      	bne.n	8004492 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004480:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004490:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004492:	2300      	movs	r3, #0
 8004494:	e000      	b.n	8004498 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004496:	2302      	movs	r3, #2
  }
}
 8004498:	4618      	mov	r0, r3
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff ff38 	bl	8004338 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b22      	cmp	r3, #34	; 0x22
 80044e4:	f040 8099 	bne.w	800461a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f0:	d117      	bne.n	8004522 <UART_Receive_IT+0x50>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d113      	bne.n	8004522 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004502:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004510:	b29a      	uxth	r2, r3
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	1c9a      	adds	r2, r3, #2
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	629a      	str	r2, [r3, #40]	; 0x28
 8004520:	e026      	b.n	8004570 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004526:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004534:	d007      	beq.n	8004546 <UART_Receive_IT+0x74>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <UART_Receive_IT+0x82>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	e008      	b.n	8004566 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004560:	b2da      	uxtb	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004574:	b29b      	uxth	r3, r3
 8004576:	3b01      	subs	r3, #1
 8004578:	b29b      	uxth	r3, r3
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4619      	mov	r1, r3
 800457e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004580:	2b00      	cmp	r3, #0
 8004582:	d148      	bne.n	8004616 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0220 	bic.w	r2, r2, #32
 8004592:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d123      	bne.n	800460c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0210 	bic.w	r2, r2, #16
 80045d8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d10a      	bne.n	80045fe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff feb2 	bl	800436e <HAL_UARTEx_RxEventCallback>
 800460a:	e002      	b.n	8004612 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff fe9c 	bl	800434a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e002      	b.n	800461c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e000      	b.n	800461c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800461a:	2302      	movs	r3, #2
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800465e:	f023 030c 	bic.w	r3, r3, #12
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	430b      	orrs	r3, r1
 800466a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a2c      	ldr	r2, [pc, #176]	; (8004738 <UART_SetConfig+0x114>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d103      	bne.n	8004694 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800468c:	f7fe fce8 	bl	8003060 <HAL_RCC_GetPCLK2Freq>
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	e002      	b.n	800469a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004694:	f7fe fcd0 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8004698:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	4a22      	ldr	r2, [pc, #136]	; (800473c <UART_SetConfig+0x118>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	0119      	lsls	r1, r3, #4
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	009a      	lsls	r2, r3, #2
 80046c4:	441a      	add	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d0:	4b1a      	ldr	r3, [pc, #104]	; (800473c <UART_SetConfig+0x118>)
 80046d2:	fba3 0302 	umull	r0, r3, r3, r2
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2064      	movs	r0, #100	; 0x64
 80046da:	fb00 f303 	mul.w	r3, r0, r3
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	3332      	adds	r3, #50	; 0x32
 80046e4:	4a15      	ldr	r2, [pc, #84]	; (800473c <UART_SetConfig+0x118>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f0:	4419      	add	r1, r3
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	009a      	lsls	r2, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	fbb2 f2f3 	udiv	r2, r2, r3
 8004708:	4b0c      	ldr	r3, [pc, #48]	; (800473c <UART_SetConfig+0x118>)
 800470a:	fba3 0302 	umull	r0, r3, r3, r2
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	2064      	movs	r0, #100	; 0x64
 8004712:	fb00 f303 	mul.w	r3, r0, r3
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	3332      	adds	r3, #50	; 0x32
 800471c:	4a07      	ldr	r2, [pc, #28]	; (800473c <UART_SetConfig+0x118>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	f003 020f 	and.w	r2, r3, #15
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	440a      	add	r2, r1
 800472e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40013800 	.word	0x40013800
 800473c:	51eb851f 	.word	0x51eb851f

08004740 <__libc_init_array>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	2600      	movs	r6, #0
 8004744:	4d0c      	ldr	r5, [pc, #48]	; (8004778 <__libc_init_array+0x38>)
 8004746:	4c0d      	ldr	r4, [pc, #52]	; (800477c <__libc_init_array+0x3c>)
 8004748:	1b64      	subs	r4, r4, r5
 800474a:	10a4      	asrs	r4, r4, #2
 800474c:	42a6      	cmp	r6, r4
 800474e:	d109      	bne.n	8004764 <__libc_init_array+0x24>
 8004750:	f000 f822 	bl	8004798 <_init>
 8004754:	2600      	movs	r6, #0
 8004756:	4d0a      	ldr	r5, [pc, #40]	; (8004780 <__libc_init_array+0x40>)
 8004758:	4c0a      	ldr	r4, [pc, #40]	; (8004784 <__libc_init_array+0x44>)
 800475a:	1b64      	subs	r4, r4, r5
 800475c:	10a4      	asrs	r4, r4, #2
 800475e:	42a6      	cmp	r6, r4
 8004760:	d105      	bne.n	800476e <__libc_init_array+0x2e>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	f855 3b04 	ldr.w	r3, [r5], #4
 8004768:	4798      	blx	r3
 800476a:	3601      	adds	r6, #1
 800476c:	e7ee      	b.n	800474c <__libc_init_array+0xc>
 800476e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004772:	4798      	blx	r3
 8004774:	3601      	adds	r6, #1
 8004776:	e7f2      	b.n	800475e <__libc_init_array+0x1e>
 8004778:	080047d8 	.word	0x080047d8
 800477c:	080047d8 	.word	0x080047d8
 8004780:	080047d8 	.word	0x080047d8
 8004784:	080047dc 	.word	0x080047dc

08004788 <memset>:
 8004788:	4603      	mov	r3, r0
 800478a:	4402      	add	r2, r0
 800478c:	4293      	cmp	r3, r2
 800478e:	d100      	bne.n	8004792 <memset+0xa>
 8004790:	4770      	bx	lr
 8004792:	f803 1b01 	strb.w	r1, [r3], #1
 8004796:	e7f9      	b.n	800478c <memset+0x4>

08004798 <_init>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr

080047a4 <_fini>:
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a6:	bf00      	nop
 80047a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047aa:	bc08      	pop	{r3}
 80047ac:	469e      	mov	lr, r3
 80047ae:	4770      	bx	lr
