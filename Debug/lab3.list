
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  080038d8  080038d8  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038d8  080038d8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080038e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000090  08003970  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003970  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9a3  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de7  00000000  00000000  0002aa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002c848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  0002d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001717b  00000000  00000000  0002def0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbcb  00000000  00000000  0004506b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082ce0  00000000  00000000  00051c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d4916  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d38  00000000  00000000  000d496c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	080038a0 	.word	0x080038a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	080038a0 	.word	0x080038a0

0800014c <isButton_BUT1_Pressed>:
int button_BUT2_LongPressed_flag = 0;
int button_BUT3_LongPressed_flag = 0;


int isButton_BUT1_Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_BUT1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton_BUT1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton_BUT1_Pressed+0x16>
	{
		button_BUT1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton_BUT1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton_BUT1_Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000ac 	.word	0x200000ac

08000170 <isButton_BUT2_Pressed>:
int isButton_BUT2_Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_BUT2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton_BUT2_Pressed+0x16>
	{
		button_BUT2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton_BUT2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton_BUT2_Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	200000b0 	.word	0x200000b0

08000194 <isButton_BUT3_Pressed>:
int isButton_BUT3_Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_BUT3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton_BUT3_Pressed+0x16>
	{
		button_BUT3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton_BUT3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton_BUT3_Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	200000b4 	.word	0x200000b4

080001b8 <getKeyInput>:
	}
	else return 0;
}

void getKeyInput()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b082      	sub	sp, #8
 80001bc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	e11a      	b.n	80003fa <getKeyInput+0x242>
		// button debouncing
		keyReg0[i] = keyReg1[i];
 80001c4:	4a91      	ldr	r2, [pc, #580]	; (800040c <getKeyInput+0x254>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	4990      	ldr	r1, [pc, #576]	; (8000410 <getKeyInput+0x258>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001d4:	4a8f      	ldr	r2, [pc, #572]	; (8000414 <getKeyInput+0x25c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001dc:	498b      	ldr	r1, [pc, #556]	; (800040c <getKeyInput+0x254>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//handle button 1
		if(i == 0){
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d154      	bne.n	8000294 <getKeyInput+0xdc>
			keyReg2[i] = HAL_GPIO_ReadPin(BUT1_GPIO_Port, BUT1_Pin);
 80001ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ee:	488a      	ldr	r0, [pc, #552]	; (8000418 <getKeyInput+0x260>)
 80001f0:	f002 fb16 	bl	8002820 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4619      	mov	r1, r3
 80001f8:	4a86      	ldr	r2, [pc, #536]	; (8000414 <getKeyInput+0x25c>)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000200:	4a83      	ldr	r2, [pc, #524]	; (8000410 <getKeyInput+0x258>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4980      	ldr	r1, [pc, #512]	; (800040c <getKeyInput+0x254>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000210:	429a      	cmp	r2, r3
 8000212:	d13f      	bne.n	8000294 <getKeyInput+0xdc>
 8000214:	4a7d      	ldr	r2, [pc, #500]	; (800040c <getKeyInput+0x254>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	497d      	ldr	r1, [pc, #500]	; (8000414 <getKeyInput+0x25c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	d135      	bne.n	8000294 <getKeyInput+0xdc>
			{
				 //case short pressed
				if(keyReg3[i] != keyReg2[i])
 8000228:	4a7c      	ldr	r2, [pc, #496]	; (800041c <getKeyInput+0x264>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	4978      	ldr	r1, [pc, #480]	; (8000414 <getKeyInput+0x25c>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000238:	429a      	cmp	r2, r3
 800023a:	d015      	beq.n	8000268 <getKeyInput+0xb0>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 800023c:	4a75      	ldr	r2, [pc, #468]	; (8000414 <getKeyInput+0x25c>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000244:	4975      	ldr	r1, [pc, #468]	; (800041c <getKeyInput+0x264>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 800024c:	4a71      	ldr	r2, [pc, #452]	; (8000414 <getKeyInput+0x25c>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000254:	2b00      	cmp	r3, #0
 8000256:	d11d      	bne.n	8000294 <getKeyInput+0xdc>
					{
						//TODO
						button_BUT1_flag = 1;
 8000258:	4b71      	ldr	r3, [pc, #452]	; (8000420 <getKeyInput+0x268>)
 800025a:	2201      	movs	r2, #1
 800025c:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 800025e:	4b71      	ldr	r3, [pc, #452]	; (8000424 <getKeyInput+0x26c>)
 8000260:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	e015      	b.n	8000294 <getKeyInput+0xdc>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 8000268:	4a6a      	ldr	r2, [pc, #424]	; (8000414 <getKeyInput+0x25c>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d10f      	bne.n	8000294 <getKeyInput+0xdc>
						timerForKeyPress--;
 8000274:	4b6b      	ldr	r3, [pc, #428]	; (8000424 <getKeyInput+0x26c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	3b01      	subs	r3, #1
 800027a:	4a6a      	ldr	r2, [pc, #424]	; (8000424 <getKeyInput+0x26c>)
 800027c:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800027e:	4b69      	ldr	r3, [pc, #420]	; (8000424 <getKeyInput+0x26c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d106      	bne.n	8000294 <getKeyInput+0xdc>
						{
							//TODO
							button_BUT1_LongPressed_flag = 1;
 8000286:	4b68      	ldr	r3, [pc, #416]	; (8000428 <getKeyInput+0x270>)
 8000288:	2201      	movs	r2, #1
 800028a:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800028c:	4b65      	ldr	r3, [pc, #404]	; (8000424 <getKeyInput+0x26c>)
 800028e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000292:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 2
		if(i == 1){
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b01      	cmp	r3, #1
 8000298:	d154      	bne.n	8000344 <getKeyInput+0x18c>
			keyReg2[i] = HAL_GPIO_ReadPin(BUT2_GPIO_Port, BUT2_Pin);
 800029a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800029e:	485e      	ldr	r0, [pc, #376]	; (8000418 <getKeyInput+0x260>)
 80002a0:	f002 fabe 	bl	8002820 <HAL_GPIO_ReadPin>
 80002a4:	4603      	mov	r3, r0
 80002a6:	4619      	mov	r1, r3
 80002a8:	4a5a      	ldr	r2, [pc, #360]	; (8000414 <getKeyInput+0x25c>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80002b0:	4a57      	ldr	r2, [pc, #348]	; (8000410 <getKeyInput+0x258>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b8:	4954      	ldr	r1, [pc, #336]	; (800040c <getKeyInput+0x254>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d13f      	bne.n	8000344 <getKeyInput+0x18c>
 80002c4:	4a51      	ldr	r2, [pc, #324]	; (800040c <getKeyInput+0x254>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002cc:	4951      	ldr	r1, [pc, #324]	; (8000414 <getKeyInput+0x25c>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d135      	bne.n	8000344 <getKeyInput+0x18c>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 80002d8:	4a50      	ldr	r2, [pc, #320]	; (800041c <getKeyInput+0x264>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e0:	494c      	ldr	r1, [pc, #304]	; (8000414 <getKeyInput+0x25c>)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002e8:	429a      	cmp	r2, r3
 80002ea:	d015      	beq.n	8000318 <getKeyInput+0x160>
				{
					keyReg3[i] = keyReg2[i]; // update for keyReg3
 80002ec:	4a49      	ldr	r2, [pc, #292]	; (8000414 <getKeyInput+0x25c>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f4:	4949      	ldr	r1, [pc, #292]	; (800041c <getKeyInput+0x264>)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80002fc:	4a45      	ldr	r2, [pc, #276]	; (8000414 <getKeyInput+0x25c>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d11d      	bne.n	8000344 <getKeyInput+0x18c>
					{
						//TODO
						button_BUT2_flag = 1;
 8000308:	4b48      	ldr	r3, [pc, #288]	; (800042c <getKeyInput+0x274>)
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 800030e:	4b45      	ldr	r3, [pc, #276]	; (8000424 <getKeyInput+0x26c>)
 8000310:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	e015      	b.n	8000344 <getKeyInput+0x18c>
					}
				}
				else// key long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 8000318:	4a3e      	ldr	r2, [pc, #248]	; (8000414 <getKeyInput+0x25c>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d10f      	bne.n	8000344 <getKeyInput+0x18c>
						timerForKeyPress--;
 8000324:	4b3f      	ldr	r3, [pc, #252]	; (8000424 <getKeyInput+0x26c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	3b01      	subs	r3, #1
 800032a:	4a3e      	ldr	r2, [pc, #248]	; (8000424 <getKeyInput+0x26c>)
 800032c:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800032e:	4b3d      	ldr	r3, [pc, #244]	; (8000424 <getKeyInput+0x26c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d106      	bne.n	8000344 <getKeyInput+0x18c>
						{
							//TODO
							button_BUT2_LongPressed_flag = 1;
 8000336:	4b3e      	ldr	r3, [pc, #248]	; (8000430 <getKeyInput+0x278>)
 8000338:	2201      	movs	r2, #1
 800033a:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 800033c:	4b39      	ldr	r3, [pc, #228]	; (8000424 <getKeyInput+0x26c>)
 800033e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000342:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
		//handle button 3
		if(i == 2){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	2b02      	cmp	r3, #2
 8000348:	d154      	bne.n	80003f4 <getKeyInput+0x23c>
			keyReg2[i] = HAL_GPIO_ReadPin(BUT3_GPIO_Port, BUT3_Pin);
 800034a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800034e:	4832      	ldr	r0, [pc, #200]	; (8000418 <getKeyInput+0x260>)
 8000350:	f002 fa66 	bl	8002820 <HAL_GPIO_ReadPin>
 8000354:	4603      	mov	r3, r0
 8000356:	4619      	mov	r1, r3
 8000358:	4a2e      	ldr	r2, [pc, #184]	; (8000414 <getKeyInput+0x25c>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			// if the button not bounce
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000360:	4a2b      	ldr	r2, [pc, #172]	; (8000410 <getKeyInput+0x258>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000368:	4928      	ldr	r1, [pc, #160]	; (800040c <getKeyInput+0x254>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000370:	429a      	cmp	r2, r3
 8000372:	d13f      	bne.n	80003f4 <getKeyInput+0x23c>
 8000374:	4a25      	ldr	r2, [pc, #148]	; (800040c <getKeyInput+0x254>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800037c:	4925      	ldr	r1, [pc, #148]	; (8000414 <getKeyInput+0x25c>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000384:	429a      	cmp	r2, r3
 8000386:	d135      	bne.n	80003f4 <getKeyInput+0x23c>
			{
				//case short pressed
				if(keyReg3[i] != keyReg2[i])
 8000388:	4a24      	ldr	r2, [pc, #144]	; (800041c <getKeyInput+0x264>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000390:	4920      	ldr	r1, [pc, #128]	; (8000414 <getKeyInput+0x25c>)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000398:	429a      	cmp	r2, r3
 800039a:	d015      	beq.n	80003c8 <getKeyInput+0x210>
				{
					keyReg3[i] = keyReg2[i]; //update for keyReg3
 800039c:	4a1d      	ldr	r2, [pc, #116]	; (8000414 <getKeyInput+0x25c>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003a4:	491d      	ldr	r1, [pc, #116]	; (800041c <getKeyInput+0x264>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 80003ac:	4a19      	ldr	r2, [pc, #100]	; (8000414 <getKeyInput+0x25c>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d11d      	bne.n	80003f4 <getKeyInput+0x23c>
					{
						//TODO
						button_BUT3_flag = 1;
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <getKeyInput+0x27c>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80003be:	4b19      	ldr	r3, [pc, #100]	; (8000424 <getKeyInput+0x26c>)
 80003c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	e015      	b.n	80003f4 <getKeyInput+0x23c>
					}
				}
				else// case long pressed
				{
					if(keyReg2[i] == PRESSED_STATE){
 80003c8:	4a12      	ldr	r2, [pc, #72]	; (8000414 <getKeyInput+0x25c>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d10f      	bne.n	80003f4 <getKeyInput+0x23c>
						timerForKeyPress--;
 80003d4:	4b13      	ldr	r3, [pc, #76]	; (8000424 <getKeyInput+0x26c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3b01      	subs	r3, #1
 80003da:	4a12      	ldr	r2, [pc, #72]	; (8000424 <getKeyInput+0x26c>)
 80003dc:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <getKeyInput+0x26c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d106      	bne.n	80003f4 <getKeyInput+0x23c>
						{
							//TODO
							button_BUT3_LongPressed_flag = 1;
 80003e6:	4b14      	ldr	r3, [pc, #80]	; (8000438 <getKeyInput+0x280>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80003ec:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <getKeyInput+0x26c>)
 80003ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003f2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3301      	adds	r3, #1
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b02      	cmp	r3, #2
 80003fe:	f77f aee1 	ble.w	80001c4 <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	2000000c 	.word	0x2000000c
 8000410:	20000000 	.word	0x20000000
 8000414:	20000018 	.word	0x20000018
 8000418:	40010c00 	.word	0x40010c00
 800041c:	20000024 	.word	0x20000024
 8000420:	200000ac 	.word	0x200000ac
 8000424:	20000030 	.word	0x20000030
 8000428:	200000b8 	.word	0x200000b8
 800042c:	200000b0 	.word	0x200000b0
 8000430:	200000bc 	.word	0x200000bc
 8000434:	200000b4 	.word	0x200000b4
 8000438:	200000c0 	.word	0x200000c0

0800043c <display7SEG_horizontal>:

#include "control_7SEG.h"
#include "main.h"
#include "traffic_buffer.h"

void display7SEG_horizontal(int num){
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	if(num == 0)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d122      	bne.n	8000490 <display7SEG_horizontal+0x54>
	{
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2101      	movs	r1, #1
 800044e:	48bd      	ldr	r0, [pc, #756]	; (8000744 <display7SEG_horizontal+0x308>)
 8000450:	f002 f9fd 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2102      	movs	r1, #2
 8000458:	48ba      	ldr	r0, [pc, #744]	; (8000744 <display7SEG_horizontal+0x308>)
 800045a:	f002 f9f8 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2104      	movs	r1, #4
 8000462:	48b8      	ldr	r0, [pc, #736]	; (8000744 <display7SEG_horizontal+0x308>)
 8000464:	f002 f9f3 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2108      	movs	r1, #8
 800046c:	48b5      	ldr	r0, [pc, #724]	; (8000744 <display7SEG_horizontal+0x308>)
 800046e:	f002 f9ee 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2110      	movs	r1, #16
 8000476:	48b3      	ldr	r0, [pc, #716]	; (8000744 <display7SEG_horizontal+0x308>)
 8000478:	f002 f9e9 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2120      	movs	r1, #32
 8000480:	48b0      	ldr	r0, [pc, #704]	; (8000744 <display7SEG_horizontal+0x308>)
 8000482:	f002 f9e4 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2140      	movs	r1, #64	; 0x40
 800048a:	48ae      	ldr	r0, [pc, #696]	; (8000744 <display7SEG_horizontal+0x308>)
 800048c:	f002 f9df 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 1)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d122      	bne.n	80004dc <display7SEG_horizontal+0xa0>
	{
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000496:	2201      	movs	r2, #1
 8000498:	2101      	movs	r1, #1
 800049a:	48aa      	ldr	r0, [pc, #680]	; (8000744 <display7SEG_horizontal+0x308>)
 800049c:	f002 f9d7 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2102      	movs	r1, #2
 80004a4:	48a7      	ldr	r0, [pc, #668]	; (8000744 <display7SEG_horizontal+0x308>)
 80004a6:	f002 f9d2 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2104      	movs	r1, #4
 80004ae:	48a5      	ldr	r0, [pc, #660]	; (8000744 <display7SEG_horizontal+0x308>)
 80004b0:	f002 f9cd 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2108      	movs	r1, #8
 80004b8:	48a2      	ldr	r0, [pc, #648]	; (8000744 <display7SEG_horizontal+0x308>)
 80004ba:	f002 f9c8 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	2110      	movs	r1, #16
 80004c2:	48a0      	ldr	r0, [pc, #640]	; (8000744 <display7SEG_horizontal+0x308>)
 80004c4:	f002 f9c3 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2120      	movs	r1, #32
 80004cc:	489d      	ldr	r0, [pc, #628]	; (8000744 <display7SEG_horizontal+0x308>)
 80004ce:	f002 f9be 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2140      	movs	r1, #64	; 0x40
 80004d6:	489b      	ldr	r0, [pc, #620]	; (8000744 <display7SEG_horizontal+0x308>)
 80004d8:	f002 f9b9 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 2)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b02      	cmp	r3, #2
 80004e0:	d122      	bne.n	8000528 <display7SEG_horizontal+0xec>
	{
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2101      	movs	r1, #1
 80004e6:	4897      	ldr	r0, [pc, #604]	; (8000744 <display7SEG_horizontal+0x308>)
 80004e8:	f002 f9b1 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	2102      	movs	r1, #2
 80004f0:	4894      	ldr	r0, [pc, #592]	; (8000744 <display7SEG_horizontal+0x308>)
 80004f2:	f002 f9ac 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2104      	movs	r1, #4
 80004fa:	4892      	ldr	r0, [pc, #584]	; (8000744 <display7SEG_horizontal+0x308>)
 80004fc:	f002 f9a7 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2108      	movs	r1, #8
 8000504:	488f      	ldr	r0, [pc, #572]	; (8000744 <display7SEG_horizontal+0x308>)
 8000506:	f002 f9a2 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2110      	movs	r1, #16
 800050e:	488d      	ldr	r0, [pc, #564]	; (8000744 <display7SEG_horizontal+0x308>)
 8000510:	f002 f99d 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2120      	movs	r1, #32
 8000518:	488a      	ldr	r0, [pc, #552]	; (8000744 <display7SEG_horizontal+0x308>)
 800051a:	f002 f998 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	2140      	movs	r1, #64	; 0x40
 8000522:	4888      	ldr	r0, [pc, #544]	; (8000744 <display7SEG_horizontal+0x308>)
 8000524:	f002 f993 	bl	800284e <HAL_GPIO_WritePin>

	}
	if(num == 3)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	d122      	bne.n	8000574 <display7SEG_horizontal+0x138>
	{
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2101      	movs	r1, #1
 8000532:	4884      	ldr	r0, [pc, #528]	; (8000744 <display7SEG_horizontal+0x308>)
 8000534:	f002 f98b 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2102      	movs	r1, #2
 800053c:	4881      	ldr	r0, [pc, #516]	; (8000744 <display7SEG_horizontal+0x308>)
 800053e:	f002 f986 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2104      	movs	r1, #4
 8000546:	487f      	ldr	r0, [pc, #508]	; (8000744 <display7SEG_horizontal+0x308>)
 8000548:	f002 f981 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2108      	movs	r1, #8
 8000550:	487c      	ldr	r0, [pc, #496]	; (8000744 <display7SEG_horizontal+0x308>)
 8000552:	f002 f97c 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2110      	movs	r1, #16
 800055a:	487a      	ldr	r0, [pc, #488]	; (8000744 <display7SEG_horizontal+0x308>)
 800055c:	f002 f977 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2120      	movs	r1, #32
 8000564:	4877      	ldr	r0, [pc, #476]	; (8000744 <display7SEG_horizontal+0x308>)
 8000566:	f002 f972 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2140      	movs	r1, #64	; 0x40
 800056e:	4875      	ldr	r0, [pc, #468]	; (8000744 <display7SEG_horizontal+0x308>)
 8000570:	f002 f96d 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 4)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d122      	bne.n	80005c0 <display7SEG_horizontal+0x184>
	{
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2101      	movs	r1, #1
 800057e:	4871      	ldr	r0, [pc, #452]	; (8000744 <display7SEG_horizontal+0x308>)
 8000580:	f002 f965 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2102      	movs	r1, #2
 8000588:	486e      	ldr	r0, [pc, #440]	; (8000744 <display7SEG_horizontal+0x308>)
 800058a:	f002 f960 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2104      	movs	r1, #4
 8000592:	486c      	ldr	r0, [pc, #432]	; (8000744 <display7SEG_horizontal+0x308>)
 8000594:	f002 f95b 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	2108      	movs	r1, #8
 800059c:	4869      	ldr	r0, [pc, #420]	; (8000744 <display7SEG_horizontal+0x308>)
 800059e:	f002 f956 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2110      	movs	r1, #16
 80005a6:	4867      	ldr	r0, [pc, #412]	; (8000744 <display7SEG_horizontal+0x308>)
 80005a8:	f002 f951 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2120      	movs	r1, #32
 80005b0:	4864      	ldr	r0, [pc, #400]	; (8000744 <display7SEG_horizontal+0x308>)
 80005b2:	f002 f94c 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2140      	movs	r1, #64	; 0x40
 80005ba:	4862      	ldr	r0, [pc, #392]	; (8000744 <display7SEG_horizontal+0x308>)
 80005bc:	f002 f947 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 5)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b05      	cmp	r3, #5
 80005c4:	d122      	bne.n	800060c <display7SEG_horizontal+0x1d0>
	{
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2101      	movs	r1, #1
 80005ca:	485e      	ldr	r0, [pc, #376]	; (8000744 <display7SEG_horizontal+0x308>)
 80005cc:	f002 f93f 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2102      	movs	r1, #2
 80005d4:	485b      	ldr	r0, [pc, #364]	; (8000744 <display7SEG_horizontal+0x308>)
 80005d6:	f002 f93a 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2104      	movs	r1, #4
 80005de:	4859      	ldr	r0, [pc, #356]	; (8000744 <display7SEG_horizontal+0x308>)
 80005e0:	f002 f935 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2108      	movs	r1, #8
 80005e8:	4856      	ldr	r0, [pc, #344]	; (8000744 <display7SEG_horizontal+0x308>)
 80005ea:	f002 f930 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2110      	movs	r1, #16
 80005f2:	4854      	ldr	r0, [pc, #336]	; (8000744 <display7SEG_horizontal+0x308>)
 80005f4:	f002 f92b 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2120      	movs	r1, #32
 80005fc:	4851      	ldr	r0, [pc, #324]	; (8000744 <display7SEG_horizontal+0x308>)
 80005fe:	f002 f926 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2140      	movs	r1, #64	; 0x40
 8000606:	484f      	ldr	r0, [pc, #316]	; (8000744 <display7SEG_horizontal+0x308>)
 8000608:	f002 f921 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 6)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b06      	cmp	r3, #6
 8000610:	d122      	bne.n	8000658 <display7SEG_horizontal+0x21c>
	{
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2101      	movs	r1, #1
 8000616:	484b      	ldr	r0, [pc, #300]	; (8000744 <display7SEG_horizontal+0x308>)
 8000618:	f002 f919 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2102      	movs	r1, #2
 8000620:	4848      	ldr	r0, [pc, #288]	; (8000744 <display7SEG_horizontal+0x308>)
 8000622:	f002 f914 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2104      	movs	r1, #4
 800062a:	4846      	ldr	r0, [pc, #280]	; (8000744 <display7SEG_horizontal+0x308>)
 800062c:	f002 f90f 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2108      	movs	r1, #8
 8000634:	4843      	ldr	r0, [pc, #268]	; (8000744 <display7SEG_horizontal+0x308>)
 8000636:	f002 f90a 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2110      	movs	r1, #16
 800063e:	4841      	ldr	r0, [pc, #260]	; (8000744 <display7SEG_horizontal+0x308>)
 8000640:	f002 f905 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2120      	movs	r1, #32
 8000648:	483e      	ldr	r0, [pc, #248]	; (8000744 <display7SEG_horizontal+0x308>)
 800064a:	f002 f900 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	483c      	ldr	r0, [pc, #240]	; (8000744 <display7SEG_horizontal+0x308>)
 8000654:	f002 f8fb 	bl	800284e <HAL_GPIO_WritePin>

	}
	if(num == 7)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d122      	bne.n	80006a4 <display7SEG_horizontal+0x268>
	{
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2101      	movs	r1, #1
 8000662:	4838      	ldr	r0, [pc, #224]	; (8000744 <display7SEG_horizontal+0x308>)
 8000664:	f002 f8f3 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2102      	movs	r1, #2
 800066c:	4835      	ldr	r0, [pc, #212]	; (8000744 <display7SEG_horizontal+0x308>)
 800066e:	f002 f8ee 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2104      	movs	r1, #4
 8000676:	4833      	ldr	r0, [pc, #204]	; (8000744 <display7SEG_horizontal+0x308>)
 8000678:	f002 f8e9 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	2108      	movs	r1, #8
 8000680:	4830      	ldr	r0, [pc, #192]	; (8000744 <display7SEG_horizontal+0x308>)
 8000682:	f002 f8e4 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2110      	movs	r1, #16
 800068a:	482e      	ldr	r0, [pc, #184]	; (8000744 <display7SEG_horizontal+0x308>)
 800068c:	f002 f8df 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	2120      	movs	r1, #32
 8000694:	482b      	ldr	r0, [pc, #172]	; (8000744 <display7SEG_horizontal+0x308>)
 8000696:	f002 f8da 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	4829      	ldr	r0, [pc, #164]	; (8000744 <display7SEG_horizontal+0x308>)
 80006a0:	f002 f8d5 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 8)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2b08      	cmp	r3, #8
 80006a8:	d122      	bne.n	80006f0 <display7SEG_horizontal+0x2b4>
	{
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2101      	movs	r1, #1
 80006ae:	4825      	ldr	r0, [pc, #148]	; (8000744 <display7SEG_horizontal+0x308>)
 80006b0:	f002 f8cd 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2102      	movs	r1, #2
 80006b8:	4822      	ldr	r0, [pc, #136]	; (8000744 <display7SEG_horizontal+0x308>)
 80006ba:	f002 f8c8 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2104      	movs	r1, #4
 80006c2:	4820      	ldr	r0, [pc, #128]	; (8000744 <display7SEG_horizontal+0x308>)
 80006c4:	f002 f8c3 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2108      	movs	r1, #8
 80006cc:	481d      	ldr	r0, [pc, #116]	; (8000744 <display7SEG_horizontal+0x308>)
 80006ce:	f002 f8be 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2110      	movs	r1, #16
 80006d6:	481b      	ldr	r0, [pc, #108]	; (8000744 <display7SEG_horizontal+0x308>)
 80006d8:	f002 f8b9 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2120      	movs	r1, #32
 80006e0:	4818      	ldr	r0, [pc, #96]	; (8000744 <display7SEG_horizontal+0x308>)
 80006e2:	f002 f8b4 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2140      	movs	r1, #64	; 0x40
 80006ea:	4816      	ldr	r0, [pc, #88]	; (8000744 <display7SEG_horizontal+0x308>)
 80006ec:	f002 f8af 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 9)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2b09      	cmp	r3, #9
 80006f4:	d122      	bne.n	800073c <display7SEG_horizontal+0x300>
	{
		HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	4812      	ldr	r0, [pc, #72]	; (8000744 <display7SEG_horizontal+0x308>)
 80006fc:	f002 f8a7 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2102      	movs	r1, #2
 8000704:	480f      	ldr	r0, [pc, #60]	; (8000744 <display7SEG_horizontal+0x308>)
 8000706:	f002 f8a2 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2104      	movs	r1, #4
 800070e:	480d      	ldr	r0, [pc, #52]	; (8000744 <display7SEG_horizontal+0x308>)
 8000710:	f002 f89d 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2108      	movs	r1, #8
 8000718:	480a      	ldr	r0, [pc, #40]	; (8000744 <display7SEG_horizontal+0x308>)
 800071a:	f002 f898 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2110      	movs	r1, #16
 8000722:	4808      	ldr	r0, [pc, #32]	; (8000744 <display7SEG_horizontal+0x308>)
 8000724:	f002 f893 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2120      	movs	r1, #32
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <display7SEG_horizontal+0x308>)
 800072e:	f002 f88e 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2140      	movs	r1, #64	; 0x40
 8000736:	4803      	ldr	r0, [pc, #12]	; (8000744 <display7SEG_horizontal+0x308>)
 8000738:	f002 f889 	bl	800284e <HAL_GPIO_WritePin>
	}
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40010c00 	.word	0x40010c00

08000748 <display7SEG_vertical>:
void display7SEG_vertical(int num){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	if(num == 0)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d127      	bne.n	80007a6 <display7SEG_vertical+0x5e>
	{
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2110      	movs	r1, #16
 800075a:	48d3      	ldr	r0, [pc, #844]	; (8000aa8 <display7SEG_vertical+0x360>)
 800075c:	f002 f877 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000766:	48d0      	ldr	r0, [pc, #832]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000768:	f002 f871 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000772:	48cd      	ldr	r0, [pc, #820]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000774:	f002 f86b 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077e:	48ca      	ldr	r0, [pc, #808]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000780:	f002 f865 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078a:	48c7      	ldr	r0, [pc, #796]	; (8000aa8 <display7SEG_vertical+0x360>)
 800078c:	f002 f85f 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000796:	48c4      	ldr	r0, [pc, #784]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000798:	f002 f859 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	48c2      	ldr	r0, [pc, #776]	; (8000aac <display7SEG_vertical+0x364>)
 80007a2:	f002 f854 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 1)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d127      	bne.n	80007fc <display7SEG_vertical+0xb4>
	{
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	48bd      	ldr	r0, [pc, #756]	; (8000aa8 <display7SEG_vertical+0x360>)
 80007b2:	f002 f84c 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007bc:	48ba      	ldr	r0, [pc, #744]	; (8000aa8 <display7SEG_vertical+0x360>)
 80007be:	f002 f846 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	48b7      	ldr	r0, [pc, #732]	; (8000aa8 <display7SEG_vertical+0x360>)
 80007ca:	f002 f840 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	48b4      	ldr	r0, [pc, #720]	; (8000aa8 <display7SEG_vertical+0x360>)
 80007d6:	f002 f83a 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e0:	48b1      	ldr	r0, [pc, #708]	; (8000aa8 <display7SEG_vertical+0x360>)
 80007e2:	f002 f834 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ec:	48ae      	ldr	r0, [pc, #696]	; (8000aa8 <display7SEG_vertical+0x360>)
 80007ee:	f002 f82e 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	48ad      	ldr	r0, [pc, #692]	; (8000aac <display7SEG_vertical+0x364>)
 80007f8:	f002 f829 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d127      	bne.n	8000852 <display7SEG_vertical+0x10a>
	{
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2110      	movs	r1, #16
 8000806:	48a8      	ldr	r0, [pc, #672]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000808:	f002 f821 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000812:	48a5      	ldr	r0, [pc, #660]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000814:	f002 f81b 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081e:	48a2      	ldr	r0, [pc, #648]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000820:	f002 f815 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800082a:	489f      	ldr	r0, [pc, #636]	; (8000aa8 <display7SEG_vertical+0x360>)
 800082c:	f002 f80f 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000836:	489c      	ldr	r0, [pc, #624]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000838:	f002 f809 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000842:	4899      	ldr	r0, [pc, #612]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000844:	f002 f803 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2180      	movs	r1, #128	; 0x80
 800084c:	4897      	ldr	r0, [pc, #604]	; (8000aac <display7SEG_vertical+0x364>)
 800084e:	f001 fffe 	bl	800284e <HAL_GPIO_WritePin>

	}
	if(num == 3)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b03      	cmp	r3, #3
 8000856:	d127      	bne.n	80008a8 <display7SEG_vertical+0x160>
	{
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	2110      	movs	r1, #16
 800085c:	4892      	ldr	r0, [pc, #584]	; (8000aa8 <display7SEG_vertical+0x360>)
 800085e:	f001 fff6 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000868:	488f      	ldr	r0, [pc, #572]	; (8000aa8 <display7SEG_vertical+0x360>)
 800086a:	f001 fff0 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000874:	488c      	ldr	r0, [pc, #560]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000876:	f001 ffea 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000880:	4889      	ldr	r0, [pc, #548]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000882:	f001 ffe4 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800088c:	4886      	ldr	r0, [pc, #536]	; (8000aa8 <display7SEG_vertical+0x360>)
 800088e:	f001 ffde 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000898:	4883      	ldr	r0, [pc, #524]	; (8000aa8 <display7SEG_vertical+0x360>)
 800089a:	f001 ffd8 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	4882      	ldr	r0, [pc, #520]	; (8000aac <display7SEG_vertical+0x364>)
 80008a4:	f001 ffd3 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 4)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d127      	bne.n	80008fe <display7SEG_vertical+0x1b6>
	{
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2110      	movs	r1, #16
 80008b2:	487d      	ldr	r0, [pc, #500]	; (8000aa8 <display7SEG_vertical+0x360>)
 80008b4:	f001 ffcb 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008be:	487a      	ldr	r0, [pc, #488]	; (8000aa8 <display7SEG_vertical+0x360>)
 80008c0:	f001 ffc5 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ca:	4877      	ldr	r0, [pc, #476]	; (8000aa8 <display7SEG_vertical+0x360>)
 80008cc:	f001 ffbf 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d6:	4874      	ldr	r0, [pc, #464]	; (8000aa8 <display7SEG_vertical+0x360>)
 80008d8:	f001 ffb9 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e2:	4871      	ldr	r0, [pc, #452]	; (8000aa8 <display7SEG_vertical+0x360>)
 80008e4:	f001 ffb3 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ee:	486e      	ldr	r0, [pc, #440]	; (8000aa8 <display7SEG_vertical+0x360>)
 80008f0:	f001 ffad 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2180      	movs	r1, #128	; 0x80
 80008f8:	486c      	ldr	r0, [pc, #432]	; (8000aac <display7SEG_vertical+0x364>)
 80008fa:	f001 ffa8 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 5)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b05      	cmp	r3, #5
 8000902:	d127      	bne.n	8000954 <display7SEG_vertical+0x20c>
	{
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2110      	movs	r1, #16
 8000908:	4867      	ldr	r0, [pc, #412]	; (8000aa8 <display7SEG_vertical+0x360>)
 800090a:	f001 ffa0 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000914:	4864      	ldr	r0, [pc, #400]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000916:	f001 ff9a 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000920:	4861      	ldr	r0, [pc, #388]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000922:	f001 ff94 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092c:	485e      	ldr	r0, [pc, #376]	; (8000aa8 <display7SEG_vertical+0x360>)
 800092e:	f001 ff8e 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000938:	485b      	ldr	r0, [pc, #364]	; (8000aa8 <display7SEG_vertical+0x360>)
 800093a:	f001 ff88 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000944:	4858      	ldr	r0, [pc, #352]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000946:	f001 ff82 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	4857      	ldr	r0, [pc, #348]	; (8000aac <display7SEG_vertical+0x364>)
 8000950:	f001 ff7d 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 6)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b06      	cmp	r3, #6
 8000958:	d127      	bne.n	80009aa <display7SEG_vertical+0x262>
	{
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2110      	movs	r1, #16
 800095e:	4852      	ldr	r0, [pc, #328]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000960:	f001 ff75 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800096a:	484f      	ldr	r0, [pc, #316]	; (8000aa8 <display7SEG_vertical+0x360>)
 800096c:	f001 ff6f 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000976:	484c      	ldr	r0, [pc, #304]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000978:	f001 ff69 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000982:	4849      	ldr	r0, [pc, #292]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000984:	f001 ff63 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098e:	4846      	ldr	r0, [pc, #280]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000990:	f001 ff5d 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099a:	4843      	ldr	r0, [pc, #268]	; (8000aa8 <display7SEG_vertical+0x360>)
 800099c:	f001 ff57 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	4841      	ldr	r0, [pc, #260]	; (8000aac <display7SEG_vertical+0x364>)
 80009a6:	f001 ff52 	bl	800284e <HAL_GPIO_WritePin>

	}
	if(num == 7)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b07      	cmp	r3, #7
 80009ae:	d127      	bne.n	8000a00 <display7SEG_vertical+0x2b8>
	{
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2110      	movs	r1, #16
 80009b4:	483c      	ldr	r0, [pc, #240]	; (8000aa8 <display7SEG_vertical+0x360>)
 80009b6:	f001 ff4a 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c0:	4839      	ldr	r0, [pc, #228]	; (8000aa8 <display7SEG_vertical+0x360>)
 80009c2:	f001 ff44 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009cc:	4836      	ldr	r0, [pc, #216]	; (8000aa8 <display7SEG_vertical+0x360>)
 80009ce:	f001 ff3e 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d8:	4833      	ldr	r0, [pc, #204]	; (8000aa8 <display7SEG_vertical+0x360>)
 80009da:	f001 ff38 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e4:	4830      	ldr	r0, [pc, #192]	; (8000aa8 <display7SEG_vertical+0x360>)
 80009e6:	f001 ff32 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f0:	482d      	ldr	r0, [pc, #180]	; (8000aa8 <display7SEG_vertical+0x360>)
 80009f2:	f001 ff2c 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	482c      	ldr	r0, [pc, #176]	; (8000aac <display7SEG_vertical+0x364>)
 80009fc:	f001 ff27 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 8)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b08      	cmp	r3, #8
 8000a04:	d127      	bne.n	8000a56 <display7SEG_vertical+0x30e>
	{
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2110      	movs	r1, #16
 8000a0a:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a0c:	f001 ff1f 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a16:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a18:	f001 ff19 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a22:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a24:	f001 ff13 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2e:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a30:	f001 ff0d 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3a:	481b      	ldr	r0, [pc, #108]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a3c:	f001 ff07 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a46:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a48:	f001 ff01 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	4816      	ldr	r0, [pc, #88]	; (8000aac <display7SEG_vertical+0x364>)
 8000a52:	f001 fefc 	bl	800284e <HAL_GPIO_WritePin>
	}
	if(num == 9)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b09      	cmp	r3, #9
 8000a5a:	d12d      	bne.n	8000ab8 <display7SEG_vertical+0x370>
	{
		HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2110      	movs	r1, #16
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a62:	f001 fef4 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a6c:	480e      	ldr	r0, [pc, #56]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a6e:	f001 feee 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a7a:	f001 fee8 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a84:	4808      	ldr	r0, [pc, #32]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a86:	f001 fee2 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a92:	f001 fedc 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <display7SEG_vertical+0x360>)
 8000a9e:	f001 fed6 	bl	800284e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	e004      	b.n	8000ab0 <display7SEG_vertical+0x368>
 8000aa6:	bf00      	nop
 8000aa8:	40010800 	.word	0x40010800
 8000aac:	40010c00 	.word	0x40010c00
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <display7SEG_vertical+0x378>)
 8000ab4:	f001 fecb 	bl	800284e <HAL_GPIO_WritePin>
	}
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40010c00 	.word	0x40010c00

08000ac4 <update7SEG_horizontal>:


void update7SEG_horizontal(int index_horizontal){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	switch(index_horizontal){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <update7SEG_horizontal+0x16>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d012      	beq.n	8000afe <update7SEG_horizontal+0x3a>
			display7SEG_horizontal(_7SEG_buffer_horizontal[1]);
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
			break;
	}
}
 8000ad8:	e023      	b.n	8000b22 <update7SEG_horizontal+0x5e>
			display7SEG_horizontal(_7SEG_buffer_horizontal[0]);
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <update7SEG_horizontal+0x68>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fcac 	bl	800043c <display7SEG_horizontal>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aea:	4811      	ldr	r0, [pc, #68]	; (8000b30 <update7SEG_horizontal+0x6c>)
 8000aec:	f001 feaf 	bl	800284e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000af6:	480e      	ldr	r0, [pc, #56]	; (8000b30 <update7SEG_horizontal+0x6c>)
 8000af8:	f001 fea9 	bl	800284e <HAL_GPIO_WritePin>
			break;
 8000afc:	e011      	b.n	8000b22 <update7SEG_horizontal+0x5e>
			display7SEG_horizontal(_7SEG_buffer_horizontal[1]);
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <update7SEG_horizontal+0x68>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fc9a 	bl	800043c <display7SEG_horizontal>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0e:	4808      	ldr	r0, [pc, #32]	; (8000b30 <update7SEG_horizontal+0x6c>)
 8000b10:	f001 fe9d 	bl	800284e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <update7SEG_horizontal+0x6c>)
 8000b1c:	f001 fe97 	bl	800284e <HAL_GPIO_WritePin>
			break;
 8000b20:	bf00      	nop
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000140 	.word	0x20000140
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <update7SEG_vertical>:

void update7SEG_vertical(int index_vertical){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	switch(index_vertical){
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <update7SEG_vertical+0x16>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d012      	beq.n	8000b6e <update7SEG_vertical+0x3a>
			display7SEG_vertical(_7SEG_buffer_vertical[1]);
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
			break;
	}
}
 8000b48:	e023      	b.n	8000b92 <update7SEG_vertical+0x5e>
			display7SEG_vertical(_7SEG_buffer_vertical[0]);
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <update7SEG_vertical+0x68>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fdfa 	bl	8000748 <display7SEG_vertical>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5a:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <update7SEG_vertical+0x6c>)
 8000b5c:	f001 fe77 	bl	800284e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b66:	480e      	ldr	r0, [pc, #56]	; (8000ba0 <update7SEG_vertical+0x6c>)
 8000b68:	f001 fe71 	bl	800284e <HAL_GPIO_WritePin>
			break;
 8000b6c:	e011      	b.n	8000b92 <update7SEG_vertical+0x5e>
			display7SEG_vertical(_7SEG_buffer_vertical[1]);
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <update7SEG_vertical+0x68>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fde8 	bl	8000748 <display7SEG_vertical>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <update7SEG_vertical+0x6c>)
 8000b80:	f001 fe65 	bl	800284e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <update7SEG_vertical+0x6c>)
 8000b8c:	f001 fe5f 	bl	800284e <HAL_GPIO_WritePin>
			break;
 8000b90:	bf00      	nop
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000148 	.word	0x20000148
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <off7SEG_horizontal>:

void off7SEG_horizontal(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <off7SEG_horizontal+0x20>)
 8000bb0:	f001 fe4d 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bba:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <off7SEG_horizontal+0x20>)
 8000bbc:	f001 fe47 	bl	800284e <HAL_GPIO_WritePin>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40010c00 	.word	0x40010c00

08000bc8 <off7SEG_vertical>:
void off7SEG_vertical(){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <off7SEG_vertical+0x20>)
 8000bd4:	f001 fe3b 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bde:	4802      	ldr	r0, [pc, #8]	; (8000be8 <off7SEG_vertical+0x20>)
 8000be0:	f001 fe35 	bl	800284e <HAL_GPIO_WritePin>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40010c00 	.word	0x40010c00

08000bec <fsm_7SEG_horizontal_run>:
#include "traffic_buffer.h"

int status_7SEG_horizontal = display_countDown_horizontal;


void fsm_7SEG_horizontal_run(){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	switch(status_7SEG_horizontal){
 8000bf0:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <fsm_7SEG_horizontal_run+0x150>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	2b0f      	cmp	r3, #15
 8000bf8:	f200 8095 	bhi.w	8000d26 <fsm_7SEG_horizontal_run+0x13a>
 8000bfc:	a201      	add	r2, pc, #4	; (adr r2, 8000c04 <fsm_7SEG_horizontal_run+0x18>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000d21 	.word	0x08000d21
 8000c08:	08000d27 	.word	0x08000d27
 8000c0c:	08000d27 	.word	0x08000d27
 8000c10:	08000d27 	.word	0x08000d27
 8000c14:	08000d27 	.word	0x08000d27
 8000c18:	08000d27 	.word	0x08000d27
 8000c1c:	08000d27 	.word	0x08000d27
 8000c20:	08000d27 	.word	0x08000d27
 8000c24:	08000d27 	.word	0x08000d27
 8000c28:	08000d27 	.word	0x08000d27
 8000c2c:	08000d27 	.word	0x08000d27
 8000c30:	08000d27 	.word	0x08000d27
 8000c34:	08000c45 	.word	0x08000c45
 8000c38:	08000c73 	.word	0x08000c73
 8000c3c:	08000cad 	.word	0x08000cad
 8000c40:	08000ce7 	.word	0x08000ce7
		case display_countDown_horizontal:
			if(timer4_flag == 1)//control 2 led 7-SEG by scan led
 8000c44:	4b3e      	ldr	r3, [pc, #248]	; (8000d40 <fsm_7SEG_horizontal_run+0x154>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d16e      	bne.n	8000d2a <fsm_7SEG_horizontal_run+0x13e>
			{
				update7SEG_horizontal(index_horizontal++);
 8000c4c:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	493c      	ldr	r1, [pc, #240]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000c54:	600a      	str	r2, [r1, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff34 	bl	8000ac4 <update7SEG_horizontal>
				if(index_horizontal == 2) index_horizontal = 0;
 8000c5c:	4b39      	ldr	r3, [pc, #228]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d102      	bne.n	8000c6a <fsm_7SEG_horizontal_run+0x7e>
 8000c64:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
				setTimer4(200);
 8000c6a:	20c8      	movs	r0, #200	; 0xc8
 8000c6c:	f000 ff66 	bl	8001b3c <setTimer4>
			}
			break;
 8000c70:	e05b      	b.n	8000d2a <fsm_7SEG_horizontal_run+0x13e>
		case display_mode02:
			_7SEG_buffer_horizontal[0] = 0;
 8000c72:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <fsm_7SEG_horizontal_run+0x15c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 2;
 8000c78:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <fsm_7SEG_horizontal_run+0x15c>)
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	605a      	str	r2, [r3, #4]
			if(timer4_flag == 1)//control 2 led 7-SEG by scan led
 8000c7e:	4b30      	ldr	r3, [pc, #192]	; (8000d40 <fsm_7SEG_horizontal_run+0x154>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d153      	bne.n	8000d2e <fsm_7SEG_horizontal_run+0x142>
			{
				update7SEG_horizontal(index_horizontal++);
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	492d      	ldr	r1, [pc, #180]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000c8e:	600a      	str	r2, [r1, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff17 	bl	8000ac4 <update7SEG_horizontal>
				if(index_horizontal == 2) index_horizontal = 0;
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d102      	bne.n	8000ca4 <fsm_7SEG_horizontal_run+0xb8>
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
				setTimer4(200);
 8000ca4:	20c8      	movs	r0, #200	; 0xc8
 8000ca6:	f000 ff49 	bl	8001b3c <setTimer4>
			}
			break;
 8000caa:	e040      	b.n	8000d2e <fsm_7SEG_horizontal_run+0x142>
		case display_mode03:
			_7SEG_buffer_horizontal[0] = 0;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <fsm_7SEG_horizontal_run+0x15c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 3;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <fsm_7SEG_horizontal_run+0x15c>)
 8000cb4:	2203      	movs	r2, #3
 8000cb6:	605a      	str	r2, [r3, #4]
			if(timer4_flag == 1)//control 2 led 7-SEG by scan led
 8000cb8:	4b21      	ldr	r3, [pc, #132]	; (8000d40 <fsm_7SEG_horizontal_run+0x154>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d138      	bne.n	8000d32 <fsm_7SEG_horizontal_run+0x146>
			{
				update7SEG_horizontal(index_horizontal++);
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	1c5a      	adds	r2, r3, #1
 8000cc6:	491f      	ldr	r1, [pc, #124]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000cc8:	600a      	str	r2, [r1, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fefa 	bl	8000ac4 <update7SEG_horizontal>
				if(index_horizontal == 2) index_horizontal = 0;
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d102      	bne.n	8000cde <fsm_7SEG_horizontal_run+0xf2>
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
				setTimer4(200);
 8000cde:	20c8      	movs	r0, #200	; 0xc8
 8000ce0:	f000 ff2c 	bl	8001b3c <setTimer4>
			}
			break;
 8000ce4:	e025      	b.n	8000d32 <fsm_7SEG_horizontal_run+0x146>
		case display_mode04:
			_7SEG_buffer_horizontal[0] = 0;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <fsm_7SEG_horizontal_run+0x15c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
			_7SEG_buffer_horizontal[1] = 4;
 8000cec:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <fsm_7SEG_horizontal_run+0x15c>)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	605a      	str	r2, [r3, #4]
			if(timer4_flag == 1)//control 2 led 7-SEG by scan led
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <fsm_7SEG_horizontal_run+0x154>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d11d      	bne.n	8000d36 <fsm_7SEG_horizontal_run+0x14a>
			{
				update7SEG_horizontal(index_horizontal++);
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	4910      	ldr	r1, [pc, #64]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000d02:	600a      	str	r2, [r1, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fedd 	bl	8000ac4 <update7SEG_horizontal>
				if(index_horizontal == 2) index_horizontal = 0;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d102      	bne.n	8000d18 <fsm_7SEG_horizontal_run+0x12c>
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <fsm_7SEG_horizontal_run+0x158>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
				setTimer4(200);
 8000d18:	20c8      	movs	r0, #200	; 0xc8
 8000d1a:	f000 ff0f 	bl	8001b3c <setTimer4>
			}
			break;
 8000d1e:	e00a      	b.n	8000d36 <fsm_7SEG_horizontal_run+0x14a>
		case off_horizontal:
			off7SEG_horizontal();
 8000d20:	f7ff ff40 	bl	8000ba4 <off7SEG_horizontal>
			break;
 8000d24:	e008      	b.n	8000d38 <fsm_7SEG_horizontal_run+0x14c>
		default:
			break;
 8000d26:	bf00      	nop
 8000d28:	e006      	b.n	8000d38 <fsm_7SEG_horizontal_run+0x14c>
			break;
 8000d2a:	bf00      	nop
 8000d2c:	e004      	b.n	8000d38 <fsm_7SEG_horizontal_run+0x14c>
			break;
 8000d2e:	bf00      	nop
 8000d30:	e002      	b.n	8000d38 <fsm_7SEG_horizontal_run+0x14c>
			break;
 8000d32:	bf00      	nop
 8000d34:	e000      	b.n	8000d38 <fsm_7SEG_horizontal_run+0x14c>
			break;
 8000d36:	bf00      	nop
	}
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000034 	.word	0x20000034
 8000d40:	200000e8 	.word	0x200000e8
 8000d44:	200000c8 	.word	0x200000c8
 8000d48:	20000140 	.word	0x20000140

08000d4c <fsm_7SEG_vertical_run>:

int status_7SEG_vertical = display_countDown_vertical;



void fsm_7SEG_vertical_run(){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	switch(status_7SEG_vertical){
 8000d50:	4b21      	ldr	r3, [pc, #132]	; (8000dd8 <fsm_7SEG_vertical_run+0x8c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b10      	cmp	r3, #16
 8000d56:	d01d      	beq.n	8000d94 <fsm_7SEG_vertical_run+0x48>
 8000d58:	2b10      	cmp	r3, #16
 8000d5a:	dc35      	bgt.n	8000dc8 <fsm_7SEG_vertical_run+0x7c>
 8000d5c:	f113 0f02 	cmn.w	r3, #2
 8000d60:	d02f      	beq.n	8000dc2 <fsm_7SEG_vertical_run+0x76>
 8000d62:	2b0f      	cmp	r3, #15
 8000d64:	d130      	bne.n	8000dc8 <fsm_7SEG_vertical_run+0x7c>
		case display_countDown_vertical:
			if(timer6_flag == 1)//control 2 led 7-SEG
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <fsm_7SEG_vertical_run+0x90>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d12e      	bne.n	8000dcc <fsm_7SEG_vertical_run+0x80>
			{
				update7SEG_vertical(index_vertical++);
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <fsm_7SEG_vertical_run+0x94>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	491a      	ldr	r1, [pc, #104]	; (8000de0 <fsm_7SEG_vertical_run+0x94>)
 8000d76:	600a      	str	r2, [r1, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fedb 	bl	8000b34 <update7SEG_vertical>
				if(index_vertical == 2) index_vertical = 0;
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <fsm_7SEG_vertical_run+0x94>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d102      	bne.n	8000d8c <fsm_7SEG_vertical_run+0x40>
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <fsm_7SEG_vertical_run+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
				setTimer6(200);
 8000d8c:	20c8      	movs	r0, #200	; 0xc8
 8000d8e:	f000 ff09 	bl	8001ba4 <setTimer6>
			}
			break;
 8000d92:	e01b      	b.n	8000dcc <fsm_7SEG_vertical_run+0x80>
		case display_time_value:
			if(timer6_flag == 1)//control 2 led 7-SEG
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <fsm_7SEG_vertical_run+0x90>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d119      	bne.n	8000dd0 <fsm_7SEG_vertical_run+0x84>
			{
				update7SEG_vertical(index_vertical++);
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <fsm_7SEG_vertical_run+0x94>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	1c5a      	adds	r2, r3, #1
 8000da2:	490f      	ldr	r1, [pc, #60]	; (8000de0 <fsm_7SEG_vertical_run+0x94>)
 8000da4:	600a      	str	r2, [r1, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fec4 	bl	8000b34 <update7SEG_vertical>
				if(index_vertical == 2) index_vertical = 0;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <fsm_7SEG_vertical_run+0x94>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d102      	bne.n	8000dba <fsm_7SEG_vertical_run+0x6e>
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <fsm_7SEG_vertical_run+0x94>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
				setTimer6(200);
 8000dba:	20c8      	movs	r0, #200	; 0xc8
 8000dbc:	f000 fef2 	bl	8001ba4 <setTimer6>
			}
			break;
 8000dc0:	e006      	b.n	8000dd0 <fsm_7SEG_vertical_run+0x84>
		case off_vertical:
			off7SEG_vertical();
 8000dc2:	f7ff ff01 	bl	8000bc8 <off7SEG_vertical>
			break;
 8000dc6:	e004      	b.n	8000dd2 <fsm_7SEG_vertical_run+0x86>
		default:
			break;
 8000dc8:	bf00      	nop
 8000dca:	e002      	b.n	8000dd2 <fsm_7SEG_vertical_run+0x86>
			break;
 8000dcc:	bf00      	nop
 8000dce:	e000      	b.n	8000dd2 <fsm_7SEG_vertical_run+0x86>
			break;
 8000dd0:	bf00      	nop
	}
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000038 	.word	0x20000038
 8000ddc:	200000f8 	.word	0x200000f8
 8000de0:	200000cc 	.word	0x200000cc

08000de4 <fsm_mannual_run>:
#include "button.h"
#include "fsm_traffic_blink.h"

status_mannual = mannual_init;

void fsm_mannual_run(){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	switch(status_mannual){
 8000de8:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <fsm_mannual_run+0xf4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3b3c      	subs	r3, #60	; 0x3c
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d86f      	bhi.n	8000ed2 <fsm_mannual_run+0xee>
 8000df2:	a201      	add	r2, pc, #4	; (adr r2, 8000df8 <fsm_mannual_run+0x14>)
 8000df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df8:	08000e09 	.word	0x08000e09
 8000dfc:	08000e19 	.word	0x08000e19
 8000e00:	08000e57 	.word	0x08000e57
 8000e04:	08000e95 	.word	0x08000e95
		case mannual_init:
			status_mannual = mannual_red;
 8000e08:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <fsm_mannual_run+0xf4>)
 8000e0a:	223d      	movs	r2, #61	; 0x3d
 8000e0c:	601a      	str	r2, [r3, #0]
			setTimer9(5000);
 8000e0e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e12:	f000 ff15 	bl	8001c40 <setTimer9>
			break;
 8000e16:	e05d      	b.n	8000ed4 <fsm_mannual_run+0xf0>
		case mannual_red:
			if(timer9_flag == 1){
 8000e18:	4b30      	ldr	r3, [pc, #192]	; (8000edc <fsm_mannual_run+0xf8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d109      	bne.n	8000e34 <fsm_mannual_run+0x50>
				status_system = INIT;
 8000e20:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <fsm_mannual_run+0xfc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <fsm_mannual_run+0x100>)
 8000e28:	2213      	movs	r2, #19
 8000e2a:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <fsm_mannual_run+0x104>)
 8000e2e:	2217      	movs	r2, #23
 8000e30:	601a      	str	r2, [r3, #0]
				break;
 8000e32:	e04f      	b.n	8000ed4 <fsm_mannual_run+0xf0>
			}
			if(isButton_BUT2_Pressed() == 1){
 8000e34:	f7ff f99c 	bl	8000170 <isButton_BUT2_Pressed>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d106      	bne.n	8000e4c <fsm_mannual_run+0x68>
				status_mannual = mannual_green;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <fsm_mannual_run+0xf4>)
 8000e40:	223e      	movs	r2, #62	; 0x3e
 8000e42:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 8000e44:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e48:	f000 fefa 	bl	8001c40 <setTimer9>
			}
			setRed_horizontal();
 8000e4c:	f001 f89c 	bl	8001f88 <setRed_horizontal>
			setRed_vertical();
 8000e50:	f001 f8dc 	bl	800200c <setRed_vertical>
			break;
 8000e54:	e03e      	b.n	8000ed4 <fsm_mannual_run+0xf0>
		case mannual_green:
			if(timer9_flag == 1){
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <fsm_mannual_run+0xf8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d109      	bne.n	8000e72 <fsm_mannual_run+0x8e>
				status_system = INIT;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <fsm_mannual_run+0xfc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <fsm_mannual_run+0x100>)
 8000e66:	2213      	movs	r2, #19
 8000e68:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <fsm_mannual_run+0x104>)
 8000e6c:	2217      	movs	r2, #23
 8000e6e:	601a      	str	r2, [r3, #0]
				break;
 8000e70:	e030      	b.n	8000ed4 <fsm_mannual_run+0xf0>
			}
			if(isButton_BUT2_Pressed() == 1){
 8000e72:	f7ff f97d 	bl	8000170 <isButton_BUT2_Pressed>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d106      	bne.n	8000e8a <fsm_mannual_run+0xa6>
				status_mannual = mannual_yellow;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <fsm_mannual_run+0xf4>)
 8000e7e:	223f      	movs	r2, #63	; 0x3f
 8000e80:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 8000e82:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e86:	f000 fedb 	bl	8001c40 <setTimer9>
			}
			setGreen_horizontal();
 8000e8a:	f001 f893 	bl	8001fb4 <setGreen_horizontal>
			setGreen_vertical();
 8000e8e:	f001 f8d5 	bl	800203c <setGreen_vertical>
			break;
 8000e92:	e01f      	b.n	8000ed4 <fsm_mannual_run+0xf0>
		case mannual_yellow:
			if(timer9_flag == 1){
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <fsm_mannual_run+0xf8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d109      	bne.n	8000eb0 <fsm_mannual_run+0xcc>
				status_system = INIT;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <fsm_mannual_run+0xfc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
				status_traffic_blink_horizontal = init_horizontal;
 8000ea2:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <fsm_mannual_run+0x100>)
 8000ea4:	2213      	movs	r2, #19
 8000ea6:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <fsm_mannual_run+0x104>)
 8000eaa:	2217      	movs	r2, #23
 8000eac:	601a      	str	r2, [r3, #0]
				break;
 8000eae:	e011      	b.n	8000ed4 <fsm_mannual_run+0xf0>
			}
			if(isButton_BUT2_Pressed() == 1){
 8000eb0:	f7ff f95e 	bl	8000170 <isButton_BUT2_Pressed>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d106      	bne.n	8000ec8 <fsm_mannual_run+0xe4>
				status_mannual = mannual_red;
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <fsm_mannual_run+0xf4>)
 8000ebc:	223d      	movs	r2, #61	; 0x3d
 8000ebe:	601a      	str	r2, [r3, #0]
				setTimer9(5000);
 8000ec0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ec4:	f000 febc 	bl	8001c40 <setTimer9>
			}
			setYellow_horizontal();
 8000ec8:	f001 f88a 	bl	8001fe0 <setYellow_horizontal>
			setYellow_vertical();
 8000ecc:	f001 f8ce 	bl	800206c <setYellow_vertical>
			break;
 8000ed0:	e000      	b.n	8000ed4 <fsm_mannual_run+0xf0>
		default:
			break;
 8000ed2:	bf00      	nop
	}
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000003c 	.word	0x2000003c
 8000edc:	20000110 	.word	0x20000110
 8000ee0:	200000c4 	.word	0x200000c4
 8000ee4:	20000040 	.word	0x20000040
 8000ee8:	20000044 	.word	0x20000044

08000eec <fsm_system_run>:
#include "fsm_traffic_blink.h"
#include "fsm_mannual.h"
#include "software_timer.h"


fsm_system_run(){
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	switch(status_system){
 8000ef0:	4b9e      	ldr	r3, [pc, #632]	; (800116c <fsm_system_run+0x280>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	dc13      	bgt.n	8000f20 <fsm_system_run+0x34>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f2c0 8135 	blt.w	8001168 <fsm_system_run+0x27c>
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	f200 8132 	bhi.w	8001168 <fsm_system_run+0x27c>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <fsm_system_run+0x20>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f27 	.word	0x08000f27
 8000f10:	08000f2f 	.word	0x08000f2f
 8000f14:	08000f91 	.word	0x08000f91
 8000f18:	08001027 	.word	0x08001027
 8000f1c:	080010bb 	.word	0x080010bb
 8000f20:	2b5f      	cmp	r3, #95	; 0x5f
 8000f22:	d022      	beq.n	8000f6a <fsm_system_run+0x7e>
				status_traffic_blink_vertical = init_vertical;
				status_system = INIT;
			}
			break;
	}
}
 8000f24:	e120      	b.n	8001168 <fsm_system_run+0x27c>
			status_system = MODE1;
 8000f26:	4b91      	ldr	r3, [pc, #580]	; (800116c <fsm_system_run+0x280>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
			break;
 8000f2c:	e11c      	b.n	8001168 <fsm_system_run+0x27c>
			status_traffic_horizontal = display_traffic_horizontal;
 8000f2e:	4b90      	ldr	r3, [pc, #576]	; (8001170 <fsm_system_run+0x284>)
 8000f30:	2205      	movs	r2, #5
 8000f32:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = display_traffic_vertical;
 8000f34:	4b8f      	ldr	r3, [pc, #572]	; (8001174 <fsm_system_run+0x288>)
 8000f36:	2209      	movs	r2, #9
 8000f38:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_countDown_horizontal;
 8000f3a:	4b8f      	ldr	r3, [pc, #572]	; (8001178 <fsm_system_run+0x28c>)
 8000f3c:	220b      	movs	r2, #11
 8000f3e:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_countDown_vertical;
 8000f40:	4b8e      	ldr	r3, [pc, #568]	; (800117c <fsm_system_run+0x290>)
 8000f42:	220f      	movs	r2, #15
 8000f44:	601a      	str	r2, [r3, #0]
			if(isButton_BUT1_Pressed() == 1){
 8000f46:	f7ff f901 	bl	800014c <isButton_BUT1_Pressed>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d102      	bne.n	8000f56 <fsm_system_run+0x6a>
				status_system = MODE2;
 8000f50:	4b86      	ldr	r3, [pc, #536]	; (800116c <fsm_system_run+0x280>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000f56:	f7ff f90b 	bl	8000170 <isButton_BUT2_Pressed>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	f040 80fc 	bne.w	800115a <fsm_system_run+0x26e>
				status_system = MAN_MODE;
 8000f62:	4b82      	ldr	r3, [pc, #520]	; (800116c <fsm_system_run+0x280>)
 8000f64:	225f      	movs	r2, #95	; 0x5f
 8000f66:	601a      	str	r2, [r3, #0]
			break;
 8000f68:	e0f7      	b.n	800115a <fsm_system_run+0x26e>
			fsm_mannual_run();
 8000f6a:	f7ff ff3b 	bl	8000de4 <fsm_mannual_run>
			status_7SEG_horizontal = off_horizontal;
 8000f6e:	4b82      	ldr	r3, [pc, #520]	; (8001178 <fsm_system_run+0x28c>)
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = off_vertical;
 8000f76:	4b81      	ldr	r3, [pc, #516]	; (800117c <fsm_system_run+0x290>)
 8000f78:	f06f 0201 	mvn.w	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
			status_traffic_horizontal = mannual_horizontal;
 8000f7e:	4b7c      	ldr	r3, [pc, #496]	; (8001170 <fsm_system_run+0x284>)
 8000f80:	f06f 0202 	mvn.w	r2, #2
 8000f84:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = mannual_vertical;
 8000f86:	4b7b      	ldr	r3, [pc, #492]	; (8001174 <fsm_system_run+0x288>)
 8000f88:	f06f 0203 	mvn.w	r2, #3
 8000f8c:	601a      	str	r2, [r3, #0]
			break;
 8000f8e:	e0eb      	b.n	8001168 <fsm_system_run+0x27c>
			status_traffic_horizontal = modifying_led_red_horizontal;
 8000f90:	4b77      	ldr	r3, [pc, #476]	; (8001170 <fsm_system_run+0x284>)
 8000f92:	2206      	movs	r2, #6
 8000f94:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_red_vertical;
 8000f96:	4b77      	ldr	r3, [pc, #476]	; (8001174 <fsm_system_run+0x288>)
 8000f98:	221e      	movs	r2, #30
 8000f9a:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode02;
 8000f9c:	4b76      	ldr	r3, [pc, #472]	; (8001178 <fsm_system_run+0x28c>)
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8000fa2:	4b76      	ldr	r3, [pc, #472]	; (800117c <fsm_system_run+0x290>)
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 8000fa8:	f7ff f8e2 	bl	8000170 <isButton_BUT2_Pressed>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d109      	bne.n	8000fc6 <fsm_system_run+0xda>
				time_red_horizontal++;
 8000fb2:	4b73      	ldr	r3, [pc, #460]	; (8001180 <fsm_system_run+0x294>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	4a71      	ldr	r2, [pc, #452]	; (8001180 <fsm_system_run+0x294>)
 8000fba:	6013      	str	r3, [r2, #0]
				time_red_vertical++;
 8000fbc:	4b71      	ldr	r3, [pc, #452]	; (8001184 <fsm_system_run+0x298>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a70      	ldr	r2, [pc, #448]	; (8001184 <fsm_system_run+0x298>)
 8000fc4:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_red_vertical/10;
 8000fc6:	4b6f      	ldr	r3, [pc, #444]	; (8001184 <fsm_system_run+0x298>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a6f      	ldr	r2, [pc, #444]	; (8001188 <fsm_system_run+0x29c>)
 8000fcc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd0:	1092      	asrs	r2, r2, #2
 8000fd2:	17db      	asrs	r3, r3, #31
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	4a6d      	ldr	r2, [pc, #436]	; (800118c <fsm_system_run+0x2a0>)
 8000fd8:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical%10;
 8000fda:	4b6a      	ldr	r3, [pc, #424]	; (8001184 <fsm_system_run+0x298>)
 8000fdc:	6819      	ldr	r1, [r3, #0]
 8000fde:	4b6a      	ldr	r3, [pc, #424]	; (8001188 <fsm_system_run+0x29c>)
 8000fe0:	fb83 2301 	smull	r2, r3, r3, r1
 8000fe4:	109a      	asrs	r2, r3, #2
 8000fe6:	17cb      	asrs	r3, r1, #31
 8000fe8:	1ad2      	subs	r2, r2, r3
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	1aca      	subs	r2, r1, r3
 8000ff4:	4b65      	ldr	r3, [pc, #404]	; (800118c <fsm_system_run+0x2a0>)
 8000ff6:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8000ff8:	f7ff f8cc 	bl	8000194 <isButton_BUT3_Pressed>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d107      	bne.n	8001012 <fsm_system_run+0x126>
				time_red_horizontal_temp= time_red_horizontal;
 8001002:	4b5f      	ldr	r3, [pc, #380]	; (8001180 <fsm_system_run+0x294>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a62      	ldr	r2, [pc, #392]	; (8001190 <fsm_system_run+0x2a4>)
 8001008:	6013      	str	r3, [r2, #0]
				time_red_vertical_temp= time_red_vertical;
 800100a:	4b5e      	ldr	r3, [pc, #376]	; (8001184 <fsm_system_run+0x298>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a61      	ldr	r2, [pc, #388]	; (8001194 <fsm_system_run+0x2a8>)
 8001010:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 8001012:	f7ff f89b 	bl	800014c <isButton_BUT1_Pressed>
 8001016:	4603      	mov	r3, r0
 8001018:	2b01      	cmp	r3, #1
 800101a:	f040 80a0 	bne.w	800115e <fsm_system_run+0x272>
				status_system = MODE3;
 800101e:	4b53      	ldr	r3, [pc, #332]	; (800116c <fsm_system_run+0x280>)
 8001020:	2203      	movs	r2, #3
 8001022:	601a      	str	r2, [r3, #0]
			break;
 8001024:	e09b      	b.n	800115e <fsm_system_run+0x272>
			status_traffic_horizontal = modifying_led_yellow_horizontal;
 8001026:	4b52      	ldr	r3, [pc, #328]	; (8001170 <fsm_system_run+0x284>)
 8001028:	2208      	movs	r2, #8
 800102a:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_yellow_vertical;
 800102c:	4b51      	ldr	r3, [pc, #324]	; (8001174 <fsm_system_run+0x288>)
 800102e:	2220      	movs	r2, #32
 8001030:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode03;
 8001032:	4b51      	ldr	r3, [pc, #324]	; (8001178 <fsm_system_run+0x28c>)
 8001034:	220d      	movs	r2, #13
 8001036:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 8001038:	4b50      	ldr	r3, [pc, #320]	; (800117c <fsm_system_run+0x290>)
 800103a:	2210      	movs	r2, #16
 800103c:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 800103e:	f7ff f897 	bl	8000170 <isButton_BUT2_Pressed>
 8001042:	4603      	mov	r3, r0
 8001044:	2b01      	cmp	r3, #1
 8001046:	d109      	bne.n	800105c <fsm_system_run+0x170>
				time_yellow_horizontal++;
 8001048:	4b53      	ldr	r3, [pc, #332]	; (8001198 <fsm_system_run+0x2ac>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a52      	ldr	r2, [pc, #328]	; (8001198 <fsm_system_run+0x2ac>)
 8001050:	6013      	str	r3, [r2, #0]
				time_yellow_vertical++;
 8001052:	4b52      	ldr	r3, [pc, #328]	; (800119c <fsm_system_run+0x2b0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	4a50      	ldr	r2, [pc, #320]	; (800119c <fsm_system_run+0x2b0>)
 800105a:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_yellow_vertical/10;
 800105c:	4b4f      	ldr	r3, [pc, #316]	; (800119c <fsm_system_run+0x2b0>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a49      	ldr	r2, [pc, #292]	; (8001188 <fsm_system_run+0x29c>)
 8001062:	fb82 1203 	smull	r1, r2, r2, r3
 8001066:	1092      	asrs	r2, r2, #2
 8001068:	17db      	asrs	r3, r3, #31
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	4a47      	ldr	r2, [pc, #284]	; (800118c <fsm_system_run+0x2a0>)
 800106e:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical%10;
 8001070:	4b4a      	ldr	r3, [pc, #296]	; (800119c <fsm_system_run+0x2b0>)
 8001072:	6819      	ldr	r1, [r3, #0]
 8001074:	4b44      	ldr	r3, [pc, #272]	; (8001188 <fsm_system_run+0x29c>)
 8001076:	fb83 2301 	smull	r2, r3, r3, r1
 800107a:	109a      	asrs	r2, r3, #2
 800107c:	17cb      	asrs	r3, r1, #31
 800107e:	1ad2      	subs	r2, r2, r3
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	1aca      	subs	r2, r1, r3
 800108a:	4b40      	ldr	r3, [pc, #256]	; (800118c <fsm_system_run+0x2a0>)
 800108c:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 800108e:	f7ff f881 	bl	8000194 <isButton_BUT3_Pressed>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	d107      	bne.n	80010a8 <fsm_system_run+0x1bc>
				time_yellow_horizontal_temp= time_yellow_horizontal;
 8001098:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <fsm_system_run+0x2ac>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <fsm_system_run+0x2b4>)
 800109e:	6013      	str	r3, [r2, #0]
				time_yellow_vertical_temp= time_yellow_vertical;
 80010a0:	4b3e      	ldr	r3, [pc, #248]	; (800119c <fsm_system_run+0x2b0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a3f      	ldr	r2, [pc, #252]	; (80011a4 <fsm_system_run+0x2b8>)
 80010a6:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 80010a8:	f7ff f850 	bl	800014c <isButton_BUT1_Pressed>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d157      	bne.n	8001162 <fsm_system_run+0x276>
				status_system = MODE4;
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <fsm_system_run+0x280>)
 80010b4:	2204      	movs	r2, #4
 80010b6:	601a      	str	r2, [r3, #0]
			break;
 80010b8:	e053      	b.n	8001162 <fsm_system_run+0x276>
			status_traffic_horizontal = modifying_led_green_horizontal;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <fsm_system_run+0x284>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
			status_traffic_vertical = modifying_led_green_vertical;
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <fsm_system_run+0x288>)
 80010c2:	221f      	movs	r2, #31
 80010c4:	601a      	str	r2, [r3, #0]
			status_7SEG_horizontal = display_mode04;
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <fsm_system_run+0x28c>)
 80010c8:	220e      	movs	r2, #14
 80010ca:	601a      	str	r2, [r3, #0]
			status_7SEG_vertical = display_time_value;
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <fsm_system_run+0x290>)
 80010ce:	2210      	movs	r2, #16
 80010d0:	601a      	str	r2, [r3, #0]
			if(isButton_BUT2_Pressed() == 1){
 80010d2:	f7ff f84d 	bl	8000170 <isButton_BUT2_Pressed>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d109      	bne.n	80010f0 <fsm_system_run+0x204>
				time_green_horizontal++;
 80010dc:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <fsm_system_run+0x2bc>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4a31      	ldr	r2, [pc, #196]	; (80011a8 <fsm_system_run+0x2bc>)
 80010e4:	6013      	str	r3, [r2, #0]
				time_green_vertical++;
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <fsm_system_run+0x2c0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	4a2f      	ldr	r2, [pc, #188]	; (80011ac <fsm_system_run+0x2c0>)
 80010ee:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[0] = time_green_vertical/10;
 80010f0:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <fsm_system_run+0x2c0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a24      	ldr	r2, [pc, #144]	; (8001188 <fsm_system_run+0x29c>)
 80010f6:	fb82 1203 	smull	r1, r2, r2, r3
 80010fa:	1092      	asrs	r2, r2, #2
 80010fc:	17db      	asrs	r3, r3, #31
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	4a22      	ldr	r2, [pc, #136]	; (800118c <fsm_system_run+0x2a0>)
 8001102:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical%10;
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <fsm_system_run+0x2c0>)
 8001106:	6819      	ldr	r1, [r3, #0]
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <fsm_system_run+0x29c>)
 800110a:	fb83 2301 	smull	r2, r3, r3, r1
 800110e:	109a      	asrs	r2, r3, #2
 8001110:	17cb      	asrs	r3, r1, #31
 8001112:	1ad2      	subs	r2, r2, r3
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	1aca      	subs	r2, r1, r3
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <fsm_system_run+0x2a0>)
 8001120:	605a      	str	r2, [r3, #4]
			if(isButton_BUT3_Pressed() == 1){
 8001122:	f7ff f837 	bl	8000194 <isButton_BUT3_Pressed>
 8001126:	4603      	mov	r3, r0
 8001128:	2b01      	cmp	r3, #1
 800112a:	d107      	bne.n	800113c <fsm_system_run+0x250>
				time_green_horizontal_temp= time_green_horizontal;
 800112c:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <fsm_system_run+0x2bc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <fsm_system_run+0x2c4>)
 8001132:	6013      	str	r3, [r2, #0]
				time_green_vertical_temp= time_green_vertical;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <fsm_system_run+0x2c0>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <fsm_system_run+0x2c8>)
 800113a:	6013      	str	r3, [r2, #0]
			if(isButton_BUT1_Pressed() == 1){
 800113c:	f7ff f806 	bl	800014c <isButton_BUT1_Pressed>
 8001140:	4603      	mov	r3, r0
 8001142:	2b01      	cmp	r3, #1
 8001144:	d10f      	bne.n	8001166 <fsm_system_run+0x27a>
				status_traffic_blink_horizontal = init_horizontal;
 8001146:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <fsm_system_run+0x2cc>)
 8001148:	2213      	movs	r2, #19
 800114a:	601a      	str	r2, [r3, #0]
				status_traffic_blink_vertical = init_vertical;
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <fsm_system_run+0x2d0>)
 800114e:	2217      	movs	r2, #23
 8001150:	601a      	str	r2, [r3, #0]
				status_system = INIT;
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <fsm_system_run+0x280>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
			break;
 8001158:	e005      	b.n	8001166 <fsm_system_run+0x27a>
			break;
 800115a:	bf00      	nop
 800115c:	e004      	b.n	8001168 <fsm_system_run+0x27c>
			break;
 800115e:	bf00      	nop
 8001160:	e002      	b.n	8001168 <fsm_system_run+0x27c>
			break;
 8001162:	bf00      	nop
 8001164:	e000      	b.n	8001168 <fsm_system_run+0x27c>
			break;
 8001166:	bf00      	nop
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000c4 	.word	0x200000c4
 8001170:	20000048 	.word	0x20000048
 8001174:	2000004c 	.word	0x2000004c
 8001178:	20000034 	.word	0x20000034
 800117c:	20000038 	.word	0x20000038
 8001180:	20000050 	.word	0x20000050
 8001184:	20000070 	.word	0x20000070
 8001188:	66666667 	.word	0x66666667
 800118c:	20000148 	.word	0x20000148
 8001190:	2000005c 	.word	0x2000005c
 8001194:	2000007c 	.word	0x2000007c
 8001198:	20000058 	.word	0x20000058
 800119c:	2000006c 	.word	0x2000006c
 80011a0:	20000064 	.word	0x20000064
 80011a4:	20000078 	.word	0x20000078
 80011a8:	20000054 	.word	0x20000054
 80011ac:	20000068 	.word	0x20000068
 80011b0:	20000060 	.word	0x20000060
 80011b4:	20000074 	.word	0x20000074
 80011b8:	20000040 	.word	0x20000040
 80011bc:	20000044 	.word	0x20000044

080011c0 <fsm_traffic_blink_horizontal_run>:
#include "control_7SEG.h"

int status_traffic_blink_horizontal = init_horizontal;
int status_traffic_blink_vertical = init_vertical;

void fsm_traffic_blink_horizontal_run(){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_horizontal){
 80011c4:	4b85      	ldr	r3, [pc, #532]	; (80013dc <fsm_traffic_blink_horizontal_run+0x21c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	3b13      	subs	r3, #19
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	f200 80fd 	bhi.w	80013ca <fsm_traffic_blink_horizontal_run+0x20a>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <fsm_traffic_blink_horizontal_run+0x18>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	080011e9 	.word	0x080011e9
 80011dc:	08001213 	.word	0x08001213
 80011e0:	080012a7 	.word	0x080012a7
 80011e4:	08001339 	.word	0x08001339
		case init_horizontal:
			status_traffic_blink_horizontal = red_horizontal;
 80011e8:	4b7c      	ldr	r3, [pc, #496]	; (80013dc <fsm_traffic_blink_horizontal_run+0x21c>)
 80011ea:	2214      	movs	r2, #20
 80011ec:	601a      	str	r2, [r3, #0]
			traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 80011ee:	4b7c      	ldr	r3, [pc, #496]	; (80013e0 <fsm_traffic_blink_horizontal_run+0x220>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011f6:	fb02 f303 	mul.w	r3, r2, r3
 80011fa:	4a7a      	ldr	r2, [pc, #488]	; (80013e4 <fsm_traffic_blink_horizontal_run+0x224>)
 80011fc:	6013      	str	r3, [r2, #0]
			//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
			setTimer1(traffic_buffer_horizontal[0]);
 80011fe:	4b79      	ldr	r3, [pc, #484]	; (80013e4 <fsm_traffic_blink_horizontal_run+0x224>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fc4c 	bl	8001aa0 <setTimer1>
			setTimer3(1000);// count down as a clock
 8001208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800120c:	f000 fc7c 	bl	8001b08 <setTimer3>
			break;
 8001210:	e0e2      	b.n	80013d8 <fsm_traffic_blink_horizontal_run+0x218>
		case red_horizontal:
			setRed_horizontal();
 8001212:	f000 feb9 	bl	8001f88 <setRed_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_red_horizontal_temp/10;
 8001216:	4b74      	ldr	r3, [pc, #464]	; (80013e8 <fsm_traffic_blink_horizontal_run+0x228>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a74      	ldr	r2, [pc, #464]	; (80013ec <fsm_traffic_blink_horizontal_run+0x22c>)
 800121c:	fb82 1203 	smull	r1, r2, r2, r3
 8001220:	1092      	asrs	r2, r2, #2
 8001222:	17db      	asrs	r3, r3, #31
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	4a72      	ldr	r2, [pc, #456]	; (80013f0 <fsm_traffic_blink_horizontal_run+0x230>)
 8001228:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_red_horizontal_temp%10;
 800122a:	4b6f      	ldr	r3, [pc, #444]	; (80013e8 <fsm_traffic_blink_horizontal_run+0x228>)
 800122c:	6819      	ldr	r1, [r3, #0]
 800122e:	4b6f      	ldr	r3, [pc, #444]	; (80013ec <fsm_traffic_blink_horizontal_run+0x22c>)
 8001230:	fb83 2301 	smull	r2, r3, r3, r1
 8001234:	109a      	asrs	r2, r3, #2
 8001236:	17cb      	asrs	r3, r1, #31
 8001238:	1ad2      	subs	r2, r2, r3
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	1aca      	subs	r2, r1, r3
 8001244:	4b6a      	ldr	r3, [pc, #424]	; (80013f0 <fsm_traffic_blink_horizontal_run+0x230>)
 8001246:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 8001248:	4b6a      	ldr	r3, [pc, #424]	; (80013f4 <fsm_traffic_blink_horizontal_run+0x234>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d110      	bne.n	8001272 <fsm_traffic_blink_horizontal_run+0xb2>
				time_red_horizontal_temp--;
 8001250:	4b65      	ldr	r3, [pc, #404]	; (80013e8 <fsm_traffic_blink_horizontal_run+0x228>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	3b01      	subs	r3, #1
 8001256:	4a64      	ldr	r2, [pc, #400]	; (80013e8 <fsm_traffic_blink_horizontal_run+0x228>)
 8001258:	6013      	str	r3, [r2, #0]
				if(time_red_horizontal_temp == 0){
 800125a:	4b63      	ldr	r3, [pc, #396]	; (80013e8 <fsm_traffic_blink_horizontal_run+0x228>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d103      	bne.n	800126a <fsm_traffic_blink_horizontal_run+0xaa>
					time_red_horizontal_temp = time_red_horizontal;
 8001262:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <fsm_traffic_blink_horizontal_run+0x220>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a60      	ldr	r2, [pc, #384]	; (80013e8 <fsm_traffic_blink_horizontal_run+0x228>)
 8001268:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 800126a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126e:	f000 fc4b 	bl	8001b08 <setTimer3>
			}

			if(timer1_flag == 1){
 8001272:	4b61      	ldr	r3, [pc, #388]	; (80013f8 <fsm_traffic_blink_horizontal_run+0x238>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	f040 80a9 	bne.w	80013ce <fsm_traffic_blink_horizontal_run+0x20e>
				status_traffic_blink_horizontal = green_horizontal;
 800127c:	4b57      	ldr	r3, [pc, #348]	; (80013dc <fsm_traffic_blink_horizontal_run+0x21c>)
 800127e:	2215      	movs	r2, #21
 8001280:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[1] = time_green_horizontal*1000;
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <fsm_traffic_blink_horizontal_run+0x23c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800128a:	fb02 f303 	mul.w	r3, r2, r3
 800128e:	4a55      	ldr	r2, [pc, #340]	; (80013e4 <fsm_traffic_blink_horizontal_run+0x224>)
 8001290:	6053      	str	r3, [r2, #4]
				//led green will turn on in traffic_buffer_horizontal[1]/1000 seconds
				setTimer1(traffic_buffer_horizontal[1]);
 8001292:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <fsm_traffic_blink_horizontal_run+0x224>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fc02 	bl	8001aa0 <setTimer1>
				setTimer3(1000);
 800129c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a0:	f000 fc32 	bl	8001b08 <setTimer3>
			}
			break;
 80012a4:	e093      	b.n	80013ce <fsm_traffic_blink_horizontal_run+0x20e>
		case green_horizontal:
			setGreen_horizontal();
 80012a6:	f000 fe85 	bl	8001fb4 <setGreen_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_green_horizontal_temp/10;
 80012aa:	4b55      	ldr	r3, [pc, #340]	; (8001400 <fsm_traffic_blink_horizontal_run+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a4f      	ldr	r2, [pc, #316]	; (80013ec <fsm_traffic_blink_horizontal_run+0x22c>)
 80012b0:	fb82 1203 	smull	r1, r2, r2, r3
 80012b4:	1092      	asrs	r2, r2, #2
 80012b6:	17db      	asrs	r3, r3, #31
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	4a4d      	ldr	r2, [pc, #308]	; (80013f0 <fsm_traffic_blink_horizontal_run+0x230>)
 80012bc:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_green_horizontal_temp%10;
 80012be:	4b50      	ldr	r3, [pc, #320]	; (8001400 <fsm_traffic_blink_horizontal_run+0x240>)
 80012c0:	6819      	ldr	r1, [r3, #0]
 80012c2:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <fsm_traffic_blink_horizontal_run+0x22c>)
 80012c4:	fb83 2301 	smull	r2, r3, r3, r1
 80012c8:	109a      	asrs	r2, r3, #2
 80012ca:	17cb      	asrs	r3, r1, #31
 80012cc:	1ad2      	subs	r2, r2, r3
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	1aca      	subs	r2, r1, r3
 80012d8:	4b45      	ldr	r3, [pc, #276]	; (80013f0 <fsm_traffic_blink_horizontal_run+0x230>)
 80012da:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 80012dc:	4b45      	ldr	r3, [pc, #276]	; (80013f4 <fsm_traffic_blink_horizontal_run+0x234>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d110      	bne.n	8001306 <fsm_traffic_blink_horizontal_run+0x146>
				time_green_horizontal_temp--;
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <fsm_traffic_blink_horizontal_run+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	4a45      	ldr	r2, [pc, #276]	; (8001400 <fsm_traffic_blink_horizontal_run+0x240>)
 80012ec:	6013      	str	r3, [r2, #0]
				if(time_green_horizontal_temp == 0){
 80012ee:	4b44      	ldr	r3, [pc, #272]	; (8001400 <fsm_traffic_blink_horizontal_run+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d103      	bne.n	80012fe <fsm_traffic_blink_horizontal_run+0x13e>
					time_green_horizontal_temp = time_green_horizontal;
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <fsm_traffic_blink_horizontal_run+0x23c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a41      	ldr	r2, [pc, #260]	; (8001400 <fsm_traffic_blink_horizontal_run+0x240>)
 80012fc:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 80012fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001302:	f000 fc01 	bl	8001b08 <setTimer3>
			}

			if(timer1_flag == 1){
 8001306:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <fsm_traffic_blink_horizontal_run+0x238>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d161      	bne.n	80013d2 <fsm_traffic_blink_horizontal_run+0x212>
				status_traffic_blink_horizontal = yellow_horizontal;
 800130e:	4b33      	ldr	r3, [pc, #204]	; (80013dc <fsm_traffic_blink_horizontal_run+0x21c>)
 8001310:	2216      	movs	r2, #22
 8001312:	601a      	str	r2, [r3, #0]
				traffic_buffer_horizontal[2] = time_yellow_horizontal*1000;
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <fsm_traffic_blink_horizontal_run+0x244>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	4a30      	ldr	r2, [pc, #192]	; (80013e4 <fsm_traffic_blink_horizontal_run+0x224>)
 8001322:	6093      	str	r3, [r2, #8]
				//led yellow will turn on in traffic_buffer_horizontal[2]/1000 seconds
				setTimer1(traffic_buffer_horizontal[2]);
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <fsm_traffic_blink_horizontal_run+0x224>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fbb9 	bl	8001aa0 <setTimer1>
				setTimer3(1000);
 800132e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001332:	f000 fbe9 	bl	8001b08 <setTimer3>
			}
			break;
 8001336:	e04c      	b.n	80013d2 <fsm_traffic_blink_horizontal_run+0x212>
		case yellow_horizontal:
			setYellow_horizontal();
 8001338:	f000 fe52 	bl	8001fe0 <setYellow_horizontal>
			//update _7SEG_buffer_horizontal
			_7SEG_buffer_horizontal[0] = time_yellow_horizontal_temp/10;
 800133c:	4b32      	ldr	r3, [pc, #200]	; (8001408 <fsm_traffic_blink_horizontal_run+0x248>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a2a      	ldr	r2, [pc, #168]	; (80013ec <fsm_traffic_blink_horizontal_run+0x22c>)
 8001342:	fb82 1203 	smull	r1, r2, r2, r3
 8001346:	1092      	asrs	r2, r2, #2
 8001348:	17db      	asrs	r3, r3, #31
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <fsm_traffic_blink_horizontal_run+0x230>)
 800134e:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_horizontal[1] = time_yellow_horizontal_temp%10;
 8001350:	4b2d      	ldr	r3, [pc, #180]	; (8001408 <fsm_traffic_blink_horizontal_run+0x248>)
 8001352:	6819      	ldr	r1, [r3, #0]
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <fsm_traffic_blink_horizontal_run+0x22c>)
 8001356:	fb83 2301 	smull	r2, r3, r3, r1
 800135a:	109a      	asrs	r2, r3, #2
 800135c:	17cb      	asrs	r3, r1, #31
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	1aca      	subs	r2, r1, r3
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <fsm_traffic_blink_horizontal_run+0x230>)
 800136c:	605a      	str	r2, [r3, #4]

			if(timer3_flag == 1){
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <fsm_traffic_blink_horizontal_run+0x234>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d110      	bne.n	8001398 <fsm_traffic_blink_horizontal_run+0x1d8>
				time_yellow_horizontal_temp--;
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <fsm_traffic_blink_horizontal_run+0x248>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3b01      	subs	r3, #1
 800137c:	4a22      	ldr	r2, [pc, #136]	; (8001408 <fsm_traffic_blink_horizontal_run+0x248>)
 800137e:	6013      	str	r3, [r2, #0]
				if(time_yellow_horizontal_temp == 0){
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <fsm_traffic_blink_horizontal_run+0x248>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <fsm_traffic_blink_horizontal_run+0x1d0>
					time_yellow_horizontal_temp = time_yellow_horizontal;
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <fsm_traffic_blink_horizontal_run+0x244>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <fsm_traffic_blink_horizontal_run+0x248>)
 800138e:	6013      	str	r3, [r2, #0]
				}
				setTimer3(1000);
 8001390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001394:	f000 fbb8 	bl	8001b08 <setTimer3>
			}

			if(timer1_flag == 1){
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <fsm_traffic_blink_horizontal_run+0x238>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d11a      	bne.n	80013d6 <fsm_traffic_blink_horizontal_run+0x216>
				status_traffic_blink_horizontal = red_horizontal;
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <fsm_traffic_blink_horizontal_run+0x21c>)
 80013a2:	2214      	movs	r2, #20
 80013a4:	601a      	str	r2, [r3, #0]
				//led red will turn on in traffic_buffer_horizontal[0]/1000 seconds
				traffic_buffer_horizontal[0] = time_red_horizontal*1000;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <fsm_traffic_blink_horizontal_run+0x220>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <fsm_traffic_blink_horizontal_run+0x224>)
 80013b4:	6013      	str	r3, [r2, #0]
				setTimer1(traffic_buffer_horizontal[0]);
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <fsm_traffic_blink_horizontal_run+0x224>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fb70 	bl	8001aa0 <setTimer1>
				setTimer3(1000);
 80013c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c4:	f000 fba0 	bl	8001b08 <setTimer3>
			}
			break;
 80013c8:	e005      	b.n	80013d6 <fsm_traffic_blink_horizontal_run+0x216>
		default:
			break;
 80013ca:	bf00      	nop
 80013cc:	e004      	b.n	80013d8 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 80013ce:	bf00      	nop
 80013d0:	e002      	b.n	80013d8 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 80013d2:	bf00      	nop
 80013d4:	e000      	b.n	80013d8 <fsm_traffic_blink_horizontal_run+0x218>
			break;
 80013d6:	bf00      	nop
	}
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000040 	.word	0x20000040
 80013e0:	20000050 	.word	0x20000050
 80013e4:	20000128 	.word	0x20000128
 80013e8:	2000005c 	.word	0x2000005c
 80013ec:	66666667 	.word	0x66666667
 80013f0:	20000140 	.word	0x20000140
 80013f4:	200000e0 	.word	0x200000e0
 80013f8:	200000d0 	.word	0x200000d0
 80013fc:	20000054 	.word	0x20000054
 8001400:	20000060 	.word	0x20000060
 8001404:	20000058 	.word	0x20000058
 8001408:	20000064 	.word	0x20000064

0800140c <fsm_traffic_blink_vertical_run>:

void fsm_traffic_blink_vertical_run(){
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	switch(status_traffic_blink_vertical){
 8001410:	4b89      	ldr	r3, [pc, #548]	; (8001638 <fsm_traffic_blink_vertical_run+0x22c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	3b17      	subs	r3, #23
 8001416:	2b03      	cmp	r3, #3
 8001418:	f200 8105 	bhi.w	8001626 <fsm_traffic_blink_vertical_run+0x21a>
 800141c:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <fsm_traffic_blink_vertical_run+0x18>)
 800141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001422:	bf00      	nop
 8001424:	08001435 	.word	0x08001435
 8001428:	08001595 	.word	0x08001595
 800142c:	0800145f 	.word	0x0800145f
 8001430:	08001503 	.word	0x08001503
		case init_vertical:
			status_traffic_blink_vertical = green_vertical;
 8001434:	4b80      	ldr	r3, [pc, #512]	; (8001638 <fsm_traffic_blink_vertical_run+0x22c>)
 8001436:	2219      	movs	r2, #25
 8001438:	601a      	str	r2, [r3, #0]
			traffic_buffer_vertical[0] = time_green_vertical*1000;
 800143a:	4b80      	ldr	r3, [pc, #512]	; (800163c <fsm_traffic_blink_vertical_run+0x230>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	4a7e      	ldr	r2, [pc, #504]	; (8001640 <fsm_traffic_blink_vertical_run+0x234>)
 8001448:	6013      	str	r3, [r2, #0]
			setTimer2(traffic_buffer_vertical[0]);
 800144a:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <fsm_traffic_blink_vertical_run+0x234>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fb40 	bl	8001ad4 <setTimer2>
			setTimer5(1000);// count down as a clock
 8001454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001458:	f000 fb8a 	bl	8001b70 <setTimer5>
			break;
 800145c:	e0ea      	b.n	8001634 <fsm_traffic_blink_vertical_run+0x228>
		case green_vertical:
			setGreen_vertical();
 800145e:	f000 fded 	bl	800203c <setGreen_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_green_vertical_temp/10;
 8001462:	4b78      	ldr	r3, [pc, #480]	; (8001644 <fsm_traffic_blink_vertical_run+0x238>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a78      	ldr	r2, [pc, #480]	; (8001648 <fsm_traffic_blink_vertical_run+0x23c>)
 8001468:	fb82 1203 	smull	r1, r2, r2, r3
 800146c:	1092      	asrs	r2, r2, #2
 800146e:	17db      	asrs	r3, r3, #31
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	4a76      	ldr	r2, [pc, #472]	; (800164c <fsm_traffic_blink_vertical_run+0x240>)
 8001474:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_green_vertical_temp%10;
 8001476:	4b73      	ldr	r3, [pc, #460]	; (8001644 <fsm_traffic_blink_vertical_run+0x238>)
 8001478:	6819      	ldr	r1, [r3, #0]
 800147a:	4b73      	ldr	r3, [pc, #460]	; (8001648 <fsm_traffic_blink_vertical_run+0x23c>)
 800147c:	fb83 2301 	smull	r2, r3, r3, r1
 8001480:	109a      	asrs	r2, r3, #2
 8001482:	17cb      	asrs	r3, r1, #31
 8001484:	1ad2      	subs	r2, r2, r3
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	1aca      	subs	r2, r1, r3
 8001490:	4b6e      	ldr	r3, [pc, #440]	; (800164c <fsm_traffic_blink_vertical_run+0x240>)
 8001492:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8001494:	4b6e      	ldr	r3, [pc, #440]	; (8001650 <fsm_traffic_blink_vertical_run+0x244>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d118      	bne.n	80014ce <fsm_traffic_blink_vertical_run+0xc2>
				time_green_vertical_temp--;
 800149c:	4b69      	ldr	r3, [pc, #420]	; (8001644 <fsm_traffic_blink_vertical_run+0x238>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	4a68      	ldr	r2, [pc, #416]	; (8001644 <fsm_traffic_blink_vertical_run+0x238>)
 80014a4:	6013      	str	r3, [r2, #0]
				if(time_green_vertical_temp != 0) setTimer5(1000);
 80014a6:	4b67      	ldr	r3, [pc, #412]	; (8001644 <fsm_traffic_blink_vertical_run+0x238>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <fsm_traffic_blink_vertical_run+0xaa>
 80014ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b2:	f000 fb5d 	bl	8001b70 <setTimer5>
				if(time_green_vertical_temp == 0){
 80014b6:	4b63      	ldr	r3, [pc, #396]	; (8001644 <fsm_traffic_blink_vertical_run+0x238>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d103      	bne.n	80014c6 <fsm_traffic_blink_vertical_run+0xba>
					time_green_vertical_temp = time_green_vertical;
 80014be:	4b5f      	ldr	r3, [pc, #380]	; (800163c <fsm_traffic_blink_vertical_run+0x230>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a60      	ldr	r2, [pc, #384]	; (8001644 <fsm_traffic_blink_vertical_run+0x238>)
 80014c4:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 80014c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ca:	f000 fb51 	bl	8001b70 <setTimer5>
			}

			if(timer2_flag == 1){
 80014ce:	4b61      	ldr	r3, [pc, #388]	; (8001654 <fsm_traffic_blink_vertical_run+0x248>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	f040 80a9 	bne.w	800162a <fsm_traffic_blink_vertical_run+0x21e>
				status_traffic_blink_vertical = yellow_vertical;
 80014d8:	4b57      	ldr	r3, [pc, #348]	; (8001638 <fsm_traffic_blink_vertical_run+0x22c>)
 80014da:	221a      	movs	r2, #26
 80014dc:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[1] = time_yellow_vertical*1000;
 80014de:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <fsm_traffic_blink_vertical_run+0x24c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4a55      	ldr	r2, [pc, #340]	; (8001640 <fsm_traffic_blink_vertical_run+0x234>)
 80014ec:	6053      	str	r3, [r2, #4]
				setTimer2(traffic_buffer_vertical[1]);
 80014ee:	4b54      	ldr	r3, [pc, #336]	; (8001640 <fsm_traffic_blink_vertical_run+0x234>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 faee 	bl	8001ad4 <setTimer2>
				setTimer5(1000);
 80014f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014fc:	f000 fb38 	bl	8001b70 <setTimer5>
			}
			break;
 8001500:	e093      	b.n	800162a <fsm_traffic_blink_vertical_run+0x21e>
		case yellow_vertical:
			setYellow_vertical();
 8001502:	f000 fdb3 	bl	800206c <setYellow_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_yellow_vertical_temp/10;
 8001506:	4b55      	ldr	r3, [pc, #340]	; (800165c <fsm_traffic_blink_vertical_run+0x250>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a4f      	ldr	r2, [pc, #316]	; (8001648 <fsm_traffic_blink_vertical_run+0x23c>)
 800150c:	fb82 1203 	smull	r1, r2, r2, r3
 8001510:	1092      	asrs	r2, r2, #2
 8001512:	17db      	asrs	r3, r3, #31
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	4a4d      	ldr	r2, [pc, #308]	; (800164c <fsm_traffic_blink_vertical_run+0x240>)
 8001518:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_yellow_vertical_temp%10;
 800151a:	4b50      	ldr	r3, [pc, #320]	; (800165c <fsm_traffic_blink_vertical_run+0x250>)
 800151c:	6819      	ldr	r1, [r3, #0]
 800151e:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <fsm_traffic_blink_vertical_run+0x23c>)
 8001520:	fb83 2301 	smull	r2, r3, r3, r1
 8001524:	109a      	asrs	r2, r3, #2
 8001526:	17cb      	asrs	r3, r1, #31
 8001528:	1ad2      	subs	r2, r2, r3
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	1aca      	subs	r2, r1, r3
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <fsm_traffic_blink_vertical_run+0x240>)
 8001536:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 8001538:	4b45      	ldr	r3, [pc, #276]	; (8001650 <fsm_traffic_blink_vertical_run+0x244>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d110      	bne.n	8001562 <fsm_traffic_blink_vertical_run+0x156>
				time_yellow_vertical_temp--;
 8001540:	4b46      	ldr	r3, [pc, #280]	; (800165c <fsm_traffic_blink_vertical_run+0x250>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3b01      	subs	r3, #1
 8001546:	4a45      	ldr	r2, [pc, #276]	; (800165c <fsm_traffic_blink_vertical_run+0x250>)
 8001548:	6013      	str	r3, [r2, #0]
				if(time_yellow_vertical_temp == 0){
 800154a:	4b44      	ldr	r3, [pc, #272]	; (800165c <fsm_traffic_blink_vertical_run+0x250>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d103      	bne.n	800155a <fsm_traffic_blink_vertical_run+0x14e>
					time_yellow_vertical_temp = time_yellow_vertical;
 8001552:	4b41      	ldr	r3, [pc, #260]	; (8001658 <fsm_traffic_blink_vertical_run+0x24c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a41      	ldr	r2, [pc, #260]	; (800165c <fsm_traffic_blink_vertical_run+0x250>)
 8001558:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 800155a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800155e:	f000 fb07 	bl	8001b70 <setTimer5>
			}

			if(timer2_flag == 1){
 8001562:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <fsm_traffic_blink_vertical_run+0x248>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d161      	bne.n	800162e <fsm_traffic_blink_vertical_run+0x222>
				status_traffic_blink_vertical = red_vertical;
 800156a:	4b33      	ldr	r3, [pc, #204]	; (8001638 <fsm_traffic_blink_vertical_run+0x22c>)
 800156c:	2218      	movs	r2, #24
 800156e:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[2] = time_red_vertical*1000;
 8001570:	4b3b      	ldr	r3, [pc, #236]	; (8001660 <fsm_traffic_blink_vertical_run+0x254>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001578:	fb02 f303 	mul.w	r3, r2, r3
 800157c:	4a30      	ldr	r2, [pc, #192]	; (8001640 <fsm_traffic_blink_vertical_run+0x234>)
 800157e:	6093      	str	r3, [r2, #8]
				setTimer2(traffic_buffer_vertical[2]);
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <fsm_traffic_blink_vertical_run+0x234>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 faa5 	bl	8001ad4 <setTimer2>
				setTimer5(1000);
 800158a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800158e:	f000 faef 	bl	8001b70 <setTimer5>
			}
			break;
 8001592:	e04c      	b.n	800162e <fsm_traffic_blink_vertical_run+0x222>
		case red_vertical:
			setRed_vertical();
 8001594:	f000 fd3a 	bl	800200c <setRed_vertical>
			//update _7SEG_buffer_vertical
			_7SEG_buffer_vertical[0] = time_red_vertical_temp/10;
 8001598:	4b32      	ldr	r3, [pc, #200]	; (8001664 <fsm_traffic_blink_vertical_run+0x258>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2a      	ldr	r2, [pc, #168]	; (8001648 <fsm_traffic_blink_vertical_run+0x23c>)
 800159e:	fb82 1203 	smull	r1, r2, r2, r3
 80015a2:	1092      	asrs	r2, r2, #2
 80015a4:	17db      	asrs	r3, r3, #31
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	4a28      	ldr	r2, [pc, #160]	; (800164c <fsm_traffic_blink_vertical_run+0x240>)
 80015aa:	6013      	str	r3, [r2, #0]
			_7SEG_buffer_vertical[1] = time_red_vertical_temp%10;
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <fsm_traffic_blink_vertical_run+0x258>)
 80015ae:	6819      	ldr	r1, [r3, #0]
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <fsm_traffic_blink_vertical_run+0x23c>)
 80015b2:	fb83 2301 	smull	r2, r3, r3, r1
 80015b6:	109a      	asrs	r2, r3, #2
 80015b8:	17cb      	asrs	r3, r1, #31
 80015ba:	1ad2      	subs	r2, r2, r3
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	1aca      	subs	r2, r1, r3
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <fsm_traffic_blink_vertical_run+0x240>)
 80015c8:	605a      	str	r2, [r3, #4]

			if(timer5_flag == 1){
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <fsm_traffic_blink_vertical_run+0x244>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d110      	bne.n	80015f4 <fsm_traffic_blink_vertical_run+0x1e8>
				time_red_vertical_temp--;
 80015d2:	4b24      	ldr	r3, [pc, #144]	; (8001664 <fsm_traffic_blink_vertical_run+0x258>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	4a22      	ldr	r2, [pc, #136]	; (8001664 <fsm_traffic_blink_vertical_run+0x258>)
 80015da:	6013      	str	r3, [r2, #0]
				if(time_red_vertical_temp == 0){
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <fsm_traffic_blink_vertical_run+0x258>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d103      	bne.n	80015ec <fsm_traffic_blink_vertical_run+0x1e0>
					time_red_vertical_temp = time_red_vertical;
 80015e4:	4b1e      	ldr	r3, [pc, #120]	; (8001660 <fsm_traffic_blink_vertical_run+0x254>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <fsm_traffic_blink_vertical_run+0x258>)
 80015ea:	6013      	str	r3, [r2, #0]
				}
				setTimer5(1000);
 80015ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015f0:	f000 fabe 	bl	8001b70 <setTimer5>
			}

			if(timer2_flag == 1){
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <fsm_traffic_blink_vertical_run+0x248>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d11a      	bne.n	8001632 <fsm_traffic_blink_vertical_run+0x226>
				status_traffic_blink_vertical = green_vertical;
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <fsm_traffic_blink_vertical_run+0x22c>)
 80015fe:	2219      	movs	r2, #25
 8001600:	601a      	str	r2, [r3, #0]
				traffic_buffer_vertical[0] = time_green_vertical*1000;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <fsm_traffic_blink_vertical_run+0x230>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800160a:	fb02 f303 	mul.w	r3, r2, r3
 800160e:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <fsm_traffic_blink_vertical_run+0x234>)
 8001610:	6013      	str	r3, [r2, #0]
				setTimer2(traffic_buffer_vertical[0]);
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <fsm_traffic_blink_vertical_run+0x234>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fa5c 	bl	8001ad4 <setTimer2>
				setTimer5(1000);
 800161c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001620:	f000 faa6 	bl	8001b70 <setTimer5>
			}
			break;
 8001624:	e005      	b.n	8001632 <fsm_traffic_blink_vertical_run+0x226>
		default:
			break;
 8001626:	bf00      	nop
 8001628:	e004      	b.n	8001634 <fsm_traffic_blink_vertical_run+0x228>
			break;
 800162a:	bf00      	nop
 800162c:	e002      	b.n	8001634 <fsm_traffic_blink_vertical_run+0x228>
			break;
 800162e:	bf00      	nop
 8001630:	e000      	b.n	8001634 <fsm_traffic_blink_vertical_run+0x228>
			break;
 8001632:	bf00      	nop
	}
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000044 	.word	0x20000044
 800163c:	20000068 	.word	0x20000068
 8001640:	20000134 	.word	0x20000134
 8001644:	20000074 	.word	0x20000074
 8001648:	66666667 	.word	0x66666667
 800164c:	20000148 	.word	0x20000148
 8001650:	200000f0 	.word	0x200000f0
 8001654:	200000d8 	.word	0x200000d8
 8001658:	2000006c 	.word	0x2000006c
 800165c:	20000078 	.word	0x20000078
 8001660:	20000070 	.word	0x20000070
 8001664:	2000007c 	.word	0x2000007c

08001668 <fsm_traffic_horizontal_run>:
#include "traffic.h"

int status_traffic_horizontal = display_traffic_horizontal;


void fsm_traffic_horizontal_run(){
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	switch(status_traffic_horizontal){
 800166c:	4b29      	ldr	r3, [pc, #164]	; (8001714 <fsm_traffic_horizontal_run+0xac>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3303      	adds	r3, #3
 8001672:	2b0b      	cmp	r3, #11
 8001674:	d844      	bhi.n	8001700 <fsm_traffic_horizontal_run+0x98>
 8001676:	a201      	add	r2, pc, #4	; (adr r2, 800167c <fsm_traffic_horizontal_run+0x14>)
 8001678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167c:	08001701 	.word	0x08001701
 8001680:	08001701 	.word	0x08001701
 8001684:	08001701 	.word	0x08001701
 8001688:	08001701 	.word	0x08001701
 800168c:	08001701 	.word	0x08001701
 8001690:	08001701 	.word	0x08001701
 8001694:	08001701 	.word	0x08001701
 8001698:	08001701 	.word	0x08001701
 800169c:	080016ad 	.word	0x080016ad
 80016a0:	080016b3 	.word	0x080016b3
 80016a4:	080016e7 	.word	0x080016e7
 80016a8:	080016cd 	.word	0x080016cd
		case display_traffic_horizontal:
			fsm_traffic_blink_horizontal_run();
 80016ac:	f7ff fd88 	bl	80011c0 <fsm_traffic_blink_horizontal_run>
			break;
 80016b0:	e02d      	b.n	800170e <fsm_traffic_horizontal_run+0xa6>
		case modifying_led_red_horizontal:
			// turn off led green and yellow
			offGreenYellow_horizontal();
 80016b2:	f000 fd3f 	bl	8002134 <offGreenYellow_horizontal>
			if(timer8_flag == 1){
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <fsm_traffic_horizontal_run+0xb0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d122      	bne.n	8001704 <fsm_traffic_horizontal_run+0x9c>
				//toggle led red with frequency 2Hz
				toggleRed_horizontal();
 80016be:	f000 fcf7 	bl	80020b0 <toggleRed_horizontal>
				setTimer8(500);
 80016c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016c6:	f000 faa1 	bl	8001c0c <setTimer8>
			}
			break;
 80016ca:	e01b      	b.n	8001704 <fsm_traffic_horizontal_run+0x9c>
		case modifying_led_yellow_horizontal:
			offGreenRed_horizontal();
 80016cc:	f000 fd42 	bl	8002154 <offGreenRed_horizontal>
			if(timer8_flag == 1){
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <fsm_traffic_horizontal_run+0xb0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d117      	bne.n	8001708 <fsm_traffic_horizontal_run+0xa0>
				//toggle led yellow with frequency 2Hz
				toggleYellow_horizontal();
 80016d8:	f000 fcfe 	bl	80020d8 <toggleYellow_horizontal>
				setTimer8(500);
 80016dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016e0:	f000 fa94 	bl	8001c0c <setTimer8>
			}
			break;
 80016e4:	e010      	b.n	8001708 <fsm_traffic_horizontal_run+0xa0>
		case modifying_led_green_horizontal:
			offRedYellow_horizontal();
 80016e6:	f000 fd45 	bl	8002174 <offRedYellow_horizontal>
			if(timer8_flag == 1){
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <fsm_traffic_horizontal_run+0xb0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d10c      	bne.n	800170c <fsm_traffic_horizontal_run+0xa4>
				//toggle led green with frequency 2Hz
				toggleGreen_horizontal();
 80016f2:	f000 fce7 	bl	80020c4 <toggleGreen_horizontal>
				setTimer8(500);
 80016f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016fa:	f000 fa87 	bl	8001c0c <setTimer8>
			}
			break;
 80016fe:	e005      	b.n	800170c <fsm_traffic_horizontal_run+0xa4>
		case mannual_horizontal:
			break;
		default:
			break;
 8001700:	bf00      	nop
 8001702:	e004      	b.n	800170e <fsm_traffic_horizontal_run+0xa6>
			break;
 8001704:	bf00      	nop
 8001706:	e002      	b.n	800170e <fsm_traffic_horizontal_run+0xa6>
			break;
 8001708:	bf00      	nop
 800170a:	e000      	b.n	800170e <fsm_traffic_horizontal_run+0xa6>
			break;
 800170c:	bf00      	nop
	}
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000048 	.word	0x20000048
 8001718:	20000108 	.word	0x20000108

0800171c <fsm_traffic_vertical_run>:
#include "traffic.h"
#include "fsm_traffic_blink.h"

int status_traffic_vertical = display_traffic_vertical;

void fsm_traffic_vertical_run(){
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	switch(status_traffic_vertical){
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <fsm_traffic_vertical_run+0x110>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3304      	adds	r3, #4
 8001726:	2b24      	cmp	r3, #36	; 0x24
 8001728:	d876      	bhi.n	8001818 <fsm_traffic_vertical_run+0xfc>
 800172a:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <fsm_traffic_vertical_run+0x14>)
 800172c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001730:	08001819 	.word	0x08001819
 8001734:	08001819 	.word	0x08001819
 8001738:	08001819 	.word	0x08001819
 800173c:	08001819 	.word	0x08001819
 8001740:	08001819 	.word	0x08001819
 8001744:	08001819 	.word	0x08001819
 8001748:	08001819 	.word	0x08001819
 800174c:	08001819 	.word	0x08001819
 8001750:	08001819 	.word	0x08001819
 8001754:	08001819 	.word	0x08001819
 8001758:	08001819 	.word	0x08001819
 800175c:	08001819 	.word	0x08001819
 8001760:	08001819 	.word	0x08001819
 8001764:	080017c5 	.word	0x080017c5
 8001768:	08001819 	.word	0x08001819
 800176c:	08001819 	.word	0x08001819
 8001770:	08001819 	.word	0x08001819
 8001774:	08001819 	.word	0x08001819
 8001778:	08001819 	.word	0x08001819
 800177c:	08001819 	.word	0x08001819
 8001780:	08001819 	.word	0x08001819
 8001784:	08001819 	.word	0x08001819
 8001788:	08001819 	.word	0x08001819
 800178c:	08001819 	.word	0x08001819
 8001790:	08001819 	.word	0x08001819
 8001794:	08001819 	.word	0x08001819
 8001798:	08001819 	.word	0x08001819
 800179c:	08001819 	.word	0x08001819
 80017a0:	08001819 	.word	0x08001819
 80017a4:	08001819 	.word	0x08001819
 80017a8:	08001819 	.word	0x08001819
 80017ac:	08001819 	.word	0x08001819
 80017b0:	08001819 	.word	0x08001819
 80017b4:	08001819 	.word	0x08001819
 80017b8:	080017cb 	.word	0x080017cb
 80017bc:	080017ff 	.word	0x080017ff
 80017c0:	080017e5 	.word	0x080017e5
		case display_traffic_vertical:
//			status_traffic_blink_vertical = init_vertical;
			fsm_traffic_blink_vertical_run();
 80017c4:	f7ff fe22 	bl	800140c <fsm_traffic_blink_vertical_run>
			break;
 80017c8:	e02d      	b.n	8001826 <fsm_traffic_vertical_run+0x10a>
		case modifying_led_red_vertical:
			offGreenYellow_vertical();
 80017ca:	f000 fce3 	bl	8002194 <offGreenYellow_vertical>
			if(timer7_flag == 1){
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <fsm_traffic_vertical_run+0x114>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d122      	bne.n	800181c <fsm_traffic_vertical_run+0x100>
				toggleRed_vertical();
 80017d6:	f000 fc89 	bl	80020ec <toggleRed_vertical>
				setTimer7(500);
 80017da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017de:	f000 f9fb 	bl	8001bd8 <setTimer7>
			}
			break;
 80017e2:	e01b      	b.n	800181c <fsm_traffic_vertical_run+0x100>
		case modifying_led_yellow_vertical:
			offGreenRed_vertical();
 80017e4:	f000 fce8 	bl	80021b8 <offGreenRed_vertical>
			if(timer7_flag == 1){
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <fsm_traffic_vertical_run+0x114>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d117      	bne.n	8001820 <fsm_traffic_vertical_run+0x104>
				toggleYellow_vertical();
 80017f0:	f000 fc94 	bl	800211c <toggleYellow_vertical>
				setTimer7(500);
 80017f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017f8:	f000 f9ee 	bl	8001bd8 <setTimer7>
			}
			break;
 80017fc:	e010      	b.n	8001820 <fsm_traffic_vertical_run+0x104>
		case modifying_led_green_vertical:
			// turn off red and yellow led
			offRedYellow_vertical();
 80017fe:	f000 fced 	bl	80021dc <offRedYellow_vertical>
			if(timer7_flag == 1){
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <fsm_traffic_vertical_run+0x114>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d10c      	bne.n	8001824 <fsm_traffic_vertical_run+0x108>
				//toggle green led with frequency 2Hz
				toggleGreen_vertical();
 800180a:	f000 fc7b 	bl	8002104 <toggleGreen_vertical>
				setTimer7(500);
 800180e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001812:	f000 f9e1 	bl	8001bd8 <setTimer7>
			}
			break;
 8001816:	e005      	b.n	8001824 <fsm_traffic_vertical_run+0x108>
		case mannual_vertical:
			break;
		default:
			break;
 8001818:	bf00      	nop
 800181a:	e004      	b.n	8001826 <fsm_traffic_vertical_run+0x10a>
			break;
 800181c:	bf00      	nop
 800181e:	e002      	b.n	8001826 <fsm_traffic_vertical_run+0x10a>
			break;
 8001820:	bf00      	nop
 8001822:	e000      	b.n	8001826 <fsm_traffic_vertical_run+0x10a>
			break;
 8001824:	bf00      	nop
	}
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000004c 	.word	0x2000004c
 8001830:	20000100 	.word	0x20000100

08001834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001838:	f000 fd08 	bl	800224c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800183c:	f000 f832 	bl	80018a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001840:	f000 f8b8 	bl	80019b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001844:	f000 f86a 	bl	800191c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001848:	4814      	ldr	r0, [pc, #80]	; (800189c <main+0x68>)
 800184a:	f001 fc69 	bl	8003120 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer4(10);
 800184e:	200a      	movs	r0, #10
 8001850:	f000 f974 	bl	8001b3c <setTimer4>
  setTimer6(10);
 8001854:	200a      	movs	r0, #10
 8001856:	f000 f9a5 	bl	8001ba4 <setTimer6>
  setTimer7(500);// toggle led-red/green/yellow vertical road 2Hz while modifying time of it
 800185a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800185e:	f000 f9bb 	bl	8001bd8 <setTimer7>
  setTimer8(500);// toggle led-red/green/yellow horizontal road 2Hz while modifying time of it
 8001862:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001866:	f000 f9d1 	bl	8001c0c <setTimer8>
  setTimer10(500);// timer blink led-red for debugging
 800186a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800186e:	f000 fa01 	bl	8001c74 <setTimer10>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //blink led-red for debugging
	  if(timer10_flag == 1){
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <main+0x6c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d105      	bne.n	8001886 <main+0x52>
		  toggleLedRed();
 800187a:	f000 fc0f 	bl	800209c <toggleLedRed>
		  setTimer10(500);
 800187e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001882:	f000 f9f7 	bl	8001c74 <setTimer10>
	  }

	  fsm_system_run();
 8001886:	f7ff fb31 	bl	8000eec <fsm_system_run>
	  fsm_7SEG_horizontal_run();
 800188a:	f7ff f9af 	bl	8000bec <fsm_7SEG_horizontal_run>
	  fsm_7SEG_vertical_run();
 800188e:	f7ff fa5d 	bl	8000d4c <fsm_7SEG_vertical_run>
	  fsm_traffic_vertical_run();
 8001892:	f7ff ff43 	bl	800171c <fsm_traffic_vertical_run>
	  fsm_traffic_horizontal_run();
 8001896:	f7ff fee7 	bl	8001668 <fsm_traffic_horizontal_run>
	  if(timer10_flag == 1){
 800189a:	e7ea      	b.n	8001872 <main+0x3e>
 800189c:	20000150 	.word	0x20000150
 80018a0:	20000118 	.word	0x20000118

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b090      	sub	sp, #64	; 0x40
 80018a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	f107 0318 	add.w	r3, r7, #24
 80018ae:	2228      	movs	r2, #40	; 0x28
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f001 ffec 	bl	8003890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ca:	2301      	movs	r3, #1
 80018cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ce:	2310      	movs	r3, #16
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d6:	f107 0318 	add.w	r3, r7, #24
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 ffe8 	bl	80028b0 <HAL_RCC_OscConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80018e6:	f000 f8d5 	bl	8001a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ea:	230f      	movs	r3, #15
 80018ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f001 fa54 	bl	8002db0 <HAL_RCC_ClockConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800190e:	f000 f8c1 	bl	8001a94 <Error_Handler>
  }
}
 8001912:	bf00      	nop
 8001914:	3740      	adds	r7, #64	; 0x40
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001922:	f107 0308 	add.w	r3, r7, #8
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	463b      	mov	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_TIM2_Init+0x94>)
 800193a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001942:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_TIM2_Init+0x94>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001950:	2209      	movs	r2, #9
 8001952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <MX_TIM2_Init+0x94>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001960:	4813      	ldr	r0, [pc, #76]	; (80019b0 <MX_TIM2_Init+0x94>)
 8001962:	f001 fb8d 	bl	8003080 <HAL_TIM_Base_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800196c:	f000 f892 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001974:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <MX_TIM2_Init+0x94>)
 800197e:	f001 fd23 	bl	80033c8 <HAL_TIM_ConfigClockSource>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001988:	f000 f884 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_TIM2_Init+0x94>)
 800199a:	f001 feeb 	bl	8003774 <HAL_TIMEx_MasterConfigSynchronization>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019a4:	f000 f876 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000150 	.word	0x20000150

080019b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <MX_GPIO_Init+0xbc>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <MX_GPIO_Init+0xbc>)
 80019ce:	f043 0304 	orr.w	r3, r3, #4
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <MX_GPIO_Init+0xbc>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <MX_GPIO_Init+0xbc>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <MX_GPIO_Init+0xbc>)
 80019e6:	f043 0308 	orr.w	r3, r3, #8
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <MX_GPIO_Init+0xbc>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|a2_Pin|REDA_Pin|GREENA_Pin
 80019f8:	2200      	movs	r2, #0
 80019fa:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 80019fe:	481d      	ldr	r0, [pc, #116]	; (8001a74 <MX_GPIO_Init+0xc0>)
 8001a00:	f000 ff25 	bl	800284e <HAL_GPIO_WritePin>
                          |YELLOWA_Pin|REDB_Pin|GREENB_Pin|YELLOWB_Pin
                          |b2_Pin|c2_Pin|d2_Pin|e2_Pin
                          |f2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a1_Pin|b1_Pin|c1_Pin|EN1_Pin
 8001a04:	2200      	movs	r2, #0
 8001a06:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 8001a0a:	481b      	ldr	r0, [pc, #108]	; (8001a78 <MX_GPIO_Init+0xc4>)
 8001a0c:	f000 ff1f 	bl	800284e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin a2_Pin REDA_Pin GREENA_Pin
                           YELLOWA_Pin REDB_Pin GREENB_Pin YELLOWB_Pin
                           b2_Pin c2_Pin d2_Pin e2_Pin
                           f2_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|a2_Pin|REDA_Pin|GREENA_Pin
 8001a10:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001a14:	60bb      	str	r3, [r7, #8]
                          |YELLOWA_Pin|REDB_Pin|GREENB_Pin|YELLOWB_Pin
                          |b2_Pin|c2_Pin|d2_Pin|e2_Pin
                          |f2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4619      	mov	r1, r3
 8001a28:	4812      	ldr	r0, [pc, #72]	; (8001a74 <MX_GPIO_Init+0xc0>)
 8001a2a:	f000 fd7f 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pins : a1_Pin b1_Pin c1_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN0_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin g2_Pin */
  GPIO_InitStruct.Pin = a1_Pin|b1_Pin|c1_Pin|EN1_Pin
 8001a2e:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8001a32:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin|EN0_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin|g2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0308 	add.w	r3, r7, #8
 8001a44:	4619      	mov	r1, r3
 8001a46:	480c      	ldr	r0, [pc, #48]	; (8001a78 <MX_GPIO_Init+0xc4>)
 8001a48:	f000 fd70 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT3_Pin BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT3_Pin|BUT1_Pin|BUT2_Pin;
 8001a4c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_GPIO_Init+0xc4>)
 8001a62:	f000 fd63 	bl	800252c <HAL_GPIO_Init>

}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40010800 	.word	0x40010800
 8001a78:	40010c00 	.word	0x40010c00

08001a7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	timerRun();
 8001a84:	f000 f910 	bl	8001ca8 <timerRun>
	getKeyInput();
 8001a88:	f7fe fb96 	bl	80001b8 <getKeyInput>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a98:	b672      	cpsid	i
}
 8001a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <Error_Handler+0x8>
	...

08001aa0 <setTimer1>:

// timer11 for limit time in mannual mode in vertical
int timer11_flag = 0;
int timer11_counter = 0;

void setTimer1(int duration){
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <setTimer1+0x28>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ab2:	4a06      	ldr	r2, [pc, #24]	; (8001acc <setTimer1+0x2c>)
 8001ab4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <setTimer1+0x30>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000080 	.word	0x20000080
 8001acc:	200000d4 	.word	0x200000d4
 8001ad0:	200000d0 	.word	0x200000d0

08001ad4 <setTimer2>:

void setTimer2(int duration){
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <setTimer2+0x28>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ae6:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <setTimer2+0x2c>)
 8001ae8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <setTimer2+0x30>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000080 	.word	0x20000080
 8001b00:	200000dc 	.word	0x200000dc
 8001b04:	200000d8 	.word	0x200000d8

08001b08 <setTimer3>:

void setTimer3(int duration){
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001b10:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <setTimer3+0x28>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b1a:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <setTimer3+0x2c>)
 8001b1c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <setTimer3+0x30>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000080 	.word	0x20000080
 8001b34:	200000e4 	.word	0x200000e4
 8001b38:	200000e0 	.word	0x200000e0

08001b3c <setTimer4>:

void setTimer4(int duration){
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <setTimer4+0x28>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b4e:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <setTimer4+0x2c>)
 8001b50:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <setTimer4+0x30>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000080 	.word	0x20000080
 8001b68:	200000ec 	.word	0x200000ec
 8001b6c:	200000e8 	.word	0x200000e8

08001b70 <setTimer5>:

void setTimer5(int duration){
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <setTimer5+0x28>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b82:	4a06      	ldr	r2, [pc, #24]	; (8001b9c <setTimer5+0x2c>)
 8001b84:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <setTimer5+0x30>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000080 	.word	0x20000080
 8001b9c:	200000f4 	.word	0x200000f4
 8001ba0:	200000f0 	.word	0x200000f0

08001ba4 <setTimer6>:

void setTimer6(int duration){
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/TICK;
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <setTimer6+0x28>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bb6:	4a06      	ldr	r2, [pc, #24]	; (8001bd0 <setTimer6+0x2c>)
 8001bb8:	6013      	str	r3, [r2, #0]
	timer6_flag = 0;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <setTimer6+0x30>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000080 	.word	0x20000080
 8001bd0:	200000fc 	.word	0x200000fc
 8001bd4:	200000f8 	.word	0x200000f8

08001bd8 <setTimer7>:

void setTimer7(int duration){
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	timer7_counter = duration/TICK;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <setTimer7+0x28>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bea:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <setTimer7+0x2c>)
 8001bec:	6013      	str	r3, [r2, #0]
	timer7_flag = 0;
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <setTimer7+0x30>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	20000080 	.word	0x20000080
 8001c04:	20000104 	.word	0x20000104
 8001c08:	20000100 	.word	0x20000100

08001c0c <setTimer8>:

void setTimer8(int duration){
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	timer8_counter = duration/TICK;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <setTimer8+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c1e:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <setTimer8+0x2c>)
 8001c20:	6013      	str	r3, [r2, #0]
	timer8_flag = 0;
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <setTimer8+0x30>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000080 	.word	0x20000080
 8001c38:	2000010c 	.word	0x2000010c
 8001c3c:	20000108 	.word	0x20000108

08001c40 <setTimer9>:

void setTimer9(int duration){
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	timer9_counter = duration/TICK;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <setTimer9+0x28>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c52:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <setTimer9+0x2c>)
 8001c54:	6013      	str	r3, [r2, #0]
	timer9_flag = 0;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <setTimer9+0x30>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000080 	.word	0x20000080
 8001c6c:	20000114 	.word	0x20000114
 8001c70:	20000110 	.word	0x20000110

08001c74 <setTimer10>:

void setTimer10(int duration){
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	timer10_counter = duration/TICK;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <setTimer10+0x28>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c86:	4a06      	ldr	r2, [pc, #24]	; (8001ca0 <setTimer10+0x2c>)
 8001c88:	6013      	str	r3, [r2, #0]
	timer10_flag = 0;
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <setTimer10+0x30>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000080 	.word	0x20000080
 8001ca0:	2000011c 	.word	0x2000011c
 8001ca4:	20000118 	.word	0x20000118

08001ca8 <timerRun>:
void setTimer11(int duration){
	timer11_counter = duration/TICK;
	timer11_flag = 0;
}

void timerRun(){
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
	if(timer1_counter > 0) timer1_counter--;
 8001cac:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <timerRun+0x16c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	dd04      	ble.n	8001cbe <timerRun+0x16>
 8001cb4:	4b57      	ldr	r3, [pc, #348]	; (8001e14 <timerRun+0x16c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	4a56      	ldr	r2, [pc, #344]	; (8001e14 <timerRun+0x16c>)
 8001cbc:	6013      	str	r3, [r2, #0]
	if(timer1_counter == 0){
 8001cbe:	4b55      	ldr	r3, [pc, #340]	; (8001e14 <timerRun+0x16c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <timerRun+0x24>
		timer1_flag = 1;
 8001cc6:	4b54      	ldr	r3, [pc, #336]	; (8001e18 <timerRun+0x170>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
	}

	if(timer2_counter > 0) timer2_counter--;
 8001ccc:	4b53      	ldr	r3, [pc, #332]	; (8001e1c <timerRun+0x174>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	dd04      	ble.n	8001cde <timerRun+0x36>
 8001cd4:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <timerRun+0x174>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	4a50      	ldr	r2, [pc, #320]	; (8001e1c <timerRun+0x174>)
 8001cdc:	6013      	str	r3, [r2, #0]
	if(timer2_counter == 0){
 8001cde:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <timerRun+0x174>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <timerRun+0x44>
		timer2_flag = 1;
 8001ce6:	4b4e      	ldr	r3, [pc, #312]	; (8001e20 <timerRun+0x178>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0) timer3_counter--;
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <timerRun+0x17c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	dd04      	ble.n	8001cfe <timerRun+0x56>
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <timerRun+0x17c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <timerRun+0x17c>)
 8001cfc:	6013      	str	r3, [r2, #0]
	if(timer3_counter == 0){
 8001cfe:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <timerRun+0x17c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <timerRun+0x64>
		timer3_flag = 1;
 8001d06:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <timerRun+0x180>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
	}

	if(timer4_counter > 0) timer4_counter--;
 8001d0c:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <timerRun+0x184>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dd04      	ble.n	8001d1e <timerRun+0x76>
 8001d14:	4b45      	ldr	r3, [pc, #276]	; (8001e2c <timerRun+0x184>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4a44      	ldr	r2, [pc, #272]	; (8001e2c <timerRun+0x184>)
 8001d1c:	6013      	str	r3, [r2, #0]
	if(timer4_counter == 0){
 8001d1e:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <timerRun+0x184>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <timerRun+0x84>
		timer4_flag = 1;
 8001d26:	4b42      	ldr	r3, [pc, #264]	; (8001e30 <timerRun+0x188>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
	}

	if(timer5_counter > 0) timer5_counter--;
 8001d2c:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <timerRun+0x18c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	dd04      	ble.n	8001d3e <timerRun+0x96>
 8001d34:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <timerRun+0x18c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	4a3e      	ldr	r2, [pc, #248]	; (8001e34 <timerRun+0x18c>)
 8001d3c:	6013      	str	r3, [r2, #0]
	if(timer5_counter == 0){
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <timerRun+0x18c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <timerRun+0xa4>
		timer5_flag = 1;
 8001d46:	4b3c      	ldr	r3, [pc, #240]	; (8001e38 <timerRun+0x190>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
	}

	if(timer6_counter > 0) timer6_counter--;
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <timerRun+0x194>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	dd04      	ble.n	8001d5e <timerRun+0xb6>
 8001d54:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <timerRun+0x194>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	4a38      	ldr	r2, [pc, #224]	; (8001e3c <timerRun+0x194>)
 8001d5c:	6013      	str	r3, [r2, #0]
	if(timer6_counter == 0){
 8001d5e:	4b37      	ldr	r3, [pc, #220]	; (8001e3c <timerRun+0x194>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d102      	bne.n	8001d6c <timerRun+0xc4>
		timer6_flag = 1;
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <timerRun+0x198>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
	}

	if(timer7_counter > 0) timer7_counter--;
 8001d6c:	4b35      	ldr	r3, [pc, #212]	; (8001e44 <timerRun+0x19c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	dd04      	ble.n	8001d7e <timerRun+0xd6>
 8001d74:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <timerRun+0x19c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <timerRun+0x19c>)
 8001d7c:	6013      	str	r3, [r2, #0]
	if(timer7_counter == 0){
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <timerRun+0x19c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <timerRun+0xe4>
		timer7_flag = 1;
 8001d86:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <timerRun+0x1a0>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
	}

	if(timer8_counter > 0) timer8_counter--;
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <timerRun+0x1a4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	dd04      	ble.n	8001d9e <timerRun+0xf6>
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <timerRun+0x1a4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	4a2c      	ldr	r2, [pc, #176]	; (8001e4c <timerRun+0x1a4>)
 8001d9c:	6013      	str	r3, [r2, #0]
	if(timer8_counter == 0){
 8001d9e:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <timerRun+0x1a4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <timerRun+0x104>
		timer8_flag = 1;
 8001da6:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <timerRun+0x1a8>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
	}

	if(timer9_counter > 0) timer9_counter--;
 8001dac:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <timerRun+0x1ac>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	dd04      	ble.n	8001dbe <timerRun+0x116>
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <timerRun+0x1ac>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3b01      	subs	r3, #1
 8001dba:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <timerRun+0x1ac>)
 8001dbc:	6013      	str	r3, [r2, #0]
	if(timer9_counter == 0){
 8001dbe:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <timerRun+0x1ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d102      	bne.n	8001dcc <timerRun+0x124>
		timer9_flag = 1;
 8001dc6:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <timerRun+0x1b0>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
	}

	if(timer10_counter > 0) timer10_counter--;
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <timerRun+0x1b4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dd04      	ble.n	8001dde <timerRun+0x136>
 8001dd4:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <timerRun+0x1b4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	4a20      	ldr	r2, [pc, #128]	; (8001e5c <timerRun+0x1b4>)
 8001ddc:	6013      	str	r3, [r2, #0]
	if(timer10_counter == 0){
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <timerRun+0x1b4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d102      	bne.n	8001dec <timerRun+0x144>
		timer10_flag = 1;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <timerRun+0x1b8>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
	}

	if(timer11_counter > 0) timer11_counter--;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <timerRun+0x1bc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	dd04      	ble.n	8001dfe <timerRun+0x156>
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <timerRun+0x1bc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <timerRun+0x1bc>)
 8001dfc:	6013      	str	r3, [r2, #0]
	if(timer11_counter == 0){
 8001dfe:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <timerRun+0x1bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d102      	bne.n	8001e0c <timerRun+0x164>
		timer11_flag = 1;
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <timerRun+0x1c0>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	200000d4 	.word	0x200000d4
 8001e18:	200000d0 	.word	0x200000d0
 8001e1c:	200000dc 	.word	0x200000dc
 8001e20:	200000d8 	.word	0x200000d8
 8001e24:	200000e4 	.word	0x200000e4
 8001e28:	200000e0 	.word	0x200000e0
 8001e2c:	200000ec 	.word	0x200000ec
 8001e30:	200000e8 	.word	0x200000e8
 8001e34:	200000f4 	.word	0x200000f4
 8001e38:	200000f0 	.word	0x200000f0
 8001e3c:	200000fc 	.word	0x200000fc
 8001e40:	200000f8 	.word	0x200000f8
 8001e44:	20000104 	.word	0x20000104
 8001e48:	20000100 	.word	0x20000100
 8001e4c:	2000010c 	.word	0x2000010c
 8001e50:	20000108 	.word	0x20000108
 8001e54:	20000114 	.word	0x20000114
 8001e58:	20000110 	.word	0x20000110
 8001e5c:	2000011c 	.word	0x2000011c
 8001e60:	20000118 	.word	0x20000118
 8001e64:	20000124 	.word	0x20000124
 8001e68:	20000120 	.word	0x20000120

08001e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e72:	4b15      	ldr	r3, [pc, #84]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6193      	str	r3, [r2, #24]
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_MspInit+0x5c>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_MspInit+0x60>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_MspInit+0x60>)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40010000 	.word	0x40010000

08001ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee0:	d113      	bne.n	8001f0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <HAL_TIM_Base_MspInit+0x44>)
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <HAL_TIM_Base_MspInit+0x44>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	61d3      	str	r3, [r2, #28]
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_TIM_Base_MspInit+0x44>)
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2100      	movs	r1, #0
 8001efe:	201c      	movs	r0, #28
 8001f00:	f000 fadd 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f04:	201c      	movs	r0, #28
 8001f06:	f000 faf6 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <NMI_Handler+0x4>

08001f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr

08001f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f5e:	f000 f9bb 	bl	80022d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <TIM2_IRQHandler+0x10>)
 8001f6e:	f001 f923 	bl	80031b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000150 	.word	0x20000150

08001f7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <setRed_horizontal>:
#define SRC_TRAFFIC_C_

#include "traffic.h"
#include "main.h"

void setRed_horizontal(){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, GPIO_PIN_SET);
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	2120      	movs	r1, #32
 8001f90:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <setRed_horizontal+0x28>)
 8001f92:	f000 fc5c 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <setRed_horizontal+0x28>)
 8001f9c:	f000 fc57 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2140      	movs	r1, #64	; 0x40
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <setRed_horizontal+0x28>)
 8001fa6:	f000 fc52 	bl	800284e <HAL_GPIO_WritePin>
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40010800 	.word	0x40010800

08001fb4 <setGreen_horizontal>:

void setGreen_horizontal(){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2120      	movs	r1, #32
 8001fbc:	4807      	ldr	r0, [pc, #28]	; (8001fdc <setGreen_horizontal+0x28>)
 8001fbe:	f000 fc46 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2180      	movs	r1, #128	; 0x80
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <setGreen_horizontal+0x28>)
 8001fc8:	f000 fc41 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2140      	movs	r1, #64	; 0x40
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <setGreen_horizontal+0x28>)
 8001fd2:	f000 fc3c 	bl	800284e <HAL_GPIO_WritePin>
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40010800 	.word	0x40010800

08001fe0 <setYellow_horizontal>:

void setYellow_horizontal(){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, GPIO_PIN_RESET);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2120      	movs	r1, #32
 8001fe8:	4807      	ldr	r0, [pc, #28]	; (8002008 <setYellow_horizontal+0x28>)
 8001fea:	f000 fc30 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2180      	movs	r1, #128	; 0x80
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <setYellow_horizontal+0x28>)
 8001ff4:	f000 fc2b 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2140      	movs	r1, #64	; 0x40
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <setYellow_horizontal+0x28>)
 8001ffe:	f000 fc26 	bl	800284e <HAL_GPIO_WritePin>
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40010800 	.word	0x40010800

0800200c <setRed_vertical>:

void setRed_vertical(){
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_SET);
 8002010:	2201      	movs	r2, #1
 8002012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002016:	4808      	ldr	r0, [pc, #32]	; (8002038 <setRed_vertical+0x2c>)
 8002018:	f000 fc19 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
 800201c:	2200      	movs	r2, #0
 800201e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <setRed_vertical+0x2c>)
 8002024:	f000 fc13 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800202e:	4802      	ldr	r0, [pc, #8]	; (8002038 <setRed_vertical+0x2c>)
 8002030:	f000 fc0d 	bl	800284e <HAL_GPIO_WritePin>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40010800 	.word	0x40010800

0800203c <setGreen_vertical>:

void setGreen_vertical(){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002046:	4808      	ldr	r0, [pc, #32]	; (8002068 <setGreen_vertical+0x2c>)
 8002048:	f000 fc01 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <setGreen_vertical+0x2c>)
 8002054:	f000 fbfb 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_SET);
 8002058:	2201      	movs	r2, #1
 800205a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800205e:	4802      	ldr	r0, [pc, #8]	; (8002068 <setGreen_vertical+0x2c>)
 8002060:	f000 fbf5 	bl	800284e <HAL_GPIO_WritePin>
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40010800 	.word	0x40010800

0800206c <setYellow_vertical>:

void setYellow_vertical(){
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002076:	4808      	ldr	r0, [pc, #32]	; (8002098 <setYellow_vertical+0x2c>)
 8002078:	f000 fbe9 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_SET);
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <setYellow_vertical+0x2c>)
 8002084:	f000 fbe3 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
 8002088:	2200      	movs	r2, #0
 800208a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800208e:	4802      	ldr	r0, [pc, #8]	; (8002098 <setYellow_vertical+0x2c>)
 8002090:	f000 fbdd 	bl	800284e <HAL_GPIO_WritePin>
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40010800 	.word	0x40010800

0800209c <toggleLedRed>:



void toggleLedRed(){
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80020a0:	2108      	movs	r1, #8
 80020a2:	4802      	ldr	r0, [pc, #8]	; (80020ac <toggleLedRed+0x10>)
 80020a4:	f000 fbeb 	bl	800287e <HAL_GPIO_TogglePin>
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40010800 	.word	0x40010800

080020b0 <toggleRed_horizontal>:

void toggleRed_horizontal(){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(REDA_GPIO_Port, REDA_Pin);
 80020b4:	2120      	movs	r1, #32
 80020b6:	4802      	ldr	r0, [pc, #8]	; (80020c0 <toggleRed_horizontal+0x10>)
 80020b8:	f000 fbe1 	bl	800287e <HAL_GPIO_TogglePin>
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40010800 	.word	0x40010800

080020c4 <toggleGreen_horizontal>:

void toggleGreen_horizontal(){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREENA_GPIO_Port, GREENA_Pin);
 80020c8:	2140      	movs	r1, #64	; 0x40
 80020ca:	4802      	ldr	r0, [pc, #8]	; (80020d4 <toggleGreen_horizontal+0x10>)
 80020cc:	f000 fbd7 	bl	800287e <HAL_GPIO_TogglePin>
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40010800 	.word	0x40010800

080020d8 <toggleYellow_horizontal>:

void toggleYellow_horizontal(){
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOWA_GPIO_Port, YELLOWA_Pin);
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	4802      	ldr	r0, [pc, #8]	; (80020e8 <toggleYellow_horizontal+0x10>)
 80020e0:	f000 fbcd 	bl	800287e <HAL_GPIO_TogglePin>
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40010800 	.word	0x40010800

080020ec <toggleRed_vertical>:

void toggleRed_vertical(){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(REDB_GPIO_Port, REDB_Pin);
 80020f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <toggleRed_vertical+0x14>)
 80020f6:	f000 fbc2 	bl	800287e <HAL_GPIO_TogglePin>
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40010800 	.word	0x40010800

08002104 <toggleGreen_vertical>:

void toggleGreen_vertical(){
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GREENB_GPIO_Port, GREENB_Pin);
 8002108:	f44f 7100 	mov.w	r1, #512	; 0x200
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <toggleGreen_vertical+0x14>)
 800210e:	f000 fbb6 	bl	800287e <HAL_GPIO_TogglePin>
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40010800 	.word	0x40010800

0800211c <toggleYellow_vertical>:

void toggleYellow_vertical(){
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(YELLOWB_GPIO_Port, YELLOWB_Pin);
 8002120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <toggleYellow_vertical+0x14>)
 8002126:	f000 fbaa 	bl	800287e <HAL_GPIO_TogglePin>
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40010800 	.word	0x40010800

08002134 <offGreenYellow_horizontal>:
void offAllLed_horizontal(){
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
}
void offGreenYellow_horizontal(){
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	2180      	movs	r1, #128	; 0x80
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <offGreenYellow_horizontal+0x1c>)
 800213e:	f000 fb86 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	4802      	ldr	r0, [pc, #8]	; (8002150 <offGreenYellow_horizontal+0x1c>)
 8002148:	f000 fb81 	bl	800284e <HAL_GPIO_WritePin>
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40010800 	.word	0x40010800

08002154 <offGreenRed_horizontal>:
void offGreenRed_horizontal(){
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	2120      	movs	r1, #32
 800215c:	4804      	ldr	r0, [pc, #16]	; (8002170 <offGreenRed_horizontal+0x1c>)
 800215e:	f000 fb76 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENA_GPIO_Port, GREENA_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	2140      	movs	r1, #64	; 0x40
 8002166:	4802      	ldr	r0, [pc, #8]	; (8002170 <offGreenRed_horizontal+0x1c>)
 8002168:	f000 fb71 	bl	800284e <HAL_GPIO_WritePin>
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40010800 	.word	0x40010800

08002174 <offRedYellow_horizontal>:
void offRedYellow_horizontal(){
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDA_GPIO_Port, REDA_Pin, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	2120      	movs	r1, #32
 800217c:	4804      	ldr	r0, [pc, #16]	; (8002190 <offRedYellow_horizontal+0x1c>)
 800217e:	f000 fb66 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWA_GPIO_Port, YELLOWA_Pin, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	4802      	ldr	r0, [pc, #8]	; (8002190 <offRedYellow_horizontal+0x1c>)
 8002188:	f000 fb61 	bl	800284e <HAL_GPIO_WritePin>
}
 800218c:	bf00      	nop
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40010800 	.word	0x40010800

08002194 <offGreenYellow_vertical>:
void offAllLed_vertical(){
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
}
void offGreenYellow_vertical(){
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <offGreenYellow_vertical+0x20>)
 80021a0:	f000 fb55 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
 80021a4:	2200      	movs	r2, #0
 80021a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021aa:	4802      	ldr	r0, [pc, #8]	; (80021b4 <offGreenYellow_vertical+0x20>)
 80021ac:	f000 fb4f 	bl	800284e <HAL_GPIO_WritePin>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40010800 	.word	0x40010800

080021b8 <offGreenRed_vertical>:
void offGreenRed_vertical(){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <offGreenRed_vertical+0x20>)
 80021c4:	f000 fb43 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREENB_GPIO_Port, GREENB_Pin, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ce:	4802      	ldr	r0, [pc, #8]	; (80021d8 <offGreenRed_vertical+0x20>)
 80021d0:	f000 fb3d 	bl	800284e <HAL_GPIO_WritePin>
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40010800 	.word	0x40010800

080021dc <offRedYellow_vertical>:
void offRedYellow_vertical(){
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REDB_GPIO_Port, REDB_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <offRedYellow_vertical+0x20>)
 80021e8:	f000 fb31 	bl	800284e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOWB_GPIO_Port, YELLOWB_Pin, GPIO_PIN_RESET);
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f2:	4802      	ldr	r0, [pc, #8]	; (80021fc <offRedYellow_vertical+0x20>)
 80021f4:	f000 fb2b 	bl	800284e <HAL_GPIO_WritePin>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40010800 	.word	0x40010800

08002200 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002200:	480c      	ldr	r0, [pc, #48]	; (8002234 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002202:	490d      	ldr	r1, [pc, #52]	; (8002238 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002204:	4a0d      	ldr	r2, [pc, #52]	; (800223c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002208:	e002      	b.n	8002210 <LoopCopyDataInit>

0800220a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800220c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220e:	3304      	adds	r3, #4

08002210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002214:	d3f9      	bcc.n	800220a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002218:	4c0a      	ldr	r4, [pc, #40]	; (8002244 <LoopFillZerobss+0x22>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800221c:	e001      	b.n	8002222 <LoopFillZerobss>

0800221e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002220:	3204      	adds	r2, #4

08002222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002224:	d3fb      	bcc.n	800221e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002226:	f7ff fea9 	bl	8001f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800222a:	f001 fb0d 	bl	8003848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800222e:	f7ff fb01 	bl	8001834 <main>
  bx lr
 8002232:	4770      	bx	lr
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002238:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800223c:	080038e0 	.word	0x080038e0
  ldr r2, =_sbss
 8002240:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002244:	2000019c 	.word	0x2000019c

08002248 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC1_2_IRQHandler>
	...

0800224c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_Init+0x28>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_Init+0x28>)
 8002256:	f043 0310 	orr.w	r3, r3, #16
 800225a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225c:	2003      	movs	r0, #3
 800225e:	f000 f923 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002262:	200f      	movs	r0, #15
 8002264:	f000 f808 	bl	8002278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002268:	f7ff fe00 	bl	8001e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40022000 	.word	0x40022000

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_InitTick+0x54>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_InitTick+0x58>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f93b 	bl	8002512 <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00e      	b.n	80022c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	d80a      	bhi.n	80022c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ac:	2200      	movs	r2, #0
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f000 f903 	bl	80024be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022b8:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_InitTick+0x5c>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e000      	b.n	80022c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000084 	.word	0x20000084
 80022d0:	2000008c 	.word	0x2000008c
 80022d4:	20000088 	.word	0x20000088

080022d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_IncTick+0x1c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_IncTick+0x20>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4413      	add	r3, r2
 80022e8:	4a03      	ldr	r2, [pc, #12]	; (80022f8 <HAL_IncTick+0x20>)
 80022ea:	6013      	str	r3, [r2, #0]
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	2000008c 	.word	0x2000008c
 80022f8:	20000198 	.word	0x20000198

080022fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b02      	ldr	r3, [pc, #8]	; (800230c <HAL_GetTick+0x10>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	20000198 	.word	0x20000198

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4906      	ldr	r1, [pc, #24]	; (80023a8 <__NVIC_EnableIRQ+0x34>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db0a      	blt.n	80023d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	490c      	ldr	r1, [pc, #48]	; (80023f8 <__NVIC_SetPriority+0x4c>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	440b      	add	r3, r1
 80023d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d4:	e00a      	b.n	80023ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4908      	ldr	r1, [pc, #32]	; (80023fc <__NVIC_SetPriority+0x50>)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3b04      	subs	r3, #4
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	440b      	add	r3, r1
 80023ea:	761a      	strb	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f1c3 0307 	rsb	r3, r3, #7
 800241a:	2b04      	cmp	r3, #4
 800241c:	bf28      	it	cs
 800241e:	2304      	movcs	r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3304      	adds	r3, #4
 8002426:	2b06      	cmp	r3, #6
 8002428:	d902      	bls.n	8002430 <NVIC_EncodePriority+0x30>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3b03      	subs	r3, #3
 800242e:	e000      	b.n	8002432 <NVIC_EncodePriority+0x32>
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	401a      	ands	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43d9      	mvns	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	4313      	orrs	r3, r2
         );
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	; 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff90 	bl	80023ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff2d 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff42 	bl	8002358 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff90 	bl	8002400 <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5f 	bl	80023ac <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff35 	bl	8002374 <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffa2 	bl	8002464 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b08b      	sub	sp, #44	; 0x2c
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253e:	e148      	b.n	80027d2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002540:	2201      	movs	r2, #1
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	429a      	cmp	r2, r3
 800255a:	f040 8137 	bne.w	80027cc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4aa3      	ldr	r2, [pc, #652]	; (80027f0 <HAL_GPIO_Init+0x2c4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d05e      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002568:	4aa1      	ldr	r2, [pc, #644]	; (80027f0 <HAL_GPIO_Init+0x2c4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d875      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800256e:	4aa1      	ldr	r2, [pc, #644]	; (80027f4 <HAL_GPIO_Init+0x2c8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d058      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002574:	4a9f      	ldr	r2, [pc, #636]	; (80027f4 <HAL_GPIO_Init+0x2c8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d86f      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800257a:	4a9f      	ldr	r2, [pc, #636]	; (80027f8 <HAL_GPIO_Init+0x2cc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d052      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002580:	4a9d      	ldr	r2, [pc, #628]	; (80027f8 <HAL_GPIO_Init+0x2cc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d869      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 8002586:	4a9d      	ldr	r2, [pc, #628]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d04c      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 800258c:	4a9b      	ldr	r2, [pc, #620]	; (80027fc <HAL_GPIO_Init+0x2d0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d863      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 8002592:	4a9b      	ldr	r2, [pc, #620]	; (8002800 <HAL_GPIO_Init+0x2d4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d046      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
 8002598:	4a99      	ldr	r2, [pc, #612]	; (8002800 <HAL_GPIO_Init+0x2d4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d85d      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 800259e:	2b12      	cmp	r3, #18
 80025a0:	d82a      	bhi.n	80025f8 <HAL_GPIO_Init+0xcc>
 80025a2:	2b12      	cmp	r3, #18
 80025a4:	d859      	bhi.n	800265a <HAL_GPIO_Init+0x12e>
 80025a6:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <HAL_GPIO_Init+0x80>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	08002627 	.word	0x08002627
 80025b0:	08002601 	.word	0x08002601
 80025b4:	08002613 	.word	0x08002613
 80025b8:	08002655 	.word	0x08002655
 80025bc:	0800265b 	.word	0x0800265b
 80025c0:	0800265b 	.word	0x0800265b
 80025c4:	0800265b 	.word	0x0800265b
 80025c8:	0800265b 	.word	0x0800265b
 80025cc:	0800265b 	.word	0x0800265b
 80025d0:	0800265b 	.word	0x0800265b
 80025d4:	0800265b 	.word	0x0800265b
 80025d8:	0800265b 	.word	0x0800265b
 80025dc:	0800265b 	.word	0x0800265b
 80025e0:	0800265b 	.word	0x0800265b
 80025e4:	0800265b 	.word	0x0800265b
 80025e8:	0800265b 	.word	0x0800265b
 80025ec:	0800265b 	.word	0x0800265b
 80025f0:	08002609 	.word	0x08002609
 80025f4:	0800261d 	.word	0x0800261d
 80025f8:	4a82      	ldr	r2, [pc, #520]	; (8002804 <HAL_GPIO_Init+0x2d8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025fe:	e02c      	b.n	800265a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	623b      	str	r3, [r7, #32]
          break;
 8002606:	e029      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	3304      	adds	r3, #4
 800260e:	623b      	str	r3, [r7, #32]
          break;
 8002610:	e024      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	3308      	adds	r3, #8
 8002618:	623b      	str	r3, [r7, #32]
          break;
 800261a:	e01f      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	330c      	adds	r3, #12
 8002622:	623b      	str	r3, [r7, #32]
          break;
 8002624:	e01a      	b.n	800265c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d102      	bne.n	8002634 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800262e:	2304      	movs	r3, #4
 8002630:	623b      	str	r3, [r7, #32]
          break;
 8002632:	e013      	b.n	800265c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800263c:	2308      	movs	r3, #8
 800263e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	611a      	str	r2, [r3, #16]
          break;
 8002646:	e009      	b.n	800265c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002648:	2308      	movs	r3, #8
 800264a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69fa      	ldr	r2, [r7, #28]
 8002650:	615a      	str	r2, [r3, #20]
          break;
 8002652:	e003      	b.n	800265c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002654:	2300      	movs	r3, #0
 8002656:	623b      	str	r3, [r7, #32]
          break;
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x130>
          break;
 800265a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d801      	bhi.n	8002666 <HAL_GPIO_Init+0x13a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	e001      	b.n	800266a <HAL_GPIO_Init+0x13e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3304      	adds	r3, #4
 800266a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2bff      	cmp	r3, #255	; 0xff
 8002670:	d802      	bhi.n	8002678 <HAL_GPIO_Init+0x14c>
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	e002      	b.n	800267e <HAL_GPIO_Init+0x152>
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	3b08      	subs	r3, #8
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	210f      	movs	r1, #15
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	401a      	ands	r2, r3
 8002690:	6a39      	ldr	r1, [r7, #32]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	431a      	orrs	r2, r3
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8090 	beq.w	80027cc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026ac:	4b56      	ldr	r3, [pc, #344]	; (8002808 <HAL_GPIO_Init+0x2dc>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	4a55      	ldr	r2, [pc, #340]	; (8002808 <HAL_GPIO_Init+0x2dc>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6193      	str	r3, [r2, #24]
 80026b8:	4b53      	ldr	r3, [pc, #332]	; (8002808 <HAL_GPIO_Init+0x2dc>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026c4:	4a51      	ldr	r2, [pc, #324]	; (800280c <HAL_GPIO_Init+0x2e0>)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	220f      	movs	r2, #15
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4013      	ands	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a49      	ldr	r2, [pc, #292]	; (8002810 <HAL_GPIO_Init+0x2e4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00d      	beq.n	800270c <HAL_GPIO_Init+0x1e0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a48      	ldr	r2, [pc, #288]	; (8002814 <HAL_GPIO_Init+0x2e8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <HAL_GPIO_Init+0x1dc>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a47      	ldr	r2, [pc, #284]	; (8002818 <HAL_GPIO_Init+0x2ec>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_GPIO_Init+0x1d8>
 8002700:	2302      	movs	r3, #2
 8002702:	e004      	b.n	800270e <HAL_GPIO_Init+0x1e2>
 8002704:	2303      	movs	r3, #3
 8002706:	e002      	b.n	800270e <HAL_GPIO_Init+0x1e2>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_GPIO_Init+0x1e2>
 800270c:	2300      	movs	r3, #0
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	f002 0203 	and.w	r2, r2, #3
 8002714:	0092      	lsls	r2, r2, #2
 8002716:	4093      	lsls	r3, r2
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800271e:	493b      	ldr	r1, [pc, #236]	; (800280c <HAL_GPIO_Init+0x2e0>)
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	3302      	adds	r3, #2
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002738:	4b38      	ldr	r3, [pc, #224]	; (800281c <HAL_GPIO_Init+0x2f0>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4937      	ldr	r1, [pc, #220]	; (800281c <HAL_GPIO_Init+0x2f0>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002746:	4b35      	ldr	r3, [pc, #212]	; (800281c <HAL_GPIO_Init+0x2f0>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	43db      	mvns	r3, r3
 800274e:	4933      	ldr	r1, [pc, #204]	; (800281c <HAL_GPIO_Init+0x2f0>)
 8002750:	4013      	ands	r3, r2
 8002752:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002760:	4b2e      	ldr	r3, [pc, #184]	; (800281c <HAL_GPIO_Init+0x2f0>)
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	492d      	ldr	r1, [pc, #180]	; (800281c <HAL_GPIO_Init+0x2f0>)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800276e:	4b2b      	ldr	r3, [pc, #172]	; (800281c <HAL_GPIO_Init+0x2f0>)
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	43db      	mvns	r3, r3
 8002776:	4929      	ldr	r1, [pc, #164]	; (800281c <HAL_GPIO_Init+0x2f0>)
 8002778:	4013      	ands	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002788:	4b24      	ldr	r3, [pc, #144]	; (800281c <HAL_GPIO_Init+0x2f0>)
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	4923      	ldr	r1, [pc, #140]	; (800281c <HAL_GPIO_Init+0x2f0>)
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	608b      	str	r3, [r1, #8]
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002796:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_GPIO_Init+0x2f0>)
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	43db      	mvns	r3, r3
 800279e:	491f      	ldr	r1, [pc, #124]	; (800281c <HAL_GPIO_Init+0x2f0>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_GPIO_Init+0x2f0>)
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	4919      	ldr	r1, [pc, #100]	; (800281c <HAL_GPIO_Init+0x2f0>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60cb      	str	r3, [r1, #12]
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_GPIO_Init+0x2f0>)
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4915      	ldr	r1, [pc, #84]	; (800281c <HAL_GPIO_Init+0x2f0>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	3301      	adds	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f47f aeaf 	bne.w	8002540 <HAL_GPIO_Init+0x14>
  }
}
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
 80027e6:	372c      	adds	r7, #44	; 0x2c
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	10320000 	.word	0x10320000
 80027f4:	10310000 	.word	0x10310000
 80027f8:	10220000 	.word	0x10220000
 80027fc:	10210000 	.word	0x10210000
 8002800:	10120000 	.word	0x10120000
 8002804:	10110000 	.word	0x10110000
 8002808:	40021000 	.word	0x40021000
 800280c:	40010000 	.word	0x40010000
 8002810:	40010800 	.word	0x40010800
 8002814:	40010c00 	.word	0x40010c00
 8002818:	40011000 	.word	0x40011000
 800281c:	40010400 	.word	0x40010400

08002820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e001      	b.n	8002842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	807b      	strh	r3, [r7, #2]
 800285a:	4613      	mov	r3, r2
 800285c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800285e:	787b      	ldrb	r3, [r7, #1]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002864:	887a      	ldrh	r2, [r7, #2]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800286a:	e003      	b.n	8002874 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	041a      	lsls	r2, r3, #16
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	611a      	str	r2, [r3, #16]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002890:	887a      	ldrh	r2, [r7, #2]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4013      	ands	r3, r2
 8002896:	041a      	lsls	r2, r3, #16
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	43d9      	mvns	r1, r3
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	400b      	ands	r3, r1
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e26c      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f000 8087 	beq.w	80029de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028d0:	4b92      	ldr	r3, [pc, #584]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 030c 	and.w	r3, r3, #12
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d00c      	beq.n	80028f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028dc:	4b8f      	ldr	r3, [pc, #572]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 030c 	and.w	r3, r3, #12
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d112      	bne.n	800290e <HAL_RCC_OscConfig+0x5e>
 80028e8:	4b8c      	ldr	r3, [pc, #560]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d10b      	bne.n	800290e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f6:	4b89      	ldr	r3, [pc, #548]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d06c      	beq.n	80029dc <HAL_RCC_OscConfig+0x12c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d168      	bne.n	80029dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e246      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x76>
 8002918:	4b80      	ldr	r3, [pc, #512]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a7f      	ldr	r2, [pc, #508]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	e02e      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x98>
 800292e:	4b7b      	ldr	r3, [pc, #492]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a7a      	ldr	r2, [pc, #488]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	4b78      	ldr	r3, [pc, #480]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a77      	ldr	r2, [pc, #476]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e01d      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0xbc>
 8002952:	4b72      	ldr	r3, [pc, #456]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a71      	ldr	r2, [pc, #452]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b6f      	ldr	r3, [pc, #444]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6e      	ldr	r2, [pc, #440]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e00b      	b.n	8002984 <HAL_RCC_OscConfig+0xd4>
 800296c:	4b6b      	ldr	r3, [pc, #428]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a6a      	ldr	r2, [pc, #424]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002976:	6013      	str	r3, [r2, #0]
 8002978:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a67      	ldr	r2, [pc, #412]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 800297e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002982:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7ff fcb6 	bl	80022fc <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002994:	f7ff fcb2 	bl	80022fc <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b64      	cmp	r3, #100	; 0x64
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e1fa      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b5d      	ldr	r3, [pc, #372]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0xe4>
 80029b2:	e014      	b.n	80029de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff fca2 	bl	80022fc <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7ff fc9e 	bl	80022fc <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1e6      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ce:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x10c>
 80029da:	e000      	b.n	80029de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d063      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ea:	4b4c      	ldr	r3, [pc, #304]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029f6:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d11c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x18c>
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d116      	bne.n	8002a3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	4b43      	ldr	r3, [pc, #268]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_RCC_OscConfig+0x176>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d001      	beq.n	8002a26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e1ba      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a26:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4939      	ldr	r1, [pc, #228]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	e03a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7ff fc57 	bl	80022fc <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a52:	f7ff fc53 	bl	80022fc <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e19b      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4927      	ldr	r1, [pc, #156]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]
 8002a84:	e015      	b.n	8002ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_RCC_OscConfig+0x270>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7ff fc36 	bl	80022fc <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a94:	f7ff fc32 	bl	80022fc <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e17a      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d03a      	beq.n	8002b34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d019      	beq.n	8002afa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac6:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7ff fc16 	bl	80022fc <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7ff fc12 	bl	80022fc <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e15a      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002af2:	2001      	movs	r0, #1
 8002af4:	f000 faa6 	bl	8003044 <RCC_Delay>
 8002af8:	e01c      	b.n	8002b34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_RCC_OscConfig+0x274>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7ff fbfc 	bl	80022fc <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b06:	e00f      	b.n	8002b28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b08:	f7ff fbf8 	bl	80022fc <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d908      	bls.n	8002b28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e140      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	42420000 	.word	0x42420000
 8002b24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b9e      	ldr	r3, [pc, #632]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e9      	bne.n	8002b08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a6 	beq.w	8002c8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b46:	4b97      	ldr	r3, [pc, #604]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10d      	bne.n	8002b6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	4b94      	ldr	r3, [pc, #592]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a93      	ldr	r2, [pc, #588]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	61d3      	str	r3, [r2, #28]
 8002b5e:	4b91      	ldr	r3, [pc, #580]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	60bb      	str	r3, [r7, #8]
 8002b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b8e      	ldr	r3, [pc, #568]	; (8002da8 <HAL_RCC_OscConfig+0x4f8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b7a:	4b8b      	ldr	r3, [pc, #556]	; (8002da8 <HAL_RCC_OscConfig+0x4f8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a8a      	ldr	r2, [pc, #552]	; (8002da8 <HAL_RCC_OscConfig+0x4f8>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b86:	f7ff fbb9 	bl	80022fc <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7ff fbb5 	bl	80022fc <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	; 0x64
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0fd      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b81      	ldr	r3, [pc, #516]	; (8002da8 <HAL_RCC_OscConfig+0x4f8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d0f0      	beq.n	8002b8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d106      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x312>
 8002bb4:	4b7b      	ldr	r3, [pc, #492]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4a7a      	ldr	r2, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6213      	str	r3, [r2, #32]
 8002bc0:	e02d      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x334>
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4a75      	ldr	r2, [pc, #468]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	6213      	str	r3, [r2, #32]
 8002bd6:	4b73      	ldr	r3, [pc, #460]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a72      	ldr	r2, [pc, #456]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
 8002be0:	6213      	str	r3, [r2, #32]
 8002be2:	e01c      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCC_OscConfig+0x356>
 8002bec:	4b6d      	ldr	r3, [pc, #436]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	4a6c      	ldr	r2, [pc, #432]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002bf2:	f043 0304 	orr.w	r3, r3, #4
 8002bf6:	6213      	str	r3, [r2, #32]
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4a69      	ldr	r2, [pc, #420]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6213      	str	r3, [r2, #32]
 8002c04:	e00b      	b.n	8002c1e <HAL_RCC_OscConfig+0x36e>
 8002c06:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4a66      	ldr	r2, [pc, #408]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	f023 0301 	bic.w	r3, r3, #1
 8002c10:	6213      	str	r3, [r2, #32]
 8002c12:	4b64      	ldr	r3, [pc, #400]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4a63      	ldr	r2, [pc, #396]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002c18:	f023 0304 	bic.w	r3, r3, #4
 8002c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d015      	beq.n	8002c52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7ff fb69 	bl	80022fc <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7ff fb65 	bl	80022fc <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0ab      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c44:	4b57      	ldr	r3, [pc, #348]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ee      	beq.n	8002c2e <HAL_RCC_OscConfig+0x37e>
 8002c50:	e014      	b.n	8002c7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c52:	f7ff fb53 	bl	80022fc <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c58:	e00a      	b.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5a:	f7ff fb4f 	bl	80022fc <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e095      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c70:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c7c:	7dfb      	ldrb	r3, [r7, #23]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d105      	bne.n	8002c8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c82:	4b48      	ldr	r3, [pc, #288]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	4a47      	ldr	r2, [pc, #284]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 8081 	beq.w	8002d9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c98:	4b42      	ldr	r3, [pc, #264]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 030c 	and.w	r3, r3, #12
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d061      	beq.n	8002d68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d146      	bne.n	8002d3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b3f      	ldr	r3, [pc, #252]	; (8002dac <HAL_RCC_OscConfig+0x4fc>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7ff fb23 	bl	80022fc <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cba:	f7ff fb1f 	bl	80022fc <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e067      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ce2:	4b30      	ldr	r3, [pc, #192]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	492d      	ldr	r1, [pc, #180]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a19      	ldr	r1, [r3, #32]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	430b      	orrs	r3, r1
 8002d06:	4927      	ldr	r1, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b27      	ldr	r3, [pc, #156]	; (8002dac <HAL_RCC_OscConfig+0x4fc>)
 8002d0e:	2201      	movs	r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7ff faf3 	bl	80022fc <HAL_GetTick>
 8002d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7ff faef 	bl	80022fc <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e037      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0f0      	beq.n	8002d1a <HAL_RCC_OscConfig+0x46a>
 8002d38:	e02f      	b.n	8002d9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <HAL_RCC_OscConfig+0x4fc>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7ff fadc 	bl	80022fc <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d48:	f7ff fad8 	bl	80022fc <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e020      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0x498>
 8002d66:	e018      	b.n	8002d9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e013      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCC_OscConfig+0x4f4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40007000 	.word	0x40007000
 8002dac:	42420060 	.word	0x42420060

08002db0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0d0      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d910      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 0207 	bic.w	r2, r3, #7
 8002dda:	4965      	ldr	r1, [pc, #404]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b8      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e0c:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e24:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a52      	ldr	r2, [pc, #328]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	494d      	ldr	r1, [pc, #308]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d040      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d115      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e07f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e073      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	4b3d      	ldr	r3, [pc, #244]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e06b      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8e:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f023 0203 	bic.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4936      	ldr	r1, [pc, #216]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea0:	f7ff fa2c 	bl	80022fc <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea8:	f7ff fa28 	bl	80022fc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e053      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 020c 	and.w	r2, r3, #12
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1eb      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b27      	ldr	r3, [pc, #156]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d210      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 0207 	bic.w	r2, r3, #7
 8002ee6:	4922      	ldr	r1, [pc, #136]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e032      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4916      	ldr	r1, [pc, #88]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	490e      	ldr	r1, [pc, #56]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f3e:	f000 f821 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490a      	ldr	r1, [pc, #40]	; (8002f78 <HAL_RCC_ClockConfig+0x1c8>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <HAL_RCC_ClockConfig+0x1cc>)
 8002f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_RCC_ClockConfig+0x1d0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff f98a 	bl	8002278 <HAL_InitTick>

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40022000 	.word	0x40022000
 8002f74:	40021000 	.word	0x40021000
 8002f78:	080038c8 	.word	0x080038c8
 8002f7c:	20000084 	.word	0x20000084
 8002f80:	20000088 	.word	0x20000088

08002f84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	b490      	push	{r4, r7}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f8c:	1d3c      	adds	r4, r7, #4
 8002f8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f94:	f240 2301 	movw	r3, #513	; 0x201
 8002f98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d002      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d003      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x46>
 8002fc2:	e02d      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fc6:	623b      	str	r3, [r7, #32]
      break;
 8002fc8:	e02d      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	0c9b      	lsrs	r3, r3, #18
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fdc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	0c5b      	lsrs	r3, r3, #17
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ffc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	4a0e      	ldr	r2, [pc, #56]	; (800303c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003002:	fb02 f203 	mul.w	r2, r2, r3
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
 800300e:	e004      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	4a0b      	ldr	r2, [pc, #44]	; (8003040 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003014:	fb02 f303 	mul.w	r3, r2, r3
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	623b      	str	r3, [r7, #32]
      break;
 800301e:	e002      	b.n	8003026 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003022:	623b      	str	r3, [r7, #32]
      break;
 8003024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003026:	6a3b      	ldr	r3, [r7, #32]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3728      	adds	r7, #40	; 0x28
 800302c:	46bd      	mov	sp, r7
 800302e:	bc90      	pop	{r4, r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	080038b8 	.word	0x080038b8
 8003038:	40021000 	.word	0x40021000
 800303c:	007a1200 	.word	0x007a1200
 8003040:	003d0900 	.word	0x003d0900

08003044 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <RCC_Delay+0x34>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <RCC_Delay+0x38>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0a5b      	lsrs	r3, r3, #9
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003060:	bf00      	nop
  }
  while (Delay --);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1e5a      	subs	r2, r3, #1
 8003066:	60fa      	str	r2, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f9      	bne.n	8003060 <RCC_Delay+0x1c>
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr
 8003078:	20000084 	.word	0x20000084
 800307c:	10624dd3 	.word	0x10624dd3

08003080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e041      	b.n	8003116 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fe ff12 	bl	8001ed0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f000 fa6a 	bl	8003598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b01      	cmp	r3, #1
 8003132:	d001      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e035      	b.n	80031a4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a16      	ldr	r2, [pc, #88]	; (80031b0 <HAL_TIM_Base_Start_IT+0x90>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d009      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x4e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003162:	d004      	beq.n	800316e <HAL_TIM_Base_Start_IT+0x4e>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <HAL_TIM_Base_Start_IT+0x94>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d111      	bne.n	8003192 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b06      	cmp	r3, #6
 800317e:	d010      	beq.n	80031a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0201 	orr.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003190:	e007      	b.n	80031a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	40000400 	.word	0x40000400

080031b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d122      	bne.n	8003214 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d11b      	bne.n	8003214 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0202 	mvn.w	r2, #2
 80031e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f9b1 	bl	8003562 <HAL_TIM_IC_CaptureCallback>
 8003200:	e005      	b.n	800320e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f9a4 	bl	8003550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f9b3 	bl	8003574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b04      	cmp	r3, #4
 8003220:	d122      	bne.n	8003268 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b04      	cmp	r3, #4
 800322e:	d11b      	bne.n	8003268 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0204 	mvn.w	r2, #4
 8003238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2202      	movs	r2, #2
 800323e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f987 	bl	8003562 <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f97a 	bl	8003550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f989 	bl	8003574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b08      	cmp	r3, #8
 8003274:	d122      	bne.n	80032bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b08      	cmp	r3, #8
 8003282:	d11b      	bne.n	80032bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0208 	mvn.w	r2, #8
 800328c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2204      	movs	r2, #4
 8003292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f95d 	bl	8003562 <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f950 	bl	8003550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f95f 	bl	8003574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d122      	bne.n	8003310 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d11b      	bne.n	8003310 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0210 	mvn.w	r2, #16
 80032e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2208      	movs	r2, #8
 80032e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f933 	bl	8003562 <HAL_TIM_IC_CaptureCallback>
 80032fc:	e005      	b.n	800330a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f926 	bl	8003550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f935 	bl	8003574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d10e      	bne.n	800333c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d107      	bne.n	800333c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0201 	mvn.w	r2, #1
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe fba0 	bl	8001a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003346:	2b80      	cmp	r3, #128	; 0x80
 8003348:	d10e      	bne.n	8003368 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003354:	2b80      	cmp	r3, #128	; 0x80
 8003356:	d107      	bne.n	8003368 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fa67 	bl	8003836 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003372:	2b40      	cmp	r3, #64	; 0x40
 8003374:	d10e      	bne.n	8003394 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d107      	bne.n	8003394 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f8f9 	bl	8003586 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b20      	cmp	r3, #32
 80033a0:	d10e      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d107      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0220 	mvn.w	r2, #32
 80033b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fa32 	bl	8003824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_TIM_ConfigClockSource+0x18>
 80033dc:	2302      	movs	r3, #2
 80033de:	e0b3      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x180>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003406:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003418:	d03e      	beq.n	8003498 <HAL_TIM_ConfigClockSource+0xd0>
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341e:	f200 8087 	bhi.w	8003530 <HAL_TIM_ConfigClockSource+0x168>
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	f000 8085 	beq.w	8003534 <HAL_TIM_ConfigClockSource+0x16c>
 800342a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342e:	d87f      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x168>
 8003430:	2b70      	cmp	r3, #112	; 0x70
 8003432:	d01a      	beq.n	800346a <HAL_TIM_ConfigClockSource+0xa2>
 8003434:	2b70      	cmp	r3, #112	; 0x70
 8003436:	d87b      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x168>
 8003438:	2b60      	cmp	r3, #96	; 0x60
 800343a:	d050      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x116>
 800343c:	2b60      	cmp	r3, #96	; 0x60
 800343e:	d877      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x168>
 8003440:	2b50      	cmp	r3, #80	; 0x50
 8003442:	d03c      	beq.n	80034be <HAL_TIM_ConfigClockSource+0xf6>
 8003444:	2b50      	cmp	r3, #80	; 0x50
 8003446:	d873      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x168>
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d058      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x136>
 800344c:	2b40      	cmp	r3, #64	; 0x40
 800344e:	d86f      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x168>
 8003450:	2b30      	cmp	r3, #48	; 0x30
 8003452:	d064      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x156>
 8003454:	2b30      	cmp	r3, #48	; 0x30
 8003456:	d86b      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x168>
 8003458:	2b20      	cmp	r3, #32
 800345a:	d060      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x156>
 800345c:	2b20      	cmp	r3, #32
 800345e:	d867      	bhi.n	8003530 <HAL_TIM_ConfigClockSource+0x168>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d05c      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x156>
 8003464:	2b10      	cmp	r3, #16
 8003466:	d05a      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003468:	e062      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6899      	ldr	r1, [r3, #8]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f000 f95c 	bl	8003736 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800348c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	609a      	str	r2, [r3, #8]
      break;
 8003496:	e04e      	b.n	8003536 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6899      	ldr	r1, [r3, #8]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f000 f945 	bl	8003736 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ba:	609a      	str	r2, [r3, #8]
      break;
 80034bc:	e03b      	b.n	8003536 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	6859      	ldr	r1, [r3, #4]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f000 f8bc 	bl	8003648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2150      	movs	r1, #80	; 0x50
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f913 	bl	8003702 <TIM_ITRx_SetConfig>
      break;
 80034dc:	e02b      	b.n	8003536 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f000 f8da 	bl	80036a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2160      	movs	r1, #96	; 0x60
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f903 	bl	8003702 <TIM_ITRx_SetConfig>
      break;
 80034fc:	e01b      	b.n	8003536 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6859      	ldr	r1, [r3, #4]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	461a      	mov	r2, r3
 800350c:	f000 f89c 	bl	8003648 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2140      	movs	r1, #64	; 0x40
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f8f3 	bl	8003702 <TIM_ITRx_SetConfig>
      break;
 800351c:	e00b      	b.n	8003536 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f000 f8ea 	bl	8003702 <TIM_ITRx_SetConfig>
        break;
 800352e:	e002      	b.n	8003536 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003530:	bf00      	nop
 8003532:	e000      	b.n	8003536 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003534:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a25      	ldr	r2, [pc, #148]	; (8003640 <TIM_Base_SetConfig+0xa8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_Base_SetConfig+0x28>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0x28>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a22      	ldr	r2, [pc, #136]	; (8003644 <TIM_Base_SetConfig+0xac>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d108      	bne.n	80035d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a1a      	ldr	r2, [pc, #104]	; (8003640 <TIM_Base_SetConfig+0xa8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d007      	beq.n	80035ea <TIM_Base_SetConfig+0x52>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d003      	beq.n	80035ea <TIM_Base_SetConfig+0x52>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a17      	ldr	r2, [pc, #92]	; (8003644 <TIM_Base_SetConfig+0xac>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d108      	bne.n	80035fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a07      	ldr	r2, [pc, #28]	; (8003640 <TIM_Base_SetConfig+0xa8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d103      	bne.n	8003630 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	615a      	str	r2, [r3, #20]
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40000400 	.word	0x40000400

08003648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f023 0201 	bic.w	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f023 030a 	bic.w	r3, r3, #10
 8003684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr

080036a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f023 0210 	bic.w	r2, r3, #16
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	031b      	lsls	r3, r3, #12
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	621a      	str	r2, [r3, #32]
}
 80036f8:	bf00      	nop
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr

08003702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	f043 0307 	orr.w	r3, r3, #7
 8003724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003736:	b480      	push	{r7}
 8003738:	b087      	sub	sp, #28
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003750:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	021a      	lsls	r2, r3, #8
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	431a      	orrs	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	4313      	orrs	r3, r2
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	609a      	str	r2, [r3, #8]
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr

08003774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e041      	b.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a14      	ldr	r2, [pc, #80]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d009      	beq.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d004      	beq.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a10      	ldr	r2, [pc, #64]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d10c      	bne.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40000400 	.word	0x40000400

08003824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <__libc_init_array>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	2600      	movs	r6, #0
 800384c:	4d0c      	ldr	r5, [pc, #48]	; (8003880 <__libc_init_array+0x38>)
 800384e:	4c0d      	ldr	r4, [pc, #52]	; (8003884 <__libc_init_array+0x3c>)
 8003850:	1b64      	subs	r4, r4, r5
 8003852:	10a4      	asrs	r4, r4, #2
 8003854:	42a6      	cmp	r6, r4
 8003856:	d109      	bne.n	800386c <__libc_init_array+0x24>
 8003858:	f000 f822 	bl	80038a0 <_init>
 800385c:	2600      	movs	r6, #0
 800385e:	4d0a      	ldr	r5, [pc, #40]	; (8003888 <__libc_init_array+0x40>)
 8003860:	4c0a      	ldr	r4, [pc, #40]	; (800388c <__libc_init_array+0x44>)
 8003862:	1b64      	subs	r4, r4, r5
 8003864:	10a4      	asrs	r4, r4, #2
 8003866:	42a6      	cmp	r6, r4
 8003868:	d105      	bne.n	8003876 <__libc_init_array+0x2e>
 800386a:	bd70      	pop	{r4, r5, r6, pc}
 800386c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003870:	4798      	blx	r3
 8003872:	3601      	adds	r6, #1
 8003874:	e7ee      	b.n	8003854 <__libc_init_array+0xc>
 8003876:	f855 3b04 	ldr.w	r3, [r5], #4
 800387a:	4798      	blx	r3
 800387c:	3601      	adds	r6, #1
 800387e:	e7f2      	b.n	8003866 <__libc_init_array+0x1e>
 8003880:	080038d8 	.word	0x080038d8
 8003884:	080038d8 	.word	0x080038d8
 8003888:	080038d8 	.word	0x080038d8
 800388c:	080038dc 	.word	0x080038dc

08003890 <memset>:
 8003890:	4603      	mov	r3, r0
 8003892:	4402      	add	r2, r0
 8003894:	4293      	cmp	r3, r2
 8003896:	d100      	bne.n	800389a <memset+0xa>
 8003898:	4770      	bx	lr
 800389a:	f803 1b01 	strb.w	r1, [r3], #1
 800389e:	e7f9      	b.n	8003894 <memset+0x4>

080038a0 <_init>:
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a2:	bf00      	nop
 80038a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a6:	bc08      	pop	{r3}
 80038a8:	469e      	mov	lr, r3
 80038aa:	4770      	bx	lr

080038ac <_fini>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	bf00      	nop
 80038b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b2:	bc08      	pop	{r3}
 80038b4:	469e      	mov	lr, r3
 80038b6:	4770      	bx	lr
